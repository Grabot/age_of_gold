
function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    to[key] = from[key];
    }
}
function mixinPropertiesHard(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!to.hasOwnProperty(key))
        to[key] = from[key];
    }
}
function mixinPropertiesEasy(from, to) {
    Object.assign(to, from);
}
var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
    return false;
    try {
    if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
    if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
        return true;
    }
    } catch (_) {
    }
    return false;
}();
function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
    if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
    }
    var clsPrototype = Object.create(sup.prototype);
    copyProperties(cls.prototype, clsPrototype);
    cls.prototype = clsPrototype;
    }
}
function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
    inherit(classes[i], sup);
}
function mixinEasy(cls, mixin) {
    mixinPropertiesEasy(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
}
function mixinHard(cls, mixin) {
    mixinPropertiesHard(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
}
function lazyOld(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
    holder[getterName] = function() {
        A.throwCyclicInit(name);
    };
    var result;
    var sentinelInProgress = initializer;
    try {
        if (holder[name] === uninitializedSentinel) {
        result = holder[name] = sentinelInProgress;
        result = holder[name] = initializer();
        } else
        result = holder[name];
    } finally {
        if (result === sentinelInProgress)
        holder[name] = null;
        holder[getterName] = function() {
        return this[name];
        };
    }
    return result;
    };
}
function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
    if (holder[name] === uninitializedSentinel)
        holder[name] = initializer();
    holder[getterName] = function() {
        return this[name];
    };
    return holder[name];
    };
}
function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
    if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel)
        A.throwLateFieldADI(name);
        holder[name] = value;
    }
    var finalValue = holder[name];
    holder[getterName] = function() {
        return finalValue;
    };
    return finalValue;
    };
}
function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
}
function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
}
function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
    convertToFastObject(arrayOfObjects[i]);
}
var functionCounter = 0;
function instanceTearOffGetter(isIntercepted, parameters) {
    var cache = null;
    return isIntercepted ? function(receiver) {
    if (cache === null)
        cache = A.closureFromTearOff(parameters);
    return new cache(receiver, this);
    } : function() {
    if (cache === null)
        cache = A.closureFromTearOff(parameters);
    return new cache(this, null);
    };
}
function staticTearOffGetter(parameters) {
    var cache = null;
    return function() {
    if (cache === null)
        cache = A.closureFromTearOff(parameters).prototype;
    return cache;
    };
}
var typesOffset = 0;
function tearOffParameters(container, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    if (typeof funType == "number")
    funType += typesOffset;
    return {co: container, iS: isStatic, iI: isIntercepted, rC: requiredParameterCount, dV: optionalParameterDefaultValues, cs: callNames, fs: funsOrNames, fT: funType, aI: applyIndex || 0, nDA: needsDirectAccess};
}
function installStaticTearOff(holder, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var parameters = tearOffParameters(holder, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, false);
    var getterFunction = staticTearOffGetter(parameters);
    holder[getterName] = getterFunction;
}
function installInstanceTearOff(prototype, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    isIntercepted = !!isIntercepted;
    var parameters = tearOffParameters(prototype, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, !!needsDirectAccess);
    var getterFunction = instanceTearOffGetter(isIntercepted, parameters);
    prototype[getterName] = getterFunction;
}
function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
    init.interceptorsByTag = newTags;
    return;
    }
    copyProperties(newTags, tags);
}
function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
    init.leafTags = newTags;
    return;
    }
    copyProperties(newTags, tags);
}
function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
}
function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
}
var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
        return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex, false);
        };
    },
    mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
        return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
    };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixinEasy, mixinHard: mixinHard, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, lazyOld: lazyOld, updateHolder: updateHolder, convertToFastObject: convertToFastObject, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
}();
function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
}
var A = {JS_CONST: function JS_CONST() {
    },
    LateError$fieldNI(fieldName) {
    return new A.LateError("Field '" + fieldName + "' has not been initialized.");
    },
    LateError$fieldAI(fieldName) {
    return new A.LateError("Field '" + fieldName + "' has already been initialized.");
    },
    SystemHash_combine(hash, value) {
    hash = hash + value & 536870911;
    hash = hash + ((hash & 524287) << 10) & 536870911;
    return hash ^ hash >>> 6;
    },
    SystemHash_finish(hash) {
    hash = hash + ((hash & 67108863) << 3) & 536870911;
    hash ^= hash >>> 11;
    return hash + ((hash & 16383) << 15) & 536870911;
    },
    checkNotNullable(value, $name, $T) {
    return value;
    },
    SubListIterable$(_iterable, _start, _endOrLength, $E) {
    A.RangeError_checkNotNegative(_start, "start");
    if (_endOrLength != null) {
        A.RangeError_checkNotNegative(_endOrLength, "end");
        if (_start > _endOrLength)
        A.throwExpression(A.RangeError$range(_start, 0, _endOrLength, "start", null));
    }
    return new A.SubListIterable(_iterable, _start, _endOrLength, $E._eval$1("SubListIterable<0>"));
    },
    MappedIterable_MappedIterable(iterable, $function, $S, $T) {
    if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new A.EfficientLengthMappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
    return new A.MappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    },
    SkipIterable_SkipIterable(iterable, count, $E) {
    var _s5_ = "count";
    if (type$.EfficientLengthIterable_dynamic._is(iterable)) {
        A.ArgumentError_checkNotNull(count, _s5_, type$.int);
        A.RangeError_checkNotNegative(count, _s5_);
        return new A.EfficientLengthSkipIterable(iterable, count, $E._eval$1("EfficientLengthSkipIterable<0>"));
    }
    A.ArgumentError_checkNotNull(count, _s5_, type$.int);
    A.RangeError_checkNotNegative(count, _s5_);
    return new A.SkipIterable(iterable, count, $E._eval$1("SkipIterable<0>"));
    },
    IterableElementError_noElement() {
    return new A.StateError("No element");
    },
    IterableElementError_tooFew() {
    return new A.StateError("Too few elements");
    },
    LateError: function LateError(t0) {
    this._message = t0;
    },
    CodeUnits: function CodeUnits(t0) {
    this._string = t0;
    },
    SentinelValue: function SentinelValue() {
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
    var _ = this;
    _.__internal$_iterable = t0;
    _.__internal$_start = t1;
    _._endOrLength = t2;
    _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
    var _ = this;
    _.__internal$_iterable = t0;
    _.__internal$_length = t1;
    _.__internal$_index = 0;
    _.__internal$_current = null;
    _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
    this.__internal$_iterable = t0;
    this._f = t1;
    this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
    this.__internal$_iterable = t0;
    this._f = t1;
    this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
    var _ = this;
    _.__internal$_current = null;
    _._iterator = t0;
    _._f = t1;
    _.$ti = t2;
    },
    SkipIterable: function SkipIterable(t0, t1, t2) {
    this.__internal$_iterable = t0;
    this._skipCount = t1;
    this.$ti = t2;
    },
    EfficientLengthSkipIterable: function EfficientLengthSkipIterable(t0, t1, t2) {
    this.__internal$_iterable = t0;
    this._skipCount = t1;
    this.$ti = t2;
    },
    SkipIterator: function SkipIterator(t0, t1, t2) {
    this._iterator = t0;
    this._skipCount = t1;
    this.$ti = t2;
    },
    EmptyIterable: function EmptyIterable(t0) {
    this.$ti = t0;
    },
    EmptyIterator: function EmptyIterator(t0) {
    this.$ti = t0;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    GeneralConstantMap__constantMapHashCode(key) {
    if (typeof key == "number")
        return B.JSNumber_methods.get$hashCode(key);
    if (type$.Type._is(key))
        return A.Primitives_objectHashCode(key);
    return A.objectHashCode(key);
    },
    GeneralConstantMap__typeTest($T) {
    return new A.GeneralConstantMap__typeTest_closure($T);
    },
    unminifyOrTag(rawClassName) {
    var preserved = init.mangledGlobalNames[rawClassName];
    if (preserved != null)
        return preserved;
    return rawClassName;
    },
    isJsIndexable(object, record) {
    var result;
    if (record != null) {
        result = record.x;
        if (result != null)
        return result;
    }
    return type$.JavaScriptIndexingBehavior_dynamic._is(object);
    },
    S(value) {
    var result;
    if (typeof value == "string")
        return value;
    if (typeof value == "number") {
        if (value !== 0)
        return "" + value;
    } else if (true === value)
        return "true";
    else if (false === value)
        return "false";
    else if (value == null)
        return "null";
    result = J.toString$0$(value);
    return result;
    },
    Primitives_objectHashCode(object) {
    var hash,
        property = $.Primitives__identityHashCodeProperty;
    if (property == null)
        property = $.Primitives__identityHashCodeProperty = Symbol("identityHashCode");
    hash = object[property];
    if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object[property] = hash;
    }
    return hash;
    },
    Primitives_objectTypeName(object) {
    return A.Primitives__objectTypeNameNewRti(object);
    },
    Primitives__objectTypeNameNewRti(object) {
    var interceptor, dispatchName, $constructor, constructorName;
    if (object instanceof A.Object)
        return A._rtiToString(A.instanceType(object), null);
    interceptor = J.getInterceptor$(object);
    if (interceptor === B.Interceptor_methods || interceptor === B.JavaScriptObject_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = B.C_JS_CONST(object);
        if (dispatchName !== "Object" && dispatchName !== "")
        return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
        constructorName = $constructor.name;
        if (typeof constructorName == "string" && constructorName !== "Object" && constructorName !== "")
            return constructorName;
        }
    }
    return A._rtiToString(A.instanceType(object), null);
    },
    Primitives_dateNow() {
    return Date.now();
    },
    Primitives_initTicker() {
    var $window, performance;
    if ($.Primitives_timerFrequency !== 0)
        return;
    $.Primitives_timerFrequency = 1000;
    if (typeof window == "undefined")
        return;
    $window = window;
    if ($window == null)
        return;
    performance = $window.performance;
    if (performance == null)
        return;
    if (typeof performance.now != "function")
        return;
    $.Primitives_timerFrequency = 1000000;
    $.Primitives_timerTicks = new A.Primitives_initTicker_closure(performance);
    },
    Primitives__fromCharCodeApply(array) {
    var result, i, i0, chunkEnd,
        end = array.length;
    if (end <= 500)
        return String.fromCharCode.apply(null, array);
    for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
    }
    return result;
    },
    Primitives_stringFromCodePoints(codePoints) {
    var t1, _i, i,
        a = A._setArrayType([], type$.JSArray_int);
    for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, A.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (!A._isInt(i))
        throw A.wrapException(A.argumentErrorValue(i));
        if (i <= 65535)
        B.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
        B.JSArray_methods.add$1(a, 55296 + (B.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
        B.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
        throw A.wrapException(A.argumentErrorValue(i));
    }
    return A.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes(charCodes) {
    var t1, _i, i;
    for (t1 = charCodes.length, _i = 0; _i < t1; ++_i) {
        i = charCodes[_i];
        if (!A._isInt(i))
        throw A.wrapException(A.argumentErrorValue(i));
        if (i < 0)
        throw A.wrapException(A.argumentErrorValue(i));
        if (i > 65535)
        return A.Primitives_stringFromCodePoints(charCodes);
    }
    return A.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_stringFromNativeUint8List(charCodes, start, end) {
    var i, result, i0, chunkEnd;
    if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
    for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
    }
    return result;
    },
    Primitives_stringFromCharCode(charCode) {
    var bits;
    if (charCode <= 65535)
        return String.fromCharCode(charCode);
    if (charCode <= 1114111) {
        bits = charCode - 65536;
        return String.fromCharCode((B.JSInt_methods._shrOtherPositive$1(bits, 10) | 55296) >>> 0, bits & 1023 | 56320);
    }
    throw A.wrapException(A.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_lazyAsJsDate(receiver) {
    if (receiver.date === void 0)
        receiver.date = new Date(receiver._value);
    return receiver.date;
    },
    Primitives_getYear(receiver) {
    var t1 = A.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
    return t1;
    },
    Primitives_getMonth(receiver) {
    var t1 = A.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
    return t1;
    },
    Primitives_getDay(receiver) {
    var t1 = A.Primitives_lazyAsJsDate(receiver).getDate() + 0;
    return t1;
    },
    Primitives_getHours(receiver) {
    var t1 = A.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    return t1;
    },
    Primitives_getMinutes(receiver) {
    var t1 = A.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    return t1;
    },
    Primitives_getSeconds(receiver) {
    var t1 = A.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    return t1;
    },
    Primitives_getMilliseconds(receiver) {
    var t1 = A.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
    return t1;
    },
    iae(argument) {
    throw A.wrapException(A.argumentErrorValue(argument));
    },
    ioore(receiver, index) {
    if (receiver == null)
        J.get$length$asx(receiver);
    throw A.wrapException(A.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError(indexable, index) {
    var $length, _s5_ = "index";
    if (!A._isInt(index))
        return new A.ArgumentError(true, index, _s5_, null);
    $length = A._asInt(J.get$length$asx(indexable));
    if (index < 0 || index >= $length)
        return A.IndexError$withLength(index, $length, indexable, _s5_);
    return new A.RangeError(null, null, true, index, _s5_, "Value not in range");
    },
    diagnoseRangeError(start, end, $length) {
    if (start < 0 || start > $length)
        return A.RangeError$range(start, 0, $length, "start", null);
    if (end != null)
        if (end < start || end > $length)
        return A.RangeError$range(end, start, $length, "end", null);
    return new A.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue(object) {
    return new A.ArgumentError(true, object, null, null);
    },
    wrapException(ex) {
    var wrapper, t1;
    if (ex == null)
        ex = new A.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    t1 = A.toStringWrapper;
    if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
    } else
        wrapper.toString = t1;
    return wrapper;
    },
    toStringWrapper() {
    return J.toString$0$(this.dartException);
    },
    throwExpression(ex) {
    throw A.wrapException(ex);
    },
    throwConcurrentModificationError(collection) {
    throw A.wrapException(A.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern(message) {
    var match, $arguments, argumentsExpr, expr, method, receiver;
    message = A.quoteStringForRegExp(message.replace(String({}), "$receiver$"));
    match = message.match(/\\\$[a-zA-Z]+\\\$/g);
    if (match == null)
        match = A._setArrayType([], type$.JSArray_String);
    $arguments = match.indexOf("\\$arguments\\$");
    argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
    expr = match.indexOf("\\$expr\\$");
    method = match.indexOf("\\$method\\$");
    receiver = match.indexOf("\\$receiver\\$");
    return new A.TypeErrorDecoder(message.replace(new RegExp("\\\\\\$arguments\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$argumentsExpr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$expr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$method\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$receiver\\\\\\$", "g"), "((?:x|[^x])*)"), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn(expression) {
    return function($expr$) {
        var $argumentsExpr$ = "$arguments$";
        try {
        $expr$.$method$($argumentsExpr$);
        } catch (e) {
        return e.message;
        }
    }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn(expression) {
    return function($expr$) {
        try {
        $expr$.$method$;
        } catch (e) {
        return e.message;
        }
    }(expression);
    },
    JsNoSuchMethodError$(_message, match) {
    var t1 = match == null,
        t2 = t1 ? null : match.method;
    return new A.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException(ex) {
    var t1;
    if (ex == null)
        return new A.NullThrownFromJavaScriptException(ex);
    if (ex instanceof A.ExceptionAndStackTrace) {
        t1 = ex.dartException;
        return A.saveStackTrace(ex, t1 == null ? type$.Object._as(t1) : t1);
    }
    if (typeof ex !== "object")
        return ex;
    if ("dartException" in ex)
        return A.saveStackTrace(ex, ex.dartException);
    return A._unwrapNonDartException(ex);
    },
    saveStackTrace(ex, error) {
    if (type$.Error._is(error))
        if (error.$thrownJsError == null)
        error.$thrownJsError = ex;
    return error;
    },
    _unwrapNonDartException(ex) {
    var message, number, ieErrorCode, t1, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, _null = null;
    if (!("message" in ex))
        return ex;
    message = ex.message;
    if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((B.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
        switch (ieErrorCode) {
            case 438:
            return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A.S(message) + " (Error " + ieErrorCode + ")", _null));
            case 445:
            case 5007:
            t1 = A.S(message);
            return A.saveStackTrace(ex, new A.NullError(t1 + " (Error " + ieErrorCode + ")", _null));
        }
    }
    if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
        return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
        else {
        match = notClosure.matchTypeError$1(message);
        if (match != null) {
            match.method = "call";
            return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
        } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
            match = nullLiteralCall.matchTypeError$1(message);
            if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                match = undefLiteralCall.matchTypeError$1(message);
                if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                    match = nullLiteralCall.matchTypeError$1(message);
                    if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                        match = undefLiteralProperty.matchTypeError$1(message);
                        t1 = match != null;
                        } else
                        t1 = true;
                    } else
                        t1 = true;
                    } else
                    t1 = true;
                } else
                    t1 = true;
                } else
                t1 = true;
            } else
                t1 = true;
            } else
            t1 = true;
            if (t1) {
            A._asString(message);
            return A.saveStackTrace(ex, new A.NullError(message, match == null ? _null : match.method));
            }
        }
        }
        return A.saveStackTrace(ex, new A.UnknownJsTypeError(typeof message == "string" ? message : ""));
    }
    if (ex instanceof RangeError) {
        if (typeof message == "string" && message.indexOf("call stack") !== -1)
        return new A.StackOverflowError();
        message = function(ex) {
        try {
            return String(ex);
        } catch (e) {
        }
        return null;
        }(ex);
        return A.saveStackTrace(ex, new A.ArgumentError(false, _null, _null, typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
    }
    if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
        return new A.StackOverflowError();
    return ex;
    },
    getTraceFromException(exception) {
    var trace;
    if (exception instanceof A.ExceptionAndStackTrace)
        return exception.stackTrace;
    if (exception == null)
        return new A._StackTrace(exception);
    trace = exception.$cachedTrace;
    if (trace != null)
        return trace;
    return exception.$cachedTrace = new A._StackTrace(exception);
    },
    objectHashCode(object) {
    if (object == null || typeof object != "object")
        return J.get$hashCode$(object);
    else
        return A.Primitives_objectHashCode(object);
    },
    fillLiteralMap(keyValuePairs, result) {
    var index, index0, index1,
        $length = keyValuePairs.length;
    for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
    }
    return result;
    },
    invokeClosure(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
    type$.Function._as(closure);
    switch (A._asInt(numberOfArguments)) {
        case 0:
        return closure.call$0();
        case 1:
        return closure.call$1(arg1);
        case 2:
        return closure.call$2(arg1, arg2);
        case 3:
        return closure.call$3(arg1, arg2, arg3);
        case 4:
        return closure.call$4(arg1, arg2, arg3, arg4);
    }
    throw A.wrapException(new A._Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS(closure, arity) {
    var $function = closure.$identity;
    if (!!$function)
        return $function;
    $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
        return invoke(closure, arity, a1, a2, a3, a4);
        };
    }(closure, arity, A.invokeClosure);
    closure.$identity = $function;
    return $function;
    },
    Closure_fromTearOff(parameters) {
    var $prototype, $constructor, t2, trampoline, applyTrampoline, i, stub, stub0, stubName, stubCallName,
        container = parameters.co,
        isStatic = parameters.iS,
        isIntercepted = parameters.iI,
        needsDirectAccess = parameters.nDA,
        applyTrampolineIndex = parameters.aI,
        funsOrNames = parameters.fs,
        callNames = parameters.cs,
        $name = funsOrNames[0],
        callName = callNames[0],
        $function = container[$name],
        t1 = parameters.fT;
    t1.toString;
    $prototype = isStatic ? Object.create(new A.StaticClosure().constructor.prototype) : Object.create(new A.BoundClosure(null, null).constructor.prototype);
    $prototype.$initialize = $prototype.constructor;
    if (isStatic)
        $constructor = function static_tear_off() {
        this.$initialize();
        };
    else
        $constructor = function tear_off(a, b) {
        this.$initialize(a, b);
        };
    $prototype.constructor = $constructor;
    $constructor.prototype = $prototype;
    $prototype.$_name = $name;
    $prototype.$_target = $function;
    t2 = !isStatic;
    if (t2)
        trampoline = A.Closure_forwardCallTo($name, $function, isIntercepted, needsDirectAccess);
    else {
        $prototype.$static_name = $name;
        trampoline = $function;
    }
    $prototype.$signature = A.Closure__computeSignatureFunctionNewRti(t1, isStatic, isIntercepted);
    $prototype[callName] = trampoline;
    for (applyTrampoline = trampoline, i = 1; i < funsOrNames.length; ++i) {
        stub = funsOrNames[i];
        if (typeof stub == "string") {
        stub0 = container[stub];
        stubName = stub;
        stub = stub0;
        } else
        stubName = "";
        stubCallName = callNames[i];
        if (stubCallName != null) {
        if (t2)
            stub = A.Closure_forwardCallTo(stubName, stub, isIntercepted, needsDirectAccess);
        $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex)
        applyTrampoline = stub;
    }
    $prototype["call*"] = applyTrampoline;
    $prototype.$requiredArgCount = parameters.rC;
    $prototype.$defaultValues = parameters.dV;
    return $constructor;
    },
    Closure__computeSignatureFunctionNewRti(functionType, isStatic, isIntercepted) {
    if (typeof functionType == "number")
        return functionType;
    if (typeof functionType == "string") {
        if (isStatic)
        throw A.wrapException("Cannot compute signature for static tearoff.");
        return function(recipe, evalOnReceiver) {
        return function() {
            return evalOnReceiver(this, recipe);
        };
        }(functionType, A.BoundClosure_evalRecipe);
    }
    throw A.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function) {
    var getReceiver = A.BoundClosure_receiverOf;
    switch (needsDirectAccess ? -1 : arity) {
        case 0:
        return function(entry, receiverOf) {
            return function() {
            return receiverOf(this)[entry]();
            };
        }(stubName, getReceiver);
        case 1:
        return function(entry, receiverOf) {
            return function(a) {
            return receiverOf(this)[entry](a);
            };
        }(stubName, getReceiver);
        case 2:
        return function(entry, receiverOf) {
            return function(a, b) {
            return receiverOf(this)[entry](a, b);
            };
        }(stubName, getReceiver);
        case 3:
        return function(entry, receiverOf) {
            return function(a, b, c) {
            return receiverOf(this)[entry](a, b, c);
            };
        }(stubName, getReceiver);
        case 4:
        return function(entry, receiverOf) {
            return function(a, b, c, d) {
            return receiverOf(this)[entry](a, b, c, d);
            };
        }(stubName, getReceiver);
        case 5:
        return function(entry, receiverOf) {
            return function(a, b, c, d, e) {
            return receiverOf(this)[entry](a, b, c, d, e);
            };
        }(stubName, getReceiver);
        default:
        return function(f, receiverOf) {
            return function() {
            return f.apply(receiverOf(this), arguments);
            };
        }($function, getReceiver);
    }
    },
    Closure_forwardCallTo(stubName, $function, isIntercepted, needsDirectAccess) {
    var arity, t1;
    if (isIntercepted)
        return A.Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess);
    arity = $function.length;
    t1 = A.Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function);
    return t1;
    },
    Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function) {
    var getReceiver = A.BoundClosure_receiverOf,
        getInterceptor = A.BoundClosure_interceptorOf;
    switch (needsDirectAccess ? -1 : arity) {
        case 0:
        throw A.wrapException(new A.RuntimeError("Intercepted function with no arguments."));
        case 1:
        return function(entry, interceptorOf, receiverOf) {
            return function() {
            return interceptorOf(this)[entry](receiverOf(this));
            };
        }(stubName, getInterceptor, getReceiver);
        case 2:
        return function(entry, interceptorOf, receiverOf) {
            return function(a) {
            return interceptorOf(this)[entry](receiverOf(this), a);
            };
        }(stubName, getInterceptor, getReceiver);
        case 3:
        return function(entry, interceptorOf, receiverOf) {
            return function(a, b) {
            return interceptorOf(this)[entry](receiverOf(this), a, b);
            };
        }(stubName, getInterceptor, getReceiver);
        case 4:
        return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c) {
            return interceptorOf(this)[entry](receiverOf(this), a, b, c);
            };
        }(stubName, getInterceptor, getReceiver);
        case 5:
        return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d) {
            return interceptorOf(this)[entry](receiverOf(this), a, b, c, d);
            };
        }(stubName, getInterceptor, getReceiver);
        case 6:
        return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d, e) {
            return interceptorOf(this)[entry](receiverOf(this), a, b, c, d, e);
            };
        }(stubName, getInterceptor, getReceiver);
        default:
        return function(f, interceptorOf, receiverOf) {
            return function() {
            var a = [receiverOf(this)];
            Array.prototype.push.apply(a, arguments);
            return f.apply(interceptorOf(this), a);
            };
        }($function, getInterceptor, getReceiver);
    }
    },
    Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess) {
    var arity, t1;
    if ($.BoundClosure__interceptorFieldNameCache == null)
        $.BoundClosure__interceptorFieldNameCache = A.BoundClosure__computeFieldNamed("interceptor");
    if ($.BoundClosure__receiverFieldNameCache == null)
        $.BoundClosure__receiverFieldNameCache = A.BoundClosure__computeFieldNamed("receiver");
    arity = $function.length;
    t1 = A.Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function);
    return t1;
    },
    closureFromTearOff(parameters) {
    return A.Closure_fromTearOff(parameters);
    },
    BoundClosure_evalRecipe(closure, recipe) {
    return A._Universe_evalInEnvironment(init.typeUniverse, A.instanceType(closure._receiver), recipe);
    },
    BoundClosure_receiverOf(closure) {
    return closure._receiver;
    },
    BoundClosure_interceptorOf(closure) {
    return closure._interceptor;
    },
    BoundClosure__computeFieldNamed(fieldName) {
    var t1, i, $name,
        template = new A.BoundClosure("receiver", "interceptor"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template), type$.nullable_Object);
    for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
        return $name;
    }
    throw A.wrapException(A.ArgumentError$("Field name " + fieldName + " not found.", null));
    },
    boolConversionCheck(value) {
    if (value == null)
        A.assertThrow("boolean expression must not be null");
    return value;
    },
    assertThrow(message) {
    throw A.wrapException(new A._AssertionError(message));
    },
    throwCyclicInit(staticName) {
    throw A.wrapException(new A.CyclicInitializationError(staticName));
    },
    getIsolateAffinityTag($name) {
    return init.getIsolateTag($name);
    },
    LinkedHashMapKeyIterator$(_map, _modifications, $E) {
    var t1 = new A.LinkedHashMapKeyIterator(_map, _modifications, $E._eval$1("LinkedHashMapKeyIterator<0>"));
    t1._cell = _map._first;
    return t1;
    },
    defineProperty(obj, property, value) {
    Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor(obj) {
    var interceptor, interceptorClass, altTag, mark, t1,
        tag = A._asString($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
    if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
    }
    interceptor = $.interceptorsForUncacheableTags[tag];
    if (interceptor != null)
        return interceptor;
    interceptorClass = init.interceptorsByTag[tag];
    if (interceptorClass == null) {
        altTag = A._asStringQ($.alternateTagFunction.call$2(obj, tag));
        if (altTag != null) {
        record = $.dispatchRecordsForInstanceTags[altTag];
        if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
        }
        interceptor = $.interceptorsForUncacheableTags[altTag];
        if (interceptor != null)
            return interceptor;
        interceptorClass = init.interceptorsByTag[altTag];
        tag = altTag;
        }
    }
    if (interceptorClass == null)
        return null;
    interceptor = interceptorClass.prototype;
    mark = tag[0];
    if (mark === "!") {
        record = A.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
    }
    if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
    }
    if (mark === "-") {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
    }
    if (mark === "+")
        return A.patchInteriorProto(obj, interceptor);
    if (mark === "*")
        throw A.wrapException(A.UnimplementedError$(tag));
    if (init.leafTags[tag] === true) {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
    } else
        return A.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto(obj, interceptor) {
    var proto = Object.getPrototypeOf(obj);
    Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
    return interceptor;
    },
    makeLeafDispatchRecord(interceptor) {
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord(tag, interceptorClass, proto) {
    var interceptor = interceptorClass.prototype;
    if (init.leafTags[tag] === true)
        return A.makeLeafDispatchRecord(interceptor);
    else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch() {
    if (true === $.initNativeDispatchFlag)
        return;
    $.initNativeDispatchFlag = true;
    A.initNativeDispatchContinue();
    },
    initNativeDispatchContinue() {
    var map, tags, fun, i, tag, proto, record, interceptorClass;
    $.dispatchRecordsForInstanceTags = Object.create(null);
    $.interceptorsForUncacheableTags = Object.create(null);
    A.initHooks();
    map = init.interceptorsByTag;
    tags = Object.getOwnPropertyNames(map);
    if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        proto = $.prototypeForTagFunction.call$1(tag);
        if (proto != null) {
            record = A.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
            Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            fun.prototype = proto;
            }
        }
        }
    }
    for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
        interceptorClass = map[tag];
        map["!" + tag] = interceptorClass;
        map["~" + tag] = interceptorClass;
        map["-" + tag] = interceptorClass;
        map["+" + tag] = interceptorClass;
        map["*" + tag] = interceptorClass;
        }
    }
    },
    initHooks() {
    var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = B.C_JS_CONST0();
    hooks = A.applyHooksTransformer(B.C_JS_CONST1, A.applyHooksTransformer(B.C_JS_CONST2, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST4, A.applyHooksTransformer(B.C_JS_CONST5, A.applyHooksTransformer(B.C_JS_CONST6(B.C_JS_CONST), hooks)))))));
    if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
        transformers = [transformers];
        if (transformers.constructor == Array)
        for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
            hooks = transformer(hooks) || hooks;
        }
    }
    getTag = hooks.getTag;
    getUnknownTag = hooks.getUnknownTag;
    prototypeForTag = hooks.prototypeForTag;
    $.getTagFunction = new A.initHooks_closure(getTag);
    $.alternateTagFunction = new A.initHooks_closure0(getUnknownTag);
    $.prototypeForTagFunction = new A.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer(transformer, hooks) {
    return transformer(hooks) || hooks;
    },
    quoteStringForRegExp(string) {
    if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
    return string;
    },
    ConstantMap: function ConstantMap() {
    },
    GeneralConstantMap: function GeneralConstantMap(t0, t1) {
    this._jsData = t0;
    this.$ti = t1;
    },
    GeneralConstantMap__typeTest_closure: function GeneralConstantMap__typeTest_closure(t0) {
    this.T = t0;
    },
    Primitives_initTicker_closure: function Primitives_initTicker_closure(t0) {
    this.performance = t0;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
    var _ = this;
    _._pattern = t0;
    _._arguments = t1;
    _._argumentsExpr = t2;
    _._expr = t3;
    _._method = t4;
    _._receiver = t5;
    },
    NullError: function NullError(t0, t1) {
    this.__js_helper$_message = t0;
    this._method = t1;
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
    this.__js_helper$_message = t0;
    this._method = t1;
    this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
    this.__js_helper$_message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
    this._irritant = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
    this.dartException = t0;
    this.stackTrace = t1;
    },
    _StackTrace: function _StackTrace(t0) {
    this._exception = t0;
    this._trace = null;
    },
    Closure: function Closure() {
    },
    Closure0Args: function Closure0Args() {
    },
    Closure2Args: function Closure2Args() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1) {
    this._receiver = t0;
    this._interceptor = t1;
    },
    RuntimeError: function RuntimeError(t0) {
    this.message = t0;
    },
    _AssertionError: function _AssertionError(t0) {
    this.message = t0;
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
    var _ = this;
    _.__js_helper$_length = 0;
    _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
    _._modifications = 0;
    _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0) {
    this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
    var _ = this;
    _.hashMapCellKey = t0;
    _.hashMapCellValue = t1;
    _._previous = _._next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
    this._map = t0;
    this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
    var _ = this;
    _._map = t0;
    _._modifications = t1;
    _.__js_helper$_current = _._cell = null;
    _.$ti = t2;
    },
    initHooks_closure: function initHooks_closure(t0) {
    this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
    this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
    this.prototypeForTag = t0;
    },
    throwLateFieldNI(fieldName) {
    return A.throwExpression(A.LateError$fieldNI(fieldName));
    },
    throwLateFieldAI(fieldName) {
    return A.throwExpression(A.LateError$fieldAI(fieldName));
    },
    throwLateFieldADI(fieldName) {
    return A.throwExpression(new A.LateError("Field '" + fieldName + "' has been assigned during initialization."));
    },
    _Cell$named(_name) {
    var t1 = new A._Cell(_name);
    return t1.__late_helper$_value = t1;
    },
    _Cell: function _Cell(t0) {
    this.__late_helper$_name = t0;
    this.__late_helper$_value = null;
    },
    _checkViewArguments(buffer, offsetInBytes, $length) {
    },
    _ensureNativeList(list) {
    var t1, result, i;
    if (type$.JSIndexable_dynamic._is(list))
        return list;
    t1 = J.getInterceptor$asx(list);
    result = A.List_List$filled(t1.get$length(list), null, false, type$.dynamic);
    for (i = 0; i < t1.get$length(list); ++i)
        B.JSArray_methods.$indexSet(result, i, t1.$index(list, i));
    return result;
    },
    NativeFloat32List_NativeFloat32List($length) {
    return new Float32Array($length);
    },
    NativeFloat32List_NativeFloat32List$view(buffer, offsetInBytes, $length) {
    A._checkViewArguments(buffer, offsetInBytes, $length);
    $length = B.JSInt_methods._tdivFast$1(buffer.byteLength - offsetInBytes, 4);
    return new Float32Array(buffer, offsetInBytes, $length);
    },
    NativeInt32List_NativeInt32List($length) {
    return new Int32Array($length);
    },
    NativeInt8List_NativeInt8List($length) {
    return new Int8Array($length);
    },
    NativeInt8List_NativeInt8List$view(buffer, offsetInBytes, $length) {
    A._checkViewArguments(buffer, offsetInBytes, $length);
    return $length == null ? new Int8Array(buffer, offsetInBytes) : new Int8Array(buffer, offsetInBytes, $length);
    },
    NativeUint16List_NativeUint16List($length) {
    return new Uint16Array($length);
    },
    NativeUint16List_NativeUint16List$view(buffer, offsetInBytes, $length) {
    A._checkViewArguments(buffer, offsetInBytes, $length);
    $length = B.JSInt_methods._tdivFast$1(buffer.byteLength - offsetInBytes, 2);
    return new Uint16Array(buffer, offsetInBytes, $length);
    },
    NativeUint32List_NativeUint32List($length) {
    return new Uint32Array($length);
    },
    NativeUint32List_NativeUint32List$view(buffer, offsetInBytes, $length) {
    A._checkViewArguments(buffer, offsetInBytes, $length);
    $length = B.JSInt_methods._tdivFast$1(buffer.byteLength - offsetInBytes, 4);
    return new Uint32Array(buffer, offsetInBytes, $length);
    },
    NativeUint8List_NativeUint8List($length) {
    return new Uint8Array($length);
    },
    NativeUint8List_NativeUint8List$view(buffer, offsetInBytes, $length) {
    A._checkViewArguments(buffer, offsetInBytes, $length);
    return $length == null ? new Uint8Array(buffer, offsetInBytes) : new Uint8Array(buffer, offsetInBytes, $length);
    },
    _checkValidIndex(index, list, $length) {
    if (index >>> 0 !== index || index >= $length)
        throw A.wrapException(A.diagnoseIndexError(list, index));
    },
    _checkValidRange(start, end, $length) {
    var t1;
    if (!(start >>> 0 !== start))
        if (end == null)
        t1 = start > $length;
        else
        t1 = end >>> 0 !== end || start > end || end > $length;
    else
        t1 = true;
    if (t1)
        throw A.wrapException(A.diagnoseRangeError(start, end, $length));
    if (end == null)
        return $length;
    return end;
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeFloat32List: function NativeFloat32List() {
    },
    NativeFloat64List: function NativeFloat64List() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    Rti__getQuestionFromStar(universe, rti) {
    var question = rti._precomputed1;
    return question == null ? rti._precomputed1 = A._Universe__lookupQuestionRti(universe, rti._primary, true) : question;
    },
    Rti__getFutureFromFutureOr(universe, rti) {
    var future = rti._precomputed1;
    return future == null ? rti._precomputed1 = A._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__isUnionOfFunctionType(rti) {
    var kind = rti._kind;
    if (kind === 6 || kind === 7 || kind === 8)
        return A.Rti__isUnionOfFunctionType(rti._primary);
    return kind === 12 || kind === 13;
    },
    Rti__getCanonicalRecipe(rti) {
    return rti._canonicalRecipe;
    },
    findType(recipe) {
    return A._Universe_eval(init.typeUniverse, recipe, false);
    },
    _substitute(universe, rti, typeArguments, depth) {
    var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
    switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
        return rti;
        case 6:
        baseType = rti._primary;
        substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
        if (substitutedBaseType === baseType)
            return rti;
        return A._Universe__lookupStarRti(universe, substitutedBaseType, true);
        case 7:
        baseType = rti._primary;
        substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
        if (substitutedBaseType === baseType)
            return rti;
        return A._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 8:
        baseType = rti._primary;
        substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
        if (substitutedBaseType === baseType)
            return rti;
        return A._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 9:
        interfaceTypeArguments = rti._rest;
        substitutedInterfaceTypeArguments = A._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
        if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
        return A._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 10:
        base = rti._primary;
        substitutedBase = A._substitute(universe, base, typeArguments, depth);
        $arguments = rti._rest;
        substitutedArguments = A._substituteArray(universe, $arguments, typeArguments, depth);
        if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
        return A._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 12:
        returnType = rti._primary;
        substitutedReturnType = A._substitute(universe, returnType, typeArguments, depth);
        functionParameters = rti._rest;
        substitutedFunctionParameters = A._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
        if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
        return A._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 13:
        bounds = rti._rest;
        depth += bounds.length;
        substitutedBounds = A._substituteArray(universe, bounds, typeArguments, depth);
        base = rti._primary;
        substitutedBase = A._substitute(universe, base, typeArguments, depth);
        if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
        return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 14:
        index = rti._primary;
        if (index < depth)
            return rti;
        argument = typeArguments[index - depth];
        if (argument == null)
            return rti;
        return argument;
        default:
        throw A.wrapException(A.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
    }
    },
    _substituteArray(universe, rtiArray, typeArguments, depth) {
    var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = A._Utils_newArrayOrEmpty($length);
    for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
        changed = true;
        result[i] = substitutedRti;
    }
    return changed ? result : rtiArray;
    },
    _substituteNamed(universe, namedArray, typeArguments, depth) {
    var changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length,
        result = A._Utils_newArrayOrEmpty($length);
    for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
        changed = true;
        result.splice(i, 3, t1, t2, substitutedRti);
    }
    return changed ? result : namedArray;
    },
    _substituteFunctionParameters(universe, functionParameters, typeArguments, depth) {
    var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = A._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = A._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = A._substituteNamed(universe, named, typeArguments, depth);
    if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
    result = new A._FunctionParameters();
    result._requiredPositional = substitutedRequiredPositional;
    result._optionalPositional = substitutedOptionalPositional;
    result._named = substitutedNamed;
    return result;
    },
    _setArrayType(target, rti) {
    target[init.arrayRti] = rti;
    return target;
    },
    closureFunctionType(closure) {
    var t1,
        signature = closure.$signature;
    if (signature != null) {
        if (typeof signature == "number")
        return A.getTypeFromTypesTable(signature);
        t1 = closure.$signature();
        return t1;
    }
    return null;
    },
    instanceOrFunctionType(object, testRti) {
    var rti;
    if (A.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof A.Closure) {
        rti = A.closureFunctionType(object);
        if (rti != null)
            return rti;
        }
    return A.instanceType(object);
    },
    instanceType(object) {
    var rti;
    if (object instanceof A.Object) {
        rti = object.$ti;
        return rti != null ? rti : A._instanceTypeFromConstructor(object);
    }
    if (Array.isArray(object))
        return A._arrayInstanceType(object);
    return A._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType(object) {
    var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
    if (rti == null)
        return defaultRti;
    if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
    return rti;
    },
    _instanceType(object) {
    var rti = object.$ti;
    return rti != null ? rti : A._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor(instance) {
    var $constructor = instance.constructor,
        probe = $constructor.$ccache;
    if (probe != null)
        return probe;
    return A._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss(instance, $constructor) {
    var effectiveConstructor = instance instanceof A.Closure ? instance.__proto__.__proto__.constructor : $constructor,
        rti = A._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
    $constructor.$ccache = rti;
    return rti;
    },
    getTypeFromTypesTable(index) {
    var rti,
        table = init.types,
        type = table[index];
    if (typeof type == "string") {
        rti = A._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
    }
    return type;
    },
    createRuntimeType(rti) {
    var s, starErasedRecipe, starErasedRti,
        type = rti._cachedRuntimeType;
    if (type != null)
        return type;
    s = rti._canonicalRecipe;
    starErasedRecipe = s.replace(/\*/g, "");
    if (starErasedRecipe === s)
        return rti._cachedRuntimeType = new A._Type(rti);
    starErasedRti = A._Universe_eval(init.typeUniverse, starErasedRecipe, true);
    type = starErasedRti._cachedRuntimeType;
    return rti._cachedRuntimeType = type == null ? starErasedRti._cachedRuntimeType = new A._Type(starErasedRti) : type;
    },
    typeLiteral(recipe) {
    return A.createRuntimeType(A._Universe_eval(init.typeUniverse, recipe, false));
    },
    _installSpecializedIsTest(object) {
    var t1, unstarred, isFn, $name, testRti = this;
    if (testRti === type$.Object)
        return A._finishIsFn(testRti, object, A._isObject);
    if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
        t1 = false;
        else
        t1 = true;
    else
        t1 = true;
    if (t1)
        return A._finishIsFn(testRti, object, A._isTop);
    t1 = testRti._kind;
    unstarred = t1 === 6 ? testRti._primary : testRti;
    if (unstarred === type$.int)
        isFn = A._isInt;
    else if (unstarred === type$.double || unstarred === type$.num)
        isFn = A._isNum;
    else if (unstarred === type$.String)
        isFn = A._isString;
    else
        isFn = unstarred === type$.bool ? A._isBool : null;
    if (isFn != null)
        return A._finishIsFn(testRti, object, isFn);
    if (unstarred._kind === 9) {
        $name = unstarred._primary;
        if (unstarred._rest.every(A.isTopType)) {
        testRti._specializedTestResource = "$is" + $name;
        if ($name === "List")
            return A._finishIsFn(testRti, object, A._isListTestViaProperty);
        return A._finishIsFn(testRti, object, A._isTestViaProperty);
        }
    } else if (t1 === 7)
        return A._finishIsFn(testRti, object, A._generalNullableIsTestImplementation);
    return A._finishIsFn(testRti, object, A._generalIsTestImplementation);
    },
    _finishIsFn(testRti, object, isFn) {
    testRti._is = isFn;
    return testRti._is(object);
    },
    _installSpecializedAsCheck(object) {
    var t1, testRti = this,
        asFn = A._generalAsCheckImplementation;
    if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
        t1 = false;
        else
        t1 = true;
    else
        t1 = true;
    if (t1)
        asFn = A._asTop;
    else if (testRti === type$.Object)
        asFn = A._asObject;
    else {
        t1 = A.isNullable(testRti);
        if (t1)
        asFn = A._generalNullableAsCheckImplementation;
    }
    testRti._as = asFn;
    return testRti._as(object);
    },
    _nullIs(testRti) {
    var t1,
        kind = testRti._kind;
    if (!A.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
        if (!(testRti === type$.legacy_Never))
            if (kind !== 7)
            if (!(kind === 6 && A._nullIs(testRti._primary)))
                t1 = kind === 8 && A._nullIs(testRti._primary) || testRti === type$.Null || testRti === type$.JSNull;
            else
                t1 = true;
            else
            t1 = true;
        else
            t1 = true;
        else
        t1 = true;
    else
        t1 = true;
    return t1;
    },
    _generalIsTestImplementation(object) {
    var testRti = this;
    if (object == null)
        return A._nullIs(testRti);
    return A._isSubtype(init.typeUniverse, A.instanceOrFunctionType(object, testRti), null, testRti, null);
    },
    _generalNullableIsTestImplementation(object) {
    if (object == null)
        return true;
    return this._primary._is(object);
    },
    _isTestViaProperty(object) {
    var tag, testRti = this;
    if (object == null)
        return A._nullIs(testRti);
    tag = testRti._specializedTestResource;
    if (object instanceof A.Object)
        return !!object[tag];
    return !!J.getInterceptor$(object)[tag];
    },
    _isListTestViaProperty(object) {
    var tag, testRti = this;
    if (object == null)
        return A._nullIs(testRti);
    if (typeof object != "object")
        return false;
    if (Array.isArray(object))
        return true;
    tag = testRti._specializedTestResource;
    if (object instanceof A.Object)
        return !!object[tag];
    return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation(object) {
    var t1, testRti = this;
    if (object == null) {
        t1 = A.isNullable(testRti);
        if (t1)
        return object;
    } else if (testRti._is(object))
        return object;
    A._failedAsCheck(object, testRti);
    },
    _generalNullableAsCheckImplementation(object) {
    var testRti = this;
    if (object == null)
        return object;
    else if (testRti._is(object))
        return object;
    A._failedAsCheck(object, testRti);
    },
    _failedAsCheck(object, testRti) {
    throw A.wrapException(A._TypeError$fromMessage(A._Error_compose(object, A.instanceOrFunctionType(object, testRti), A._rtiToString(testRti, null))));
    },
    _Error_compose(object, objectRti, checkedTypeDescription) {
    var objectDescription = A.Error_safeToString(object);
    return objectDescription + ": type '" + A._rtiToString(objectRti == null ? A.instanceType(object) : objectRti, null) + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError$fromMessage(message) {
    return new A._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType(object, type) {
    return new A._TypeError("TypeError: " + A._Error_compose(object, null, type));
    },
    _isObject(object) {
    return object != null;
    },
    _asObject(object) {
    if (object != null)
        return object;
    throw A.wrapException(A._TypeError__TypeError$forType(object, "Object"));
    },
    _isTop(object) {
    return true;
    },
    _asTop(object) {
    return object;
    },
    _isBool(object) {
    return true === object || false === object;
    },
    _asBool(object) {
    if (true === object)
        return true;
    if (false === object)
        return false;
    throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolS(object) {
    if (true === object)
        return true;
    if (false === object)
        return false;
    if (object == null)
        return object;
    throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolQ(object) {
    if (true === object)
        return true;
    if (false === object)
        return false;
    if (object == null)
        return object;
    throw A.wrapException(A._TypeError__TypeError$forType(object, "bool?"));
    },
    _asDouble(object) {
    if (typeof object == "number")
        return object;
    throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleS(object) {
    if (typeof object == "number")
        return object;
    if (object == null)
        return object;
    throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleQ(object) {
    if (typeof object == "number")
        return object;
    if (object == null)
        return object;
    throw A.wrapException(A._TypeError__TypeError$forType(object, "double?"));
    },
    _isInt(object) {
    return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt(object) {
    if (typeof object == "number" && Math.floor(object) === object)
        return object;
    throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntS(object) {
    if (typeof object == "number" && Math.floor(object) === object)
        return object;
    if (object == null)
        return object;
    throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntQ(object) {
    if (typeof object == "number" && Math.floor(object) === object)
        return object;
    if (object == null)
        return object;
    throw A.wrapException(A._TypeError__TypeError$forType(object, "int?"));
    },
    _isNum(object) {
    return typeof object == "number";
    },
    _asNum(object) {
    if (typeof object == "number")
        return object;
    throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumS(object) {
    if (typeof object == "number")
        return object;
    if (object == null)
        return object;
    throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumQ(object) {
    if (typeof object == "number")
        return object;
    if (object == null)
        return object;
    throw A.wrapException(A._TypeError__TypeError$forType(object, "num?"));
    },
    _isString(object) {
    return typeof object == "string";
    },
    _asString(object) {
    if (typeof object == "string")
        return object;
    throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringS(object) {
    if (typeof object == "string")
        return object;
    if (object == null)
        return object;
    throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringQ(object) {
    if (typeof object == "string")
        return object;
    if (object == null)
        return object;
    throw A.wrapException(A._TypeError__TypeError$forType(object, "String?"));
    },
    _rtiArrayToString(array, genericContext) {
    var s, sep, i;
    for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += sep + A._rtiToString(array[i], genericContext);
    return s;
    },
    _recordRtiToString(recordType, genericContext) {
    var fieldCount, names, namesIndex, s, comma, i,
        partialShape = recordType._primary,
        fields = recordType._rest;
    if ("" === partialShape)
        return "(" + A._rtiArrayToString(fields, genericContext) + ")";
    fieldCount = fields.length;
    names = partialShape.split(",");
    namesIndex = names.length - fieldCount;
    for (s = "(", comma = "", i = 0; i < fieldCount; ++i, comma = ", ") {
        s += comma;
        if (namesIndex === 0)
        s += "{";
        s += A._rtiToString(fields[i], genericContext);
        if (namesIndex >= 0)
        s += " " + names[namesIndex];
        ++namesIndex;
    }
    return s + "})";
    },
    _functionRtiToString(functionType, genericContext, bounds) {
    var boundsLength, outerContextLength, offset, i, t1, t2, typeParametersText, typeSep, t3, t4, boundRti, kind, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ";
    if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null) {
        genericContext = A._setArrayType([], type$.JSArray_String);
        outerContextLength = null;
        } else
        outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
        B.JSArray_methods.add$1(genericContext, "T" + (offset + i));
        for (t1 = type$.nullable_Object, t2 = type$.legacy_Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
        t3 = genericContext.length;
        t4 = t3 - 1 - i;
        if (!(t4 >= 0))
            return A.ioore(genericContext, t4);
        typeParametersText = B.JSString_methods.$add(typeParametersText + typeSep, genericContext[t4]);
        boundRti = bounds[i];
        kind = boundRti._kind;
        if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            if (!(boundRti === t2))
            t3 = false;
            else
            t3 = true;
        else
            t3 = true;
        if (!t3)
            typeParametersText += " extends " + A._rtiToString(boundRti, genericContext);
        }
        typeParametersText += ">";
    } else {
        typeParametersText = "";
        outerContextLength = null;
    }
    t1 = functionType._primary;
    parameters = functionType._rest;
    requiredPositional = parameters._requiredPositional;
    requiredPositionalLength = requiredPositional.length;
    optionalPositional = parameters._optionalPositional;
    optionalPositionalLength = optionalPositional.length;
    named = parameters._named;
    namedLength = named.length;
    returnTypeText = A._rtiToString(t1, genericContext);
    for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += sep + A._rtiToString(requiredPositional[i], genericContext);
    if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
        argumentsText += sep + A._rtiToString(optionalPositional[i], genericContext);
        argumentsText += "]";
    }
    if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
        argumentsText += sep;
        if (named[i + 1])
            argumentsText += "required ";
        argumentsText += A._rtiToString(named[i + 2], genericContext) + " " + named[i];
        }
        argumentsText += "}";
    }
    if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
    }
    return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString(rti, genericContext) {
    var s, questionArgument, argumentKind, $name, $arguments, t1, t2,
        kind = rti._kind;
    if (kind === 5)
        return "erased";
    if (kind === 2)
        return "dynamic";
    if (kind === 3)
        return "void";
    if (kind === 1)
        return "Never";
    if (kind === 4)
        return "any";
    if (kind === 6) {
        s = A._rtiToString(rti._primary, genericContext);
        return s;
    }
    if (kind === 7) {
        questionArgument = rti._primary;
        s = A._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return (argumentKind === 12 || argumentKind === 13 ? "(" + s + ")" : s) + "?";
    }
    if (kind === 8)
        return "FutureOr<" + A._rtiToString(rti._primary, genericContext) + ">";
    if (kind === 9) {
        $name = A._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length > 0 ? $name + ("<" + A._rtiArrayToString($arguments, genericContext) + ">") : $name;
    }
    if (kind === 11)
        return A._recordRtiToString(rti, genericContext);
    if (kind === 12)
        return A._functionRtiToString(rti, genericContext, null);
    if (kind === 13)
        return A._functionRtiToString(rti._primary, genericContext, rti._rest);
    if (kind === 14) {
        t1 = rti._primary;
        t2 = genericContext.length;
        t1 = t2 - 1 - t1;
        if (!(t1 >= 0 && t1 < t2))
        return A.ioore(genericContext, t1);
        return genericContext[t1];
    }
    return "?";
    },
    _unminifyOrTag(rawClassName) {
    var preserved = init.mangledGlobalNames[rawClassName];
    if (preserved != null)
        return preserved;
    return rawClassName;
    },
    _Universe_findRule(universe, targetType) {
    var rule = universe.tR[targetType];
    for (; typeof rule == "string";)
        rule = universe.tR[rule];
    return rule;
    },
    _Universe_findErasedType(universe, cls) {
    var $length, erased, $arguments, i, $interface,
        t1 = universe.eT,
        probe = t1[cls];
    if (probe == null)
        return A._Universe_eval(universe, cls, false);
    else if (typeof probe == "number") {
        $length = probe;
        erased = A._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = A._Utils_newArrayOrEmpty($length);
        for (i = 0; i < $length; ++i)
        $arguments[i] = erased;
        $interface = A._Universe__lookupInterfaceRti(universe, cls, $arguments);
        t1[cls] = $interface;
        return $interface;
    } else
        return probe;
    },
    _Universe_addRules(universe, rules) {
    return A._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes(universe, types) {
    return A._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval(universe, recipe, normalize) {
    var rti,
        t1 = universe.eC,
        probe = t1.get(recipe);
    if (probe != null)
        return probe;
    rti = A._Parser_parse(A._Parser_create(universe, null, recipe, normalize));
    t1.set(recipe, rti);
    return rti;
    },
    _Universe_evalInEnvironment(universe, environment, recipe) {
    var probe, rti,
        cache = environment._evalCache;
    if (cache == null)
        cache = environment._evalCache = new Map();
    probe = cache.get(recipe);
    if (probe != null)
        return probe;
    rti = A._Parser_parse(A._Parser_create(universe, environment, recipe, true));
    cache.set(recipe, rti);
    return rti;
    },
    _Universe_bind(universe, environment, argumentsRti) {
    var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
    if (cache == null)
        cache = environment._bindCache = new Map();
    argumentsRecipe = argumentsRti._canonicalRecipe;
    probe = cache.get(argumentsRecipe);
    if (probe != null)
        return probe;
    rti = A._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 10 ? argumentsRti._rest : [argumentsRti]);
    cache.set(argumentsRecipe, rti);
    return rti;
    },
    _Universe__installTypeTests(universe, rti) {
    rti._as = A._installSpecializedAsCheck;
    rti._is = A._installSpecializedIsTest;
    return rti;
    },
    _Universe__lookupTerminalRti(universe, kind, key) {
    var rti, t1,
        probe = universe.eC.get(key);
    if (probe != null)
        return probe;
    rti = new A.Rti(null, null);
    rti._kind = kind;
    rti._canonicalRecipe = key;
    t1 = A._Universe__installTypeTests(universe, rti);
    universe.eC.set(key, t1);
    return t1;
    },
    _Universe__lookupStarRti(universe, baseType, normalize) {
    var t1,
        key = baseType._canonicalRecipe + "*",
        probe = universe.eC.get(key);
    if (probe != null)
        return probe;
    t1 = A._Universe__createStarRti(universe, baseType, key, normalize);
    universe.eC.set(key, t1);
    return t1;
    },
    _Universe__createStarRti(universe, baseType, key, normalize) {
    var baseKind, t1, rti;
    if (normalize) {
        baseKind = baseType._kind;
        if (!A.isStrongTopType(baseType))
        t1 = baseType === type$.Null || baseType === type$.JSNull || baseKind === 7 || baseKind === 6;
        else
        t1 = true;
        if (t1)
        return baseType;
    }
    rti = new A.Rti(null, null);
    rti._kind = 6;
    rti._primary = baseType;
    rti._canonicalRecipe = key;
    return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupQuestionRti(universe, baseType, normalize) {
    var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
    if (probe != null)
        return probe;
    t1 = A._Universe__createQuestionRti(universe, baseType, key, normalize);
    universe.eC.set(key, t1);
    return t1;
    },
    _Universe__createQuestionRti(universe, baseType, key, normalize) {
    var baseKind, t1, starArgument, rti;
    if (normalize) {
        baseKind = baseType._kind;
        if (!A.isStrongTopType(baseType))
        if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 7)
            t1 = baseKind === 8 && A.isNullable(baseType._primary);
            else
            t1 = true;
        else
            t1 = true;
        else
        t1 = true;
        if (t1)
        return baseType;
        else if (baseKind === 1 || baseType === type$.legacy_Never)
        return type$.Null;
        else if (baseKind === 6) {
        starArgument = baseType._primary;
        if (starArgument._kind === 8 && A.isNullable(starArgument._primary))
            return starArgument;
        else
            return A.Rti__getQuestionFromStar(universe, baseType);
        }
    }
    rti = new A.Rti(null, null);
    rti._kind = 7;
    rti._primary = baseType;
    rti._canonicalRecipe = key;
    return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti(universe, baseType, normalize) {
    var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
    if (probe != null)
        return probe;
    t1 = A._Universe__createFutureOrRti(universe, baseType, key, normalize);
    universe.eC.set(key, t1);
    return t1;
    },
    _Universe__createFutureOrRti(universe, baseType, key, normalize) {
    var t1, t2, rti;
    if (normalize) {
        t1 = baseType._kind;
        if (!A.isStrongTopType(baseType))
        if (!(baseType === type$.legacy_Object))
            t2 = false;
        else
            t2 = true;
        else
        t2 = true;
        if (t2 || baseType === type$.Object)
        return baseType;
        else if (t1 === 1)
        return A._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
        return type$.nullable_Future_Null;
    }
    rti = new A.Rti(null, null);
    rti._kind = 8;
    rti._primary = baseType;
    rti._canonicalRecipe = key;
    return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti(universe, index) {
    var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
    if (probe != null)
        return probe;
    rti = new A.Rti(null, null);
    rti._kind = 14;
    rti._primary = index;
    rti._canonicalRecipe = key;
    t1 = A._Universe__installTypeTests(universe, rti);
    universe.eC.set(key, t1);
    return t1;
    },
    _Universe__canonicalRecipeJoin($arguments) {
    var s, sep, i,
        $length = $arguments.length;
    for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
    return s;
    },
    _Universe__canonicalRecipeJoinNamed($arguments) {
    var s, sep, i, t1, nameSep,
        $length = $arguments.length;
    for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s += sep + t1 + nameSep + $arguments[i + 2]._canonicalRecipe;
    }
    return s;
    },
    _Universe__lookupInterfaceRti(universe, $name, $arguments) {
    var probe, rti, t1,
        s = $name;
    if ($arguments.length > 0)
        s += "<" + A._Universe__canonicalRecipeJoin($arguments) + ">";
    probe = universe.eC.get(s);
    if (probe != null)
        return probe;
    rti = new A.Rti(null, null);
    rti._kind = 9;
    rti._primary = $name;
    rti._rest = $arguments;
    if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
    rti._canonicalRecipe = s;
    t1 = A._Universe__installTypeTests(universe, rti);
    universe.eC.set(s, t1);
    return t1;
    },
    _Universe__lookupBindingRti(universe, base, $arguments) {
    var newBase, newArguments, key, probe, rti, t1;
    if (base._kind === 10) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
    } else {
        newArguments = $arguments;
        newBase = base;
    }
    key = newBase._canonicalRecipe + (";<" + A._Universe__canonicalRecipeJoin(newArguments) + ">");
    probe = universe.eC.get(key);
    if (probe != null)
        return probe;
    rti = new A.Rti(null, null);
    rti._kind = 10;
    rti._primary = newBase;
    rti._rest = newArguments;
    rti._canonicalRecipe = key;
    t1 = A._Universe__installTypeTests(universe, rti);
    universe.eC.set(key, t1);
    return t1;
    },
    _Universe__lookupRecordRti(universe, partialShapeTag, fields) {
    var rti, t1,
        key = "+" + (partialShapeTag + "(" + A._Universe__canonicalRecipeJoin(fields) + ")"),
        probe = universe.eC.get(key);
    if (probe != null)
        return probe;
    rti = new A.Rti(null, null);
    rti._kind = 11;
    rti._primary = partialShapeTag;
    rti._rest = fields;
    rti._canonicalRecipe = key;
    t1 = A._Universe__installTypeTests(universe, rti);
    universe.eC.set(key, t1);
    return t1;
    },
    _Universe__lookupFunctionRti(universe, returnType, parameters) {
    var sep, key, probe, rti, t1,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        named = parameters._named,
        namedLength = named.length,
        recipe = "(" + A._Universe__canonicalRecipeJoin(requiredPositional);
    if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "[" + A._Universe__canonicalRecipeJoin(optionalPositional) + "]";
    }
    if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "{" + A._Universe__canonicalRecipeJoinNamed(named) + "}";
    }
    key = s + (recipe + ")");
    probe = universe.eC.get(key);
    if (probe != null)
        return probe;
    rti = new A.Rti(null, null);
    rti._kind = 12;
    rti._primary = returnType;
    rti._rest = parameters;
    rti._canonicalRecipe = key;
    t1 = A._Universe__installTypeTests(universe, rti);
    universe.eC.set(key, t1);
    return t1;
    },
    _Universe__lookupGenericFunctionRti(universe, baseFunctionType, bounds, normalize) {
    var t1,
        key = baseFunctionType._canonicalRecipe + ("<" + A._Universe__canonicalRecipeJoin(bounds) + ">"),
        probe = universe.eC.get(key);
    if (probe != null)
        return probe;
    t1 = A._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
    universe.eC.set(key, t1);
    return t1;
    },
    _Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize) {
    var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
    if (normalize) {
        $length = bounds.length;
        typeArguments = A._Utils_newArrayOrEmpty($length);
        for (count = 0, i = 0; i < $length; ++i) {
        bound = bounds[i];
        if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
        }
        }
        if (count > 0) {
        substitutedBase = A._substitute(universe, baseFunctionType, typeArguments, 0);
        substitutedBounds = A._substituteArray(universe, bounds, typeArguments, 0);
        return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
    }
    rti = new A.Rti(null, null);
    rti._kind = 13;
    rti._primary = baseFunctionType;
    rti._rest = bounds;
    rti._canonicalRecipe = key;
    return A._Universe__installTypeTests(universe, rti);
    },
    _Parser_create(universe, environment, recipe, normalize) {
    return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse(parser) {
    var t2, i, ch, t3, array, head, base, end, item,
        source = parser.r,
        t1 = parser.s;
    for (t2 = source.length, i = 0; i < t2;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
        i = A._Parser_handleDigit(i + 1, ch, source, t1);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124)
        i = A._Parser_handleIdentifier(parser, i, source, t1, false);
        else if (ch === 46)
        i = A._Parser_handleIdentifier(parser, i, source, t1, true);
        else {
        ++i;
        switch (ch) {
            case 44:
            break;
            case 58:
            t1.push(false);
            break;
            case 33:
            t1.push(true);
            break;
            case 59:
            t1.push(A._Parser_toType(parser.u, parser.e, t1.pop()));
            break;
            case 94:
            t1.push(A._Universe__lookupGenericFunctionParameterRti(parser.u, t1.pop()));
            break;
            case 35:
            t1.push(A._Universe__lookupTerminalRti(parser.u, 5, "#"));
            break;
            case 64:
            t1.push(A._Universe__lookupTerminalRti(parser.u, 2, "@"));
            break;
            case 126:
            t1.push(A._Universe__lookupTerminalRti(parser.u, 3, "~"));
            break;
            case 60:
            t1.push(parser.p);
            parser.p = t1.length;
            break;
            case 62:
            t3 = parser.u;
            array = t1.splice(parser.p);
            A._Parser_toTypes(parser.u, parser.e, array);
            parser.p = t1.pop();
            head = t1.pop();
            if (typeof head == "string")
                t1.push(A._Universe__lookupInterfaceRti(t3, head, array));
            else {
                base = A._Parser_toType(t3, parser.e, head);
                switch (base._kind) {
                case 12:
                    t1.push(A._Universe__lookupGenericFunctionRti(t3, base, array, parser.n));
                    break;
                default:
                    t1.push(A._Universe__lookupBindingRti(t3, base, array));
                    break;
                }
            }
            break;
            case 38:
            A._Parser_handleExtendedOperations(parser, t1);
            break;
            case 42:
            t3 = parser.u;
            t1.push(A._Universe__lookupStarRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
            break;
            case 63:
            t3 = parser.u;
            t1.push(A._Universe__lookupQuestionRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
            break;
            case 47:
            t3 = parser.u;
            t1.push(A._Universe__lookupFutureOrRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
            break;
            case 40:
            t1.push(-3);
            t1.push(parser.p);
            parser.p = t1.length;
            break;
            case 41:
            A._Parser_handleArguments(parser, t1);
            break;
            case 91:
            t1.push(parser.p);
            parser.p = t1.length;
            break;
            case 93:
            array = t1.splice(parser.p);
            A._Parser_toTypes(parser.u, parser.e, array);
            parser.p = t1.pop();
            t1.push(array);
            t1.push(-1);
            break;
            case 123:
            t1.push(parser.p);
            parser.p = t1.length;
            break;
            case 125:
            array = t1.splice(parser.p);
            A._Parser_toTypesNamed(parser.u, parser.e, array);
            parser.p = t1.pop();
            t1.push(array);
            t1.push(-2);
            break;
            case 43:
            end = source.indexOf("(", i);
            t1.push(source.substring(i, end));
            t1.push(-4);
            t1.push(parser.p);
            parser.p = t1.length;
            i = end + 1;
            break;
            default:
            throw "Bad character " + ch;
        }
        }
    }
    item = t1.pop();
    return A._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit(i, digit, source, stack) {
    var t1, ch,
        value = digit - 48;
    for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
        break;
        value = value * 10 + (ch - 48);
    }
    stack.push(value);
    return i;
    },
    _Parser_handleIdentifier(parser, start, source, stack, hasPeriod) {
    var t1, ch, t2, string, environment, recipe,
        i = start + 1;
    for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
        if (hasPeriod)
            break;
        hasPeriod = true;
        } else {
        if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124))
            t2 = ch >= 48 && ch <= 57;
        else
            t2 = true;
        if (!t2)
            break;
        }
    }
    string = source.substring(start, i);
    if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 10)
        environment = environment._primary;
        recipe = A._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
        A.throwExpression('No "' + string + '" in "' + A.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(A._Universe_evalInEnvironment(t1, environment, recipe));
    } else
        stack.push(string);
    return i;
    },
    _Parser_handleArguments(parser, stack) {
    var optionalPositional, named, requiredPositional, returnType, parameters, _null = null,
        t1 = parser.u,
        head = stack.pop();
    if (typeof head == "number")
        switch (head) {
        case -1:
            optionalPositional = stack.pop();
            named = _null;
            break;
        case -2:
            named = stack.pop();
            optionalPositional = _null;
            break;
        default:
            stack.push(head);
            named = _null;
            optionalPositional = named;
            break;
        }
    else {
        stack.push(head);
        named = _null;
        optionalPositional = named;
    }
    requiredPositional = A._Parser_collectArray(parser, stack);
    head = stack.pop();
    switch (head) {
        case -3:
        head = stack.pop();
        if (optionalPositional == null)
            optionalPositional = t1.sEA;
        if (named == null)
            named = t1.sEA;
        returnType = A._Parser_toType(t1, parser.e, head);
        parameters = new A._FunctionParameters();
        parameters._requiredPositional = requiredPositional;
        parameters._optionalPositional = optionalPositional;
        parameters._named = named;
        stack.push(A._Universe__lookupFunctionRti(t1, returnType, parameters));
        return;
        case -4:
        stack.push(A._Universe__lookupRecordRti(t1, stack.pop(), requiredPositional));
        return;
        default:
        throw A.wrapException(A.AssertionError$("Unexpected state under `()`: " + A.S(head)));
    }
    },
    _Parser_handleExtendedOperations(parser, stack) {
    var $top = stack.pop();
    if (0 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
    }
    if (1 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
    }
    throw A.wrapException(A.AssertionError$("Unexpected extended operation " + A.S($top)));
    },
    _Parser_collectArray(parser, stack) {
    var array = stack.splice(parser.p);
    A._Parser_toTypes(parser.u, parser.e, array);
    parser.p = stack.pop();
    return array;
    },
    _Parser_toType(universe, environment, item) {
    if (typeof item == "string")
        return A._Universe__lookupInterfaceRti(universe, item, universe.sEA);
    else if (typeof item == "number") {
        environment.toString;
        return A._Parser_indexToType(universe, environment, item);
    } else
        return item;
    },
    _Parser_toTypes(universe, environment, items) {
    var i,
        $length = items.length;
    for (i = 0; i < $length; ++i)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed(universe, environment, items) {
    var i,
        $length = items.length;
    for (i = 2; i < $length; i += 3)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType(universe, environment, index) {
    var typeArguments, len,
        kind = environment._kind;
    if (kind === 10) {
        if (index === 0)
        return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
        return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
    } else if (index === 0)
        return environment;
    if (kind !== 9)
        throw A.wrapException(A.AssertionError$("Indexed base must be an interface type"));
    typeArguments = environment._rest;
    if (index <= typeArguments.length)
        return typeArguments[index - 1];
    throw A.wrapException(A.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    _isSubtype(universe, s, sEnv, t, tEnv) {
    var t1, sKind, leftTypeVariable, tKind, sBounds, tBounds, sLength, i, sBound, tBound;
    if (s === t)
        return true;
    if (!A.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
        t1 = false;
        else
        t1 = true;
    else
        t1 = true;
    if (t1)
        return true;
    sKind = s._kind;
    if (sKind === 4)
        return true;
    if (A.isStrongTopType(s))
        return false;
    if (s._kind !== 1)
        t1 = false;
    else
        t1 = true;
    if (t1)
        return true;
    leftTypeVariable = sKind === 14;
    if (leftTypeVariable)
        if (A._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv))
        return true;
    tKind = t._kind;
    t1 = s === type$.Null || s === type$.JSNull;
    if (t1) {
        if (tKind === 8)
        return A._isSubtype(universe, s, sEnv, t._primary, tEnv);
        return t === type$.Null || t === type$.JSNull || tKind === 7 || tKind === 6;
    }
    if (t === type$.Object) {
        if (sKind === 8)
        return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
        if (sKind === 6)
        return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
        return sKind !== 7;
    }
    if (sKind === 6)
        return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
    if (tKind === 6) {
        t1 = A.Rti__getQuestionFromStar(universe, t);
        return A._isSubtype(universe, s, sEnv, t1, tEnv);
    }
    if (sKind === 8) {
        if (!A._isSubtype(universe, s._primary, sEnv, t, tEnv))
        return false;
        return A._isSubtype(universe, A.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv);
    }
    if (sKind === 7) {
        t1 = A._isSubtype(universe, type$.Null, sEnv, t, tEnv);
        return t1 && A._isSubtype(universe, s._primary, sEnv, t, tEnv);
    }
    if (tKind === 8) {
        if (A._isSubtype(universe, s, sEnv, t._primary, tEnv))
        return true;
        return A._isSubtype(universe, s, sEnv, A.Rti__getFutureFromFutureOr(universe, t), tEnv);
    }
    if (tKind === 7) {
        t1 = A._isSubtype(universe, s, sEnv, type$.Null, tEnv);
        return t1 || A._isSubtype(universe, s, sEnv, t._primary, tEnv);
    }
    if (leftTypeVariable)
        return false;
    t1 = sKind !== 12;
    if ((!t1 || sKind === 13) && t === type$.Function)
        return true;
    if (tKind === 13) {
        if (s === type$.JavaScriptFunction)
        return true;
        if (sKind !== 13)
        return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
        return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
        sBound = sBounds[i];
        tBound = tBounds[i];
        if (!A._isSubtype(universe, sBound, sEnv, tBound, tEnv) || !A._isSubtype(universe, tBound, tEnv, sBound, sEnv))
            return false;
        }
        return A._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv);
    }
    if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
        return true;
        if (t1)
        return false;
        return A._isFunctionSubtype(universe, s, sEnv, t, tEnv);
    }
    if (sKind === 9) {
        if (tKind !== 9)
        return false;
        return A._isInterfaceSubtype(universe, s, sEnv, t, tEnv);
    }
    t1 = sKind === 11;
    if (t1 && t === type$.Record)
        return true;
    if (t1 && tKind === 11)
        return A._isRecordSubtype(universe, s, sEnv, t, tEnv);
    return false;
    },
    _isFunctionSubtype(universe, s, sEnv, t, tEnv) {
    var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired;
    if (!A._isSubtype(universe, s._primary, sEnv, t._primary, tEnv))
        return false;
    sParameters = s._rest;
    tParameters = t._rest;
    sRequiredPositional = sParameters._requiredPositional;
    tRequiredPositional = tParameters._requiredPositional;
    sRequiredPositionalLength = sRequiredPositional.length;
    tRequiredPositionalLength = tRequiredPositional.length;
    if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
    requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
    sOptionalPositional = sParameters._optionalPositional;
    tOptionalPositional = tParameters._optionalPositional;
    sOptionalPositionalLength = sOptionalPositional.length;
    tOptionalPositionalLength = tOptionalPositional.length;
    if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
    for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv))
        return false;
    }
    for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv))
        return false;
    }
    for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!A._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv))
        return false;
    }
    sNamed = sParameters._named;
    tNamed = tParameters._named;
    sNamedLength = sNamed.length;
    tNamedLength = tNamed.length;
    for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
        if (sIndex >= sNamedLength)
            return false;
        sName = sNamed[sIndex];
        sIndex += 3;
        if (tName < sName)
            return false;
        sIsRequired = sNamed[sIndex - 2];
        if (sName < tName) {
            if (sIsRequired)
            return false;
            continue;
        }
        t1 = tNamed[tIndex + 1];
        if (sIsRequired && !t1)
            return false;
        t1 = sNamed[sIndex - 1];
        if (!A._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv))
            return false;
        break;
        }
    }
    for (; sIndex < sNamedLength;) {
        if (sNamed[sIndex + 1])
        return false;
        sIndex += 3;
    }
    return true;
    },
    _isInterfaceSubtype(universe, s, sEnv, t, tEnv) {
    var rule, recipes, $length, supertypeArgs, i, t1, t2,
        sName = s._primary,
        tName = t._primary;
    for (; sName !== tName;) {
        rule = universe.tR[sName];
        if (rule == null)
        return false;
        if (typeof rule == "string") {
        sName = rule;
        continue;
        }
        recipes = rule[tName];
        if (recipes == null)
        return false;
        $length = recipes.length;
        supertypeArgs = $length > 0 ? new Array($length) : init.typeUniverse.sEA;
        for (i = 0; i < $length; ++i)
        supertypeArgs[i] = A._Universe_evalInEnvironment(universe, s, recipes[i]);
        return A._areArgumentsSubtypes(universe, supertypeArgs, null, sEnv, t._rest, tEnv);
    }
    t1 = s._rest;
    t2 = t._rest;
    return A._areArgumentsSubtypes(universe, t1, null, sEnv, t2, tEnv);
    },
    _areArgumentsSubtypes(universe, sArgs, sVariances, sEnv, tArgs, tEnv) {
    var i, t1, t2,
        $length = sArgs.length;
    for (i = 0; i < $length; ++i) {
        t1 = sArgs[i];
        t2 = tArgs[i];
        if (!A._isSubtype(universe, t1, sEnv, t2, tEnv))
        return false;
    }
    return true;
    },
    _isRecordSubtype(universe, s, sEnv, t, tEnv) {
    var i,
        sFields = s._rest,
        tFields = t._rest,
        sCount = sFields.length;
    if (sCount !== tFields.length)
        return false;
    if (s._primary !== t._primary)
        return false;
    for (i = 0; i < sCount; ++i)
        if (!A._isSubtype(universe, sFields[i], sEnv, tFields[i], tEnv))
        return false;
    return true;
    },
    isNullable(t) {
    var t1,
        kind = t._kind;
    if (!(t === type$.Null || t === type$.JSNull))
        if (!A.isStrongTopType(t))
        if (kind !== 7)
            if (!(kind === 6 && A.isNullable(t._primary)))
            t1 = kind === 8 && A.isNullable(t._primary);
            else
            t1 = true;
        else
            t1 = true;
        else
        t1 = true;
    else
        t1 = true;
    return t1;
    },
    isTopType(t) {
    var t1;
    if (!A.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
        t1 = false;
        else
        t1 = true;
    else
        t1 = true;
    return t1;
    },
    isStrongTopType(t) {
    var kind = t._kind;
    return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign(o, other) {
    var i, key,
        keys = Object.keys(other),
        $length = keys.length;
    for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
    }
    },
    _Utils_newArrayOrEmpty($length) {
    return $length > 0 ? new Array($length) : init.typeUniverse.sEA;
    },
    Rti: function Rti(t0, t1) {
    var _ = this;
    _._as = t0;
    _._is = t1;
    _._cachedRuntimeType = _._specializedTestResource = _._precomputed1 = null;
    _._kind = 0;
    _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
    this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Type: function _Type(t0) {
    this._rti = t0;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
    this.__rti$_message = t0;
    },
    _AsyncRun__initializeScheduleImmediate() {
    var div, span, t1 = {};
    if (self.scheduleImmediate != null)
        return A.async__AsyncRun__scheduleImmediateJsOverride$closure();
    if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(A.convertDartClosureToJS(new A._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new A._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
    } else if (self.setImmediate != null)
        return A.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
    return A.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride(callback) {
    self.scheduleImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateJsOverride_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate(callback) {
    self.setImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer(callback) {
    type$.void_Function._as(callback);
    A._TimerImpl$(0, callback);
    },
    _TimerImpl$(milliseconds, callback) {
    var t1 = new A._TimerImpl();
    t1._TimerImpl$2(milliseconds, callback);
    return t1;
    },
    _makeAsyncAwaitCompleter($T) {
    return new A._AsyncAwaitCompleter(new A._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncAwaitCompleter<0>"));
    },
    _asyncStartSync(bodyFunction, completer) {
    bodyFunction.call$2(0, null);
    completer.isSync = true;
    return completer._future;
    },
    _asyncAwait(object, bodyFunction) {
    A._awaitOnObject(object, bodyFunction);
    },
    _asyncReturn(object, completer) {
    var value, t2,
        t1 = completer.$ti;
    t1._eval$1("1/?")._as(object);
    if (object == null) {
        t1._precomputed1._as(object);
        value = object;
    } else
        value = object;
    if (!completer.isSync)
        completer._future._asyncComplete$1(value);
    else {
        t2 = completer._future;
        if (t1._eval$1("Future<1>")._is(value))
        t2._chainFuture$1(value);
        else
        t2._completeWithValue$1(t1._precomputed1._as(value));
    }
    },
    _asyncRethrow(object, completer) {
    var t1 = A.unwrapException(object),
        st = A.getTraceFromException(object),
        t2 = completer.isSync,
        t3 = completer._future;
    if (t2)
        t3._completeError$2(t1, st);
    else
        t3._asyncCompleteError$2(t1, st);
    },
    _awaitOnObject(object, bodyFunction) {
    var t1, future,
        thenCallback = new A._awaitOnObject_closure(bodyFunction),
        errorCallback = new A._awaitOnObject_closure0(bodyFunction);
    if (object instanceof A._Future)
        object._thenAwait$1$2(thenCallback, errorCallback, type$.dynamic);
    else {
        t1 = type$.dynamic;
        if (type$.Future_dynamic._is(object))
        object.then$1$2$onError(thenCallback, errorCallback, t1);
        else {
        future = new A._Future($.Zone__current, type$._Future_dynamic);
        future._state = 8;
        future._resultOrListeners = object;
        future._thenAwait$1$2(thenCallback, errorCallback, t1);
        }
    }
    },
    _wrapJsFunctionForAsync($function) {
    var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
        while (true)
            try {
            fn(errorCode, result);
            break;
            } catch (error) {
            result = error;
            errorCode = ERROR;
            }
        };
    }($function, 1);
    return $.Zone__current.registerBinaryCallback$3$1(new A._wrapJsFunctionForAsync_closure($protected), type$.void, type$.int, type$.dynamic);
    },
    AsyncError$(error, stackTrace) {
    var t1 = A.checkNotNullable(error, "error", type$.Object);
    return new A.AsyncError(t1, stackTrace == null ? A.AsyncError_defaultStackTrace(error) : stackTrace);
    },
    AsyncError_defaultStackTrace(error) {
    var stackTrace;
    if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
        return stackTrace;
    }
    return B.C__StringStackTrace;
    },
    Future_Future$value(value, $T) {
    var t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
    t1._asyncComplete$1(value);
    return t1;
    },
    Future_Future$error(error, $T) {
    var stackTrace, t1;
    A.checkNotNullable(error, "error", type$.Object);
    $.Zone__current !== B.C__RootZone;
    stackTrace = A.AsyncError_defaultStackTrace(error);
    t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
    t1._asyncCompleteError$2(error, stackTrace);
    return t1;
    },
    _Future__chainCoreFuture(source, target) {
    var t1, t2, listeners;
    for (t1 = type$._Future_dynamic; t2 = source._state, (t2 & 4) !== 0;)
        source = t1._as(source._resultOrListeners);
    if ((t2 & 24) !== 0) {
        listeners = target._removeListeners$0();
        target._cloneResult$1(source);
        A._Future__propagateToListeners(target, listeners);
    } else {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._state = target._state & 1 | 4;
        target._resultOrListeners = source;
        source._prependListeners$1(listeners);
    }
    },
    _Future__propagateToListeners(source, listeners) {
    var t2, t3, t4, _box_0, t5, t6, hasError, asyncError, nextListener, nextListener0, sourceResult, t7, zone, oldZone, result, current, _box_1 = {},
        t1 = _box_1.source = source;
    for (t2 = type$.AsyncError, t3 = type$.nullable__FutureListener_dynamic_dynamic, t4 = type$.Future_dynamic; true;) {
        _box_0 = {};
        t5 = t1._state;
        t6 = (t5 & 16) === 0;
        hasError = !t6;
        if (listeners == null) {
        if (hasError && (t5 & 1) === 0) {
            asyncError = t2._as(t1._resultOrListeners);
            A._rootHandleError(asyncError.error, asyncError.stackTrace);
        }
        return;
        }
        _box_0.listener = listeners;
        nextListener = listeners._nextListener;
        for (t1 = listeners; nextListener != null; t1 = nextListener, nextListener = nextListener0) {
        t1._nextListener = null;
        A._Future__propagateToListeners(_box_1.source, t1);
        _box_0.listener = nextListener;
        nextListener0 = nextListener._nextListener;
        }
        t5 = _box_1.source;
        sourceResult = t5._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        if (t6) {
        t7 = t1.state;
        t7 = (t7 & 1) !== 0 || (t7 & 15) === 8;
        } else
        t7 = true;
        if (t7) {
        zone = t1.result._zone;
        if (hasError) {
            t5 = t5._zone === zone;
            t5 = !(t5 || t5);
        } else
            t5 = false;
        if (t5) {
            t2._as(sourceResult);
            A._rootHandleError(sourceResult.error, sourceResult.stackTrace);
            return;
        }
        oldZone = $.Zone__current;
        if (oldZone !== zone)
            $.Zone__current = zone;
        else
            oldZone = null;
        t1 = t1.state;
        if ((t1 & 15) === 8)
            new A._Future__propagateToListeners_handleWhenCompleteCallback(_box_0, _box_1, hasError).call$0();
        else if (t6) {
            if ((t1 & 1) !== 0)
            new A._Future__propagateToListeners_handleValueCallback(_box_0, sourceResult).call$0();
        } else if ((t1 & 2) !== 0)
            new A._Future__propagateToListeners_handleError(_box_1, _box_0).call$0();
        if (oldZone != null)
            $.Zone__current = oldZone;
        t1 = _box_0.listenerValueOrError;
        if (t4._is(t1)) {
            t5 = _box_0.listener.$ti;
            t5 = t5._eval$1("Future<2>")._is(t1) || !t5._rest[1]._is(t1);
        } else
            t5 = false;
        if (t5) {
            t4._as(t1);
            result = _box_0.listener.result;
            if ((t1._state & 24) !== 0) {
            current = t3._as(result._resultOrListeners);
            result._resultOrListeners = null;
            listeners = result._reverseListeners$1(current);
            result._state = t1._state & 30 | result._state & 1;
            result._resultOrListeners = t1._resultOrListeners;
            _box_1.source = t1;
            continue;
            } else
            A._Future__chainCoreFuture(t1, result);
            return;
        }
        }
        result = _box_0.listener.result;
        current = t3._as(result._resultOrListeners);
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t5 = _box_0.listenerValueOrError;
        if (!t1) {
        result.$ti._precomputed1._as(t5);
        result._state = 8;
        result._resultOrListeners = t5;
        } else {
        t2._as(t5);
        result._state = result._state & 1 | 16;
        result._resultOrListeners = t5;
        }
        _box_1.source = result;
        t1 = result;
    }
    },
    _registerErrorHandler(errorHandler, zone) {
    var t1;
    if (type$.dynamic_Function_Object_StackTrace._is(errorHandler))
        return zone.registerBinaryCallback$3$1(errorHandler, type$.dynamic, type$.Object, type$.StackTrace);
    t1 = type$.dynamic_Function_Object;
    if (t1._is(errorHandler))
        return t1._as(errorHandler);
    throw A.wrapException(A.ArgumentError$value(errorHandler, "onError", string$.Error_));
    },
    _microtaskLoop() {
    var entry, next;
    for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
        $._lastCallback = null;
        entry.callback.call$0();
    }
    },
    _startMicrotaskLoop() {
    $._isInCallbackLoop = true;
    try {
        A._microtaskLoop();
    } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
        $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
    }
    },
    _scheduleAsyncCallback(callback) {
    var newEntry = new A._AsyncCallbackEntry(callback),
        lastCallback = $._lastCallback;
    if (lastCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
        $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
    } else
        $._lastCallback = lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback(callback) {
    var entry, lastPriorityCallback, next,
        t1 = $._nextCallback;
    if (t1 == null) {
        A._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
    }
    entry = new A._AsyncCallbackEntry(callback);
    lastPriorityCallback = $._lastPriorityCallback;
    if (lastPriorityCallback == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
    } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
        $._lastCallback = entry;
    }
    },
    scheduleMicrotask(callback) {
    var t1, _null = null,
        currentZone = $.Zone__current;
    if (B.C__RootZone === currentZone) {
        A._rootScheduleMicrotask(_null, _null, B.C__RootZone, callback);
        return;
    }
    t1 = false;
    if (t1) {
        A._rootScheduleMicrotask(_null, _null, currentZone, type$.void_Function._as(callback));
        return;
    }
    A._rootScheduleMicrotask(_null, _null, currentZone, type$.void_Function._as(currentZone.bindCallbackGuarded$1(callback)));
    },
    StreamIterator_StreamIterator(stream, $T) {
    A.checkNotNullable(stream, "stream", type$.Object);
    return new A._StreamIterator($T._eval$1("_StreamIterator<0>"));
    },
    _rootHandleError(error, stackTrace) {
    A._schedulePriorityAsyncCallback(new A._rootHandleError_closure(error, stackTrace));
    },
    _rootRun($self, $parent, zone, f, $R) {
    var old,
        t1 = $.Zone__current;
    if (t1 === zone)
        return f.call$0();
    $.Zone__current = zone;
    old = t1;
    try {
        t1 = f.call$0();
        return t1;
    } finally {
        $.Zone__current = old;
    }
    },
    _rootRunUnary($self, $parent, zone, f, arg, $R, $T) {
    var old,
        t1 = $.Zone__current;
    if (t1 === zone)
        return f.call$1(arg);
    $.Zone__current = zone;
    old = t1;
    try {
        t1 = f.call$1(arg);
        return t1;
    } finally {
        $.Zone__current = old;
    }
    },
    _rootRunBinary($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
    var old,
        t1 = $.Zone__current;
    if (t1 === zone)
        return f.call$2(arg1, arg2);
    $.Zone__current = zone;
    old = t1;
    try {
        t1 = f.call$2(arg1, arg2);
        return t1;
    } finally {
        $.Zone__current = old;
    }
    },
    _rootScheduleMicrotask($self, $parent, zone, f) {
    type$.void_Function._as(f);
    if (B.C__RootZone !== zone)
        f = zone.bindCallbackGuarded$1(f);
    A._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
    this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
    this._box_0 = t0;
    this.div = t1;
    this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
    this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
    this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
    this.$this = t0;
    this.callback = t1;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
    this._future = t0;
    this.isSync = false;
    this.$ti = t1;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
    this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
    this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
    this.$protected = t0;
    },
    AsyncError: function AsyncError(t0, t1) {
    this.error = t0;
    this.stackTrace = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
    var _ = this;
    _._nextListener = null;
    _.result = t0;
    _.state = t1;
    _.callback = t2;
    _.errorCallback = t3;
    _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
    var _ = this;
    _._state = 0;
    _._zone = t0;
    _._resultOrListeners = null;
    _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
    this.$this = t0;
    this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
    this._box_0 = t0;
    this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
    this.$this = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
    this.$this = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
    this.$this = t0;
    this.e = t1;
    this.s = t2;
    },
    _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(t0, t1) {
    this.$this = t0;
    this.value = t1;
    },
    _Future__chainFuture_closure: function _Future__chainFuture_closure(t0, t1) {
    this.$this = t0;
    this.value = t1;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2) {
    this.$this = t0;
    this.error = t1;
    this.stackTrace = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2) {
    this._box_0 = t0;
    this._box_1 = t1;
    this.hasError = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
    this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1) {
    this._box_0 = t0;
    this.sourceResult = t1;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1) {
    this._box_1 = t0;
    this._box_0 = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
    this.callback = t0;
    this.next = null;
    },
    StreamTransformerBase: function StreamTransformerBase() {
    },
    _StreamIterator: function _StreamIterator(t0) {
    this.$ti = t0;
    },
    _Zone: function _Zone() {
    },
    _rootHandleError_closure: function _rootHandleError_closure(t0, t1) {
    this.error = t0;
    this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
    this.$this = t0;
    this.f = t1;
    },
    LinkedHashMap_LinkedHashMap(hashCode, isValidKey, $K, $V) {
    var equals;
    if (isValidKey == null) {
        if (hashCode == null)
        return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
        equals = A.collection___defaultEquals$closure();
    } else {
        if (hashCode == null)
        hashCode = A.collection___defaultHashCode$closure();
        equals = A.collection___defaultEquals$closure();
    }
    return A._LinkedCustomHashMap$(equals, hashCode, isValidKey, $K, $V);
    },
    LinkedHashMap_LinkedHashMap$_literal(keyValuePairs, $K, $V) {
    return $K._eval$1("@<0>")._bind$1($V)._eval$1("LinkedHashMap<1,2>")._as(A.fillLiteralMap(keyValuePairs, new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"))));
    },
    LinkedHashMap_LinkedHashMap$_empty($K, $V) {
    return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    _LinkedCustomHashMap$(_equals, _hashCode, validKey, $K, $V) {
    var t1 = validKey != null ? validKey : new A._LinkedCustomHashMap_closure($K);
    return new A._LinkedCustomHashMap(_equals, _hashCode, t1, $K._eval$1("@<0>")._bind$1($V)._eval$1("_LinkedCustomHashMap<1,2>"));
    },
    _defaultEquals(a, b) {
    return J.$eq$(a, b);
    },
    _defaultHashCode(a) {
    return J.get$hashCode$(a);
    },
    IterableBase_iterableToShortString(iterable, leftDelimiter, rightDelimiter) {
    var parts, t1;
    if (A._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
        return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
    }
    parts = A._setArrayType([], type$.JSArray_String);
    B.JSArray_methods.add$1($._toStringVisiting, iterable);
    try {
        A._iterablePartsToStrings(iterable, parts);
    } finally {
        if (0 >= $._toStringVisiting.length)
        return A.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
    }
    t1 = A.StringBuffer__writeAll(leftDelimiter, type$.Iterable_dynamic._as(parts), ", ") + rightDelimiter;
    return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString(iterable, leftDelimiter, rightDelimiter) {
    var buffer, t1;
    if (A._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
    buffer = new A.StringBuffer(leftDelimiter);
    B.JSArray_methods.add$1($._toStringVisiting, iterable);
    try {
        t1 = buffer;
        t1._contents = A.StringBuffer__writeAll(t1._contents, iterable, ", ");
    } finally {
        if (0 >= $._toStringVisiting.length)
        return A.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
    }
    buffer._contents += rightDelimiter;
    t1 = buffer._contents;
    return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting(o) {
    var t1, i;
    for (t1 = $._toStringVisiting.length, i = 0; i < t1; ++i)
        if (o === $._toStringVisiting[i])
        return true;
    return false;
    },
    _iterablePartsToStrings(iterable, parts) {
    var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = iterable.get$iterator(iterable),
        $length = 0, count = 0;
    while (true) {
        if (!($length < 80 || count < 3))
        break;
        if (!it.moveNext$0())
        return;
        next = A.S(it.get$current());
        B.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
    }
    if (!it.moveNext$0()) {
        if (count <= 5)
        return;
        if (0 >= parts.length)
        return A.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
        return A.ioore(parts, -1);
        penultimateString = parts.pop();
    } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
        if (count <= 4) {
            B.JSArray_methods.add$1(parts, A.S(penultimate));
            return;
        }
        ultimateString = A.S(penultimate);
        if (0 >= parts.length)
            return A.ioore(parts, -1);
        penultimateString = parts.pop();
        $length += ultimateString.length + 2;
        } else {
        ultimate = it.get$current();
        ++count;
        for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
            while (true) {
                if (!($length > 75 && count > 3))
                break;
                if (0 >= parts.length)
                return A.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
            }
            B.JSArray_methods.add$1(parts, "...");
            return;
            }
        }
        penultimateString = A.S(penultimate);
        ultimateString = A.S(ultimate);
        $length += ultimateString.length + penultimateString.length + 4;
        }
    }
    if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
    } else
        elision = null;
    while (true) {
        if (!($length > 80 && parts.length > 3))
        break;
        if (0 >= parts.length)
        return A.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
        $length += 5;
        elision = "...";
        }
    }
    if (elision != null)
        B.JSArray_methods.add$1(parts, elision);
    B.JSArray_methods.add$1(parts, penultimateString);
    B.JSArray_methods.add$1(parts, ultimateString);
    },
    LinkedHashMap_LinkedHashMap$from(other, $K, $V) {
    var result = A.LinkedHashMap_LinkedHashMap(null, null, $K, $V);
    other.forEach$1(0, new A.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
    return result;
    },
    MapBase_mapToString(m) {
    var result, t1 = {};
    if (A._isToStringVisiting(m))
        return "{...}";
    result = new A.StringBuffer("");
    try {
        B.JSArray_methods.add$1($._toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        m.forEach$1(0, new A.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
    } finally {
        if (0 >= $._toStringVisiting.length)
        return A.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
    }
    t1 = result._contents;
    return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _LinkedCustomHashMap: function _LinkedCustomHashMap(t0, t1, t2, t3) {
    var _ = this;
    _._equals = t0;
    _._hashCode = t1;
    _._validKey = t2;
    _.__js_helper$_length = 0;
    _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
    _._modifications = 0;
    _.$ti = t3;
    },
    _LinkedCustomHashMap_closure: function _LinkedCustomHashMap_closure(t0) {
    this.K = t0;
    },
    LinkedHashMap_LinkedHashMap$from_closure: function LinkedHashMap_LinkedHashMap$from_closure(t0, t1, t2) {
    this.result = t0;
    this.K = t1;
    this.V = t2;
    },
    ListBase: function ListBase() {
    },
    ListMixin: function ListMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
    this._box_0 = t0;
    this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    _ListBase_Object_ListMixin: function _ListBase_Object_ListMixin() {
    },
    Utf8Decoder__convertIntercepted(allowMalformed, codeUnits, start, end) {
    var casted, result;
    if (codeUnits instanceof Uint8Array) {
        casted = codeUnits;
        end = casted.length;
        if (end - start < 15)
        return null;
        result = A.Utf8Decoder__convertInterceptedUint8List(allowMalformed, casted, start, end);
        if (result != null && allowMalformed)
        if (result.indexOf("\ufffd") >= 0)
            return null;
        return result;
    }
    return null;
    },
    Utf8Decoder__convertInterceptedUint8List(allowMalformed, codeUnits, start, end) {
    var decoder = allowMalformed ? $.$get$Utf8Decoder__decoderNonfatal() : $.$get$Utf8Decoder__decoder();
    if (decoder == null)
        return null;
    if (0 === start && end === codeUnits.length)
        return A.Utf8Decoder__useTextDecoder(decoder, codeUnits);
    return A.Utf8Decoder__useTextDecoder(decoder, codeUnits.subarray(start, A.RangeError_checkValidRange(start, end, codeUnits.length)));
    },
    Utf8Decoder__useTextDecoder(decoder, codeUnits) {
    var t1, exception;
    try {
        t1 = decoder.decode(codeUnits);
        return t1;
    } catch (exception) {
    }
    return null;
    },
    _Utf8Decoder_errorDescription(state) {
    switch (state) {
        case 65:
        return "Missing extension byte";
        case 67:
        return "Unexpected extension byte";
        case 69:
        return "Invalid UTF-8 byte";
        case 71:
        return "Overlong encoding";
        case 73:
        return "Out of unicode range";
        case 75:
        return "Encoded surrogate";
        case 77:
        return "Unfinished UTF-8 octet sequence";
        default:
        return "";
    }
    },
    _Utf8Decoder__makeUint8List(codeUnits, start, end) {
    var t1, i, t2, b,
        $length = end - start,
        bytes = new Uint8Array($length);
    for (t1 = codeUnits.length, i = 0; i < $length; ++i) {
        t2 = start + i;
        if (!(t2 < t1))
        return A.ioore(codeUnits, t2);
        b = codeUnits[t2];
        if ((b & 4294967040) >>> 0 !== 0)
        b = 255;
        if (!(i < $length))
        return A.ioore(bytes, i);
        bytes[i] = b;
    }
    return bytes;
    },
    Utf8Decoder__decoder_closure: function Utf8Decoder__decoder_closure() {
    },
    Utf8Decoder__decoderNonfatal_closure: function Utf8Decoder__decoderNonfatal_closure() {
    },
    _UnicodeSubsetEncoder: function _UnicodeSubsetEncoder() {
    },
    _UnicodeSubsetDecoder: function _UnicodeSubsetDecoder() {
    },
    Codec: function Codec() {
    },
    Converter: function Converter() {
    },
    Encoding: function Encoding() {
    },
    Latin1Codec: function Latin1Codec() {
    },
    Latin1Encoder: function Latin1Encoder() {
    },
    Latin1Decoder: function Latin1Decoder(t0) {
    this._allowInvalid = t0;
    },
    Utf8Codec: function Utf8Codec() {
    },
    Utf8Encoder: function Utf8Encoder() {
    },
    _Utf8Encoder: function _Utf8Encoder(t0) {
    this._bufferIndex = 0;
    this._buffer = t0;
    },
    Utf8Decoder: function Utf8Decoder(t0) {
    this._allowMalformed = t0;
    },
    _Utf8Decoder: function _Utf8Decoder(t0) {
    this.allowMalformed = t0;
    this._convert$_state = 16;
    this._charOrIndex = 0;
    },
    Error__objectToString(object) {
    if (object instanceof A.Closure)
        return object.toString$0(0);
    return "Instance of '" + A.Primitives_objectTypeName(object) + "'";
    },
    Error__throw(error, stackTrace) {
    error = A.wrapException(error);
    if (error == null)
        error = type$.Object._as(error);
    error.stack = stackTrace.toString$0(0);
    throw error;
    throw A.wrapException("unreachable");
    },
    Stopwatch__now() {
    return $.Primitives_timerTicks.call$0();
    },
    List_List$filled($length, fill, growable, $E) {
    var i,
        result = J.JSArray_JSArray$fixed($length, $E);
    if ($length !== 0 && fill != null)
        for (i = 0; i < $length; ++i)
        result[i] = fill;
    return result;
    },
    List_List$from(elements, $E) {
    var t1,
        list = A._setArrayType([], $E._eval$1("JSArray<0>"));
    for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, $E._as(t1.get$current()));
    return list;
    },
    List_List$of(elements, growable, $E) {
    var t1;
    if (growable)
        return A.List_List$_of(elements, $E);
    t1 = J.JSArray_markFixedList(A.List_List$_of(elements, $E), $E);
    return t1;
    },
    List_List$_of(elements, $E) {
    var t1,
        list = A._setArrayType([], $E._eval$1("JSArray<0>"));
    for (t1 = elements.get$iterator(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, t1.get$current());
    return list;
    },
    List_List$generate($length, generator, $E) {
    var i,
        result = J.JSArray_JSArray$growable($length, $E);
    for (i = 0; i < $length; ++i)
        B.JSArray_methods.$indexSet(result, i, generator.call$1(i));
    return result;
    },
    String_String$fromCharCodes(charCodes, start, end) {
    var array, len;
    if (Array.isArray(charCodes)) {
        array = charCodes;
        len = array.length;
        end = A.RangeError_checkValidRange(start, end, len);
        return A.Primitives_stringFromCharCodes(start > 0 || end < len ? array.slice(start, end) : array);
    }
    if (type$.NativeUint8List._is(charCodes))
        return A.Primitives_stringFromNativeUint8List(charCodes, start, A.RangeError_checkValidRange(start, end, charCodes.length));
    return A.String__stringFromIterable(charCodes, start, end);
    },
    String__stringFromIterable(charCodes, start, end) {
    var t1, it, i, list, _null = null;
    if (start < 0)
        throw A.wrapException(A.RangeError$range(start, 0, charCodes.length, _null, _null));
    t1 = end == null;
    if (!t1 && end < start)
        throw A.wrapException(A.RangeError$range(end, start, charCodes.length, _null, _null));
    it = J.get$iterator$ax(charCodes);
    for (i = 0; i < start; ++i)
        if (!it.moveNext$0())
        throw A.wrapException(A.RangeError$range(start, 0, i, _null, _null));
    list = [];
    if (t1)
        for (; it.moveNext$0();)
        list.push(it.get$current());
    else
        for (i = start; i < end; ++i) {
        if (!it.moveNext$0())
            throw A.wrapException(A.RangeError$range(end, start, i, _null, _null));
        list.push(it.get$current());
        }
    return A.Primitives_stringFromCharCodes(list);
    },
    StringBuffer__writeAll(string, objects, separator) {
    var iterator = J.get$iterator$ax(objects);
    if (!iterator.moveNext$0())
        return string;
    if (separator.length === 0) {
        do
        string += A.S(iterator.get$current());
        while (iterator.moveNext$0());
    } else {
        string += A.S(iterator.get$current());
        for (; iterator.moveNext$0();)
        string = string + separator + A.S(iterator.get$current());
    }
    return string;
    },
    DateTime__fourDigits(n) {
    var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
    if (absN >= 1000)
        return "" + n;
    if (absN >= 100)
        return sign + "0" + absN;
    if (absN >= 10)
        return sign + "00" + absN;
    return sign + "000" + absN;
    },
    DateTime__threeDigits(n) {
    if (n >= 100)
        return "" + n;
    if (n >= 10)
        return "0" + n;
    return "00" + n;
    },
    DateTime__twoDigits(n) {
    if (n >= 10)
        return "" + n;
    return "0" + n;
    },
    Error_safeToString(object) {
    if (typeof object == "number" || A._isBool(object) || object == null)
        return J.toString$0$(object);
    if (typeof object == "string")
        return JSON.stringify(object);
    return A.Error__objectToString(object);
    },
    AssertionError$(message) {
    return new A.AssertionError(message);
    },
    ArgumentError$(message, $name) {
    return new A.ArgumentError(false, null, $name, message);
    },
    ArgumentError$value(value, $name, message) {
    return new A.ArgumentError(true, value, $name, message);
    },
    ArgumentError_checkNotNull(argument, $name, $T) {
    return argument;
    },
    RangeError$range(invalidValue, minValue, maxValue, $name, message) {
    return new A.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValidRange(start, end, $length) {
    if (0 > start || start > $length)
        throw A.wrapException(A.RangeError$range(start, 0, $length, "start", null));
    if (end != null) {
        if (start > end || end > $length)
        throw A.wrapException(A.RangeError$range(end, start, $length, "end", null));
        return end;
    }
    return $length;
    },
    RangeError_checkNotNegative(value, $name) {
    if (value < 0)
        throw A.wrapException(A.RangeError$range(value, 0, null, $name, null));
    return value;
    },
    IndexError$withLength(invalidValue, $length, indexable, $name) {
    return new A.IndexError($length, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$(message) {
    return new A.UnsupportedError(message);
    },
    UnimplementedError$(message) {
    return new A.UnimplementedError(message);
    },
    StateError$(message) {
    return new A.StateError(message);
    },
    ConcurrentModificationError$(modifiedObject) {
    return new A.ConcurrentModificationError(modifiedObject);
    },
    FormatException$(message, source, offset) {
    return new A.FormatException(message, source, offset);
    },
    Object_hash(object1, object2) {
    var t2,
        t1 = B.JSInt_methods.get$hashCode(object1);
    object2 = B.JSInt_methods.get$hashCode(object2);
    t2 = $.$get$_hashSeed();
    return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(t2, t1), object2));
    },
    Object_hashAll(objects) {
    var t1, _i,
        hash = $.$get$_hashSeed();
    for (t1 = objects.length, _i = 0; _i < objects.length; objects.length === t1 || (0, A.throwConcurrentModificationError)(objects), ++_i)
        hash = A.SystemHash_combine(hash, J.get$hashCode$(objects[_i]));
    return A.SystemHash_finish(hash);
    },
    print(object) {
    A.printString(object);
    },
    DateTime: function DateTime(t0, t1) {
    this._value = t0;
    this.isUtc = t1;
    },
    _Enum: function _Enum() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
    this.message = t0;
    },
    TypeError: function TypeError() {
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
    var _ = this;
    _._hasValue = t0;
    _.invalidValue = t1;
    _.name = t2;
    _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
    var _ = this;
    _.start = t0;
    _.end = t1;
    _._hasValue = t2;
    _.invalidValue = t3;
    _.name = t4;
    _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
    var _ = this;
    _.length = t0;
    _._hasValue = t1;
    _.invalidValue = t2;
    _.name = t3;
    _.message = t4;
    },
    UnsupportedError: function UnsupportedError(t0) {
    this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
    this.message = t0;
    },
    StateError: function StateError(t0) {
    this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
    this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
    this.variableName = t0;
    },
    _Exception: function _Exception(t0) {
    this.message = t0;
    },
    FormatException: function FormatException(t0, t1, t2) {
    this.message = t0;
    this.source = t1;
    this.offset = t2;
    },
    Iterable: function Iterable() {
    },
    Iterator: function Iterator() {
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    _StringStackTrace: function _StringStackTrace() {
    },
    Stopwatch: function Stopwatch() {
    this._stop = this._start = 0;
    },
    StringBuffer: function StringBuffer(t0) {
    this._contents = t0;
    },
    DomException: function DomException() {
    },
    _Namespace__namespacePointer() {
    throw A.wrapException(A.UnsupportedError$("_Namespace"));
    },
    _RandomAccessFileOps__RandomAccessFileOps(pointer) {
    throw A.wrapException(A.UnsupportedError$("RandomAccessFile"));
    },
    _Platform__operatingSystem() {
    throw A.wrapException(A.UnsupportedError$("Platform._operatingSystem"));
    },
    _checkForErrorResponse(response, message, path) {
    var t1;
    if (type$.List_nullable_Object._is(response) && !J.$eq$(J.$index$ax(response, 0), 0)) {
        t1 = J.getInterceptor$ax(response);
        switch (t1.$index(response, 0)) {
        case 1:
            throw A.wrapException(A.ArgumentError$(message + ": " + path, null));
        case 2:
            throw A.wrapException(A.FileSystemException_FileSystemException$_fromOSError(new A.OSError(A._asString(t1.$index(response, 2)), A._asInt(t1.$index(response, 1))), message, path));
        case 3:
            throw A.wrapException(A.FileSystemException$("File closed", path, null));
        default:
            throw A.wrapException(A.AssertionError$("Unknown error"));
        }
    }
    },
    _ensureFastAndSerializableByteData(buffer, start, end) {
    var $length, newBuffer,
        t1 = buffer.buffer.byteLength;
    if (t1 === buffer.length)
        return new A._BufferAndStart(buffer, start);
    $length = end - start;
    newBuffer = new Uint8Array($length);
    B.NativeUint8List_methods.setRange$4(newBuffer, 0, $length, buffer, start);
    return new A._BufferAndStart(newBuffer, 0);
    },
    File_File(path) {
    var t1;
    $.$get$_ioOverridesToken();
    A.ArgumentError_checkNotNull(path, "path", type$.String);
    t1 = A.FileSystemEntity__toNullTerminatedUtf8Array(B.C_Utf8Encoder.convert$1(path));
    return new A._File(path, t1);
    },
    FileSystemException$(message, path, osError) {
    return new A.FileSystemException(message, path, osError);
    },
    FileSystemException_FileSystemException$_fromOSError(err, message, path) {
    if (A.boolConversionCheck($.$get$Platform_isWindows()))
        switch (err.errorCode) {
        case 2:
        case 3:
        case 15:
        case 18:
        case 53:
        case 67:
        case 161:
        case 206:
            return new A.PathNotFoundException(message, path, err);
        default:
            return new A.FileSystemException(message, path, err);
        }
    else
        switch (err.errorCode) {
        case 2:
            return new A.PathNotFoundException(message, path, err);
        default:
            return new A.FileSystemException(message, path, err);
        }
    },
    _File__namespacePointer() {
    return A._Namespace__namespacePointer();
    },
    _File__dispatchWithNamespace(request, data) {
    B.JSArray_methods.$indexSet(data, 0, A._File__namespacePointer());
    },
    FileSystemEntity__toNullTerminatedUtf8Array(l) {
    var t2, tmp,
        t1 = l.length;
    if (t1 !== 0) {
        t2 = t1 - 1;
        if (!(t2 >= 0))
        return A.ioore(l, t2);
        t2 = l[t2] !== 0;
    } else
        t2 = true;
    if (t2) {
        tmp = new Uint8Array(t1 + 1);
        B.NativeUint8List_methods.setRange$3(tmp, 0, t1, l);
        return tmp;
    } else
        return l;
    },
    _Platform_operatingSystem() {
    return A._Platform__operatingSystem();
    },
    OSError: function OSError(t0, t1) {
    this.message = t0;
    this.errorCode = t1;
    },
    _BufferAndStart: function _BufferAndStart(t0, t1) {
    this.buffer = t0;
    this.start = t1;
    },
    FileMode: function FileMode(t0) {
    this._mode = t0;
    },
    FileSystemException: function FileSystemException(t0, t1, t2) {
    this.message = t0;
    this.path = t1;
    this.osError = t2;
    },
    PathNotFoundException: function PathNotFoundException(t0, t1, t2) {
    this.message = t0;
    this.path = t1;
    this.osError = t2;
    },
    _File: function _File(t0, t1) {
    this._path = t0;
    this._rawPath = t1;
    },
    _File_open_closure: function _File_open_closure(t0) {
    this.$this = t0;
    },
    _File_length_closure: function _File_length_closure(t0) {
    this.$this = t0;
    },
    _File_writeAsBytes_closure: function _File_writeAsBytes_closure(t0, t1, t2) {
    this.$this = t0;
    this.bytes = t1;
    this.flush = t2;
    },
    _File_writeAsBytes__closure: function _File_writeAsBytes__closure(t0, t1, t2) {
    this.$this = t0;
    this.flush = t1;
    this.file = t2;
    },
    _RandomAccessFile: function _RandomAccessFile(t0, t1) {
    var _ = this;
    _.path = t0;
    _._asyncDispatched = false;
    _.___RandomAccessFile__resourceInfo_A = $;
    _._ops = t1;
    _.closed = false;
    },
    _RandomAccessFile_close_closure: function _RandomAccessFile_close_closure(t0) {
    this.$this = t0;
    },
    _RandomAccessFile_writeFrom_closure: function _RandomAccessFile_writeFrom_closure(t0, t1, t2) {
    this._box_0 = t0;
    this.$this = t1;
    this.start = t2;
    },
    _RandomAccessFile_length_closure: function _RandomAccessFile_length_closure(t0) {
    this.$this = t0;
    },
    FileSystemEntity: function FileSystemEntity() {
    },
    ArchiveException$(message) {
    return new A.ArchiveException(message, null, null);
    },
    ArchiveException: function ArchiveException(t0, t1, t2) {
    this.message = t0;
    this.source = t1;
    this.offset = t2;
    },
    InputStream$(data, byteOrder, $length, start) {
    var t1, t2;
    if (type$.TypedData._is(data))
        t1 = A.NativeUint8List_NativeUint8List$view(data.buffer, data.byteOffset, data.byteLength);
    else
        t1 = type$.List_int._is(data) ? data : A.List_List$from(type$.Iterable_dynamic._as(data), type$.int);
    t2 = new A.InputStream(t1, start, start, byteOrder);
    t2.__InputStream__length_A = $length == null ? t1.length : $length;
    return t2;
    },
    InputStreamBase: function InputStreamBase() {
    },
    InputStream: function InputStream(t0, t1, t2, t3) {
    var _ = this;
    _.buffer = t0;
    _.offset = t1;
    _.start = t2;
    _.byteOrder = t3;
    _.__InputStream__length_A = $;
    },
    OutputStream$(byteOrder, size) {
    var t1 = size == null ? 32768 : size;
    return new A.OutputStream(byteOrder, new Uint8Array(t1));
    },
    OutputStreamBase: function OutputStreamBase() {
    },
    OutputStream: function OutputStream(t0, t1) {
    this.length = 0;
    this.byteOrder = t0;
    this._output_stream$_buffer = t1;
    },
    _ZLibDecoder: function _ZLibDecoder() {
    },
    Deflate__smaller(tree, n, m, depth) {
    var t3,
        t1 = n * 2,
        t2 = tree.length;
    if (!(t1 >= 0 && t1 < t2))
        return A.ioore(tree, t1);
    t1 = tree[t1];
    t3 = m * 2;
    if (!(t3 >= 0 && t3 < t2))
        return A.ioore(tree, t3);
    t3 = tree[t3];
    if (t1 >= t3)
        if (t1 === t3) {
        if (!(n >= 0 && n < 573))
            return A.ioore(depth, n);
        t1 = depth[n];
        if (!(m >= 0 && m < 573))
            return A.ioore(depth, m);
        t1 = t1 <= depth[m];
        } else
        t1 = false;
    else
        t1 = true;
    return t1;
    },
    _HuffmanTree$() {
    return new A._HuffmanTree();
    },
    _HuffmanTree__genCodes(tree, maxCode, blCount) {
    var code, bits, t1, n, t2, t3, len,
        nextCode = new Uint16Array(16);
    for (code = 0, bits = 1; bits <= 15; ++bits) {
        code = code + blCount[bits - 1] << 1 >>> 0;
        if (!(bits < 16))
        return A.ioore(nextCode, bits);
        nextCode[bits] = code;
    }
    for (t1 = tree.length, n = 0; n <= maxCode; ++n) {
        t2 = n * 2;
        t3 = t2 + 1;
        if (!(t3 < t1))
        return A.ioore(tree, t3);
        len = tree[t3];
        if (len === 0)
        continue;
        if (!(len >= 0 && len < 16))
        return A.ioore(nextCode, len);
        t3 = nextCode[len];
        if (!(len < 16))
        return A.ioore(nextCode, len);
        nextCode[len] = t3 + 1;
        t3 = A._HuffmanTree__reverseBits(t3, len);
        if (!(t2 < t1))
        return A.ioore(tree, t2);
        tree[t2] = t3;
    }
    },
    _HuffmanTree__reverseBits(code, len) {
    var code0, res = 0;
    do {
        code0 = A._rshift(code, 1);
        res = (res | code & 1) << 1 >>> 0;
        if (--len, len > 0) {
        code = code0;
        continue;
        } else
        break;
    } while (true);
    return A._rshift(res, 1);
    },
    _HuffmanTree__dCode(dist) {
    var t1;
    if (dist < 256) {
        if (!(dist >= 0))
        return A.ioore(B.List_AyI, dist);
        t1 = B.List_AyI[dist];
    } else {
        t1 = 256 + A._rshift(dist, 7);
        if (!(t1 < 512))
        return A.ioore(B.List_AyI, t1);
        t1 = B.List_AyI[t1];
    }
    return t1;
    },
    _StaticTree$(staticTree, extraBits, extraBase, numElements, maxLength) {
    return new A._StaticTree(staticTree, extraBits, extraBase, numElements, maxLength);
    },
    _rshift(number, bits) {
    if (number >= 0)
        return B.JSInt_methods.$shr(number, bits);
    else
        return B.JSInt_methods.$shr(number, bits) + B.JSInt_methods._shlPositive$1(2, (~bits >>> 0) + 65536 & 65535);
    },
    Deflate: function Deflate(t0, t1, t2, t3, t4, t5, t6, t7) {
    var _ = this;
    _.total = _.crc32 = 0;
    _._deflate$_input = t0;
    _._deflate$_output = t1;
    _._status = null;
    _.__Deflate__pending_A = _.__Deflate__pendingOut_A = _.__Deflate__pendingBufferSize_A = _.__Deflate__pendingBuffer_A = $;
    _._dataType = 2;
    _.__Deflate__strStart_A = _.__Deflate__matchAvailable_A = _.__Deflate__prevMatch_A = _.__Deflate__matchLength_A = _.__Deflate__blockStart_A = _.__Deflate__hashShift_A = _.__Deflate__hashMask_A = _.__Deflate__hashBits_A = _.__Deflate__hashSize_A = _.__Deflate__insertHash_A = _.__Deflate__head_A = _.__Deflate__prev_A = _.__Deflate__actualWindowSize_A = _.__Deflate__window_A = _.__Deflate__windowMask_A = _.__Deflate__windowBits_A = _.__Deflate__windowSize_A = $;
    _._matchStart = 0;
    _.__Deflate__bitLengthTree_A = _.__Deflate__dynamicDistTree_A = _.__Deflate__dynamicLengthTree_A = _.__Deflate__strategy_A = _.__Deflate__level_A = _.__Deflate__prevLength_A = _.__Deflate__lookAhead_A = $;
    _._lDesc = t2;
    _._dDesc = t3;
    _._blDesc = t4;
    _._bitLengthCount = t5;
    _._heap = t6;
    _.__Deflate__heapMax_A = _.__Deflate__heapLen_A = $;
    _._depth = t7;
    _.__Deflate__numValidBits_A = _.__Deflate__bitBuffer_A = _.__Deflate__lastEOBLen_A = _.__Deflate__matches_A = _.__Deflate__staticLen_A = _.__Deflate__optimalLen_A = _.__Deflate__dbuf_A = _.__Deflate__lastLit_A = _.__Deflate__litBufferSize_A = _.__Deflate__lbuf_A = $;
    },
    _DeflaterConfig: function _DeflaterConfig(t0, t1, t2, t3, t4) {
    var _ = this;
    _.goodLength = t0;
    _.maxLazy = t1;
    _.niceLength = t2;
    _.maxChain = t3;
    _.$function = t4;
    },
    _HuffmanTree: function _HuffmanTree() {
    this.___HuffmanTree_staticDesc_A = this.___HuffmanTree_maxCode_A = this.___HuffmanTree_dynamicTree_A = $;
    },
    _StaticTree: function _StaticTree(t0, t1, t2, t3, t4) {
    var _ = this;
    _.staticTree = t0;
    _.extraBits = t1;
    _.extraBase = t2;
    _.numElements = t3;
    _.maxLength = t4;
    },
    HuffmanTable$(lengths) {
    var t1 = new A.HuffmanTable();
    t1.HuffmanTable$1(lengths);
    return t1;
    },
    HuffmanTable: function HuffmanTable() {
    this.__HuffmanTable_table_A = $;
    this.maxCodeLength = 0;
    this.minCodeLength = 2147483647;
    },
    Inflate$(bytes) {
    var t1 = A.HuffmanTable$(B.List_2Bc),
        t2 = A.HuffmanTable$(B.List_X3d);
    t2 = new A.Inflate(A.InputStream$(bytes, 0, null, 0), A.OutputStream$(0, null), t1, t2);
    t2.inputSet = true;
    t2._inflate$0();
    return t2;
    },
    Inflate: function Inflate(t0, t1, t2, t3) {
    var _ = this;
    _.__Inflate_input_A = t0;
    _.inputSet = false;
    _.output = t1;
    _._bitBufferLen = _._bitBuffer = 0;
    _._fixedLiteralLengthTable = t2;
    _._fixedDistanceTable = t3;
    },
    ZLibDecoderBase: function ZLibDecoderBase() {
    },
    ZLibDecoder: function ZLibDecoder() {
    },
    ZLibEncoder: function ZLibEncoder() {
    },
    Channel: function Channel(t0, t1) {
    this.index = t0;
    this._name = t1;
    },
    ChannelIterator: function ChannelIterator(t0) {
    this.index = -1;
    this.color = t0;
    },
    ColorFloat16: function ColorFloat16(t0) {
    this.data = t0;
    },
    ColorFloat32: function ColorFloat32(t0) {
    this.data = t0;
    },
    ColorFloat64: function ColorFloat64(t0) {
    this.data = t0;
    },
    ColorInt16: function ColorInt16(t0) {
    this.data = t0;
    },
    ColorInt32: function ColorInt32(t0) {
    this.data = t0;
    },
    ColorInt8: function ColorInt8(t0) {
    this.data = t0;
    },
    ColorUint1: function ColorUint1(t0, t1) {
    this.length = t0;
    this.__ColorUint1_data_A = t1;
    },
    ColorUint16: function ColorUint16(t0) {
    this.data = t0;
    },
    ColorUint2: function ColorUint2(t0, t1) {
    this.length = t0;
    this.__ColorUint2_data_A = t1;
    },
    ColorUint32: function ColorUint32(t0) {
    this.data = t0;
    },
    ColorUint4: function ColorUint4(t0, t1) {
    this.length = t0;
    this.data = t1;
    },
    ColorUint8: function ColorUint8(t0) {
    this.data = t0;
    },
    ColorRgb8: function ColorRgb8(t0) {
    this.data = t0;
    },
    ColorRgba8: function ColorRgba8(t0) {
    this.data = t0;
    },
    convertFormatValue(value, from, to) {
    var t1;
    if (from === to)
        return value;
    switch (from.index) {
        case 0:
        if (value === 0)
            t1 = 0;
        else {
            t1 = B.Map_jPbQQ.$index(0, to);
            t1.toString;
        }
        return t1;
        case 1:
        switch (to.index) {
            case 0:
            return value === 0 ? 0 : 1;
            case 1:
            return value;
            case 2:
            return value * 5;
            case 3:
            return value * 75;
            case 4:
            return value * 21845;
            case 5:
            return value * 1431655765;
            case 6:
            return value * 42;
            case 7:
            return value * 10922;
            case 8:
            return value * 715827882;
            case 9:
            case 10:
            case 11:
            return value / 3;
        }
        break;
        case 2:
        switch (to.index) {
            case 0:
            return value === 0 ? 0 : 1;
            case 1:
            return B.JSInt_methods._shrOtherPositive$1(A._asInt(value), 1);
            case 2:
            return value;
            case 3:
            return value * 17;
            case 4:
            return value * 4369;
            case 5:
            return value * 286331153;
            case 6:
            return value * 8;
            case 7:
            return value * 2184;
            case 8:
            return value * 143165576;
            case 9:
            case 10:
            case 11:
            return value / 3;
        }
        break;
        case 3:
        switch (to.index) {
            case 0:
            return value === 0 ? 0 : 1;
            case 1:
            return B.JSInt_methods._shrOtherPositive$1(A._asInt(value), 6);
            case 2:
            return B.JSInt_methods._shrOtherPositive$1(A._asInt(value), 4);
            case 3:
            return value;
            case 4:
            return value * 257;
            case 5:
            return value * 16843009;
            case 6:
            return B.JSInt_methods._shrOtherPositive$1(A._asInt(value), 1);
            case 7:
            return value * 128;
            case 8:
            return value * 8421504;
            case 9:
            case 10:
            case 11:
            return value / 255;
        }
        break;
        case 4:
        switch (to.index) {
            case 0:
            return value === 0 ? 0 : 1;
            case 1:
            return B.JSInt_methods._shrOtherPositive$1(A._asInt(value), 14);
            case 2:
            return B.JSInt_methods._shrOtherPositive$1(A._asInt(value), 12);
            case 3:
            return B.JSInt_methods._shrOtherPositive$1(A._asInt(value), 8);
            case 4:
            return value;
            case 5:
            return A._asInt(value) << 8 >>> 0;
            case 6:
            return B.JSInt_methods._shrOtherPositive$1(A._asInt(value), 9);
            case 7:
            return B.JSInt_methods._shrOtherPositive$1(A._asInt(value), 1);
            case 8:
            return value * 524296;
            case 9:
            case 10:
            case 11:
            return value / 65535;
        }
        break;
        case 5:
        switch (to.index) {
            case 0:
            return value === 0 ? 0 : 1;
            case 1:
            return B.JSInt_methods._shrOtherPositive$1(A._asInt(value), 30);
            case 2:
            return B.JSInt_methods._shrOtherPositive$1(A._asInt(value), 28);
            case 3:
            return B.JSInt_methods._shrOtherPositive$1(A._asInt(value), 24);
            case 4:
            return B.JSInt_methods._shrOtherPositive$1(A._asInt(value), 16);
            case 5:
            return value;
            case 6:
            return B.JSInt_methods._shrOtherPositive$1(A._asInt(value), 25);
            case 7:
            return B.JSInt_methods._shrOtherPositive$1(A._asInt(value), 17);
            case 8:
            return B.JSInt_methods._shrOtherPositive$1(A._asInt(value), 1);
            case 9:
            case 10:
            case 11:
            return value / 4294967295;
        }
        break;
        case 6:
        switch (to.index) {
            case 0:
            return value === 0 ? 0 : 1;
            case 1:
            return value <= 0 ? 0 : B.JSInt_methods._shrOtherPositive$1(A._asInt(value), 5);
            case 2:
            return value <= 0 ? 0 : B.JSInt_methods._shrOtherPositive$1(A._asInt(value), 3);
            case 3:
            return value <= 0 ? 0 : A._asInt(value) << 1 >>> 0;
            case 4:
            return value <= 0 ? 0 : A._asInt(value) * 516;
            case 5:
            return value <= 0 ? 0 : A._asInt(value) * 33818640;
            case 6:
            return value;
            case 7:
            return value * 258;
            case 8:
            return value * 16909320;
            case 9:
            case 10:
            case 11:
            return value / 127;
        }
        break;
        case 7:
        switch (to.index) {
            case 0:
            return value === 0 ? 0 : 1;
            case 1:
            return value <= 0 ? 0 : B.JSInt_methods._shrOtherPositive$1(A._asInt(value), 15);
            case 2:
            return value <= 0 ? 0 : B.JSInt_methods._shrOtherPositive$1(A._asInt(value), 11);
            case 3:
            return value <= 0 ? 0 : B.JSInt_methods._shrOtherPositive$1(A._asInt(value), 7);
            case 4:
            return value <= 0 ? 0 : A._asInt(value) << 1 >>> 0;
            case 5:
            return value <= 0 ? 0 : A._asInt(value) * 131076;
            case 6:
            return B.JSInt_methods._shrOtherPositive$1(A._asInt(value), 8);
            case 7:
            return value;
            case 8:
            return A._asInt(value) * 65538;
            case 9:
            case 10:
            case 11:
            return value / 32767;
        }
        break;
        case 8:
        switch (to.index) {
            case 0:
            return value === 0 ? 0 : 1;
            case 1:
            return value <= 0 ? 0 : B.JSInt_methods._shrOtherPositive$1(A._asInt(value), 29);
            case 2:
            return value <= 0 ? 0 : B.JSInt_methods._shrOtherPositive$1(A._asInt(value), 27);
            case 3:
            return value <= 0 ? 0 : B.JSInt_methods._shrOtherPositive$1(A._asInt(value), 23);
            case 4:
            return value <= 0 ? 0 : B.JSInt_methods._shrOtherPositive$1(A._asInt(value), 16);
            case 5:
            return value <= 0 ? 0 : A._asInt(value) << 1 >>> 0;
            case 6:
            return B.JSInt_methods._shrOtherPositive$1(A._asInt(value), 24);
            case 7:
            return B.JSInt_methods._shrOtherPositive$1(A._asInt(value), 16);
            case 8:
            return value;
            case 9:
            case 10:
            case 11:
            return value / 2147483647;
        }
        break;
        case 9:
        case 10:
        case 11:
        switch (to.index) {
            case 0:
            return value === 0 ? 0 : 1;
            case 1:
            return B.JSNumber_methods.toInt$0(B.JSNumber_methods.clamp$2(value, 0, 1) * 3);
            case 2:
            return B.JSNumber_methods.toInt$0(B.JSNumber_methods.clamp$2(value, 0, 1) * 15);
            case 3:
            return B.JSNumber_methods.toInt$0(B.JSNumber_methods.clamp$2(value, 0, 1) * 255);
            case 4:
            return B.JSNumber_methods.toInt$0(B.JSNumber_methods.clamp$2(value, 0, 1) * 65535);
            case 5:
            return B.JSNumber_methods.toInt$0(B.JSNumber_methods.clamp$2(value, 0, 1) * 4294967295);
            case 6:
            return B.JSNumber_methods.toInt$0(value < 0 ? B.JSNumber_methods.clamp$2(value, -1, 1) * 128 : B.JSNumber_methods.clamp$2(value, -1, 1) * 127);
            case 7:
            return B.JSNumber_methods.toInt$0(value < 0 ? B.JSNumber_methods.clamp$2(value, -1, 1) * 32768 : B.JSNumber_methods.clamp$2(value, -1, 1) * 32767);
            case 8:
            return B.JSNumber_methods.toInt$0(value < 0 ? B.JSNumber_methods.clamp$2(value, -1, 1) * 2147483648 : B.JSNumber_methods.clamp$2(value, -1, 1) * 2147483647);
            case 9:
            case 10:
            case 11:
            return value;
        }
        break;
    }
    },
    Format: function Format(t0, t1) {
    this.index = t0;
    this._name = t1;
    },
    BlendMode: function BlendMode(t0, t1) {
    this.index = t0;
    this._name = t1;
    },
    ExifData$from(other) {
    var t1 = new A.ExifData(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.IfdDirectory));
    t1.IfdContainer$from$1(other);
    return t1;
    },
    ExifData: function ExifData(t0) {
    this.directories = t0;
    },
    _ExifEntry: function _ExifEntry(t0, t1) {
    this.tag = t0;
    this.value = t1;
    },
    ExifTag$($name, type, count) {
    return new A.ExifTag($name, type);
    },
    ExifTag: function ExifTag(t0, t1) {
    this.name = t0;
    this.type = t1;
    },
    IfdContainer: function IfdContainer(t0) {
    this.directories = t0;
    },
    IfdContainer$from_closure: function IfdContainer$from_closure(t0) {
    this.$this = t0;
    },
    IfdDirectory: function IfdDirectory(t0, t1) {
    this.data = t0;
    this.sub = t1;
    },
    IfdDirectory_copy_closure: function IfdDirectory_copy_closure(t0) {
    this.$this = t0;
    },
    IfdValueShort$data(data, count) {
    var t1 = new A.IfdValueShort(new Uint16Array(count));
    t1.IfdValueShort$data$2(data, count);
    return t1;
    },
    IfdValueLong$data(data, count) {
    var t1 = new A.IfdValueLong(new Uint32Array(count));
    t1.IfdValueLong$data$2(data, count);
    return t1;
    },
    IfdValueRational$data(data, count) {
    var i,
        _list = J.JSArray_JSArray$allocateGrowable(count, type$.Rational);
    for (i = 0; i < count; ++i)
        _list[i] = new A.Rational(data.readUint32$0(), data.readUint32$0());
    return new A.IfdValueRational(_list);
    },
    IfdValueSShort$data(data, count) {
    var t1 = new A.IfdValueSShort(new Int16Array(count));
    t1.IfdValueSShort$data$2(data, count);
    return t1;
    },
    IfdValueSLong$data(data, count) {
    var t1 = new A.IfdValueSLong(new Int32Array(count));
    t1.IfdValueSLong$data$2(data, count);
    return t1;
    },
    IfdValueSRational$data(data, count) {
    var i, t1, t2, t3,
        _list = J.JSArray_JSArray$allocateGrowable(count, type$.Rational);
    for (i = 0; i < count; ++i) {
        t1 = data.readUint32$0();
        t2 = $.$get$__uint32();
        t2[0] = t1;
        t1 = $.$get$__uint32ToInt32();
        if (0 >= t1.length)
        return A.ioore(t1, 0);
        t3 = t1[0];
        t2[0] = data.readUint32$0();
        if (0 >= t1.length)
        return A.ioore(t1, 0);
        _list[i] = new A.Rational(t3, t1[0]);
    }
    return new A.IfdValueSRational(_list);
    },
    IfdValueSingle$data(data, count) {
    var t1 = new A.IfdValueSingle(new Float32Array(count));
    t1.IfdValueSingle$data$2(data, count);
    return t1;
    },
    IfdValueDouble$data(data, count) {
    var t1 = new A.IfdValueDouble(new Float64Array(count));
    t1.IfdValueDouble$data$2(data, count);
    return t1;
    },
    IfdValueType: function IfdValueType(t0, t1) {
    this.index = t0;
    this._name = t1;
    },
    IfdValue: function IfdValue() {
    },
    IfdByteValue: function IfdByteValue(t0) {
    this.value = t0;
    },
    IfdValueAscii: function IfdValueAscii(t0) {
    this.value = t0;
    },
    IfdValueShort: function IfdValueShort(t0) {
    this.value = t0;
    },
    IfdValueLong: function IfdValueLong(t0) {
    this.value = t0;
    },
    IfdValueRational: function IfdValueRational(t0) {
    this.value = t0;
    },
    IfdValueSByte: function IfdValueSByte(t0) {
    this.value = t0;
    },
    IfdValueSShort: function IfdValueSShort(t0) {
    this.value = t0;
    },
    IfdValueSLong: function IfdValueSLong(t0) {
    this.value = t0;
    },
    IfdValueSRational: function IfdValueSRational(t0) {
    this.value = t0;
    },
    IfdValueSingle: function IfdValueSingle(t0) {
    this.value = t0;
    },
    IfdValueDouble: function IfdValueDouble(t0) {
    this.value = t0;
    },
    IfdValueUndefined: function IfdValueUndefined(t0) {
    this.value = t0;
    },
    BmpFileHeader$(b) {
    var t2, t3,
        t1 = new A.BmpFileHeader();
    if (!A.BmpFileHeader_isValidFile(b))
        A.throwExpression(A.ImageException$("Not a bitmap file."));
    b.offset += 2;
    t2 = b.readUint32$0();
    t3 = $.$get$__uint32();
    t3[0] = t2;
    t2 = $.$get$__uint32ToInt32();
    if (0 >= t2.length)
        return A.ioore(t2, 0);
    b.offset += 4;
    t3[0] = b.readUint32$0();
    if (0 >= t2.length)
        return A.ioore(t2, 0);
    t1.__BmpFileHeader_imageOffset_A = t2[0];
    return t1;
    },
    BmpFileHeader_isValidFile(b) {
    if (b.end - b.offset < 2)
        return false;
    return A.InputBuffer$from(b, null, 0).readUint16$0() === 19778;
    },
    BmpInfo$(p, fileHeader) {
    var t6, t7, t8, t9, t10,
        t1 = fileHeader == null ? A.BmpFileHeader$(p) : fileHeader,
        t2 = p.offset,
        t3 = p.readUint32$0(),
        t4 = p.readUint32$0(),
        t5 = $.$get$__uint32();
    t5[0] = t4;
    t4 = $.$get$__uint32ToInt32();
    if (0 >= t4.length)
        return A.ioore(t4, 0);
    t6 = t4[0];
    t5[0] = p.readUint32$0();
    if (0 >= t4.length)
        return A.ioore(t4, 0);
    t7 = t4[0];
    t8 = p.readUint16$0();
    t9 = p.readUint16$0();
    t10 = p.readUint32$0();
    if (!(t10 < 14))
        return A.ioore(B.List_WrD, t10);
    t10 = B.List_WrD[t10];
    p.readUint32$0();
    t5[0] = p.readUint32$0();
    if (0 >= t4.length)
        return A.ioore(t4, 0);
    t5[0] = p.readUint32$0();
    if (0 >= t4.length)
        return A.ioore(t4, 0);
    t4 = p.readUint32$0();
    p.readUint32$0();
    t2 = new A.BmpInfo(t1, t6, t7, t3, t8, t9, t10, t4, t2);
    t2.BmpInfo$2$fileHeader(p, fileHeader);
    return t2;
    },
    BmpCompression: function BmpCompression(t0, t1) {
    this.index = t0;
    this._name = t1;
    },
    BmpFileHeader: function BmpFileHeader() {
    this.__BmpFileHeader_imageOffset_A = $;
    },
    BmpInfo: function BmpInfo(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
    var _ = this;
    _.header = t0;
    _.width = t1;
    _._height = t2;
    _.headerSize = t3;
    _.planes = t4;
    _.bitsPerPixel = t5;
    _.compression = t6;
    _.totalColors = t7;
    _.__BmpInfo_alphaMask_A = _.__BmpInfo_blueMask_A = _.__BmpInfo_greenMask_A = _.__BmpInfo_redMask_A = $;
    _.palette = null;
    _.__BmpInfo__alphaScale_A = _.__BmpInfo__alphaShift_A = _.__BmpInfo__blueScale_A = _.__BmpInfo__blueShift_A = _.__BmpInfo__greenScale_A = _.__BmpInfo__greenShift_A = _.__BmpInfo__redScale_A = _.__BmpInfo__redShift_A = $;
    _._startPos = t8;
    },
    BmpDecoder: function BmpDecoder(t0) {
    this.__BmpDecoder__input_A = $;
    this.info = null;
    this.forceRgba = t0;
    },
    BmpDecoder_decodeFrame_closure: function BmpDecoder_decodeFrame_closure(t0, t1, t2, t3, t4) {
    var _ = this;
    _._box_0 = t0;
    _.$this = t1;
    _.w = t2;
    _.inf = t3;
    _.p = t4;
    },
    DibDecoder: function DibDecoder(t0) {
    this.__BmpDecoder__input_A = $;
    this.info = null;
    this.forceRgba = t0;
    },
    Decoder: function Decoder() {
    },
    Encoder: function Encoder() {
    },
    ExrAttribute: function ExrAttribute() {
    },
    InternalExrB44Compressor: function InternalExrB44Compressor(t0, t1, t2, t3) {
    var _ = this;
    _._maxScanLineSize = t0;
    _._numScanLines = t1;
    _._optFlatFields = t2;
    _.decodedHeight = _.decodedWidth = 0;
    _._header = t3;
    },
    ExrChannelType: function ExrChannelType(t0, t1) {
    this.index = t0;
    this._name = t1;
    },
    ExrChannelName: function ExrChannelName(t0, t1) {
    this.index = t0;
    this._name = t1;
    },
    ExrChannel: function ExrChannel() {
    var _ = this;
    _.__ExrChannel_isColorChannel_A = _.__ExrChannel_ySampling_A = _.__ExrChannel_xSampling_A = _.__ExrChannel_dataSize_A = _.__ExrChannel_dataType_A = _.__ExrChannel_nameType_A = _.__ExrChannel_name_A = $;
    },
    ExrCompressor_ExrCompressor(type, hdr, maxScanLineSize, numScanLines) {
    var t1, t2;
    switch (type.index) {
        case 1:
        return new A.InternalExrRleCompressor(maxScanLineSize, hdr);
        case 2:
        return new A.InternalExrZipCompressor(maxScanLineSize, numScanLines == null ? 1 : numScanLines, hdr);
        case 3:
        return new A.InternalExrZipCompressor(maxScanLineSize, numScanLines == null ? 16 : numScanLines, hdr);
        case 4:
        t1 = numScanLines == null ? 32 : numScanLines;
        t2 = new A.InternalExrPizCompressor(maxScanLineSize, t1, hdr);
        t2.InternalExrPizCompressor$3(hdr, maxScanLineSize, t1);
        return t2;
        case 5:
        return new A.InternalExrPxr24Compressor(maxScanLineSize, numScanLines == null ? 16 : numScanLines, hdr);
        case 6:
        return new A.InternalExrB44Compressor(maxScanLineSize, numScanLines == null ? 32 : numScanLines, false, hdr);
        case 7:
        return new A.InternalExrB44Compressor(maxScanLineSize, numScanLines == null ? 32 : numScanLines, true, hdr);
        default:
        throw A.wrapException(A.ImageException$("Invalid compression type: " + type.toString$0(0)));
    }
    },
    ExrCompressorType: function ExrCompressorType(t0, t1) {
    this.index = t0;
    this._name = t1;
    },
    ExrCompressor: function ExrCompressor() {
    },
    InternalExrCompressor: function InternalExrCompressor() {
    },
    ExrHuffman_uncompress(compressed, nCompressed, raw, nRaw) {
    var start, im, iM, nBits, t1, freq, hdec, _i;
    if (nCompressed === 0) {
        if (nRaw !== 0)
        throw A.wrapException(A.ImageException$("Incomplete huffman data"));
        return;
    }
    start = compressed.offset;
    im = compressed.readUint32$0();
    iM = compressed.readUint32$0();
    compressed.offset += 4;
    nBits = compressed.readUint32$0();
    if (im < 65537)
        t1 = iM >= 65537;
    else
        t1 = true;
    if (t1)
        throw A.wrapException(A.ImageException$("Invalid huffman table size"));
    compressed.offset += 4;
    freq = A.List_List$filled(65537, 0, false, type$.int);
    hdec = J.JSArray_JSArray$allocateFixed(16384, type$.ExrHufDec);
    for (_i = 0; _i < 16384; ++_i)
        hdec[_i] = new A.ExrHufDec();
    A.ExrHuffman_unpackEncTable(compressed, nCompressed - 20, im, iM, freq);
    if (nBits > 8 * (nCompressed - (compressed.offset - start)))
        throw A.wrapException(A.ImageException$("Error in header for Huffman-encoded data (invalid number of bits)."));
    A.ExrHuffman_buildDecTable(freq, im, iM, hdec);
    A.ExrHuffman_decode(freq, hdec, compressed, nBits, iM, nRaw, raw);
    },
    ExrHuffman_decode(hcode, hdecod, input, ni, rlc, no, out) {
    var t1, oi, t2, t3, pl, j, l, oi0, i,
        _s45_ = "Error in Huffman-encoded data (invalid code).",
        cLc = A._setArrayType([0, 0], type$.JSArray_int),
        ie = input.offset + B.JSInt_methods._tdivFast$1(ni + 7, 8);
    for (t1 = hdecod.length, oi = 0; input.offset < ie;) {
        A.ExrHuffman_getChar(cLc, input);
        for (; t2 = cLc[1], t2 >= 14;) {
        t3 = B.JSInt_methods.$shr(cLc[0], t2 - 14) & 16383;
        if (!(t3 < t1))
            return A.ioore(hdecod, t3);
        pl = hdecod[t3];
        t3 = pl.len;
        if (t3 !== 0) {
            B.JSArray_methods.$indexSet(cLc, 1, t2 - t3);
            oi = A.ExrHuffman_getCode(pl.lit, rlc, cLc, input, out, oi, no);
        } else {
            if (pl.p == null)
            throw A.wrapException(A.ImageException$(_s45_));
            for (j = 0; j < pl.lit; ++j) {
            t2 = pl.p;
            if (!(j < t2.length))
                return A.ioore(t2, j);
            t2 = t2[j];
            if (!(t2 < 65537))
                return A.ioore(hcode, t2);
            l = hcode[t2] & 63;
            while (true) {
                t2 = cLc[1];
                if (!(t2 < l && input.offset < ie))
                break;
                A.ExrHuffman_getChar(cLc, input);
            }
            if (t2 >= l) {
                t3 = pl.p;
                if (!(j < t3.length))
                return A.ioore(t3, j);
                t3 = t3[j];
                if (!(t3 < 65537))
                return A.ioore(hcode, t3);
                t2 -= l;
                if (hcode[t3] >>> 6 === (B.JSInt_methods.$shr(cLc[0], t2) & B.JSInt_methods._shlPositive$1(1, l) - 1) >>> 0) {
                B.JSArray_methods.$indexSet(cLc, 1, t2);
                t2 = pl.p;
                if (!(j < t2.length))
                    return A.ioore(t2, j);
                oi0 = A.ExrHuffman_getCode(t2[j], rlc, cLc, input, out, oi, no);
                oi = oi0;
                break;
                }
            }
            }
            if (j === pl.lit)
            throw A.wrapException(A.ImageException$(_s45_));
        }
        }
    }
    i = 8 - ni & 7;
    B.JSArray_methods.$indexSet(cLc, 0, B.JSInt_methods._shrOtherPositive$1(cLc[0], i));
    B.JSArray_methods.$indexSet(cLc, 1, cLc[1] - i);
    for (; t2 = cLc[1], t2 > 0;) {
        t3 = B.JSInt_methods.$shl(cLc[0], 14 - t2) & 16383;
        if (!(t3 < t1))
        return A.ioore(hdecod, t3);
        pl = hdecod[t3];
        t3 = pl.len;
        if (t3 !== 0) {
        B.JSArray_methods.$indexSet(cLc, 1, t2 - t3);
        oi = A.ExrHuffman_getCode(pl.lit, rlc, cLc, input, out, oi, no);
        } else
        throw A.wrapException(A.ImageException$(_s45_));
    }
    if (oi !== no)
        throw A.wrapException(A.ImageException$("Error in Huffman-encoded data (decoded data are shorter than expected)."));
    },
    ExrHuffman_getCode(po, rlc, cLc, input, out, oi, oe) {
    var cs, t1, t2, s, cs0, oi0,
        _s70_ = "Error in Huffman-encoded data (decoded data are longer than expected).";
    if (po === rlc) {
        if (cLc[1] < 8)
        A.ExrHuffman_getChar(cLc, input);
        B.JSArray_methods.$indexSet(cLc, 1, cLc[1] - 8);
        cs = B.JSInt_methods.$shr(cLc[0], cLc[1]) & 255;
        if (oi + cs > oe)
        throw A.wrapException(A.ImageException$(_s70_));
        t1 = oi - 1;
        t2 = out.length;
        if (!(t1 >= 0 && t1 < t2))
        return A.ioore(out, t1);
        s = out[t1];
        for (; cs0 = cs - 1, cs > 0; cs = cs0, oi = oi0) {
        oi0 = oi + 1;
        if (!(oi < t2))
            return A.ioore(out, oi);
        out[oi] = s;
        }
    } else {
        if (oi < oe) {
        oi0 = oi + 1;
        if (!(oi < out.length))
            return A.ioore(out, oi);
        out[oi] = po;
        } else
        throw A.wrapException(A.ImageException$(_s70_));
        oi = oi0;
    }
    return oi;
    },
    ExrHuffman_buildDecTable(hcode, im, iM, hdecod) {
    var t1, t2, t3, t4, c, l, pl, t5, i, pi,
        _s57_ = "Error in Huffman-encoded data (invalid code table entry).";
    for (t1 = hdecod.length, t2 = type$.JSArray_int, t3 = type$.int; im <= iM; ++im) {
        if (!(im < 65537))
        return A.ioore(hcode, im);
        t4 = hcode[im];
        c = t4 >>> 6;
        l = t4 & 63;
        if (B.JSInt_methods._shrBothPositive$1(c, l) !== 0)
        throw A.wrapException(A.ImageException$(_s57_));
        if (l > 14) {
        t4 = B.JSInt_methods._shrReceiverPositive$1(c, l - 14);
        if (!(t4 < t1))
            return A.ioore(hdecod, t4);
        pl = hdecod[t4];
        if (pl.len !== 0)
            throw A.wrapException(A.ImageException$(_s57_));
        t4 = ++pl.lit;
        t5 = pl.p;
        if (t5 != null) {
            pl.set$p(A.List_List$filled(t4, 0, false, t3));
            for (i = 0; i < pl.lit - 1; ++i) {
            t4 = pl.p;
            t4.toString;
            if (!(i < t5.length))
                return A.ioore(t5, i);
            B.JSArray_methods.$indexSet(t4, i, t5[i]);
            }
        } else
            pl.set$p(A._setArrayType([0], t2));
        t4 = pl.p;
        t4.toString;
        B.JSArray_methods.$indexSet(t4, pl.lit - 1, im);
        } else if (l !== 0) {
        t4 = 14 - l;
        pi = B.JSInt_methods.$shl(c, t4);
        if (!(pi < t1))
            return A.ioore(hdecod, pi);
        for (i = B.JSInt_methods.$shl(1, t4); i > 0; --i, ++pi) {
            if (!(pi < t1))
            return A.ioore(hdecod, pi);
            pl = hdecod[pi];
            if (pl.len !== 0 || pl.p != null)
            throw A.wrapException(A.ImageException$(_s57_));
            pl.len = l;
            pl.lit = im;
        }
        }
    }
    },
    ExrHuffman_unpackEncTable(p, ni, im, iM, hcode) {
    var t1, l, zerun, zerun0, im0,
        _s66_ = "Error in Huffman-encoded data (unexpected end of code table data).",
        _s67_ = "Error in Huffman-encoded data (code table is longer than expected).",
        pcode = p.offset,
        cLc = A._setArrayType([0, 0], type$.JSArray_int);
    for (t1 = iM + 1; im <= iM; ++im) {
        if (p.offset - pcode > ni)
        throw A.wrapException(A.ImageException$(_s66_));
        l = A.ExrHuffman_getBits(6, cLc, p);
        B.JSArray_methods.$indexSet(hcode, im, l);
        if (l === 63) {
        if (p.offset - pcode > ni)
            throw A.wrapException(A.ImageException$(_s66_));
        zerun = A.ExrHuffman_getBits(8, cLc, p) + 6;
        if (im + zerun > t1)
            throw A.wrapException(A.ImageException$(_s67_));
        for (; zerun0 = zerun - 1, zerun !== 0; zerun = zerun0, im = im0) {
            im0 = im + 1;
            B.JSArray_methods.$indexSet(hcode, im, 0);
        }
        --im;
        } else if (l >= 59) {
        zerun = l - 59 + 2;
        if (im + zerun > t1)
            throw A.wrapException(A.ImageException$(_s67_));
        for (; zerun0 = zerun - 1, zerun !== 0; zerun = zerun0, im = im0) {
            im0 = im + 1;
            B.JSArray_methods.$indexSet(hcode, im, 0);
        }
        --im;
        }
    }
    A.ExrHuffman_canonicalCodeTable(hcode);
    },
    ExrHuffman_canonicalCodeTable(hcode) {
    var i, t1, c, nc, l,
        n = A.List_List$filled(59, 0, false, type$.int);
    for (i = 0; i < 65537; ++i) {
        t1 = hcode[i];
        if (!(t1 < 59))
        return A.ioore(n, t1);
        B.JSArray_methods.$indexSet(n, t1, n[t1] + 1);
    }
    for (c = 0, i = 58; i > 0; --i, c = nc) {
        nc = c + n[i] >>> 1;
        B.JSArray_methods.$indexSet(n, i, c);
    }
    for (i = 0; i < 65537; ++i) {
        l = hcode[i];
        if (l > 0) {
        if (!(l < 59))
            return A.ioore(n, l);
        t1 = n[l];
        B.JSArray_methods.$indexSet(n, l, t1 + 1);
        B.JSArray_methods.$indexSet(hcode, i, (l | t1 << 6) >>> 0);
        }
    }
    },
    ExrHuffman_getChar(cLc, input) {
    B.JSArray_methods.$indexSet(cLc, 0, ((cLc[0] << 8 | input.readByte$0()) & -1) >>> 0);
    B.JSArray_methods.$indexSet(cLc, 1, (cLc[1] + 8 & -1) >>> 0);
    },
    ExrHuffman_getBits(nBits, cLc, input) {
    var t1, t2, t3;
    for (; t1 = cLc[1], t1 < nBits;) {
        t1 = cLc[0];
        t2 = input.buffer;
        t3 = input.offset++;
        if (!(t3 >= 0 && t3 < t2.length))
        return A.ioore(t2, t3);
        B.JSArray_methods.$indexSet(cLc, 0, ((t1 << 8 | t2[t3]) & -1) >>> 0);
        B.JSArray_methods.$indexSet(cLc, 1, (cLc[1] + 8 & -1) >>> 0);
    }
    B.JSArray_methods.$indexSet(cLc, 1, t1 - nBits);
    return (B.JSInt_methods.$shr(cLc[0], cLc[1]) & B.JSInt_methods._shlPositive$1(1, nBits) - 1) >>> 0;
    },
    ExrHufDec: function ExrHufDec() {
    this.lit = this.len = 0;
    this.p = null;
    },
    ExrImage_isValidFile(bytes) {
    var input = A.InputBuffer$(bytes, false, null, 0);
    if (input.readUint32$0() !== 20000630)
        return false;
    if (input.readByte$0() !== 2)
        return false;
    if ((input.readUint24$0() & 4294967289) >>> 0 !== 0)
        return false;
    return true;
    },
    ExrImage: function ExrImage(t0) {
    var _ = this;
    _.height = _.width = 0;
    _._parts = t0;
    _.version = null;
    _.__ExrImage_flags_A = $;
    },
    InternalExrPart$(index, tiled, input) {
    var t1 = new A.InternalExrPart(index, A._setArrayType([], type$.JSArray_ExrChannel), A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.ExrAttribute), B.ExrCompressorType_0, tiled);
    t1.ExrPart$3(index, tiled, input, {});
    return t1;
    },
    ExrPart: function ExrPart() {
    },
    ExrPart_closure: function ExrPart_closure(t0, t1) {
    this._box_0 = t0;
    this.$this = t1;
    },
    InternalExrPart: function InternalExrPart(t0, t1, t2, t3, t4) {
    var _ = this;
    _.index = t0;
    _.framebuffer = null;
    _.channels = t1;
    _.numColorChannels = 0;
    _.attributes = t2;
    _.__ExrPart_dataWindow_A = $;
    _.height = _.width = 0;
    _.__ExrPart_chromaticities_A = $;
    _._compressionType = t3;
    _._offsets = null;
    _.__ExrPart__bytesPerLine_A = $;
    _._compressor = null;
    _._linesInBuffer = 0;
    _._offsetInLineBuffer = null;
    _._tiled = t4;
    _._numYLevels = _._numXLevels = _._numYTiles = _._numXTiles = _._tileRoundingMode = _._tileLevelMode = _._tileHeight = _._tileWidth = null;
    _.__ExrPart__bytesPerPixel_A = $;
    _._maxBytesPerTileLine = null;
    },
    InternalExrPizCompressor: function InternalExrPizCompressor(t0, t1, t2) {
    var _ = this;
    _._exr_piz_compressor$_output = null;
    _._exr_piz_compressor$_maxScanLineSize = t0;
    _._exr_piz_compressor$_numScanLines = t1;
    _.__InternalExrPizCompressor__channelData_A = $;
    _._tmpBuffer = null;
    _.decodedHeight = _.decodedWidth = 0;
    _._header = t2;
    },
    _PizChannelData: function _PizChannelData() {
    var _ = this;
    _.___PizChannelData_size_A = _.___PizChannelData_ys_A = _.___PizChannelData_ny_A = _.___PizChannelData_nx_A = _.___PizChannelData_end_A = _.___PizChannelData_start_A = $;
    },
    InternalExrPxr24Compressor: function InternalExrPxr24Compressor(t0, t1, t2) {
    var _ = this;
    _._exr_pxr24_compressor$_maxScanLineSize = t0;
    _._exr_pxr24_compressor$_numScanLines = t1;
    _._output = null;
    _.decodedHeight = _.decodedWidth = 0;
    _._header = t2;
    },
    InternalExrRleCompressor: function InternalExrRleCompressor(t0, t1) {
    var _ = this;
    _._exr_rle_compressor$_outCache = null;
    _._exr_rle_compressor$_maxScanLineSize = t0;
    _.decodedHeight = _.decodedWidth = 0;
    _._header = t1;
    },
    InternalExrZipCompressor: function InternalExrZipCompressor(t0, t1, t2) {
    var _ = this;
    _._maxScanLines = t0;
    _._exr_zip_compressor$_numScanLines = t1;
    _._outCache = null;
    _.decodedHeight = _.decodedWidth = 0;
    _._header = t2;
    },
    ExrDecoder: function ExrDecoder() {
    this.exrImage = null;
    },
    GifColorMap$(numColors) {
    var t1 = new Uint8Array(numColors * 3);
    return new A.GifColorMap(A.GifColorMap__bitSize(numColors), numColors, null, new A.PaletteUint8(t1, numColors, 3));
    },
    GifColorMap__bitSize(n) {
    var i;
    for (i = 1; i <= 8; ++i)
        if (B.JSInt_methods._shlPositive$1(1, i) >= n)
        return i;
    return 0;
    },
    GifColorMap: function GifColorMap(t0, t1, t2, t3) {
    var _ = this;
    _.bitsPerPixel = t0;
    _.numColors = t1;
    _.transparent = t2;
    _._palette = t3;
    },
    GifImageDesc: function GifImageDesc() {
    },
    InternalGifImageDesc: function InternalGifImageDesc() {
    var _ = this;
    _.__GifImageDesc_interlaced_A = _.__GifImageDesc_height_A = _.__GifImageDesc_width_A = _.__GifImageDesc_y_A = _.__GifImageDesc_x_A = $;
    _.colorMap = null;
    _.duration = 80;
    _.clearFrame = true;
    _.__GifImageDesc__inputPosition_A = $;
    },
    GifInfo: function GifInfo(t0) {
    var _ = this;
    _.height = _.width = 0;
    _.globalColorMap = _.backgroundColor = null;
    _.frames = t0;
    },
    GifDecoder: function GifDecoder() {
    var _ = this;
    _._input = _.info = null;
    _._repeat = 0;
    _._gif_decoder$_buffer = null;
    _.__GifDecoder__suffix_A = _.__GifDecoder__stack_A = $;
    _._prefix = null;
    _._bitsPerPixel = 0;
    _._pixelCount = null;
    _._stackPtr = _._currentShiftState = _._currentShiftDWord = 0;
    _._currentCode = null;
    _._clearCode = _._eofCode = _._runningCode = _._runningBits = _._maxCode1 = _._lastCode = 0;
    },
    IcoInfo_read(input) {
    var t, imageCount, images, e, t1, t2, t3, t4;
    if (input.readUint16$0() !== 0)
        return null;
    t = input.readUint16$0();
    if (t >= 3)
        return null;
    if (B.List_hky[t] === B.IcoType_2)
        return null;
    imageCount = input.readUint16$0();
    images = J.JSArray_JSArray$allocateGrowable(imageCount, type$.IcoInfoImage);
    for (e = 0; e < imageCount; ++e) {
        t1 = input.buffer;
        t2 = input.offset;
        t3 = input.offset = t2 + 1;
        t4 = t1.length;
        if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
        t2 = input.offset = t3 + 1;
        if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
        t3 = t2 + 1;
        input.offset = t3;
        if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
        input.offset = t3 + 1;
        input.readUint16$0();
        input.readUint16$0();
        images[e] = new A.IcoInfoImage(input.readUint32$0(), input.readUint32$0());
    }
    return new A.IcoInfo(imageCount, images);
    },
    IcoType: function IcoType(t0, t1) {
    this.index = t0;
    this._name = t1;
    },
    IcoInfo: function IcoInfo(t0, t1) {
    this.numFrames = t0;
    this.images = t1;
    },
    IcoInfoImage: function IcoInfoImage(t0, t1) {
    this.bytesSize = t0;
    this.bytesOffset = t1;
    },
    IcoBmpInfo: function IcoBmpInfo(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
    var _ = this;
    _.header = t0;
    _.width = t1;
    _._height = t2;
    _.headerSize = t3;
    _.planes = t4;
    _.bitsPerPixel = t5;
    _.compression = t6;
    _.totalColors = t7;
    _.__BmpInfo_alphaMask_A = _.__BmpInfo_blueMask_A = _.__BmpInfo_greenMask_A = _.__BmpInfo_redMask_A = $;
    _.palette = null;
    _.__BmpInfo__alphaScale_A = _.__BmpInfo__alphaShift_A = _.__BmpInfo__blueScale_A = _.__BmpInfo__blueShift_A = _.__BmpInfo__greenScale_A = _.__BmpInfo__greenShift_A = _.__BmpInfo__redScale_A = _.__BmpInfo__redShift_A = $;
    _._startPos = t8;
    },
    IcoDecoder: function IcoDecoder() {
    this._icoInfo = this._ico_decoder$_input = null;
    },
    ComponentData: function ComponentData(t0, t1, t2) {
    this.lines = t0;
    this.hScaleShift = t1;
    this.vScaleShift = t2;
    },
    HuffmanNode: function HuffmanNode() {
    },
    HuffmanParent: function HuffmanParent(t0) {
    this.children = t0;
    },
    HuffmanValue: function HuffmanValue(t0) {
    this.value = t0;
    },
    JpegAdobe: function JpegAdobe() {
    this.transformCode = null;
    },
    JpegComponent: function JpegComponent(t0, t1, t2, t3) {
    var _ = this;
    _.hSamples = t0;
    _.vSamples = t1;
    _.quantizationTableList = t2;
    _.quantizationIndex = t3;
    _.__JpegComponent_pred_A = _.__JpegComponent_huffmanTableAC_A = _.__JpegComponent_huffmanTableDC_A = _.__JpegComponent_blocks_A = _.__JpegComponent_blocksPerColumn_A = _.__JpegComponent_blocksPerLine_A = $;
    },
    JpegData$() {
    var t1 = A.List_List$filled(4, null, false, type$.nullable_Int16List),
        t2 = A._setArrayType([], type$.JSArray_nullable_JpegFrame),
        t3 = type$.nullable_List_nullable_HuffmanNode,
        t4 = J.JSArray_JSArray$growable(0, t3);
    t3 = J.JSArray_JSArray$growable(0, t3);
    return new A.JpegData(new A.ExifData(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.IfdDirectory)), t1, t2, t4, t3, A._setArrayType([], type$.JSArray_ComponentData));
    },
    JpegData: function JpegData(t0, t1, t2, t3, t4, t5) {
    var _ = this;
    _.__JpegData_jfif_A = _.__JpegData_input_A = $;
    _.resetInterval = _.frame = _.adobe = null;
    _.exif = t0;
    _.quantizationTables = t1;
    _.frames = t2;
    _.huffmanTablesAC = t3;
    _.huffmanTablesDC = t4;
    _.components = t5;
    },
    JpegData__readSOS_closure: function JpegData__readSOS_closure(t0, t1) {
    this.$this = t0;
    this.block = t1;
    },
    _JpegHuffman: function _JpegHuffman(t0) {
    this.children = t0;
    this.index = 0;
    },
    JpegFrame: function JpegFrame(t0, t1) {
    var _ = this;
    _.samplesPerLine = _.scanLines = _.precision = _.progressive = null;
    _.maxVSamples = _.maxHSamples = 0;
    _.__JpegFrame_mcusPerColumn_A = _.__JpegFrame_mcusPerLine_A = $;
    _.components = t0;
    _.componentsOrder = t1;
    },
    JpegJfif: function JpegJfif() {
    this.__JpegJfif_thumbHeight_A = this.__JpegJfif_thumbWidth_A = $;
    },
    JpegScan: function JpegScan(t0, t1, t2, t3, t4, t5, t6, t7) {
    var _ = this;
    _.input = t0;
    _.frame = t1;
    _.__JpegScan_mcusPerLine_A = $;
    _.progressive = null;
    _.components = t2;
    _.resetInterval = t3;
    _.spectralStart = t4;
    _.spectralEnd = t5;
    _.successivePrev = t6;
    _.successive = t7;
    _.successiveACState = _.eobrun = _.bitsCount = _.bitsData = 0;
    _.__JpegScan_successiveACNextValue_A = $;
    },
    JpegDecoder: function JpegDecoder() {
    },
    PngDisposeMode: function PngDisposeMode(t0, t1) {
    this.index = t0;
    this._name = t1;
    },
    PngBlendMode: function PngBlendMode(t0, t1) {
    this.index = t0;
    this._name = t1;
    },
    PngFrame: function PngFrame() {
    },
    InternalPngFrame: function InternalPngFrame(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
    var _ = this;
    _.fdat = t0;
    _.width = t1;
    _.height = t2;
    _.xOffset = t3;
    _.yOffset = t4;
    _.delayNum = t5;
    _.delayDen = t6;
    _.dispose = t7;
    _.blend = t8;
    },
    InternalPngInfo$() {
    var t1 = type$.String;
    return new A.InternalPngInfo(A.LinkedHashMap_LinkedHashMap$_empty(t1, t1), A._setArrayType([], type$.JSArray_PngFrame), A._setArrayType([], type$.JSArray_int));
    },
    PngFilterType: function PngFilterType(t0, t1) {
    this.index = t0;
    this._name = t1;
    },
    PngInfo: function PngInfo() {
    },
    InternalPngInfo: function InternalPngInfo(t0, t1, t2) {
    var _ = this;
    _.bits = _.height = _.width = 0;
    _.colorType = -1;
    _.interlaceMethod = _.filterMethod = 0;
    _.backgroundColor = _.transparency = _.palette = null;
    _.iccpName = "";
    _.iccpData = null;
    _.textData = t0;
    _.numFrames = 1;
    _.frames = t1;
    _._idat = t2;
    },
    PngDecoder: function PngDecoder(t0) {
    var _ = this;
    _._png_decoder$_info = t0;
    _._png_decoder$_bitBufferLen = _._png_decoder$_bitBuffer = 0;
    _.__PngDecoder__input_A = $;
    _._progressY = 0;
    },
    PngFilter: function PngFilter(t0, t1) {
    this.index = t0;
    this._name = t1;
    },
    PngEncoder: function PngEncoder(t0, t1) {
    var _ = this;
    _._globalQuantizer = null;
    _.filter = t0;
    _.repeat = 0;
    _.level = t1;
    _.__PngEncoder__frames_A = $;
    _.sequenceNumber = 0;
    _.isAnimated = false;
    _.output = null;
    },
    PsdBevelEffect: function PsdBevelEffect() {
    this.version = null;
    },
    PsdDropShadowEffect: function PsdDropShadowEffect() {
    this.version = null;
    },
    PsdEffect: function PsdEffect() {
    },
    PsdInnerGlowEffect: function PsdInnerGlowEffect() {
    this.version = null;
    },
    PsdInnerShadowEffect: function PsdInnerShadowEffect() {
    this.version = null;
    },
    PsdOuterGlowEffect: function PsdOuterGlowEffect() {
    this.version = null;
    },
    PsdSolidFillEffect: function PsdSolidFillEffect() {
    this.version = null;
    },
    PsdLayerAdditionalData: function PsdLayerAdditionalData(t0) {
    this.data = t0;
    },
    PsdLayerSectionDivider: function PsdLayerSectionDivider() {
    },
    PsdBlendingRanges: function PsdBlendingRanges() {
    var _ = this;
    _.__PsdBlendingRanges_whiteDst_A = _.__PsdBlendingRanges_blackDst_A = _.__PsdBlendingRanges_whiteSrc_A = _.__PsdBlendingRanges_blackSrc_A = $;
    },
    PsdChannel: function PsdChannel(t0) {
    this.id = t0;
    this.__PsdChannel_data_A = $;
    },
    PsdImage$(bytes) {
    var t1 = new A.PsdImage(A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.PsdImageResource));
    t1.PsdImage$1(bytes);
    return t1;
    },
    PsdImage__blendOverlay(a, b, aAlpha, bAlpha) {
    var x = a / 255,
        y = b / 255,
        aa = aAlpha / 255,
        ba = bAlpha / 255,
        t1 = y * (1 - aa),
        t2 = x * (1 - ba);
    return B.JSNumber_methods.toInt$0(B.JSNumber_methods.clamp$2((2 * x < aa ? 2 * y * x + t1 + t2 : ba * aa - 2 * (aa - x) * (ba - y) + t1 + t2) * 255, 0, 255));
    },
    PsdImage__blendColorBurn(a, b) {
    if (b === 0)
        return 0;
    return B.JSNumber_methods.toInt$0(B.JSInt_methods.clamp$2(B.JSNumber_methods.toInt$0(255 * (1 - (1 - a / 255) / (b / 255))), 0, 255));
    },
    PsdImage__blendLinearBurn(a, b) {
    return B.JSNumber_methods.toInt$0(B.JSInt_methods.clamp$2(a + b - 255, 0, 255));
    },
    PsdImage__blendColorDodge(a, b) {
    if (b === 255)
        return 255;
    return B.JSNumber_methods.toInt$0(B.JSNumber_methods.clamp$2(a / 255 / (1 - b / 255) * 255, 0, 255));
    },
    PsdImage__blendSoftLight(a, b) {
    var aa = a / 255,
        bb = b / 255,
        t1 = 1 - bb;
    return B.JSNumber_methods.round$0(255 * (t1 * bb * aa + bb * (1 - t1 * (1 - aa))));
    },
    PsdImage__blendHardLight(bottom, $top) {
    var a = $top / 255,
        b = bottom / 255;
    if (b < 0.5)
        return B.JSNumber_methods.round$0(510 * a * b);
    else
        return B.JSNumber_methods.round$0(255 * (1 - 2 * (1 - a) * (1 - b)));
    },
    PsdImage__blendVividLight(bottom, $top) {
    if ($top < 128)
        return A.PsdImage__blendColorBurn(bottom, 2 * $top);
    else
        return A.PsdImage__blendColorDodge(bottom, 2 * ($top - 128));
    },
    PsdImage__blendLinearLight(bottom, $top) {
    var t1;
    if ($top < 128)
        return A.PsdImage__blendLinearBurn(bottom, 2 * $top);
    else {
        t1 = 2 * ($top - 128);
        return t1 + bottom > 255 ? 255 : bottom + t1;
    }
    },
    PsdImage_createImageFromChannels(colorMode, bitDepth, width, height, channelList) {
    var t1, _i, t2, ch, ns, output, channel0, channel1, channel2, channel_1, si, t3, t4, t5, t6, p, t7, t8, t9, t10, t11, t12, alpha, t13, y, x, z, y3, x3, z3, $R, $G, $B, rgb, gray, c, m, k, _null = null, _s4_ = "data",
        channels = A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.PsdChannel);
    for (t1 = channelList.length, _i = 0; t2 = channelList.length, _i < t2; channelList.length === t1 || (0, A.throwConcurrentModificationError)(channelList), ++_i) {
        ch = channelList[_i];
        channels.$indexSet(0, ch.id, ch);
    }
    if (bitDepth === 8)
        ns = 1;
    else
        ns = bitDepth === 16 ? 2 : -1;
    output = A.Image$(_null, _null, B.Format_3, 0, B.FrameType_2, height, _null, 0, t2, _null, width, false);
    if (ns === -1)
        throw A.wrapException(A.ImageException$("PSD: unsupported bit depth: " + A.S(bitDepth)));
    channel0 = channels.$index(0, 0);
    channel1 = channels.$index(0, 1);
    channel2 = channels.$index(0, 2);
    channel_1 = channels.$index(0, -1);
    si = -ns;
    for (t1 = output.data, t1 = t1.get$iterator(t1), t3 = t2 >= 5, t4 = ns === 1, t5 = t2 === 4, t6 = t2 >= 2, t2 = t2 >= 4; t1.moveNext$0();) {
        p = t1.get$current();
        si += ns;
        switch (colorMode) {
        case B.PsdColorMode_3:
            t7 = channel0.__PsdChannel_data_A;
            t7 === $ && A.throwLateFieldNI(_s4_);
            t8 = t7.length;
            if (t4) {
            if (!(si >= 0 && si < t8))
                return A.ioore(t7, si);
            t7 = t7[si];
            } else {
            if (!(si >= 0 && si < t8))
                return A.ioore(t7, si);
            t9 = t7[si];
            t10 = si + 1;
            if (!(t10 < t8))
                return A.ioore(t7, t10);
            t10 = (t9 << 8 | t7[t10]) >>> 8;
            t7 = t10;
            }
            p.set$r(t7);
            t7 = channel1.__PsdChannel_data_A;
            t7 === $ && A.throwLateFieldNI(_s4_);
            t8 = t7.length;
            if (t4) {
            if (!(si >= 0 && si < t8))
                return A.ioore(t7, si);
            t7 = t7[si];
            } else {
            if (!(si >= 0 && si < t8))
                return A.ioore(t7, si);
            t9 = t7[si];
            t10 = si + 1;
            if (!(t10 < t8))
                return A.ioore(t7, t10);
            t10 = (t9 << 8 | t7[t10]) >>> 8;
            t7 = t10;
            }
            p.set$g(t7);
            t7 = channel2.__PsdChannel_data_A;
            t7 === $ && A.throwLateFieldNI(_s4_);
            t8 = t7.length;
            if (t4) {
            if (!(si >= 0 && si < t8))
                return A.ioore(t7, si);
            t7 = t7[si];
            } else {
            if (!(si >= 0 && si < t8))
                return A.ioore(t7, si);
            t9 = t7[si];
            t10 = si + 1;
            if (!(t10 < t8))
                return A.ioore(t7, t10);
            t10 = (t9 << 8 | t7[t10]) >>> 8;
            t7 = t10;
            }
            p.set$b(t7);
            if (t2) {
            t7 = channel_1.__PsdChannel_data_A;
            t7 === $ && A.throwLateFieldNI(_s4_);
            t8 = t7.length;
            if (t4) {
                if (!(si >= 0 && si < t8))
                return A.ioore(t7, si);
                t7 = t7[si];
            } else {
                if (!(si >= 0 && si < t8))
                return A.ioore(t7, si);
                t9 = t7[si];
                t10 = si + 1;
                if (!(t10 < t8))
                return A.ioore(t7, t10);
                t10 = (t9 << 8 | t7[t10]) >>> 8;
                t7 = t10;
            }
            } else
            t7 = 255;
            p.set$a(t7);
            if (p.get$a() !== 0) {
            p.set$r((p.get$r() + p.get$a() - 255) * 255 / p.get$a());
            p.set$g((p.get$g() + p.get$a() - 255) * 255 / p.get$a());
            p.set$b((p.get$b() + p.get$a() - 255) * 255 / p.get$a());
            }
            break;
        case B.PsdColorMode_7:
            t7 = channel0.__PsdChannel_data_A;
            t7 === $ && A.throwLateFieldNI(_s4_);
            t8 = t7.length;
            if (t4) {
            if (!(si >= 0 && si < t8))
                return A.ioore(t7, si);
            t7 = t7[si];
            } else {
            if (!(si >= 0 && si < t8))
                return A.ioore(t7, si);
            t9 = t7[si];
            t10 = si + 1;
            if (!(t10 < t8))
                return A.ioore(t7, t10);
            t10 = (t9 << 8 | t7[t10]) >>> 8;
            t7 = t10;
            }
            t8 = channel1.__PsdChannel_data_A;
            t8 === $ && A.throwLateFieldNI(_s4_);
            t9 = t8.length;
            if (t4) {
            if (!(si >= 0 && si < t9))
                return A.ioore(t8, si);
            t8 = t8[si];
            } else {
            if (!(si >= 0 && si < t9))
                return A.ioore(t8, si);
            t10 = t8[si];
            t11 = si + 1;
            if (!(t11 < t9))
                return A.ioore(t8, t11);
            t11 = (t10 << 8 | t8[t11]) >>> 8;
            t8 = t11;
            }
            t9 = channel2.__PsdChannel_data_A;
            t9 === $ && A.throwLateFieldNI(_s4_);
            t10 = t9.length;
            if (t4) {
            if (!(si >= 0 && si < t10))
                return A.ioore(t9, si);
            t9 = t9[si];
            } else {
            if (!(si >= 0 && si < t10))
                return A.ioore(t9, si);
            t11 = t9[si];
            t12 = si + 1;
            if (!(t12 < t10))
                return A.ioore(t9, t12);
            t12 = (t11 << 8 | t9[t12]) >>> 8;
            t9 = t12;
            }
            if (t2) {
            t10 = channel_1.__PsdChannel_data_A;
            t10 === $ && A.throwLateFieldNI(_s4_);
            t11 = t10.length;
            if (t4) {
                if (!(si >= 0 && si < t11))
                return A.ioore(t10, si);
                t10 = t10[si];
                alpha = t10;
            } else {
                if (!(si >= 0 && si < t11))
                return A.ioore(t10, si);
                t12 = t10[si];
                t13 = si + 1;
                if (!(t13 < t11))
                return A.ioore(t10, t13);
                t13 = (t12 << 8 | t10[t13]) >>> 8;
                alpha = t13;
            }
            } else
            alpha = 255;
            y = ((t7 * 100 >>> 8) + 16) / 116;
            x = (t8 - 128) / 500 + y;
            z = y - (t9 - 128) / 200;
            y3 = Math.pow(y, 3);
            y = y3 > 0.008856 ? y3 : (y - 0.13793103448275862) / 7.787;
            x3 = Math.pow(x, 3);
            x = x3 > 0.008856 ? x3 : (x - 0.13793103448275862) / 7.787;
            z3 = Math.pow(z, 3);
            z = z3 > 0.008856 ? z3 : (z - 0.13793103448275862) / 7.787;
            x = x * 95.047 / 100;
            y = y * 100 / 100;
            z = z * 108.883 / 100;
            $R = x * 3.2406 + y * -1.5372 + z * -0.4986;
            $G = x * -0.9689 + y * 1.8758 + z * 0.0415;
            $B = x * 0.0557 + y * -0.204 + z * 1.057;
            $R = $R > 0.0031308 ? 1.055 * Math.pow($R, 0.4166666666666667) - 0.055 : 12.92 * $R;
            $G = $G > 0.0031308 ? 1.055 * Math.pow($G, 0.4166666666666667) - 0.055 : 12.92 * $G;
            $B = $B > 0.0031308 ? 1.055 * Math.pow($B, 0.4166666666666667) - 0.055 : 12.92 * $B;
            rgb = [B.JSNumber_methods.toInt$0(B.JSNumber_methods.clamp$2($R * 255, 0, 255)), B.JSNumber_methods.toInt$0(B.JSNumber_methods.clamp$2($G * 255, 0, 255)), B.JSNumber_methods.toInt$0(B.JSNumber_methods.clamp$2($B * 255, 0, 255))];
            p.set$r(rgb[0]);
            p.set$g(rgb[1]);
            p.set$b(rgb[2]);
            p.set$a(alpha);
            break;
        case B.PsdColorMode_1:
            t7 = channel0.__PsdChannel_data_A;
            t7 === $ && A.throwLateFieldNI(_s4_);
            t8 = t7.length;
            if (t4) {
            if (!(si >= 0 && si < t8))
                return A.ioore(t7, si);
            gray = t7[si];
            } else {
            if (!(si >= 0 && si < t8))
                return A.ioore(t7, si);
            t9 = t7[si];
            t10 = si + 1;
            if (!(t10 < t8))
                return A.ioore(t7, t10);
            gray = (t9 << 8 | t7[t10]) >>> 8;
            }
            if (t6) {
            t7 = channel_1.__PsdChannel_data_A;
            t7 === $ && A.throwLateFieldNI(_s4_);
            t8 = t7.length;
            if (t4) {
                if (!(si >= 0 && si < t8))
                return A.ioore(t7, si);
                t7 = t7[si];
                alpha = t7;
            } else {
                if (!(si >= 0 && si < t8))
                return A.ioore(t7, si);
                t9 = t7[si];
                t10 = si + 1;
                if (!(t10 < t8))
                return A.ioore(t7, t10);
                t10 = (t9 << 8 | t7[t10]) >>> 8;
                alpha = t10;
            }
            } else
            alpha = 255;
            p.set$r(gray);
            p.set$g(gray);
            p.set$b(gray);
            p.set$a(alpha);
            break;
        case B.PsdColorMode_4:
            t7 = channel0.__PsdChannel_data_A;
            t7 === $ && A.throwLateFieldNI(_s4_);
            t8 = t7.length;
            if (t4) {
            if (!(si >= 0 && si < t8))
                return A.ioore(t7, si);
            c = t7[si];
            } else {
            if (!(si >= 0 && si < t8))
                return A.ioore(t7, si);
            t9 = t7[si];
            t10 = si + 1;
            if (!(t10 < t8))
                return A.ioore(t7, t10);
            c = (t9 << 8 | t7[t10]) >>> 8;
            }
            t7 = channel1.__PsdChannel_data_A;
            t7 === $ && A.throwLateFieldNI(_s4_);
            t8 = t7.length;
            if (t4) {
            if (!(si >= 0 && si < t8))
                return A.ioore(t7, si);
            m = t7[si];
            } else {
            if (!(si >= 0 && si < t8))
                return A.ioore(t7, si);
            t9 = t7[si];
            t10 = si + 1;
            if (!(t10 < t8))
                return A.ioore(t7, t10);
            m = (t9 << 8 | t7[t10]) >>> 8;
            }
            t7 = channel2.__PsdChannel_data_A;
            t7 === $ && A.throwLateFieldNI(_s4_);
            t8 = t7.length;
            if (t4) {
            if (!(si >= 0 && si < t8))
                return A.ioore(t7, si);
            y = t7[si];
            } else {
            if (!(si >= 0 && si < t8))
                return A.ioore(t7, si);
            t9 = t7[si];
            t10 = si + 1;
            if (!(t10 < t8))
                return A.ioore(t7, t10);
            y = (t9 << 8 | t7[t10]) >>> 8;
            }
            t7 = channels.$index(0, t5 ? -1 : 3).__PsdChannel_data_A;
            t7 === $ && A.throwLateFieldNI(_s4_);
            t8 = t7.length;
            if (t4) {
            if (!(si >= 0 && si < t8))
                return A.ioore(t7, si);
            k = t7[si];
            } else {
            if (!(si >= 0 && si < t8))
                return A.ioore(t7, si);
            t9 = t7[si];
            t10 = si + 1;
            if (!(t10 < t8))
                return A.ioore(t7, t10);
            k = (t9 << 8 | t7[t10]) >>> 8;
            }
            if (t3) {
            t7 = channel_1.__PsdChannel_data_A;
            t7 === $ && A.throwLateFieldNI(_s4_);
            t8 = t7.length;
            if (t4) {
                if (!(si >= 0 && si < t8))
                return A.ioore(t7, si);
                t7 = t7[si];
                alpha = t7;
            } else {
                if (!(si >= 0 && si < t8))
                return A.ioore(t7, si);
                t9 = t7[si];
                t10 = si + 1;
                if (!(t10 < t8))
                return A.ioore(t7, t10);
                t10 = (t9 << 8 | t7[t10]) >>> 8;
                alpha = t10;
            }
            } else
            alpha = 255;
            rgb = A.cmykToRgb(255 - c, 255 - m, 255 - y, 255 - k);
            p.set$r(rgb[0]);
            p.set$g(rgb[1]);
            p.set$b(rgb[2]);
            p.set$a(alpha);
            break;
        default:
            throw A.wrapException(A.ImageException$("Unhandled color mode: " + A.S(colorMode)));
        }
    }
    return output;
    },
    PsdColorMode: function PsdColorMode(t0, t1) {
    this.index = t0;
    this._name = t1;
    },
    PsdImage: function PsdImage(t0) {
    var _ = this;
    _.height = _.width = 0;
    _.version = _.signature = null;
    _.__PsdImage_channels_A = $;
    _.colorMode = _.depth = null;
    _.__PsdImage_mergeImageChannels_A = _.__PsdImage_layers_A = $;
    _.mergedImage = null;
    _.imageResources = t0;
    _.__PsdImage__imageData_A = _.__PsdImage__layerAndMaskData_A = _.__PsdImage__imageResourceData_A = _.__PsdImage__input_A = $;
    },
    PsdImageResource: function PsdImageResource() {
    },
    PsdLayer: function PsdLayer(t0, t1, t2) {
    var _ = this;
    _.left = _.top = null;
    _.__PsdLayer_height_A = _.__PsdLayer_width_A = _.__PsdLayer_right_A = _.__PsdLayer_bottom_A = $;
    _.blendMode = null;
    _.__PsdLayer_channels_A = _.__PsdLayer_flags_A = _.__PsdLayer_opacity_A = $;
    _.additionalData = t0;
    _.children = t1;
    _.__PsdLayer_layerImage_A = $;
    _.effects = t2;
    },
    PsdLayerData_PsdLayerData(tag, data) {
    var len;
    switch (tag) {
        case "lsct":
        len = data.end - data.offset;
        data.readUint32$0();
        if (len >= 12) {
            if (data.readString$1(4) !== "8BIM")
            A.throwExpression(A.ImageException$("Invalid key in layer additional data"));
            data.readString$1(4);
        }
        if (len >= 16)
            data.readUint32$0();
        return new A.PsdLayerSectionDivider();
        default:
        return new A.PsdLayerAdditionalData(data);
    }
    },
    PsdLayerData: function PsdLayerData() {
    },
    PsdDecoder: function PsdDecoder() {
    this.info = null;
    },
    PvrColorRgbCore: function PvrColorRgbCore() {
    },
    PvrColorRgb: function PvrColorRgb(t0, t1, t2) {
    this.r = t0;
    this.g = t1;
    this.b = t2;
    },
    PvrColorRgba: function PvrColorRgba(t0, t1, t2, t3) {
    var _ = this;
    _.r = t0;
    _.g = t1;
    _.b = t2;
    _.a = t3;
    },
    Pvr2Info: function Pvr2Info() {
    var _ = this;
    _.numTex = _.magic = _.alphaMask = _.bitsPerPixel = _.flags = _.height = _.width = 0;
    },
    Pvr3Info: function Pvr3Info(t0) {
    var _ = this;
    _.format = 0;
    _.order = t0;
    _.metadataSize = _.width = _.height = 0;
    },
    PvrAppleInfo: function PvrAppleInfo() {
    this.magic = this.height = this.width = 0;
    },
    PvrPacket__getMortonNumber(x, y) {
    var t2,
        t1 = x >>> 8;
    if (!(t1 < 256))
        return A.ioore(B.List_ePs, t1);
    t1 = B.List_ePs[t1];
    t2 = y >>> 8;
    if (!(t2 < 256))
        return A.ioore(B.List_ePs, t2);
    return (t1 << 17 | B.List_ePs[t2] << 16 | B.List_ePs[x & 255] << 1 | B.List_ePs[y & 255]) >>> 0;
    },
    PvrPacket: function PvrPacket(t0) {
    var _ = this;
    _.rawData = t0;
    _.index = 0;
    _._usePunchthroughAlpha = false;
    _._colorA = 0;
    _._colorAIsOpaque = false;
    _._colorB = 0;
    _._colorBIsOpaque = false;
    },
    PvrDecoder: function PvrDecoder() {
    this._info = this._data = null;
    },
    TgaInfo: function TgaInfo(t0) {
    var _ = this;
    _.colorMapType = _.idLength = 0;
    _.imageType = t0;
    _.flags = _.pixelDepth = _.height = _.width = _.colorMapDepth = _.colorMapLength = 0;
    _.colorMap = null;
    _.imageOffset = 0;
    },
    TgaImageType: function TgaImageType(t0, t1) {
    this.index = t0;
    this._name = t1;
    },
    TgaDecoder: function TgaDecoder() {
    this.info = null;
    this.__TgaDecoder_input_A = $;
    },
    TiffBitReader: function TiffBitReader(t0) {
    this.input = t0;
    this._bitPos = this._tiff_bit_reader$_bitBuffer = 0;
    },
    TiffEntry: function TiffEntry(t0, t1, t2, t3, t4) {
    var _ = this;
    _.tag = t0;
    _.type = t1;
    _.count = t2;
    _.valueOffset = t3;
    _.value = null;
    _.p = t4;
    },
    TiffFaxDecoder$(fillOrder, width, height) {
    var t1 = new A.TiffFaxDecoder(width, fillOrder),
        t2 = type$.nullable_int;
    t1.set$prevChangingElements(A.List_List$filled(width, null, false, t2));
    t1.set$currChangingElements(A.List_List$filled(width, null, false, t2));
    return t1;
    },
    TiffFaxDecoder: function TiffFaxDecoder(t0, t1) {
    var _ = this;
    _.width = t0;
    _.fillOrder = t1;
    _.changingElemSize = 0;
    _.currChangingElements = _.prevChangingElements = null;
    _.__TiffFaxDecoder_data_A = $;
    _.bytePointer = _.bitPointer = null;
    _.lastChangingElement = 0;
    _.compression = 2;
    _.fillBits = 0;
    _.oneD = null;
    },
    TiffImage: function TiffImage(t0, t1, t2, t3) {
    var _ = this;
    _.tags = t0;
    _.height = _.width = 0;
    _.photometricType = t1;
    _.samplesPerPixel = _.bitsPerSample = _.compression = 1;
    _.sampleFormat = t2;
    _.imageType = t3;
    _.isWhiteZero = false;
    _.predictor = 1;
    _.__TiffImage_chromaSubV_A = _.__TiffImage_chromaSubH_A = $;
    _.tileHeight = _.tileWidth = 0;
    _.tileByteCounts = _.tileOffsets = null;
    _.__TiffImage_tilesY_A = _.__TiffImage_tilesX_A = $;
    _.fillOrder = 1;
    _.t6Options = _.t4Options = 0;
    _.colorMap = null;
    _.__TiffImage_colorMapBlue_A = _.__TiffImage_colorMapGreen_A = _.__TiffImage_colorMapRed_A = $;
    },
    TiffFormat: function TiffFormat(t0, t1) {
    this.index = t0;
    this._name = t1;
    },
    TiffPhotometricType: function TiffPhotometricType(t0, t1) {
    this.index = t0;
    this._name = t1;
    },
    TiffImageType: function TiffImageType(t0, t1) {
    this.index = t0;
    this._name = t1;
    },
    TiffInfo: function TiffInfo(t0) {
    var _ = this;
    _.height = _.width = 0;
    _.signature = null;
    _.images = t0;
    },
    LzwDecoder$() {
    return new A.LzwDecoder(new Uint8Array(4096));
    },
    LzwDecoder: function LzwDecoder(t0) {
    var _ = this;
    _._bitsToGet = 9;
    _._nextBits = _._nextData = _._bytePointer = 0;
    _.__LzwDecoder__outPointer_A = _.__LzwDecoder__out_A = _.__LzwDecoder__dataLength_A = _.__LzwDecoder__data_A = $;
    _._tiff_lzw_decoder$_buffer = t0;
    _.__LzwDecoder__prefix_A = _.__LzwDecoder__table_A = $;
    _._tableIndex = null;
    _.__LzwDecoder__bufferLength_A = $;
    },
    TiffDecoder: function TiffDecoder() {
    this.info = null;
    this.__TiffDecoder__input_A = $;
    },
    VP8$(input, _webp) {
    var t1 = new Int32Array(4),
        t2 = new Int32Array(4),
        t3 = new Int8Array(4),
        t4 = new Int8Array(4),
        t5 = A.List_List$filled(8, null, false, type$.nullable_VP8BitReader),
        t6 = A.List_List$filled(4, null, false, type$.nullable_VP8QuantMatrix);
    return new A.VP8(input, _webp, new A.VP8FrameHeader(), new A.VP8PictureHeader(), new A.VP8FilterHeader(t1, t2), new A.VP8SegmentHeader(t3, t4), t5, t6, new Uint8Array(4));
    },
    VP8__checkMode(mbX, mbY, mode) {
    if (mode === 0)
        if (mbX === 0)
        return mbY === 0 ? 6 : 5;
        else
        return mbY === 0 ? 4 : 0;
    return mode;
    },
    VP8: function VP8(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
    var _ = this;
    _.input = t0;
    _._webp = t1;
    _.__VP8_br_A = $;
    _.output = null;
    _.__VP8__dsp_A = $;
    _._frameHeader = t2;
    _._picHeader = t3;
    _._filterHeader = t4;
    _._segmentHeader = t5;
    _.__VP8__cropRight_A = _.__VP8__cropLeft_A = $;
    _._mbHeight = _._mbWidth = _._cropBottom = _._cropTop = null;
    _.__VP8__tlMbY_A = _.__VP8__tlMbX_A = $;
    _._brMbY = _._brMbX = null;
    _.__VP8__numPartitions_A = $;
    _._partitions = t6;
    _._dqm = t7;
    _._proba = null;
    _.__VP8__skipP_A = _.__VP8__useSkipProba_A = $;
    _._intraT = null;
    _._intraL = t8;
    _.__VP8__cacheV_A = _.__VP8__cacheU_A = _.__VP8__cacheY_A = _.__VP8__yuvBlock_A = _.__VP8__fInfo_A = _.__VP8__mbInfo_A = _.__VP8__yuvT_A = _.__VP8__segment_A = $;
    _._cacheUVStride = _._cacheYStride = null;
    _.__VP8__v_A = _.__VP8__u_A = _.__VP8__y_A = _.__VP8__tmpV_A = _.__VP8__tmpU_A = _.__VP8__tmpY_A = $;
    _._a = null;
    _._mbY = _._mbX = 0;
    _.__VP8__mbData_A = $;
    _._filterType = null;
    _.__VP8__alpha_A = _.__VP8__fStrengths_A = $;
    _._alphaData = null;
    _.__VP8__alphaPlane_A = $;
    },
    VP8__upSample_loadUv: function VP8__upSample_loadUv() {
    },
    VP8BitReader$(input) {
    var t1 = new A.VP8BitReader(input);
    t1.__VP8BitReader__range_A = 254;
    t1.__VP8BitReader__value_A = 0;
    t1.__VP8BitReader__bits_A = -8;
    return t1;
    },
    VP8BitReader: function VP8BitReader(t0) {
    var _ = this;
    _.input = t0;
    _.__VP8BitReader__bits_A = _.__VP8BitReader__value_A = _.__VP8BitReader__range_A = $;
    _._eof = false;
    },
    VP8Filter__avg3(a, b, c) {
    return B.JSInt_methods.toSigned$1(B.JSInt_methods._shrOtherPositive$1(a + 2 * b + c + 2, 2), 32);
    },
    VP8Filter__ve4(dst) {
    var t5, t6, t7, t8, values, i,
        t1 = dst.buffer,
        t2 = dst.offset,
        t3 = t2 + -33,
        t4 = t1.length;
    if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
    t3 = t1[t3];
    t5 = t2 + -32;
    if (!(t5 >= 0 && t5 < t4))
        return A.ioore(t1, t5);
    t5 = t1[t5];
    t6 = t2 + -31;
    if (!(t6 >= 0 && t6 < t4))
        return A.ioore(t1, t6);
    t6 = t1[t6];
    t3 = A.VP8Filter__avg3(t3, t5, t6);
    t7 = t2 + -30;
    if (!(t7 >= 0 && t7 < t4))
        return A.ioore(t1, t7);
    t7 = t1[t7];
    t5 = A.VP8Filter__avg3(t5, t6, t7);
    t8 = t2 + -29;
    if (!(t8 >= 0 && t8 < t4))
        return A.ioore(t1, t8);
    t8 = t1[t8];
    t6 = A.VP8Filter__avg3(t6, t7, t8);
    t2 += -28;
    if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
    values = A._setArrayType([t3, t5, t6, A.VP8Filter__avg3(t7, t8, t1[t2])], type$.JSArray_int);
    for (i = 0; i < 4; ++i)
        dst.memcpy$3(i * 32, 4, values);
    },
    VP8Filter__he4(dst) {
    var t5, t6, t7, d2,
        t1 = dst.buffer,
        t2 = dst.offset,
        t3 = t2 + -33,
        t4 = t1.length;
    if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
    t3 = t1[t3];
    t5 = t2 + -1;
    if (!(t5 >= 0 && t5 < t4))
        return A.ioore(t1, t5);
    t5 = t1[t5];
    t6 = t2 + 31;
    if (!(t6 >= 0 && t6 < t4))
        return A.ioore(t1, t6);
    t6 = t1[t6];
    t7 = t2 + 63;
    if (!(t7 >= 0 && t7 < t4))
        return A.ioore(t1, t7);
    t7 = t1[t7];
    t2 += 95;
    if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
    t2 = t1[t2];
    d2 = A.InputBuffer$from(dst, null, 0);
    t1 = d2.toUint32List$0();
    t3 = A.VP8Filter__avg3(t3, t5, t6);
    if (0 >= t1.length)
        return A.ioore(t1, 0);
    t1[0] = 16843009 * t3;
    d2.offset += 32;
    t3 = d2.toUint32List$0();
    t5 = A.VP8Filter__avg3(t5, t6, t7);
    if (0 >= t3.length)
        return A.ioore(t3, 0);
    t3[0] = 16843009 * t5;
    d2.offset += 32;
    t5 = d2.toUint32List$0();
    t6 = A.VP8Filter__avg3(t6, t7, t2);
    if (0 >= t5.length)
        return A.ioore(t5, 0);
    t5[0] = 16843009 * t6;
    d2.offset += 32;
    t6 = d2.toUint32List$0();
    t2 = A.VP8Filter__avg3(t7, t2, t2);
    if (0 >= t6.length)
        return A.ioore(t6, 0);
    t6[0] = 16843009 * t2;
    },
    VP8Filter__dc4(dst) {
    var t1, t2, t3, dc, i, t4, t5;
    for (t1 = dst.buffer, t2 = dst.offset, t3 = t1.length, dc = 4, i = 0; i < 4; ++i) {
        t4 = t2 + (i - 32);
        if (!(t4 >= 0 && t4 < t3))
        return A.ioore(t1, t4);
        t4 = t1[t4];
        t5 = t2 + (-1 + i * 32);
        if (!(t5 >= 0 && t5 < t3))
        return A.ioore(t1, t5);
        dc += t4 + t1[t5];
    }
    dc = B.JSInt_methods._shrOtherPositive$1(dc, 3);
    for (i = 0; i < 4; ++i) {
        t1 = dst.buffer;
        t2 = dst.offset + i * 32;
        J.fillRange$3$ax(t1, t2, t2 + 4, dc);
    }
    },
    VP8Filter_trueMotion(dst, size) {
    var clip0, di, y, clip, x, t3, t4,
        t1 = dst.buffer,
        t2 = dst.offset + -33;
    if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
    clip0 = 255 - t1[t2];
    for (di = 0, y = 0; y < size; ++y) {
        t1 = dst.buffer;
        t2 = dst.offset + (di - 1);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        clip = clip0 + t1[t2];
        for (x = 0; x < size; ++x) {
        t1 = $.$get$VP8Filter_clip1();
        t2 = dst.buffer;
        t3 = dst.offset;
        t4 = t3 + (-32 + x);
        if (!(t4 >= 0 && t4 < t2.length))
            return A.ioore(t2, t4);
        t4 = clip + t2[t4];
        t1.toString;
        if (!(t4 >= 0 && t4 < 766))
            return A.ioore(t1, t4);
        J.$indexSet$ax(t2, t3 + (di + x), t1[t4]);
        }
        di += 32;
    }
    },
    VP8Filter__tm4(dst) {
    A.VP8Filter_trueMotion(dst, 4);
    },
    VP8Filter__tm8uv(dst) {
    A.VP8Filter_trueMotion(dst, 8);
    },
    VP8Filter__tm16(dst) {
    A.VP8Filter_trueMotion(dst, 16);
    },
    VP8Filter__rd4(dst) {
    var t5, t6, t7, t8, t9, t10, t11,
        t1 = dst.buffer,
        t2 = dst.offset,
        t3 = t2 + -1,
        t4 = t1.length;
    if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
    t3 = t1[t3];
    t5 = t2 + 31;
    if (!(t5 >= 0 && t5 < t4))
        return A.ioore(t1, t5);
    t5 = t1[t5];
    t6 = t2 + 63;
    if (!(t6 >= 0 && t6 < t4))
        return A.ioore(t1, t6);
    t6 = t1[t6];
    t7 = t2 + 95;
    if (!(t7 >= 0 && t7 < t4))
        return A.ioore(t1, t7);
    t7 = t1[t7];
    t8 = t2 + -33;
    if (!(t8 >= 0 && t8 < t4))
        return A.ioore(t1, t8);
    t8 = t1[t8];
    t9 = t2 + -32;
    if (!(t9 >= 0 && t9 < t4))
        return A.ioore(t1, t9);
    t9 = t1[t9];
    t10 = t2 + -31;
    if (!(t10 >= 0 && t10 < t4))
        return A.ioore(t1, t10);
    t10 = t1[t10];
    t11 = t2 + -30;
    if (!(t11 >= 0 && t11 < t4))
        return A.ioore(t1, t11);
    t11 = t1[t11];
    t2 += -29;
    if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
    t2 = t1[t2];
    dst.$indexSet(0, 96, A.VP8Filter__avg3(t5, t6, t7));
    t6 = A.VP8Filter__avg3(t3, t5, t6);
    dst.$indexSet(0, 97, t6);
    dst.$indexSet(0, 64, t6);
    t5 = A.VP8Filter__avg3(t8, t3, t5);
    dst.$indexSet(0, 98, t5);
    dst.$indexSet(0, 65, t5);
    dst.$indexSet(0, 32, t5);
    t3 = A.VP8Filter__avg3(t9, t8, t3);
    dst.$indexSet(0, 99, t3);
    dst.$indexSet(0, 66, t3);
    dst.$indexSet(0, 33, t3);
    dst.$indexSet(0, 0, t3);
    t8 = A.VP8Filter__avg3(t10, t9, t8);
    dst.$indexSet(0, 67, t8);
    dst.$indexSet(0, 34, t8);
    dst.$indexSet(0, 1, t8);
    t9 = A.VP8Filter__avg3(t11, t10, t9);
    dst.$indexSet(0, 35, t9);
    dst.$indexSet(0, 2, t9);
    dst.$indexSet(0, 3, A.VP8Filter__avg3(t2, t11, t10));
    },
    VP8Filter__ld4(dst) {
    var t5, t6, t7, t8, t9, t10,
        t1 = dst.buffer,
        t2 = dst.offset,
        t3 = t2 + -32,
        t4 = t1.length;
    if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
    t3 = t1[t3];
    t5 = t2 + -31;
    if (!(t5 >= 0 && t5 < t4))
        return A.ioore(t1, t5);
    t5 = t1[t5];
    t6 = t2 + -30;
    if (!(t6 >= 0 && t6 < t4))
        return A.ioore(t1, t6);
    t6 = t1[t6];
    t7 = t2 + -29;
    if (!(t7 >= 0 && t7 < t4))
        return A.ioore(t1, t7);
    t7 = t1[t7];
    t8 = t2 + -28;
    if (!(t8 >= 0 && t8 < t4))
        return A.ioore(t1, t8);
    t8 = t1[t8];
    t9 = t2 + -27;
    if (!(t9 >= 0 && t9 < t4))
        return A.ioore(t1, t9);
    t9 = t1[t9];
    t10 = t2 + -26;
    if (!(t10 >= 0 && t10 < t4))
        return A.ioore(t1, t10);
    t10 = t1[t10];
    t2 += -25;
    if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
    t2 = t1[t2];
    dst.$indexSet(0, 0, A.VP8Filter__avg3(t3, t5, t6));
    t5 = A.VP8Filter__avg3(t5, t6, t7);
    dst.$indexSet(0, 32, t5);
    dst.$indexSet(0, 1, t5);
    t6 = A.VP8Filter__avg3(t6, t7, t8);
    dst.$indexSet(0, 64, t6);
    dst.$indexSet(0, 33, t6);
    dst.$indexSet(0, 2, t6);
    t7 = A.VP8Filter__avg3(t7, t8, t9);
    dst.$indexSet(0, 96, t7);
    dst.$indexSet(0, 65, t7);
    dst.$indexSet(0, 34, t7);
    dst.$indexSet(0, 3, t7);
    t8 = A.VP8Filter__avg3(t8, t9, t10);
    dst.$indexSet(0, 97, t8);
    dst.$indexSet(0, 66, t8);
    dst.$indexSet(0, 35, t8);
    t9 = A.VP8Filter__avg3(t9, t10, t2);
    dst.$indexSet(0, 98, t9);
    dst.$indexSet(0, 67, t9);
    dst.$indexSet(0, 99, A.VP8Filter__avg3(t10, t2, t2));
    },
    VP8Filter__vr4(dst) {
    var t5, t6, t7, t8, t9, t10,
        t1 = dst.buffer,
        t2 = dst.offset,
        t3 = t2 + -1,
        t4 = t1.length;
    if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
    t3 = t1[t3];
    t5 = t2 + 31;
    if (!(t5 >= 0 && t5 < t4))
        return A.ioore(t1, t5);
    t5 = t1[t5];
    t6 = t2 + 63;
    if (!(t6 >= 0 && t6 < t4))
        return A.ioore(t1, t6);
    t6 = t1[t6];
    t7 = t2 + -33;
    if (!(t7 >= 0 && t7 < t4))
        return A.ioore(t1, t7);
    t7 = t1[t7];
    t8 = t2 + -32;
    if (!(t8 >= 0 && t8 < t4))
        return A.ioore(t1, t8);
    t8 = t1[t8];
    t9 = t2 + -31;
    if (!(t9 >= 0 && t9 < t4))
        return A.ioore(t1, t9);
    t9 = t1[t9];
    t10 = t2 + -30;
    if (!(t10 >= 0 && t10 < t4))
        return A.ioore(t1, t10);
    t10 = t1[t10];
    t2 += -29;
    if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
    t2 = t1[t2];
    t1 = B.JSInt_methods.toSigned$1(B.JSInt_methods._shrOtherPositive$1(t7 + t8 + 1, 1), 32);
    dst.$indexSet(0, 65, t1);
    dst.$indexSet(0, 0, t1);
    t1 = B.JSInt_methods.toSigned$1(B.JSInt_methods._shrOtherPositive$1(t8 + t9 + 1, 1), 32);
    dst.$indexSet(0, 66, t1);
    dst.$indexSet(0, 1, t1);
    t1 = B.JSInt_methods.toSigned$1(B.JSInt_methods._shrOtherPositive$1(t9 + t10 + 1, 1), 32);
    dst.$indexSet(0, 67, t1);
    dst.$indexSet(0, 2, t1);
    dst.$indexSet(0, 3, B.JSInt_methods.toSigned$1(B.JSInt_methods._shrOtherPositive$1(t10 + t2 + 1, 1), 32));
    dst.$indexSet(0, 96, A.VP8Filter__avg3(t6, t5, t3));
    dst.$indexSet(0, 64, A.VP8Filter__avg3(t5, t3, t7));
    t3 = A.VP8Filter__avg3(t3, t7, t8);
    dst.$indexSet(0, 97, t3);
    dst.$indexSet(0, 32, t3);
    t7 = A.VP8Filter__avg3(t7, t8, t9);
    dst.$indexSet(0, 98, t7);
    dst.$indexSet(0, 33, t7);
    t8 = A.VP8Filter__avg3(t8, t9, t10);
    dst.$indexSet(0, 99, t8);
    dst.$indexSet(0, 34, t8);
    dst.$indexSet(0, 35, A.VP8Filter__avg3(t9, t10, t2));
    },
    VP8Filter__vl4(dst) {
    var t5, t6, t7, t8, t9, t10,
        t1 = dst.buffer,
        t2 = dst.offset,
        t3 = t2 + -32,
        t4 = t1.length;
    if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
    t3 = t1[t3];
    t5 = t2 + -31;
    if (!(t5 >= 0 && t5 < t4))
        return A.ioore(t1, t5);
    t5 = t1[t5];
    t6 = t2 + -30;
    if (!(t6 >= 0 && t6 < t4))
        return A.ioore(t1, t6);
    t6 = t1[t6];
    t7 = t2 + -29;
    if (!(t7 >= 0 && t7 < t4))
        return A.ioore(t1, t7);
    t7 = t1[t7];
    t8 = t2 + -28;
    if (!(t8 >= 0 && t8 < t4))
        return A.ioore(t1, t8);
    t8 = t1[t8];
    t9 = t2 + -27;
    if (!(t9 >= 0 && t9 < t4))
        return A.ioore(t1, t9);
    t9 = t1[t9];
    t10 = t2 + -26;
    if (!(t10 >= 0 && t10 < t4))
        return A.ioore(t1, t10);
    t10 = t1[t10];
    t2 += -25;
    if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
    t2 = t1[t2];
    dst.$indexSet(0, 0, B.JSInt_methods.toSigned$1(B.JSInt_methods._shrOtherPositive$1(t3 + t5 + 1, 1), 32));
    t1 = B.JSInt_methods.toSigned$1(B.JSInt_methods._shrOtherPositive$1(t5 + t6 + 1, 1), 32);
    dst.$indexSet(0, 64, t1);
    dst.$indexSet(0, 1, t1);
    t1 = B.JSInt_methods.toSigned$1(B.JSInt_methods._shrOtherPositive$1(t6 + t7 + 1, 1), 32);
    dst.$indexSet(0, 65, t1);
    dst.$indexSet(0, 2, t1);
    t1 = B.JSInt_methods.toSigned$1(B.JSInt_methods._shrOtherPositive$1(t7 + t8 + 1, 1), 32);
    dst.$indexSet(0, 66, t1);
    dst.$indexSet(0, 3, t1);
    dst.$indexSet(0, 32, A.VP8Filter__avg3(t3, t5, t6));
    t5 = A.VP8Filter__avg3(t5, t6, t7);
    dst.$indexSet(0, 96, t5);
    dst.$indexSet(0, 33, t5);
    t6 = A.VP8Filter__avg3(t6, t7, t8);
    dst.$indexSet(0, 97, t6);
    dst.$indexSet(0, 34, t6);
    t7 = A.VP8Filter__avg3(t7, t8, t9);
    dst.$indexSet(0, 98, t7);
    dst.$indexSet(0, 35, t7);
    dst.$indexSet(0, 67, A.VP8Filter__avg3(t8, t9, t10));
    dst.$indexSet(0, 99, A.VP8Filter__avg3(t9, t10, t2));
    },
    VP8Filter__hu4(dst) {
    var t5, t6,
        t1 = dst.buffer,
        t2 = dst.offset,
        t3 = t2 + -1,
        t4 = t1.length;
    if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
    t3 = t1[t3];
    t5 = t2 + 31;
    if (!(t5 >= 0 && t5 < t4))
        return A.ioore(t1, t5);
    t5 = t1[t5];
    t6 = t2 + 63;
    if (!(t6 >= 0 && t6 < t4))
        return A.ioore(t1, t6);
    t6 = t1[t6];
    t2 += 95;
    if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
    t2 = t1[t2];
    dst.$indexSet(0, 0, B.JSInt_methods.toSigned$1(B.JSInt_methods._shrOtherPositive$1(t3 + t5 + 1, 1), 32));
    t1 = B.JSInt_methods.toSigned$1(B.JSInt_methods._shrOtherPositive$1(t5 + t6 + 1, 1), 32);
    dst.$indexSet(0, 32, t1);
    dst.$indexSet(0, 2, t1);
    t1 = B.JSInt_methods.toSigned$1(B.JSInt_methods._shrOtherPositive$1(t6 + t2 + 1, 1), 32);
    dst.$indexSet(0, 64, t1);
    dst.$indexSet(0, 34, t1);
    dst.$indexSet(0, 1, A.VP8Filter__avg3(t3, t5, t6));
    t5 = A.VP8Filter__avg3(t5, t6, t2);
    dst.$indexSet(0, 33, t5);
    dst.$indexSet(0, 3, t5);
    t6 = A.VP8Filter__avg3(t6, t2, t2);
    dst.$indexSet(0, 65, t6);
    dst.$indexSet(0, 35, t6);
    dst.$indexSet(0, 99, t2);
    dst.$indexSet(0, 98, t2);
    dst.$indexSet(0, 97, t2);
    dst.$indexSet(0, 96, t2);
    dst.$indexSet(0, 66, t2);
    dst.$indexSet(0, 67, t2);
    },
    VP8Filter__hd4(dst) {
    var t5, t6, t7, t8, t9, t10,
        t1 = dst.buffer,
        t2 = dst.offset,
        t3 = t2 + -1,
        t4 = t1.length;
    if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
    t3 = t1[t3];
    t5 = t2 + 31;
    if (!(t5 >= 0 && t5 < t4))
        return A.ioore(t1, t5);
    t5 = t1[t5];
    t6 = t2 + 63;
    if (!(t6 >= 0 && t6 < t4))
        return A.ioore(t1, t6);
    t6 = t1[t6];
    t7 = t2 + 95;
    if (!(t7 >= 0 && t7 < t4))
        return A.ioore(t1, t7);
    t7 = t1[t7];
    t8 = t2 + -33;
    if (!(t8 >= 0 && t8 < t4))
        return A.ioore(t1, t8);
    t8 = t1[t8];
    t9 = t2 + -32;
    if (!(t9 >= 0 && t9 < t4))
        return A.ioore(t1, t9);
    t9 = t1[t9];
    t10 = t2 + -31;
    if (!(t10 >= 0 && t10 < t4))
        return A.ioore(t1, t10);
    t10 = t1[t10];
    t2 += -30;
    if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
    t2 = t1[t2];
    t1 = B.JSInt_methods.toSigned$1(B.JSInt_methods._shrOtherPositive$1(t3 + t8 + 1, 1), 32);
    dst.$indexSet(0, 34, t1);
    dst.$indexSet(0, 0, t1);
    t1 = B.JSInt_methods.toSigned$1(B.JSInt_methods._shrOtherPositive$1(t5 + t3 + 1, 1), 32);
    dst.$indexSet(0, 66, t1);
    dst.$indexSet(0, 32, t1);
    t1 = B.JSInt_methods.toSigned$1(B.JSInt_methods._shrOtherPositive$1(t6 + t5 + 1, 1), 32);
    dst.$indexSet(0, 98, t1);
    dst.$indexSet(0, 64, t1);
    dst.$indexSet(0, 96, B.JSInt_methods.toSigned$1(B.JSInt_methods._shrOtherPositive$1(t7 + t6 + 1, 1), 32));
    dst.$indexSet(0, 3, A.VP8Filter__avg3(t9, t10, t2));
    dst.$indexSet(0, 2, A.VP8Filter__avg3(t8, t9, t10));
    t9 = A.VP8Filter__avg3(t3, t8, t9);
    dst.$indexSet(0, 35, t9);
    dst.$indexSet(0, 1, t9);
    t8 = A.VP8Filter__avg3(t5, t3, t8);
    dst.$indexSet(0, 67, t8);
    dst.$indexSet(0, 33, t8);
    t3 = A.VP8Filter__avg3(t6, t5, t3);
    dst.$indexSet(0, 99, t3);
    dst.$indexSet(0, 65, t3);
    dst.$indexSet(0, 97, A.VP8Filter__avg3(t7, t6, t5));
    },
    VP8Filter_ve16(dst) {
    var j;
    for (j = 0; j < 16; ++j)
        dst.memcpy$4(j * 32, 16, dst, -32);
    },
    VP8Filter_he16(dst) {
    var di, j, t1, t2, t3;
    for (di = 0, j = 16; j > 0; --j) {
        t1 = dst.buffer;
        t2 = dst.offset;
        t3 = t2 + (di - 1);
        if (!(t3 >= 0 && t3 < t1.length))
        return A.ioore(t1, t3);
        t2 += di;
        J.fillRange$3$ax(t1, t2, t2 + 16, t1[t3]);
        di += 32;
    }
    },
    VP8Filter_put16(v, dst) {
    var j, t1, t2;
    for (j = 0; j < 16; ++j) {
        t1 = dst.buffer;
        t2 = dst.offset + j * 32;
        J.fillRange$3$ax(t1, t2, t2 + 16, v);
    }
    },
    VP8Filter_dc16(dst) {
    var t1, t2, t3, dc, j, t4, t5;
    for (t1 = dst.buffer, t2 = dst.offset, t3 = t1.length, dc = 16, j = 0; j < 16; ++j) {
        t4 = t2 + (-1 + j * 32);
        if (!(t4 >= 0 && t4 < t3))
        return A.ioore(t1, t4);
        t4 = t1[t4];
        t5 = t2 + (j - 32);
        if (!(t5 >= 0 && t5 < t3))
        return A.ioore(t1, t5);
        dc += t4 + t1[t5];
    }
    A.VP8Filter_put16(B.JSInt_methods._shrOtherPositive$1(dc, 5), dst);
    },
    VP8Filter_dc16NoTop(dst) {
    var t1, t2, t3, dc, j, t4;
    for (t1 = dst.buffer, t2 = dst.offset, t3 = t1.length, dc = 8, j = 0; j < 16; ++j) {
        t4 = t2 + (-1 + j * 32);
        if (!(t4 >= 0 && t4 < t3))
        return A.ioore(t1, t4);
        dc += t1[t4];
    }
    A.VP8Filter_put16(B.JSInt_methods._shrOtherPositive$1(dc, 4), dst);
    },
    VP8Filter_dc16NoLeft(dst) {
    var t1, t2, t3, dc, i, t4;
    for (t1 = dst.buffer, t2 = dst.offset, t3 = t1.length, dc = 8, i = 0; i < 16; ++i) {
        t4 = t2 + (i - 32);
        if (!(t4 >= 0 && t4 < t3))
        return A.ioore(t1, t4);
        dc += t1[t4];
    }
    A.VP8Filter_put16(B.JSInt_methods._shrOtherPositive$1(dc, 4), dst);
    },
    VP8Filter_dc16NoTopLeft(dst) {
    A.VP8Filter_put16(128, dst);
    },
    VP8Filter_ve8uv(dst) {
    var j;
    for (j = 0; j < 8; ++j)
        dst.memcpy$4(j * 32, 8, dst, -32);
    },
    VP8Filter_he8uv(dst) {
    var di, j, t1, t2, t3;
    for (di = 0, j = 0; j < 8; ++j) {
        t1 = dst.buffer;
        t2 = dst.offset;
        t3 = t2 + (di - 1);
        if (!(t3 >= 0 && t3 < t1.length))
        return A.ioore(t1, t3);
        t2 += di;
        J.fillRange$3$ax(t1, t2, t2 + 8, t1[t3]);
        di += 32;
    }
    },
    VP8Filter_put8x8uv(value, dst) {
    var j, t1, t2;
    for (j = 0; j < 8; ++j) {
        t1 = dst.buffer;
        t2 = dst.offset + j * 32;
        J.fillRange$3$ax(t1, t2, t2 + 8, value);
    }
    },
    VP8Filter_dc8uv(dst) {
    var t1, t2, t3, dc0, i, t4, t5;
    for (t1 = dst.buffer, t2 = dst.offset, t3 = t1.length, dc0 = 8, i = 0; i < 8; ++i) {
        t4 = t2 + (i - 32);
        if (!(t4 >= 0 && t4 < t3))
        return A.ioore(t1, t4);
        t4 = t1[t4];
        t5 = t2 + (-1 + i * 32);
        if (!(t5 >= 0 && t5 < t3))
        return A.ioore(t1, t5);
        dc0 += t4 + t1[t5];
    }
    A.VP8Filter_put8x8uv(B.JSInt_methods._shrOtherPositive$1(dc0, 4), dst);
    },
    VP8Filter_dc8uvNoLeft(dst) {
    var t1, t2, t3, dc0, i, t4;
    for (t1 = dst.buffer, t2 = dst.offset, t3 = t1.length, dc0 = 4, i = 0; i < 8; ++i) {
        t4 = t2 + (i - 32);
        if (!(t4 >= 0 && t4 < t3))
        return A.ioore(t1, t4);
        dc0 += t1[t4];
    }
    A.VP8Filter_put8x8uv(B.JSInt_methods._shrOtherPositive$1(dc0, 3), dst);
    },
    VP8Filter_dc8uvNoTop(dst) {
    var t1, t2, t3, dc0, i, t4;
    for (t1 = dst.buffer, t2 = dst.offset, t3 = t1.length, dc0 = 4, i = 0; i < 8; ++i) {
        t4 = t2 + (-1 + i * 32);
        if (!(t4 >= 0 && t4 < t3))
        return A.ioore(t1, t4);
        dc0 += t1[t4];
    }
    A.VP8Filter_put8x8uv(B.JSInt_methods._shrOtherPositive$1(dc0, 3), dst);
    },
    VP8Filter_dc8uvNoTopLeft(dst) {
    A.VP8Filter_put8x8uv(128, dst);
    },
    VP8Filter__store(dst, di, x, y, v) {
    var t1 = di + x + y * 32,
        t2 = dst.buffer,
        t3 = dst.offset + t1;
    if (!(t3 >= 0 && t3 < t2.length))
        return A.ioore(t2, t3);
    t3 = t2[t3] + B.JSInt_methods._shrOtherPositive$1(v, 3);
    if ((t3 & -256) >>> 0 === 0)
        t2 = t3;
    else
        t2 = t3 < 0 ? 0 : 255;
    dst.$indexSet(0, t1, t2);
    },
    VP8Filter__store2(dst, y, dc, d, c) {
    A.VP8Filter__store(dst, 0, 0, y, dc + d);
    A.VP8Filter__store(dst, 0, 1, y, dc + c);
    A.VP8Filter__store(dst, 0, 2, y, dc - c);
    A.VP8Filter__store(dst, 0, 3, y, dc - d);
    },
    VP8Filter__initTables() {
    var i, t1, t2;
    if (!$.VP8Filter__tablesInitialized) {
        for (i = -255; i <= 255; ++i) {
        t1 = $.$get$VP8Filter_abs0();
        t2 = 255 + i;
        t1[t2] = i < 0 ? -i : i;
        $.$get$VP8Filter_abs1()[t2] = B.JSInt_methods._shrOtherPositive$1(t1[t2], 1);
        }
        for (i = -1020; i <= 1020; ++i) {
        t1 = $.$get$VP8Filter_sclip1();
        if (i < -128)
            t2 = -128;
        else
            t2 = i > 127 ? 127 : i;
        t1[1020 + i] = t2;
        }
        for (i = -112; i <= 112; ++i) {
        t1 = $.$get$VP8Filter_sclip2();
        if (i < -16)
            t2 = -16;
        else
            t2 = i > 15 ? 15 : i;
        t1[112 + i] = t2;
        }
        for (i = -255; i <= 510; ++i) {
        t1 = $.$get$VP8Filter_clip1();
        if (i < 0)
            t2 = 0;
        else
            t2 = i > 255 ? 255 : i;
        t1[255 + i] = t2;
        }
        $.VP8Filter__tablesInitialized = true;
    }
    },
    VP8Filter: function VP8Filter() {
    },
    VP8BandProbas$() {
    var _i,
        _list = J.JSArray_JSArray$allocateFixed(3, type$.Uint8List);
    for (_i = 0; _i < 3; ++_i)
        _list[_i] = new Uint8Array(11);
    return new A.VP8BandProbas(_list);
    },
    VP8Proba$() {
    var t2, _i, _list0, _i0,
        t1 = new Uint8Array(3),
        _list = J.JSArray_JSArray$allocateFixed(4, type$.List_VP8BandProbas);
    for (t2 = type$.VP8BandProbas, _i = 0; _i < 4; ++_i) {
        _list0 = J.JSArray_JSArray$allocateFixed(8, t2);
        for (_i0 = 0; _i0 < 8; ++_i0)
        _list0[_i0] = A.VP8BandProbas$();
        _list[_i] = _list0;
    }
    B.NativeUint8List_methods.fillRange$3(t1, 0, 3, 255);
    return new A.VP8Proba(t1, _list);
    },
    VP8FrameHeader: function VP8FrameHeader() {
    this.__VP8FrameHeader_partitionLength_A = $;
    },
    VP8PictureHeader: function VP8PictureHeader() {
    },
    VP8SegmentHeader: function VP8SegmentHeader(t0, t1) {
    var _ = this;
    _.updateMap = _.useSegment = false;
    _.absoluteDelta = true;
    _.quantizer = t0;
    _.filterStrength = t1;
    },
    VP8BandProbas: function VP8BandProbas(t0) {
    this.probas = t0;
    },
    VP8Proba: function VP8Proba(t0, t1) {
    this.segments = t0;
    this.bands = t1;
    },
    VP8FilterHeader: function VP8FilterHeader(t0, t1) {
    var _ = this;
    _.__VP8FilterHeader_simple_A = $;
    _.level = null;
    _.__VP8FilterHeader_useLfDelta_A = _.__VP8FilterHeader_sharpness_A = $;
    _.refLfDelta = t0;
    _.modeLfDelta = t1;
    },
    VP8FInfo: function VP8FInfo() {
    var _ = this;
    _.fInnerLevel = _.fLimit = 0;
    _.fInner = false;
    _.hevThresh = 0;
    },
    VP8MB: function VP8MB() {
    this.nzDc = this.nz = 0;
    },
    VP8QuantMatrix: function VP8QuantMatrix(t0, t1, t2) {
    this.y1Mat = t0;
    this.y2Mat = t1;
    this.uvMat = t2;
    },
    VP8MBData: function VP8MBData(t0, t1) {
    var _ = this;
    _.coeffs = t0;
    _.__VP8MBData_isIntra4x4_A = $;
    _.imodes = t1;
    _.nonZeroY = _.uvmode = null;
    _.__VP8MBData_nonZeroUV_A = $;
    },
    VP8TopSamples: function VP8TopSamples(t0, t1, t2) {
    this.y = t0;
    this.u = t1;
    this.v = t2;
    },
    VP8L$(input, webp) {
    var t5,
        t1 = A._setArrayType([], type$.JSArray_HTreeGroup),
        t2 = A._setArrayType([], type$.JSArray_VP8LTransform),
        t3 = new Uint32Array(2),
        t4 = new A.VP8LBitReader(input, t3);
    t3 = t4.__VP8LBitReader__buffer8_A = A.NativeUint8List_NativeUint8List$view(t3.buffer, 0, null);
    t5 = input.readByte$0();
    if (0 >= t3.length)
        return A.ioore(t3, 0);
    t3[0] = t5;
    t5 = input.readByte$0();
    if (1 >= t3.length)
        return A.ioore(t3, 1);
    t3[1] = t5;
    t5 = input.readByte$0();
    if (2 >= t3.length)
        return A.ioore(t3, 2);
    t3[2] = t5;
    t5 = input.readByte$0();
    if (3 >= t3.length)
        return A.ioore(t3, 3);
    t3[3] = t5;
    t5 = input.readByte$0();
    if (4 >= t3.length)
        return A.ioore(t3, 4);
    t3[4] = t5;
    t5 = input.readByte$0();
    if (5 >= t3.length)
        return A.ioore(t3, 5);
    t3[5] = t5;
    t5 = input.readByte$0();
    if (6 >= t3.length)
        return A.ioore(t3, 6);
    t3[6] = t5;
    t5 = input.readByte$0();
    if (7 >= t3.length)
        return A.ioore(t3, 7);
    t3[7] = t5;
    return new A.VP8L(t4, webp, t1, t2);
    },
    VP8L__subSampleSize(size, samplingBits) {
    return B.JSInt_methods._shrOtherPositive$1(size + B.JSInt_methods._shlPositive$1(1, samplingBits) - 1, samplingBits);
    },
    VP8L: function VP8L(t0, t1, t2, t3) {
    var _ = this;
    _.br = t0;
    _.webp = t1;
    _.image = null;
    _._colorCacheSize = _._lastRow = _._lastPixel = 0;
    _._colorCache = null;
    _._huffmanXsize = _._huffmanSubsampleBits = _._huffmanMask = 0;
    _._huffmanImage = null;
    _._numHtreeGroups = 0;
    _._htreeGroups = t2;
    _._transforms = t3;
    _._transformsSeen = 0;
    _._pixels = null;
    _.__VP8L__pixels8_A = $;
    _._ioWidth = _._opaque = _._argbCache = null;
    },
    InternalVP8L: function InternalVP8L(t0, t1, t2, t3) {
    var _ = this;
    _.br = t0;
    _.webp = t1;
    _.image = null;
    _._colorCacheSize = _._lastRow = _._lastPixel = 0;
    _._colorCache = null;
    _._huffmanXsize = _._huffmanSubsampleBits = _._huffmanMask = 0;
    _._huffmanImage = null;
    _._numHtreeGroups = 0;
    _._htreeGroups = t2;
    _._transforms = t3;
    _._transformsSeen = 0;
    _._pixels = null;
    _.__VP8L__pixels8_A = $;
    _._ioWidth = _._opaque = _._argbCache = null;
    },
    VP8LBitReader: function VP8LBitReader(t0, t1) {
    var _ = this;
    _.bitPos = 0;
    _._vp8l_bit_reader$_input = t0;
    _._vp8l_bit_reader$_buffer = t1;
    _.__VP8LBitReader__buffer8_A = $;
    },
    VP8LColorCache: function VP8LColorCache(t0, t1) {
    this.colors = t0;
    this.hashShift = t1;
    },
    VP8LTransform__addPixelsEq(pixels, a, b) {
    var pa;
    if (!(a < pixels.length))
        return A.ioore(pixels, a);
    pa = pixels[a];
    pixels[a] = (((pa & 4278255360) >>> 0) + ((b & 4278255360) >>> 0) & 4278255360 | (pa & 16711935) + (b & 16711935) & 16711935) >>> 0;
    },
    VP8LTransform__average2(a0, a1) {
    return ((a0 ^ a1) >>> 1 & 2139062143) + ((a0 & a1) >>> 0);
    },
    VP8LTransform__clip255(a) {
    if (a < 0)
        return 0;
    if (a > 255)
        return 255;
    return a;
    },
    VP8LTransform__sub3(a, b, c) {
    return Math.abs(b - c) - Math.abs(a - c);
    },
    VP8LTransform__predictor0(pixels, left, $top) {
    return 4278190080;
    },
    VP8LTransform__predictor1(pixels, left, $top) {
    return left;
    },
    VP8LTransform__predictor2(pixels, left, $top) {
    if (!($top >= 0 && $top < pixels.length))
        return A.ioore(pixels, $top);
    return pixels[$top];
    },
    VP8LTransform__predictor3(pixels, left, $top) {
    var t1 = $top + 1;
    if (!(t1 >= 0 && t1 < pixels.length))
        return A.ioore(pixels, t1);
    return pixels[t1];
    },
    VP8LTransform__predictor4(pixels, left, $top) {
    var t1 = $top - 1;
    if (!(t1 >= 0 && t1 < pixels.length))
        return A.ioore(pixels, t1);
    return pixels[t1];
    },
    VP8LTransform__predictor5(pixels, left, $top) {
    var t2, t3,
        t1 = pixels.length;
    if (!($top >= 0 && $top < t1))
        return A.ioore(pixels, $top);
    t2 = pixels[$top];
    t3 = $top + 1;
    if (!(t3 < t1))
        return A.ioore(pixels, t3);
    return A.VP8LTransform__average2(A.VP8LTransform__average2(left, pixels[t3]), t2);
    },
    VP8LTransform__predictor6(pixels, left, $top) {
    var t1 = $top - 1;
    if (!(t1 >= 0 && t1 < pixels.length))
        return A.ioore(pixels, t1);
    return A.VP8LTransform__average2(left, pixels[t1]);
    },
    VP8LTransform__predictor7(pixels, left, $top) {
    if (!($top >= 0 && $top < pixels.length))
        return A.ioore(pixels, $top);
    return A.VP8LTransform__average2(left, pixels[$top]);
    },
    VP8LTransform__predictor8(pixels, left, $top) {
    var t1 = $top - 1,
        t2 = pixels.length;
    if (!(t1 >= 0 && t1 < t2))
        return A.ioore(pixels, t1);
    t1 = pixels[t1];
    if (!($top >= 0 && $top < t2))
        return A.ioore(pixels, $top);
    return A.VP8LTransform__average2(t1, pixels[$top]);
    },
    VP8LTransform__predictor9(pixels, left, $top) {
    var t2, t3,
        t1 = pixels.length;
    if (!($top >= 0 && $top < t1))
        return A.ioore(pixels, $top);
    t2 = pixels[$top];
    t3 = $top + 1;
    if (!(t3 < t1))
        return A.ioore(pixels, t3);
    return A.VP8LTransform__average2(t2, pixels[t3]);
    },
    VP8LTransform__predictor10(pixels, left, $top) {
    var t3, t4,
        t1 = $top - 1,
        t2 = pixels.length;
    if (!(t1 >= 0 && t1 < t2))
        return A.ioore(pixels, t1);
    t1 = pixels[t1];
    if (!($top >= 0 && $top < t2))
        return A.ioore(pixels, $top);
    t3 = pixels[$top];
    t4 = $top + 1;
    if (!(t4 < t2))
        return A.ioore(pixels, t4);
    t4 = pixels[t4];
    return A.VP8LTransform__average2(A.VP8LTransform__average2(left, t1), A.VP8LTransform__average2(t3, t4));
    },
    VP8LTransform__predictor11(pixels, left, $top) {
    var t2, t3,
        t1 = pixels.length;
    if (!($top >= 0 && $top < t1))
        return A.ioore(pixels, $top);
    t2 = pixels[$top];
    t3 = $top - 1;
    if (!(t3 >= 0 && t3 < t1))
        return A.ioore(pixels, t3);
    t3 = pixels[t3];
    return A.VP8LTransform__sub3(t2 >>> 24, left >>> 24, t3 >>> 24) + A.VP8LTransform__sub3(t2 >>> 16 & 255, left >>> 16 & 255, t3 >>> 16 & 255) + A.VP8LTransform__sub3(t2 >>> 8 & 255, left >>> 8 & 255, t3 >>> 8 & 255) + A.VP8LTransform__sub3(t2 & 255, left & 255, t3 & 255) <= 0 ? t2 : left;
    },
    VP8LTransform__predictor12(pixels, left, $top) {
    var t2, t3,
        t1 = pixels.length;
    if (!($top >= 0 && $top < t1))
        return A.ioore(pixels, $top);
    t2 = pixels[$top];
    t3 = $top - 1;
    if (!(t3 >= 0 && t3 < t1))
        return A.ioore(pixels, t3);
    t3 = pixels[t3];
    return (A.VP8LTransform__clip255((left >>> 24) + (t2 >>> 24) - (t3 >>> 24)) << 24 | A.VP8LTransform__clip255((left >>> 16 & 255) + (t2 >>> 16 & 255) - (t3 >>> 16 & 255)) << 16 | A.VP8LTransform__clip255((left >>> 8 & 255) + (t2 >>> 8 & 255) - (t3 >>> 8 & 255)) << 8 | A.VP8LTransform__clip255((left & 255) + (t2 & 255) - (t3 & 255))) >>> 0;
    },
    VP8LTransform__predictor13(pixels, left, $top) {
    var t2, t3, avg, t4, t5,
        t1 = pixels.length;
    if (!($top >= 0 && $top < t1))
        return A.ioore(pixels, $top);
    t2 = pixels[$top];
    t3 = $top - 1;
    if (!(t3 >= 0 && t3 < t1))
        return A.ioore(pixels, t3);
    t3 = pixels[t3];
    avg = A.VP8LTransform__average2(left, t2);
    t2 = avg >>> 24;
    t1 = avg >>> 16 & 255;
    t4 = avg >>> 8 & 255;
    t5 = avg >>> 0 & 255;
    return (A.VP8LTransform__clip255(t2 + B.JSInt_methods._tdivFast$1(t2 - (t3 >>> 24), 2)) << 24 | A.VP8LTransform__clip255(t1 + B.JSInt_methods._tdivFast$1(t1 - (t3 >>> 16 & 255), 2)) << 16 | A.VP8LTransform__clip255(t4 + B.JSInt_methods._tdivFast$1(t4 - (t3 >>> 8 & 255), 2)) << 8 | A.VP8LTransform__clip255(t5 + B.JSInt_methods._tdivFast$1(t5 - (t3 & 255), 2))) >>> 0;
    },
    VP8LImageTransformType: function VP8LImageTransformType(t0, t1) {
    this.index = t0;
    this._name = t1;
    },
    VP8LTransform: function VP8LTransform(t0) {
    var _ = this;
    _.type = t0;
    _.ysize = _.xsize = 0;
    _.data = null;
    _.bits = 0;
    },
    WebPAlpha: function WebPAlpha(t0, t1, t2) {
    var _ = this;
    _.input = t0;
    _.width = t1;
    _.height = t2;
    _.preProcessing = _.filter = _.method = 0;
    _.rsrv = 1;
    _.isAlphaDecoded = false;
    _.__WebPAlpha__vp8l_A = $;
    _._use8bDecode = false;
    },
    WebPFrame: function WebPFrame() {
    },
    InternalWebPFrame: function InternalWebPFrame(t0, t1, t2) {
    var _ = this;
    _.x = t0;
    _.y = t1;
    _.duration = t2;
    _.__WebPFrame_clearFrame_A = $;
    _._reserved = 1;
    _.__WebPFrame__frameSize_A = _.__WebPFrame__framePosition_A = $;
    },
    HuffmanTree$() {
    var t1 = new Uint8Array(128),
        t2 = new Int16Array(128);
    t1 = new A.HuffmanTree(t1, t2, new Int16Array(128));
    t1._init$1(0);
    return t1;
    },
    HTreeGroup$() {
    var _i,
        _list = J.JSArray_JSArray$allocateFixed(5, type$.HuffmanTree);
    for (_i = 0; _i < 5; ++_i)
        _list[_i] = A.HuffmanTree$();
    return new A.HTreeGroup(_list);
    },
    HuffmanTree: function HuffmanTree(t0, t1, t2) {
    var _ = this;
    _._lutBits = t0;
    _._lutSymbol = t1;
    _._lutJump = t2;
    _.__HuffmanTree_tree_A = $;
    _.numNodes = _.maxNodes = 0;
    },
    HTreeGroup: function HTreeGroup(t0) {
    this.htrees = t0;
    },
    WebPFormat: function WebPFormat(t0, t1) {
    this.index = t0;
    this._name = t1;
    },
    WebPInfo: function WebPInfo(t0, t1) {
    var _ = this;
    _.height = _.width = 0;
    _.hasAnimation = _.hasAlpha = false;
    _.format = t0;
    _.frames = t1;
    _._numFrames = 0;
    _._webp_info$_alphaData = null;
    _._vp8Size = _._vp8Position = 0;
    },
    InternalWebPInfo: function InternalWebPInfo(t0, t1) {
    var _ = this;
    _.height = _.width = 0;
    _.hasAnimation = _.hasAlpha = false;
    _.format = t0;
    _.frames = t1;
    _._numFrames = 0;
    _._webp_info$_alphaData = null;
    _._vp8Size = _._vp8Position = 0;
    },
    WebPDecoder: function WebPDecoder() {
    this._webp_decoder$_input = this._webp_decoder$_info = null;
    },
    IccProfile$from(other) {
    return new A.IccProfile(other.name, other.compression, B.NativeUint8List_methods.sublist$1(other.data, 0));
    },
    IccProfileCompression: function IccProfileCompression(t0, t1) {
    this.index = t0;
    this._name = t1;
    },
    IccProfile: function IccProfile(t0, t1, t2) {
    this.name = t0;
    this.compression = t1;
    this.data = t2;
    },
    Image$(backgroundColor, exif, format, frameDuration, frameType, height, iccp, loopCount, numChannels, palette, width, withPalette) {
    var t2,
        t1 = new A.Image(null, null, null, backgroundColor, loopCount, frameType, frameDuration, 0);
    B.JSArray_methods.add$1(t1.get$frames(), t1);
    if (numChannels < 1 || numChannels > 4)
        A.throwExpression(A.ImageException$("Invalid number of channels for image " + numChannels + ". Must be between 1 and 4."));
    t1.iccProfile = iccp;
    if (exif != null)
        t1._exif = A.ExifData$from(exif);
    if (palette == null)
        if (withPalette)
        t2 = t1.get$format() === B.Format_0 || t1.get$format() === B.Format_1 || t1.get$format() === B.Format_2 || t1.get$format() === B.Format_3;
        else
        t2 = false;
    else
        t2 = false;
    t1._createImageData$5(width, height, format, numChannels, t2 ? t1._createPalette$2(B.Format_3, numChannels) : palette);
    return t1;
    },
    Image$fromResized(other, height, noAnimation, width) {
    var t2, t3, t4, _null = null,
        t1 = other._exif;
    t1 = t1 == null ? _null : A.ExifData$from(t1);
    t2 = other.iccProfile;
    t2 = t2 == null ? _null : A.IccProfile$from(t2);
    t3 = other.frameType;
    t4 = other.loopCount;
    t1 = new A.Image(_null, t2, t1, _null, t4, t3, other.frameDuration, other.frameIndex);
    t1.Image$fromResized$4$height$noAnimation$width(other, height, noAnimation, width);
    return t1;
    },
    Image$from(other, noAnimation, noPixels) {
    var t2, t3, t4, t5, _null = null,
        t1 = other.data;
    t1 = t1 == null ? _null : t1.clone$1$noPixels(noPixels);
    t2 = other._exif;
    t2 = t2 == null ? _null : A.ExifData$from(t2);
    t3 = other.iccProfile;
    t3 = t3 == null ? _null : A.IccProfile$from(t3);
    t4 = other.frameType;
    t5 = other.loopCount;
    t1 = new A.Image(t1, t3, t2, _null, t5, t4, other.frameDuration, other.frameIndex);
    t1.Image$from$3$noAnimation$noPixels(other, noAnimation, noPixels);
    return t1;
    },
    FrameType: function FrameType(t0, t1) {
    this.index = t0;
    this._name = t1;
    },
    Image: function Image(t0, t1, t2, t3, t4, t5, t6, t7) {
    var _ = this;
    _.data = t0;
    _.extraChannels = null;
    _.iccProfile = t1;
    _.textData = null;
    _._exif = t2;
    _.backgroundColor = t3;
    _.loopCount = t4;
    _.frameType = t5;
    _.__Image_frames_AI = $;
    _.frameDuration = t6;
    _.frameIndex = t7;
    },
    ImageData: function ImageData() {
    },
    ImageDataFloat16$(width, height, numChannels) {
    return new A.ImageDataFloat16(new Uint16Array(width * height * numChannels), width, height, numChannels);
    },
    ImageDataFloat16: function ImageDataFloat16(t0, t1, t2, t3) {
    var _ = this;
    _.data = t0;
    _.width = t1;
    _.height = t2;
    _.numChannels = t3;
    },
    ImageDataFloat32$(width, height, numChannels) {
    return new A.ImageDataFloat32(new Float32Array(width * height * numChannels), width, height, numChannels);
    },
    ImageDataFloat32: function ImageDataFloat32(t0, t1, t2, t3) {
    var _ = this;
    _.data = t0;
    _.width = t1;
    _.height = t2;
    _.numChannels = t3;
    },
    ImageDataFloat64: function ImageDataFloat64(t0, t1, t2, t3) {
    var _ = this;
    _.data = t0;
    _.width = t1;
    _.height = t2;
    _.numChannels = t3;
    },
    ImageDataInt16: function ImageDataInt16(t0, t1, t2, t3) {
    var _ = this;
    _.data = t0;
    _.width = t1;
    _.height = t2;
    _.numChannels = t3;
    },
    ImageDataInt32: function ImageDataInt32(t0, t1, t2, t3) {
    var _ = this;
    _.data = t0;
    _.width = t1;
    _.height = t2;
    _.numChannels = t3;
    },
    ImageDataInt8: function ImageDataInt8(t0, t1, t2, t3) {
    var _ = this;
    _.data = t0;
    _.width = t1;
    _.height = t2;
    _.numChannels = t3;
    },
    ImageDataUint1: function ImageDataUint1(t0, t1, t2, t3, t4, t5) {
    var _ = this;
    _.__ImageDataUint1_data_F = t0;
    _.rowStride = t1;
    _.palette = t2;
    _._image_data_uint1$_pixel = null;
    _.width = t3;
    _.height = t4;
    _.numChannels = t5;
    },
    ImageDataUint16: function ImageDataUint16(t0, t1, t2, t3) {
    var _ = this;
    _.data = t0;
    _.width = t1;
    _.height = t2;
    _.numChannels = t3;
    },
    ImageDataUint2: function ImageDataUint2(t0, t1, t2, t3, t4, t5) {
    var _ = this;
    _.__ImageDataUint2_data_F = t0;
    _.rowStride = t1;
    _.palette = t2;
    _._image_data_uint2$_pixel = null;
    _.width = t3;
    _.height = t4;
    _.numChannels = t5;
    },
    ImageDataUint32$(width, height, numChannels) {
    return new A.ImageDataUint32(new Uint32Array(width * height * numChannels), width, height, numChannels);
    },
    ImageDataUint32: function ImageDataUint32(t0, t1, t2, t3) {
    var _ = this;
    _.data = t0;
    _.width = t1;
    _.height = t2;
    _.numChannels = t3;
    },
    ImageDataUint4: function ImageDataUint4(t0, t1, t2, t3, t4, t5) {
    var _ = this;
    _.__ImageDataUint4_data_F = t0;
    _.rowStride = t1;
    _.palette = t2;
    _._pixel = null;
    _.width = t3;
    _.height = t4;
    _.numChannels = t5;
    },
    ImageDataUint8$(width, height, numChannels) {
    return new A.ImageDataUint8(new Uint8Array(width * height * numChannels), null, width, height, numChannels);
    },
    ImageDataUint8: function ImageDataUint8(t0, t1, t2, t3, t4) {
    var _ = this;
    _.data = t0;
    _.palette = t1;
    _.width = t2;
    _.height = t3;
    _.numChannels = t4;
    },
    Palette: function Palette() {
    },
    PaletteFloat16: function PaletteFloat16(t0, t1, t2) {
    this.data = t0;
    this.numColors = t1;
    this.numChannels = t2;
    },
    PaletteFloat32: function PaletteFloat32(t0, t1, t2) {
    this.data = t0;
    this.numColors = t1;
    this.numChannels = t2;
    },
    PaletteFloat64: function PaletteFloat64(t0, t1, t2) {
    this.data = t0;
    this.numColors = t1;
    this.numChannels = t2;
    },
    PaletteInt16: function PaletteInt16(t0, t1, t2) {
    this.data = t0;
    this.numColors = t1;
    this.numChannels = t2;
    },
    PaletteInt32: function PaletteInt32(t0, t1, t2) {
    this.data = t0;
    this.numColors = t1;
    this.numChannels = t2;
    },
    PaletteInt8: function PaletteInt8(t0, t1, t2) {
    this.data = t0;
    this.numColors = t1;
    this.numChannels = t2;
    },
    PaletteUint16: function PaletteUint16(t0, t1, t2) {
    this.data = t0;
    this.numColors = t1;
    this.numChannels = t2;
    },
    PaletteUint32: function PaletteUint32(t0, t1, t2) {
    this.data = t0;
    this.numColors = t1;
    this.numChannels = t2;
    },
    PaletteUint8$from(other) {
    return new A.PaletteUint8(new Uint8Array(A._ensureNativeList(other.data)), other.numColors, other.numChannels);
    },
    PaletteUint8: function PaletteUint8(t0, t1, t2) {
    this.data = t0;
    this.numColors = t1;
    this.numChannels = t2;
    },
    PixelFloat16$imageData(image) {
    return new A.PixelFloat16(-1, 0, -image.numChannels, image);
    },
    PixelFloat16: function PixelFloat16(t0, t1, t2, t3) {
    var _ = this;
    _._pixel_float16$_x = t0;
    _._pixel_float16$_y = t1;
    _._pixel_float16$_index = t2;
    _.image = t3;
    },
    PixelFloat32$imageData(image) {
    return new A.PixelFloat32(-1, 0, -image.numChannels, image);
    },
    PixelFloat32: function PixelFloat32(t0, t1, t2, t3) {
    var _ = this;
    _._pixel_float32$_x = t0;
    _._pixel_float32$_y = t1;
    _._pixel_float32$_index = t2;
    _.image = t3;
    },
    PixelFloat64$imageData(image) {
    return new A.PixelFloat64(-1, 0, -image.numChannels, image);
    },
    PixelFloat64: function PixelFloat64(t0, t1, t2, t3) {
    var _ = this;
    _._x = t0;
    _._y = t1;
    _._pixel_float64$_index = t2;
    _.image = t3;
    },
    PixelInt16$imageData(image) {
    return new A.PixelInt16(-1, 0, -image.numChannels, image);
    },
    PixelInt16: function PixelInt16(t0, t1, t2, t3) {
    var _ = this;
    _._pixel_int16$_x = t0;
    _._pixel_int16$_y = t1;
    _._pixel_int16$_index = t2;
    _.image = t3;
    },
    PixelInt32$imageData(image) {
    return new A.PixelInt32(-1, 0, -image.numChannels, image);
    },
    PixelInt32: function PixelInt32(t0, t1, t2, t3) {
    var _ = this;
    _._pixel_int32$_x = t0;
    _._pixel_int32$_y = t1;
    _._pixel_int32$_index = t2;
    _.image = t3;
    },
    PixelInt8$imageData(image) {
    return new A.PixelInt8(-1, 0, -image.numChannels, image);
    },
    PixelInt8: function PixelInt8(t0, t1, t2, t3) {
    var _ = this;
    _._pixel_int8$_x = t0;
    _._pixel_int8$_y = t1;
    _._pixel_int8$_index = t2;
    _.image = t3;
    },
    PixelUint1$imageData(image) {
    return new A.PixelUint1(-1, 0, 0, -1, 0, image);
    },
    PixelUint1: function PixelUint1(t0, t1, t2, t3, t4, t5) {
    var _ = this;
    _._pixel_uint1$_x = t0;
    _._pixel_uint1$_y = t1;
    _._pixel_uint1$_index = t2;
    _._pixel_uint1$_bitIndex = t3;
    _._pixel_uint1$_rowOffset = t4;
    _.image = t5;
    },
    PixelUint16$imageData(image) {
    return new A.PixelUint16(-1, 0, -image.numChannels, image);
    },
    PixelUint16: function PixelUint16(t0, t1, t2, t3) {
    var _ = this;
    _._pixel_uint16$_x = t0;
    _._pixel_uint16$_y = t1;
    _._pixel_uint16$_index = t2;
    _.image = t3;
    },
    PixelUint2$imageData(image) {
    return new A.PixelUint2(-1, 0, 0, -2, 0, image);
    },
    PixelUint2: function PixelUint2(t0, t1, t2, t3, t4, t5) {
    var _ = this;
    _._pixel_uint2$_x = t0;
    _._pixel_uint2$_y = t1;
    _._pixel_uint2$_index = t2;
    _._pixel_uint2$_bitIndex = t3;
    _._rowOffset = t4;
    _.image = t5;
    },
    PixelUint32$imageData(image) {
    return new A.PixelUint32(-1, 0, -image.numChannels, image);
    },
    PixelUint32: function PixelUint32(t0, t1, t2, t3) {
    var _ = this;
    _._pixel_uint32$_x = t0;
    _._pixel_uint32$_y = t1;
    _._pixel_uint32$_index = t2;
    _.image = t3;
    },
    PixelUint4$imageData(image) {
    return new A.PixelUint4(-1, 0, 0, -(image.numChannels << 2 >>> 0), image);
    },
    PixelUint4: function PixelUint4(t0, t1, t2, t3, t4) {
    var _ = this;
    _._pixel_uint4$_x = t0;
    _._pixel_uint4$_y = t1;
    _._pixel_uint4$_index = t2;
    _._bitIndex = t3;
    _.image = t4;
    },
    PixelUint8$imageData(image) {
    return new A.PixelUint8(-1, 0, -image.numChannels, image);
    },
    PixelUint8: function PixelUint8(t0, t1, t2, t3) {
    var _ = this;
    _._pixel_uint8$_x = t0;
    _._pixel_uint8$_y = t1;
    _._pixel_uint8$_index = t2;
    _.image = t3;
    },
    PixelUndefined: function PixelUndefined() {
    },
    ImageException$(message) {
    return new A.ImageException(message);
    },
    ImageException: function ImageException(t0) {
    this.message = t0;
    },
    InputBuffer$(buffer, bigEndian, $length, offset) {
    return new A.InputBuffer(buffer, offset, $length == null ? buffer.length : offset + $length, offset, bigEndian);
    },
    InputBuffer$from(other, $length, offset) {
    var t1 = other.buffer,
        t2 = other.offset + offset,
        t3 = other.start,
        t4 = $length == null ? other.end : t2 + $length;
    return new A.InputBuffer(t1, t3, t4, t2, other.bigEndian);
    },
    InputBuffer: function InputBuffer(t0, t1, t2, t3, t4) {
    var _ = this;
    _.buffer = t0;
    _.start = t1;
    _.end = t2;
    _.offset = t3;
    _.bigEndian = t4;
    },
    NeuralQuantizer: function NeuralQuantizer(t0) {
    var _ = this;
    _.__NeuralQuantizer_palette_A = $;
    _.samplingFactor = 10;
    _.netSize = 16;
    _.specials = 3;
    _.__NeuralQuantizer_cutNetSize_A = _.__NeuralQuantizer_bgColor_A = $;
    _.maxNetPos = null;
    _.__NeuralQuantizer__palette_A = _.__NeuralQuantizer__network_A = _.__NeuralQuantizer__radiusPower_A = _.__NeuralQuantizer_initBiasRadius_A = _.__NeuralQuantizer_initRadius_A = $;
    _._netIndex = t0;
    _.__NeuralQuantizer__freq_A = _.__NeuralQuantizer__bias_A = $;
    },
    OutputBuffer$(bigEndian, size) {
    return new A.OutputBuffer(bigEndian, new Uint8Array(size));
    },
    OutputBuffer: function OutputBuffer(t0, t1) {
    this.length = 0;
    this.bigEndian = t0;
    this._output_buffer$_buffer = t1;
    },
    Quantizer: function Quantizer() {
    },
    Rational: function Rational(t0, t1) {
    this.numerator = t0;
    this.denominator = t1;
    },
    Uint64List_Uint64List($length) {
    throw A.wrapException(A.UnsupportedError$("Uint64List not supported on the web."));
    },
    Int8List_Int8List$view(buffer, offsetInBytes, $length) {
    A._checkViewArguments(buffer, offsetInBytes, $length);
    return $length == null ? new Int8Array(buffer, offsetInBytes) : new Int8Array(buffer, offsetInBytes, $length);
    },
    Uint32List_Uint32List$view(buffer, offsetInBytes) {
    var $length;
    A._checkViewArguments(buffer, offsetInBytes, null);
    $length = B.JSInt_methods._tdivFast$1(buffer.byteLength - offsetInBytes, 4);
    return new Uint32Array(buffer, offsetInBytes, $length);
    },
    Float32List_Float32List$view(buffer) {
    var $length;
    A._checkViewArguments(buffer, 0, null);
    $length = B.JSInt_methods._tdivFast$1(buffer.byteLength - 0, 4);
    return new Float32Array(buffer, 0, $length);
    },
    Float64List_Float64List$view(buffer) {
    return buffer.asFloat64List$2(0, 0, null);
    },
    printString(string) {
    if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
    }
    if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
    }
    if (typeof window == "object")
        return;
    if (typeof print == "function") {
        print(string);
        return;
    }
    throw "Unable to print message: " + String(string);
    },
    getAdler32(array) {
    var len0, s1, s2, i, n, i0,
        len = array.length;
    for (len0 = len, s1 = 1, s2 = 0, i = 0; len0 > 0;) {
        n = 3800 > len0 ? len0 : 3800;
        len0 -= n;
        for (; --n, n >= 0; i = i0) {
        i0 = i + 1;
        if (!(i >= 0 && i < len))
            return A.ioore(array, i);
        s1 += array[i] & 255;
        s2 += s1;
        }
        s1 = B.JSInt_methods.$mod(s1, 65521);
        s2 = B.JSInt_methods.$mod(s2, 65521);
    }
    return (s2 << 16 | s1) >>> 0;
    },
    getCrc32(array, crc) {
    var ip, ip0, t2,
        t1 = J.getInterceptor$asx(array),
        len = t1.get$length(array);
    crc ^= 4294967295;
    for (ip = 0; len >= 8;) {
        ip0 = ip + 1;
        t2 = t1.$index(array, ip);
        if (typeof t2 !== "number")
        return A.iae(t2);
        crc = B.List_B8J[(crc ^ t2) & 255] ^ crc >>> 8;
        ip = ip0 + 1;
        t2 = t1.$index(array, ip0);
        if (typeof t2 !== "number")
        return A.iae(t2);
        crc = B.List_B8J[(crc ^ t2) & 255] ^ crc >>> 8;
        ip0 = ip + 1;
        t2 = t1.$index(array, ip);
        if (typeof t2 !== "number")
        return A.iae(t2);
        crc = B.List_B8J[(crc ^ t2) & 255] ^ crc >>> 8;
        ip = ip0 + 1;
        t2 = t1.$index(array, ip0);
        if (typeof t2 !== "number")
        return A.iae(t2);
        crc = B.List_B8J[(crc ^ t2) & 255] ^ crc >>> 8;
        ip0 = ip + 1;
        t2 = t1.$index(array, ip);
        if (typeof t2 !== "number")
        return A.iae(t2);
        crc = B.List_B8J[(crc ^ t2) & 255] ^ crc >>> 8;
        ip = ip0 + 1;
        t2 = t1.$index(array, ip0);
        if (typeof t2 !== "number")
        return A.iae(t2);
        crc = B.List_B8J[(crc ^ t2) & 255] ^ crc >>> 8;
        ip0 = ip + 1;
        t2 = t1.$index(array, ip);
        if (typeof t2 !== "number")
        return A.iae(t2);
        crc = B.List_B8J[(crc ^ t2) & 255] ^ crc >>> 8;
        ip = ip0 + 1;
        t2 = t1.$index(array, ip0);
        if (typeof t2 !== "number")
        return A.iae(t2);
        crc = B.List_B8J[(crc ^ t2) & 255] ^ crc >>> 8;
        len -= 8;
    }
    if (len > 0)
        do {
        ip0 = ip + 1;
        t2 = t1.$index(array, ip);
        if (typeof t2 !== "number")
            return A.iae(t2);
        crc = B.List_B8J[(crc ^ t2) & 255] ^ crc >>> 8;
        if (--len, len > 0) {
            ip = ip0;
            continue;
        } else
            break;
        } while (true);
    return (crc ^ 4294967295) >>> 0;
    },
    compositeImage(dst, src, blend, dstX, dstY) {
    var dy, dx, t1, yCache, y, xCache, x, _null = null,
        srcW = src.get$width(),
        srcH = src.get$height(),
        dstW = dst.get$width() < src.get$width() ? dst.get$width() : src.get$width(),
        dstH = dst.get$height() < src.get$height() ? dst.get$height() : src.get$height();
    if (dst.get$hasPalette())
        dst.convert$1$numChannels(dst.get$numChannels());
    if (typeof dstH !== "number")
        return A.iae(dstH);
    dy = srcH / dstH;
    if (typeof dstW !== "number")
        return A.iae(dstW);
    dx = srcW / dstW;
    t1 = type$.int;
    yCache = J.JSArray_JSArray$allocateFixed(dstH, t1);
    for (y = 0; y < dstH; ++y)
        yCache[y] = B.JSNumber_methods.toInt$0(y * dy);
    xCache = J.JSArray_JSArray$allocateFixed(dstW, t1);
    for (x = 0; x < dstW; ++x)
        xCache[x] = B.JSNumber_methods.toInt$0(x * dx);
    if (blend === B.BlendMode_0)
        A._directComposite(src, dst, dstX, dstY, dstW, dstH, xCache, yCache, _null, B.Channel_4);
    else
        A._composite(src, dst, dstX, dstY, dstW, dstH, xCache, yCache, blend, false, _null, B.Channel_4);
    return dst;
    },
    _directComposite(src, dst, dstX, dstY, dstW, dstH, xCache, yCache, mask, maskChannel) {
    var t1, t2, p, y, t3, x, t4, t5, t6;
    for (t1 = xCache.length, t2 = yCache.length, p = null, y = 0; y < dstH; ++y)
        for (t3 = dstY + y, x = 0; x < dstW; ++x) {
        if (!(x < t1))
            return A.ioore(xCache, x);
        t4 = xCache[x];
        if (!(y < t2))
            return A.ioore(yCache, y);
        t5 = yCache[y];
        t6 = src.data;
        p = t6 == null ? null : t6.getPixel$3(t4, t5, p);
        if (p == null)
            p = new A.PixelUndefined();
        dst.setPixel$3(dstX + x, t3, p);
        }
    },
    _composite(src, dst, dstX, dstY, dstW, dstH, xCache, yCache, blend, linearBlend, mask, maskChannel) {
    var t1, t2, p, y, t3, x, t4, t5, t6;
    for (t1 = xCache.length, t2 = yCache.length, p = null, y = 0; y < dstH; ++y)
        for (t3 = dstY + y, x = 0; x < dstW; ++x) {
        if (!(x < t1))
            return A.ioore(xCache, x);
        t4 = xCache[x];
        if (!(y < t2))
            return A.ioore(yCache, y);
        t5 = yCache[y];
        t6 = src.data;
        p = t6 == null ? null : t6.getPixel$3(t4, t5, p);
        if (p == null)
            p = new A.PixelUndefined();
        A.drawPixel(dst, dstX + x, t3, p, blend, false, mask, maskChannel);
        }
    },
    drawPixel(image, x, y, c, blend, linearBlend, mask, maskChannel) {
    var overlayR, overlayG, overlayB, t1, dst, baseR, baseG, baseB, baseA, baseOverlayAlphaProduct, t2, t3, rightHandProductR, rightHandProductG, rightHandProductB, t4, oR, oG, oB, colorChoiceR, colorChoiceG, colorChoiceB, t5, t6, invA;
    if (!image.isBoundsSafe$2(x, y))
        return image;
    if (blend === B.BlendMode_0 || image.get$hasPalette())
        if (image.isBoundsSafe$2(x, y)) {
        image.getPixel$2(x, y).$set$1(c);
        return image;
        }
    overlayR = c.get$rNormalized();
    overlayG = c.get$gNormalized();
    overlayB = c.get$bNormalized();
    t1 = c.get$length(c) < 4 ? 1 : c.get$aNormalized();
    if (typeof t1 !== "number")
        return t1.$mul();
    if (t1 === 0)
        return image;
    dst = image.getPixel$2(x, y);
    baseR = dst.get$rNormalized();
    baseG = dst.get$gNormalized();
    baseB = dst.get$bNormalized();
    baseA = dst.get$aNormalized();
    switch (blend.index) {
        case 0:
        return image;
        case 1:
        break;
        case 2:
        overlayR = Math.max(baseR, overlayR);
        overlayG = Math.max(baseG, overlayG);
        overlayB = Math.max(baseB, overlayB);
        break;
        case 3:
        overlayR = 1 - (1 - overlayR) * (1 - baseR);
        overlayG = 1 - (1 - overlayG) * (1 - baseG);
        overlayB = 1 - (1 - overlayB) * (1 - baseB);
        break;
        case 4:
        baseOverlayAlphaProduct = t1 * baseA;
        t2 = 1 - baseA;
        t3 = 1 - t1;
        rightHandProductR = overlayR * t2 + baseR * t3;
        rightHandProductG = overlayG * t2 + baseG * t3;
        rightHandProductB = overlayB * t2 + baseB * t3;
        t3 = B.JSNumber_methods.clamp$2(t1, 0.01, 1);
        t2 = t1 < 0;
        t4 = t2 ? 0 : 1;
        oR = B.JSNumber_methods.clamp$2(overlayR / t3 * t4, 0, 0.99);
        t4 = B.JSNumber_methods.clamp$2(t1, 0.01, 1);
        t3 = t2 ? 0 : 1;
        oG = B.JSNumber_methods.clamp$2(overlayG / t4 * t3, 0, 0.99);
        t3 = B.JSNumber_methods.clamp$2(t1, 0.01, 1);
        t2 = t2 ? 0 : 1;
        oB = B.JSNumber_methods.clamp$2(overlayB / t3 * t2, 0, 0.99);
        t2 = baseR * t1;
        t3 = baseG * t1;
        t4 = baseB * t1;
        colorChoiceR = baseOverlayAlphaProduct < overlayR * baseA + t2 ? 0 : 1;
        colorChoiceG = baseOverlayAlphaProduct < overlayG * baseA + t3 ? 0 : 1;
        colorChoiceB = baseOverlayAlphaProduct < overlayB * baseA + t4 ? 0 : 1;
        overlayR = (baseOverlayAlphaProduct + rightHandProductR) * (1 - colorChoiceR) + (t2 / (1 - oR) + rightHandProductR) * colorChoiceR;
        overlayG = (baseOverlayAlphaProduct + rightHandProductG) * (1 - colorChoiceG) + (t3 / (1 - oG) + rightHandProductG) * colorChoiceG;
        overlayB = (baseOverlayAlphaProduct + rightHandProductB) * (1 - colorChoiceB) + (t4 / (1 - oB) + rightHandProductB) * colorChoiceB;
        break;
        case 5:
        overlayR = baseR + overlayR;
        overlayG = baseG + overlayG;
        overlayB = baseB + overlayB;
        break;
        case 6:
        overlayR = Math.min(baseR, overlayR);
        overlayG = Math.min(baseG, overlayG);
        overlayB = Math.min(baseB, overlayB);
        break;
        case 7:
        overlayR = baseR * overlayR;
        overlayG = baseG * overlayG;
        overlayB = baseB * overlayB;
        break;
        case 8:
        overlayR = overlayR !== 0 ? 1 - (1 - baseR) / overlayR : 0;
        overlayG = overlayG !== 0 ? 1 - (1 - baseG) / overlayG : 0;
        overlayB = overlayB !== 0 ? 1 - (1 - baseB) / overlayB : 0;
        break;
        case 9:
        t2 = 1 - baseA;
        t3 = 1 - t1;
        t4 = overlayR * t2;
        t5 = baseR * t3;
        overlayR = 2 * baseR < baseA ? 2 * overlayR * baseR + t4 + t5 : t1 * baseA - 2 * (baseA - baseR) * (t1 - overlayR) + t4 + t5;
        t4 = overlayG * t2;
        t5 = baseG * t3;
        overlayG = 2 * baseG < baseA ? 2 * overlayG * baseG + t4 + t5 : t1 * baseA - 2 * (baseA - baseG) * (t1 - overlayG) + t4 + t5;
        t2 = overlayB * t2;
        t3 = baseB * t3;
        overlayB = 2 * baseB < baseA ? 2 * overlayB * baseB + t2 + t3 : t1 * baseA - 2 * (baseA - baseB) * (t1 - overlayB) + t2 + t3;
        break;
        case 10:
        t2 = baseA === 0;
        if (t2)
            overlayR = 0;
        else {
            t3 = baseR / baseA;
            overlayR = baseR * (t1 * t3 + 2 * overlayR * (1 - t3)) + overlayR * (1 - baseA) + baseR * (1 - t1);
        }
        if (t2)
            overlayG = 0;
        else {
            t3 = baseG / baseA;
            overlayG = baseG * (t1 * t3 + 2 * overlayG * (1 - t3)) + overlayG * (1 - baseA) + baseG * (1 - t1);
        }
        if (t2)
            overlayB = 0;
        else {
            t2 = baseB / baseA;
            overlayB = baseB * (t1 * t2 + 2 * overlayB * (1 - t2)) + overlayB * (1 - baseA) + baseB * (1 - t1);
        }
        break;
        case 11:
        t2 = 2 * overlayR;
        t3 = 1 - baseA;
        t4 = 1 - t1;
        t5 = overlayR * t3;
        t6 = baseR * t4;
        overlayR = t2 < t1 ? t2 * baseR + t5 + t6 : t1 * baseA - 2 * (baseA - baseR) * (t1 - overlayR) + t5 + t6;
        t2 = 2 * overlayG;
        t5 = overlayG * t3;
        t6 = baseG * t4;
        overlayG = t2 < t1 ? t2 * baseG + t5 + t6 : t1 * baseA - 2 * (baseA - baseG) * (t1 - overlayG) + t5 + t6;
        t2 = 2 * overlayB;
        t3 = overlayB * t3;
        t4 = baseB * t4;
        overlayB = t2 < t1 ? t2 * baseB + t3 + t4 : t1 * baseA - 2 * (baseA - baseB) * (t1 - overlayB) + t3 + t4;
        break;
        case 12:
        overlayR = Math.abs(overlayR - baseR);
        overlayG = Math.abs(overlayG - baseG);
        overlayB = Math.abs(overlayB - baseB);
        break;
        case 13:
        overlayR = baseR - overlayR;
        overlayG = baseG - overlayG;
        overlayB = baseB - overlayB;
        break;
        case 14:
        overlayR = overlayR !== 0 ? baseR / overlayR : 0;
        overlayG = overlayG !== 0 ? baseG / overlayG : 0;
        overlayB = overlayB !== 0 ? baseB / overlayB : 0;
        break;
    }
    invA = 1 - t1;
    dst.set$rNormalized(overlayR * t1 + baseR * baseA * invA);
    dst.set$gNormalized(overlayG * t1 + baseG * baseA * invA);
    dst.set$bNormalized(overlayB * t1 + baseB * baseA * invA);
    dst.set$aNormalized(t1 + baseA * invA);
    return image;
    },
    ExrWavelet_decode(input, si, nx, ox, ny, oy, mx) {
    var p, p0, aB, t1, p2, ey, oy1, oy2, ox1, ox2, t2, t3, py, ex, px, p01, p10, p11, t4, i00, i10, i01, i11,
        w14 = mx < 16384,
        n = nx > ny ? ny : nx;
    for (p = 1; p <= n;)
        p = p << 1 >>> 0;
    p = p >>> 1;
    p0 = p >>> 1;
    aB = A._setArrayType([0, 0], type$.JSArray_int);
    for (t1 = input.length, p2 = p, p = p0; p >= 1; p2 = p, p = p0) {
        ey = si + oy * (ny - p2);
        oy1 = oy * p;
        oy2 = oy * p2;
        ox1 = ox * p;
        ox2 = ox * p2;
        for (t2 = (nx & p) >>> 0 !== 0, t3 = ox * (nx - p2), py = si; py <= ey; py += oy2) {
        ex = py + t3;
        for (px = py; px <= ex; px += ox2) {
            p01 = px + ox1;
            p10 = px + oy1;
            p11 = p10 + ox1;
            if (w14) {
            if (!(px >= 0 && px < t1))
                return A.ioore(input, px);
            t4 = input[px];
            if (!(p10 >= 0 && p10 < t1))
                return A.ioore(input, p10);
            A.ExrWavelet_wdec14(t4, input[p10], aB);
            i00 = aB[0];
            i10 = aB[1];
            if (!(p01 >= 0 && p01 < t1))
                return A.ioore(input, p01);
            t4 = input[p01];
            if (!(p11 >= 0 && p11 < t1))
                return A.ioore(input, p11);
            A.ExrWavelet_wdec14(t4, input[p11], aB);
            i01 = aB[0];
            i11 = aB[1];
            A.ExrWavelet_wdec14(i00, i01, aB);
            input[px] = aB[0];
            input[p01] = aB[1];
            A.ExrWavelet_wdec14(i10, i11, aB);
            input[p10] = aB[0];
            input[p11] = aB[1];
            } else {
            if (!(px >= 0 && px < t1))
                return A.ioore(input, px);
            t4 = input[px];
            if (!(p10 >= 0 && p10 < t1))
                return A.ioore(input, p10);
            A.ExrWavelet_wdec16(t4, input[p10], aB);
            i00 = aB[0];
            i10 = aB[1];
            if (!(p01 >= 0 && p01 < t1))
                return A.ioore(input, p01);
            t4 = input[p01];
            if (!(p11 >= 0 && p11 < t1))
                return A.ioore(input, p11);
            A.ExrWavelet_wdec16(t4, input[p11], aB);
            i01 = aB[0];
            i11 = aB[1];
            A.ExrWavelet_wdec16(i00, i01, aB);
            input[px] = aB[0];
            input[p01] = aB[1];
            A.ExrWavelet_wdec16(i10, i11, aB);
            input[p10] = aB[0];
            input[p11] = aB[1];
            }
        }
        if (t2) {
            p10 = px + oy1;
            if (w14) {
            if (!(px >= 0 && px < t1))
                return A.ioore(input, px);
            t4 = input[px];
            if (!(p10 >= 0 && p10 < t1))
                return A.ioore(input, p10);
            A.ExrWavelet_wdec14(t4, input[p10], aB);
            i00 = aB[0];
            input[p10] = aB[1];
            } else {
            if (!(px >= 0 && px < t1))
                return A.ioore(input, px);
            t4 = input[px];
            if (!(p10 >= 0 && p10 < t1))
                return A.ioore(input, p10);
            A.ExrWavelet_wdec16(t4, input[p10], aB);
            i00 = aB[0];
            input[p10] = aB[1];
            }
            if (!(px >= 0 && px < t1))
            return A.ioore(input, px);
            input[px] = i00;
        }
        }
        if ((ny & p) >>> 0 !== 0) {
        ex = py + t3;
        for (px = py; px <= ex; px += ox2) {
            p01 = px + ox1;
            if (w14) {
            if (!(px >= 0 && px < t1))
                return A.ioore(input, px);
            t2 = input[px];
            if (!(p01 >= 0 && p01 < t1))
                return A.ioore(input, p01);
            A.ExrWavelet_wdec14(t2, input[p01], aB);
            i00 = aB[0];
            input[p01] = aB[1];
            } else {
            if (!(px >= 0 && px < t1))
                return A.ioore(input, px);
            t2 = input[px];
            if (!(p01 >= 0 && p01 < t1))
                return A.ioore(input, p01);
            A.ExrWavelet_wdec16(t2, input[p01], aB);
            i00 = aB[0];
            input[p01] = aB[1];
            }
            if (!(px >= 0 && px < t1))
            return A.ioore(input, px);
            input[px] = i00;
        }
        }
        p0 = p >>> 1;
    }
    },
    ExrWavelet_wdec14(l, h, aB) {
    var t2, t3, ls, hs, ai,
        t1 = $.$get$__uint16();
    t1[0] = l;
    t2 = $.$get$__uint16ToInt16();
    t3 = t2.length;
    if (0 >= t3)
        return A.ioore(t2, 0);
    ls = t2[0];
    t1[0] = h;
    if (0 >= t3)
        return A.ioore(t2, 0);
    hs = t2[0];
    ai = ls + (hs & 1) + B.JSInt_methods._shrOtherPositive$1(hs, 1);
    B.JSArray_methods.$indexSet(aB, 0, ai);
    B.JSArray_methods.$indexSet(aB, 1, ai - hs);
    },
    ExrWavelet_wdec16(l, h, aB) {
    var bb = l - B.JSInt_methods._shrOtherPositive$1(h, 1) & 65535;
    B.JSArray_methods.$indexSet(aB, 1, bb);
    B.JSArray_methods.$indexSet(aB, 0, h + bb - 32768 & 65535);
    },
    findDecoderForData(data) {
    var png, gif, webp, tiff, tga, input, t1, ico, pvr, _null = null;
    console.log("jpeg?");
    if (A.JpegData$().validate$1(data))
        return new A.JpegDecoder();
    console.log("png?");
    png = new A.PngDecoder(A.InternalPngInfo$());
    if (png.isValidFile$1(data))
        return png;
    console.log("GIF?!");
    gif = new A.GifDecoder();
    gif._input = A.InputBuffer$(data, false, _null, 0);
    gif.info = new A.GifInfo(A._setArrayType([], type$.JSArray_GifImageDesc));
    if (gif._getInfo$0())
        return gif;
    console.log("huh?");
    webp = new A.WebPDecoder();
    if (webp.isValidFile$1(data))
        return webp;
    console.log("nah");
    tiff = new A.TiffDecoder();
    if (tiff._readHeader$1(A.InputBuffer$(data, false, _null, 0)) != null)
        return tiff;
    if (A.PsdImage$(data).signature === 943870035)
        return new A.PsdDecoder();
    if (A.ExrImage_isValidFile(data))
        return new A.ExrDecoder();
    if (A.BmpFileHeader_isValidFile(A.InputBuffer$(data, false, _null, 0)))
        return new A.BmpDecoder(false);
    tga = new A.TgaDecoder();
    input = A.InputBuffer$(data, false, _null, 0);
    t1 = tga.info = new A.TgaInfo(B.TgaImageType_0);
    t1.read$1(input);
    if (t1.isValid$0())
        return tga;
    ico = new A.IcoDecoder();
    t1 = A.InputBuffer$(data, false, _null, 0);
    ico._ico_decoder$_input = t1;
    t1 = A.IcoInfo_read(t1);
    ico._icoInfo = t1;
    if (t1 != null)
        return ico;
    pvr = new A.PvrDecoder();
    if (pvr.startDecode$1(data) != null)
        return pvr;
    console.log("nah null");
    return _null;
    },
    decodeImage(data) {
    var decoder = A.findDecoderForData(data);
    console.log("decoder?");
    console.log(decoder);
    return decoder == null ? null : decoder.decode$2$frame(data, null);
    },
    encodePng(image) {
    return new A.PngEncoder(B.PngFilter_4, 6).encode$2$singleFrame(image, false);
    },
    quantizeAndInverse(quantizationTable, coefBlock, dataOut, dataIn) {
    var t1, i, t2, row, t3, t, v0, t4, v1, v2, t5, v3, t6, t7, t8, v4, v7, v5, v6, t9, t10, t11, t12;
    if ($._dctClip == null) {
        t1 = $._dctClip = new Uint8Array(768);
        for (i = -256; i < 0; ++i)
        t1[256 + i] = 0;
        for (i = 0; i < 256; ++i)
        t1[256 + i] = i;
        for (i = 256; i < 512; ++i)
        t1[256 + i] = 255;
    }
    for (i = 0; i < 64; ++i) {
        t1 = coefBlock[i];
        t2 = quantizationTable[i];
        if (!(i < 64))
        return A.ioore(dataIn, i);
        dataIn[i] = t1 * t2;
    }
    for (row = 0, i = 0; i < 8; ++i, row += 8) {
        t1 = 1 + row;
        if (!(t1 < 64))
        return A.ioore(dataIn, t1);
        t2 = dataIn[t1];
        if (t2 === 0) {
        t3 = 2 + row;
        if (!(t3 < 64))
            return A.ioore(dataIn, t3);
        if (dataIn[t3] === 0) {
            t3 = 3 + row;
            if (!(t3 < 64))
            return A.ioore(dataIn, t3);
            if (dataIn[t3] === 0) {
            t3 = 4 + row;
            if (!(t3 < 64))
                return A.ioore(dataIn, t3);
            if (dataIn[t3] === 0) {
                t3 = 5 + row;
                if (!(t3 < 64))
                return A.ioore(dataIn, t3);
                if (dataIn[t3] === 0) {
                t3 = 6 + row;
                if (!(t3 < 64))
                    return A.ioore(dataIn, t3);
                if (dataIn[t3] === 0) {
                    t3 = 7 + row;
                    if (!(t3 < 64))
                    return A.ioore(dataIn, t3);
                    t3 = dataIn[t3] === 0;
                } else
                    t3 = false;
                } else
                t3 = false;
            } else
                t3 = false;
            } else
            t3 = false;
        } else
            t3 = false;
        } else
        t3 = false;
        if (t3) {
        if (!(row < 64))
            return A.ioore(dataIn, row);
        t1 = B.JSInt_methods._shrOtherPositive$1(5793 * dataIn[row] + 512, 10);
        t = (t1 & 2147483647) - ((t1 & 2147483648) >>> 0);
        if (!(row < 64))
            return A.ioore(dataIn, row);
        dataIn[row] = t;
        t1 = row + 1;
        if (!(t1 < 64))
            return A.ioore(dataIn, t1);
        dataIn[t1] = t;
        t1 = row + 2;
        if (!(t1 < 64))
            return A.ioore(dataIn, t1);
        dataIn[t1] = t;
        t1 = row + 3;
        if (!(t1 < 64))
            return A.ioore(dataIn, t1);
        dataIn[t1] = t;
        t1 = row + 4;
        if (!(t1 < 64))
            return A.ioore(dataIn, t1);
        dataIn[t1] = t;
        t1 = row + 5;
        if (!(t1 < 64))
            return A.ioore(dataIn, t1);
        dataIn[t1] = t;
        t1 = row + 6;
        if (!(t1 < 64))
            return A.ioore(dataIn, t1);
        dataIn[t1] = t;
        t1 = row + 7;
        if (!(t1 < 64))
            return A.ioore(dataIn, t1);
        dataIn[t1] = t;
        continue;
        }
        if (!(row < 64))
        return A.ioore(dataIn, row);
        t3 = B.JSInt_methods._shrOtherPositive$1(5793 * dataIn[row] + 128, 8);
        v0 = (t3 & 2147483647) - ((t3 & 2147483648) >>> 0);
        t3 = 4 + row;
        if (!(t3 < 64))
        return A.ioore(dataIn, t3);
        t4 = B.JSInt_methods._shrOtherPositive$1(5793 * dataIn[t3] + 128, 8);
        v1 = (t4 & 2147483647) - ((t4 & 2147483648) >>> 0);
        t4 = 2 + row;
        if (!(t4 < 64))
        return A.ioore(dataIn, t4);
        v2 = dataIn[t4];
        t5 = 6 + row;
        if (!(t5 < 64))
        return A.ioore(dataIn, t5);
        v3 = dataIn[t5];
        t6 = 7 + row;
        if (!(t6 < 64))
        return A.ioore(dataIn, t6);
        t7 = dataIn[t6];
        t8 = B.JSInt_methods._shrOtherPositive$1(2896 * (t2 - t7) + 128, 8);
        v4 = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
        t7 = B.JSInt_methods._shrOtherPositive$1(2896 * (t2 + t7) + 128, 8);
        v7 = (t7 & 2147483647) - ((t7 & 2147483648) >>> 0);
        t7 = 3 + row;
        if (!(t7 < 64))
        return A.ioore(dataIn, t7);
        t2 = dataIn[t7] << 4;
        v5 = (t2 & 2147483647) - ((t2 & 2147483648) >>> 0);
        t2 = 5 + row;
        if (!(t2 < 64))
        return A.ioore(dataIn, t2);
        t8 = dataIn[t2] << 4;
        v6 = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
        t8 = B.JSInt_methods._shrOtherPositive$1(v0 - v1 + 1, 1);
        t = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
        t8 = B.JSInt_methods._shrOtherPositive$1(v0 + v1 + 1, 1);
        v0 = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
        t8 = B.JSInt_methods._shrOtherPositive$1(v2 * 3784 + v3 * 1567 + 128, 8);
        t8 = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
        t9 = B.JSInt_methods._shrOtherPositive$1(v2 * 1567 - v3 * 3784 + 128, 8);
        v2 = (t9 & 2147483647) - ((t9 & 2147483648) >>> 0);
        t9 = B.JSInt_methods._shrOtherPositive$1(v4 - v6 + 1, 1);
        t9 = (t9 & 2147483647) - ((t9 & 2147483648) >>> 0);
        t10 = B.JSInt_methods._shrOtherPositive$1(v4 + v6 + 1, 1);
        v4 = (t10 & 2147483647) - ((t10 & 2147483648) >>> 0);
        t10 = B.JSInt_methods._shrOtherPositive$1(v7 + v5 + 1, 1);
        t10 = (t10 & 2147483647) - ((t10 & 2147483648) >>> 0);
        t11 = B.JSInt_methods._shrOtherPositive$1(v7 - v5 + 1, 1);
        v5 = (t11 & 2147483647) - ((t11 & 2147483648) >>> 0);
        t11 = B.JSInt_methods._shrOtherPositive$1(v0 - t8 + 1, 1);
        t11 = (t11 & 2147483647) - ((t11 & 2147483648) >>> 0);
        t8 = B.JSInt_methods._shrOtherPositive$1(v0 + t8 + 1, 1);
        v0 = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
        t8 = B.JSInt_methods._shrOtherPositive$1(t - v2 + 1, 1);
        t8 = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
        t12 = B.JSInt_methods._shrOtherPositive$1(t + v2 + 1, 1);
        v1 = (t12 & 2147483647) - ((t12 & 2147483648) >>> 0);
        t12 = B.JSInt_methods._shrOtherPositive$1(v4 * 2276 + t10 * 3406 + 2048, 12);
        t = (t12 & 2147483647) - ((t12 & 2147483648) >>> 0);
        t10 = B.JSInt_methods._shrOtherPositive$1(v4 * 3406 - t10 * 2276 + 2048, 12);
        v4 = (t10 & 2147483647) - ((t10 & 2147483648) >>> 0);
        t10 = B.JSInt_methods._shrOtherPositive$1(v5 * 799 + t9 * 4017 + 2048, 12);
        t10 = (t10 & 2147483647) - ((t10 & 2147483648) >>> 0);
        t9 = B.JSInt_methods._shrOtherPositive$1(v5 * 4017 - t9 * 799 + 2048, 12);
        v5 = (t9 & 2147483647) - ((t9 & 2147483648) >>> 0);
        if (!(row < 64))
        return A.ioore(dataIn, row);
        dataIn[row] = v0 + t;
        if (!(t6 < 64))
        return A.ioore(dataIn, t6);
        dataIn[t6] = v0 - t;
        if (!(t1 < 64))
        return A.ioore(dataIn, t1);
        dataIn[t1] = v1 + t10;
        if (!(t5 < 64))
        return A.ioore(dataIn, t5);
        dataIn[t5] = v1 - t10;
        if (!(t4 < 64))
        return A.ioore(dataIn, t4);
        dataIn[t4] = t8 + v5;
        if (!(t2 < 64))
        return A.ioore(dataIn, t2);
        dataIn[t2] = t8 - v5;
        if (!(t7 < 64))
        return A.ioore(dataIn, t7);
        dataIn[t7] = t11 + v4;
        if (!(t3 < 64))
        return A.ioore(dataIn, t3);
        dataIn[t3] = t11 - v4;
    }
    for (i = 0; i < 8; ++i) {
        t1 = 8 + i;
        t2 = dataIn[t1];
        if (t2 === 0 && dataIn[16 + i] === 0 && dataIn[24 + i] === 0 && dataIn[32 + i] === 0 && dataIn[40 + i] === 0 && dataIn[48 + i] === 0 && dataIn[56 + i] === 0) {
        t2 = B.JSInt_methods._shrOtherPositive$1(5793 * dataIn[i] + 8192, 14);
        t = (t2 & 2147483647) - ((t2 & 2147483648) >>> 0);
        if (!(i < 64))
            return A.ioore(dataIn, i);
        dataIn[i] = t;
        if (!(t1 < 64))
            return A.ioore(dataIn, t1);
        dataIn[t1] = t;
        t1 = 16 + i;
        if (!(t1 < 64))
            return A.ioore(dataIn, t1);
        dataIn[t1] = t;
        t1 = 24 + i;
        if (!(t1 < 64))
            return A.ioore(dataIn, t1);
        dataIn[t1] = t;
        t1 = 32 + i;
        if (!(t1 < 64))
            return A.ioore(dataIn, t1);
        dataIn[t1] = t;
        t1 = 40 + i;
        if (!(t1 < 64))
            return A.ioore(dataIn, t1);
        dataIn[t1] = t;
        t1 = 48 + i;
        if (!(t1 < 64))
            return A.ioore(dataIn, t1);
        dataIn[t1] = t;
        t1 = 56 + i;
        if (!(t1 < 64))
            return A.ioore(dataIn, t1);
        dataIn[t1] = t;
        continue;
        }
        t3 = B.JSInt_methods._shrOtherPositive$1(5793 * dataIn[i] + 2048, 12);
        v0 = (t3 & 2147483647) - ((t3 & 2147483648) >>> 0);
        t3 = 32 + i;
        t4 = B.JSInt_methods._shrOtherPositive$1(5793 * dataIn[t3] + 2048, 12);
        v1 = (t4 & 2147483647) - ((t4 & 2147483648) >>> 0);
        t4 = 16 + i;
        v2 = dataIn[t4];
        t5 = 48 + i;
        v3 = dataIn[t5];
        t6 = 56 + i;
        t7 = dataIn[t6];
        t8 = B.JSInt_methods._shrOtherPositive$1(2896 * (t2 - t7) + 2048, 12);
        v4 = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
        t7 = B.JSInt_methods._shrOtherPositive$1(2896 * (t2 + t7) + 2048, 12);
        v7 = (t7 & 2147483647) - ((t7 & 2147483648) >>> 0);
        t7 = 24 + i;
        v5 = dataIn[t7];
        t2 = 40 + i;
        v6 = dataIn[t2];
        t8 = B.JSInt_methods._shrOtherPositive$1(v0 - v1 + 1, 1);
        t = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
        t8 = B.JSInt_methods._shrOtherPositive$1(v0 + v1 + 1, 1);
        v0 = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
        t8 = B.JSInt_methods._shrOtherPositive$1(v2 * 3784 + v3 * 1567 + 2048, 12);
        t8 = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
        t9 = B.JSInt_methods._shrOtherPositive$1(v2 * 1567 - v3 * 3784 + 2048, 12);
        v2 = (t9 & 2147483647) - ((t9 & 2147483648) >>> 0);
        t9 = B.JSInt_methods._shrOtherPositive$1(v4 - v6 + 1, 1);
        t9 = (t9 & 2147483647) - ((t9 & 2147483648) >>> 0);
        t10 = B.JSInt_methods._shrOtherPositive$1(v4 + v6 + 1, 1);
        v4 = (t10 & 2147483647) - ((t10 & 2147483648) >>> 0);
        t10 = B.JSInt_methods._shrOtherPositive$1(v7 + v5 + 1, 1);
        t10 = (t10 & 2147483647) - ((t10 & 2147483648) >>> 0);
        t11 = B.JSInt_methods._shrOtherPositive$1(v7 - v5 + 1, 1);
        v5 = (t11 & 2147483647) - ((t11 & 2147483648) >>> 0);
        t11 = B.JSInt_methods._shrOtherPositive$1(v0 - t8 + 1, 1);
        t11 = (t11 & 2147483647) - ((t11 & 2147483648) >>> 0);
        t8 = B.JSInt_methods._shrOtherPositive$1(v0 + t8 + 1, 1);
        v0 = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
        t8 = B.JSInt_methods._shrOtherPositive$1(t - v2 + 1, 1);
        t8 = (t8 & 2147483647) - ((t8 & 2147483648) >>> 0);
        t12 = B.JSInt_methods._shrOtherPositive$1(t + v2 + 1, 1);
        v1 = (t12 & 2147483647) - ((t12 & 2147483648) >>> 0);
        t12 = B.JSInt_methods._shrOtherPositive$1(v4 * 2276 + t10 * 3406 + 2048, 12);
        t = (t12 & 2147483647) - ((t12 & 2147483648) >>> 0);
        t10 = B.JSInt_methods._shrOtherPositive$1(v4 * 3406 - t10 * 2276 + 2048, 12);
        v4 = (t10 & 2147483647) - ((t10 & 2147483648) >>> 0);
        t10 = B.JSInt_methods._shrOtherPositive$1(v5 * 799 + t9 * 4017 + 2048, 12);
        t10 = (t10 & 2147483647) - ((t10 & 2147483648) >>> 0);
        t9 = B.JSInt_methods._shrOtherPositive$1(v5 * 4017 - t9 * 799 + 2048, 12);
        v5 = (t9 & 2147483647) - ((t9 & 2147483648) >>> 0);
        if (!(i < 64))
        return A.ioore(dataIn, i);
        dataIn[i] = v0 + t;
        if (!(t6 < 64))
        return A.ioore(dataIn, t6);
        dataIn[t6] = v0 - t;
        dataIn[t1] = v1 + t10;
        dataIn[t5] = v1 - t10;
        dataIn[t4] = t8 + v5;
        dataIn[t2] = t8 - v5;
        dataIn[t7] = t11 + v4;
        dataIn[t3] = t11 - v4;
    }
    for (t1 = $._dctClip, i = 0; i < 64; ++i) {
        t1.toString;
        t2 = B.JSInt_methods._shrOtherPositive$1(dataIn[i] + 8, 4);
        t2 = 384 + ((t2 & 2147483647) - ((t2 & 2147483648) >>> 0));
        if (!(t2 >= 0 && t2 < 768))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        if (!(i < 64))
        return A.ioore(dataOut, i);
        dataOut[i] = t2;
    }
    },
    getImageFromJpeg(jpeg) {
    var t2, orientation, t3, flipWidthHeight, width, height, image, h1, w1, component1, lines, hShift1, vShift1, t4, t5, t6, t7, t8, y, t9, y1, component1Line, x, t10, x1, cy, component2, component3, lines1, lines2, lines3, hShift2, vShift2, hShift3, vShift3, t11, y2, y3, component2Line, component3Line, t12, x2, x3, cb, cr, r, g, b, colorTransform, component4, lines4, hShift4, vShift4, t13, y4, component4Line, t14, x4, cc, cm, ck, t15, _null = null, _s4_ = "ifd0",
        t1 = jpeg.exif;
    if (t1.$index(0, _s4_).data.containsKey$1(274)) {
        t2 = t1.$index(0, _s4_).data.$index(0, 274);
        t2 = t2 == null ? _null : J.toInt$0$n(t2);
        t2.toString;
        orientation = t2;
    } else
        orientation = 0;
    t2 = jpeg.frame;
    t3 = t2.samplesPerLine;
    t3.toString;
    t2 = t2.scanLines;
    t2.toString;
    flipWidthHeight = orientation >= 5 && orientation <= 8;
    if (flipWidthHeight)
        width = t2;
    else
        width = t3;
    if (flipWidthHeight)
        height = t3;
    else
        height = t2;
    image = A.Image$(_null, _null, B.Format_3, 0, B.FrameType_2, height, _null, 0, 3, _null, width, false);
    t1 = A.ExifData$from(t1);
    image._exif = t1;
    t1.$index(0, _s4_).data.remove$1(0, 274);
    h1 = t2 - 1;
    w1 = t3 - 1;
    t1 = jpeg.components;
    t2 = t1.length;
    switch (t2) {
        case 1:
        if (0 >= t2)
            return A.ioore(t1, 0);
        component1 = t1[0];
        lines = component1.lines;
        hShift1 = component1.hScaleShift;
        vShift1 = component1.vScaleShift;
        t1 = orientation === 8;
        t2 = orientation === 7;
        t3 = orientation === 6;
        t4 = orientation === 5;
        t5 = orientation === 4;
        t6 = orientation === 3;
        t7 = orientation === 2;
        t8 = lines.length;
        y = 0;
        while (true) {
            t9 = jpeg.frame.scanLines;
            t9.toString;
            if (!(y < t9))
            break;
            y1 = B.JSInt_methods._shrBothPositive$1(y, vShift1);
            if (!(y1 < t8))
            return A.ioore(lines, y1);
            component1Line = lines[y1];
            t9 = h1 - y;
            x = 0;
            while (true) {
            t10 = jpeg.frame.samplesPerLine;
            t10.toString;
            if (!(x < t10))
                break;
            x1 = B.JSInt_methods._shrBothPositive$1(x, hShift1);
            if (!(x1 < component1Line.length))
                return A.ioore(component1Line, x1);
            cy = component1Line[x1];
            if (t7) {
                t10 = image.data;
                if (t10 != null)
                t10.setPixelRgb$5(w1 - x, y, cy, cy, cy);
            } else if (t6) {
                t10 = image.data;
                if (t10 != null)
                t10.setPixelRgb$5(w1 - x, t9, cy, cy, cy);
            } else if (t5) {
                t10 = image.data;
                if (t10 != null)
                t10.setPixelRgb$5(x, t9, cy, cy, cy);
            } else if (t4) {
                t10 = image.data;
                if (t10 != null)
                t10.setPixelRgb$5(y, x, cy, cy, cy);
            } else if (t3) {
                t10 = image.data;
                if (t10 != null)
                t10.setPixelRgb$5(t9, x, cy, cy, cy);
            } else if (t2) {
                t10 = image.data;
                if (t10 != null)
                t10.setPixelRgb$5(t9, w1 - x, cy, cy, cy);
            } else {
                t10 = image.data;
                if (t1) {
                if (t10 != null)
                    t10.setPixelRgb$5(y, w1 - x, cy, cy, cy);
                } else if (t10 != null)
                t10.setPixelRgb$5(x, y, cy, cy, cy);
            }
            ++x;
            }
            ++y;
        }
        break;
        case 3:
        if (0 >= t2)
            return A.ioore(t1, 0);
        component1 = t1[0];
        if (1 >= t2)
            return A.ioore(t1, 1);
        component2 = t1[1];
        if (2 >= t2)
            return A.ioore(t1, 2);
        component3 = t1[2];
        lines1 = component1.lines;
        lines2 = component2.lines;
        lines3 = component3.lines;
        hShift1 = component1.hScaleShift;
        vShift1 = component1.vScaleShift;
        hShift2 = component2.hScaleShift;
        vShift2 = component2.vScaleShift;
        hShift3 = component3.hScaleShift;
        vShift3 = component3.vScaleShift;
        t1 = orientation === 8;
        t2 = orientation === 7;
        t3 = orientation === 6;
        t4 = orientation === 5;
        t5 = orientation === 4;
        t6 = orientation === 3;
        t7 = orientation === 2;
        t8 = lines1.length;
        t9 = lines2.length;
        t10 = lines3.length;
        y = 0;
        while (true) {
            t11 = jpeg.frame.scanLines;
            t11.toString;
            if (!(y < t11))
            break;
            y1 = B.JSInt_methods._shrBothPositive$1(y, vShift1);
            y2 = B.JSInt_methods._shrBothPositive$1(y, vShift2);
            y3 = B.JSInt_methods._shrBothPositive$1(y, vShift3);
            if (!(y1 < t8))
            return A.ioore(lines1, y1);
            component1Line = lines1[y1];
            if (!(y2 < t9))
            return A.ioore(lines2, y2);
            component2Line = lines2[y2];
            if (!(y3 < t10))
            return A.ioore(lines3, y3);
            component3Line = lines3[y3];
            t11 = h1 - y;
            x = 0;
            while (true) {
            t12 = jpeg.frame.samplesPerLine;
            t12.toString;
            if (!(x < t12))
                break;
            x1 = B.JSInt_methods._shrBothPositive$1(x, hShift1);
            x2 = B.JSInt_methods._shrBothPositive$1(x, hShift2);
            x3 = B.JSInt_methods._shrBothPositive$1(x, hShift3);
            if (!(x1 < component1Line.length))
                return A.ioore(component1Line, x1);
            cy = component1Line[x1] << 8 >>> 0;
            if (!(x2 < component2Line.length))
                return A.ioore(component2Line, x2);
            cb = component2Line[x2] - 128;
            if (!(x3 < component3Line.length))
                return A.ioore(component3Line, x3);
            cr = component3Line[x3] - 128;
            t12 = B.JSInt_methods._shrOtherPositive$1(cy + 359 * cr + 128, 8);
            r = B.JSInt_methods.clamp$2((t12 & 2147483647) - ((t12 & 2147483648) >>> 0), 0, 255);
            t12 = B.JSInt_methods._shrOtherPositive$1(cy - 88 * cb - 183 * cr + 128, 8);
            g = B.JSInt_methods.clamp$2((t12 & 2147483647) - ((t12 & 2147483648) >>> 0), 0, 255);
            t12 = B.JSInt_methods._shrOtherPositive$1(cy + 454 * cb + 128, 8);
            b = B.JSInt_methods.clamp$2((t12 & 2147483647) - ((t12 & 2147483648) >>> 0), 0, 255);
            if (t7) {
                t12 = image.data;
                if (t12 != null)
                t12.setPixelRgb$5(w1 - x, y, r, g, b);
            } else if (t6) {
                t12 = image.data;
                if (t12 != null)
                t12.setPixelRgb$5(w1 - x, t11, r, g, b);
            } else if (t5) {
                t12 = image.data;
                if (t12 != null)
                t12.setPixelRgb$5(x, t11, r, g, b);
            } else if (t4) {
                t12 = image.data;
                if (t12 != null)
                t12.setPixelRgb$5(y, x, r, g, b);
            } else if (t3) {
                t12 = image.data;
                if (t12 != null)
                t12.setPixelRgb$5(t11, x, r, g, b);
            } else if (t2) {
                t12 = image.data;
                if (t12 != null)
                t12.setPixelRgb$5(t11, w1 - x, r, g, b);
            } else {
                t12 = image.data;
                if (t1) {
                if (t12 != null)
                    t12.setPixelRgb$5(y, w1 - x, r, g, b);
                } else if (t12 != null)
                t12.setPixelRgb$5(x, y, r, g, b);
            }
            ++x;
            }
            ++y;
        }
        break;
        case 4:
        t3 = jpeg.adobe;
        if (t3 == null)
            throw A.wrapException(A.ImageException$("Unsupported color mode (4 components)"));
        colorTransform = t3.transformCode !== 0 && true;
        if (0 >= t2)
            return A.ioore(t1, 0);
        component1 = t1[0];
        if (1 >= t2)
            return A.ioore(t1, 1);
        component2 = t1[1];
        if (2 >= t2)
            return A.ioore(t1, 2);
        component3 = t1[2];
        if (3 >= t2)
            return A.ioore(t1, 3);
        component4 = t1[3];
        lines1 = component1.lines;
        lines2 = component2.lines;
        lines3 = component3.lines;
        lines4 = component4.lines;
        hShift1 = component1.hScaleShift;
        vShift1 = component1.vScaleShift;
        hShift2 = component2.hScaleShift;
        vShift2 = component2.vScaleShift;
        hShift3 = component3.hScaleShift;
        vShift3 = component3.vScaleShift;
        hShift4 = component4.hScaleShift;
        vShift4 = component4.vScaleShift;
        t1 = orientation === 8;
        t2 = orientation === 7;
        t3 = orientation === 6;
        t4 = orientation === 5;
        t5 = orientation === 4;
        t6 = orientation === 3;
        t7 = orientation === 2;
        t8 = !colorTransform;
        t9 = lines1.length;
        t10 = lines2.length;
        t11 = lines3.length;
        t12 = lines4.length;
        y = 0;
        while (true) {
            t13 = jpeg.frame.scanLines;
            t13.toString;
            if (!(y < t13))
            break;
            y1 = B.JSInt_methods._shrBothPositive$1(y, vShift1);
            y2 = B.JSInt_methods._shrBothPositive$1(y, vShift2);
            y3 = B.JSInt_methods._shrBothPositive$1(y, vShift3);
            y4 = B.JSInt_methods._shrBothPositive$1(y, vShift4);
            if (!(y1 < t9))
            return A.ioore(lines1, y1);
            component1Line = lines1[y1];
            if (!(y2 < t10))
            return A.ioore(lines2, y2);
            component2Line = lines2[y2];
            if (!(y3 < t11))
            return A.ioore(lines3, y3);
            component3Line = lines3[y3];
            if (!(y4 < t12))
            return A.ioore(lines4, y4);
            component4Line = lines4[y4];
            t13 = h1 - y;
            x = 0;
            while (true) {
            t14 = jpeg.frame.samplesPerLine;
            t14.toString;
            if (!(x < t14))
                break;
            x1 = B.JSInt_methods._shrBothPositive$1(x, hShift1);
            x2 = B.JSInt_methods._shrBothPositive$1(x, hShift2);
            x3 = B.JSInt_methods._shrBothPositive$1(x, hShift3);
            x4 = B.JSInt_methods._shrBothPositive$1(x, hShift4);
            if (t8) {
                if (!(x1 < component1Line.length))
                return A.ioore(component1Line, x1);
                cc = component1Line[x1];
                if (!(x2 < component2Line.length))
                return A.ioore(component2Line, x2);
                cm = component2Line[x2];
                if (!(x3 < component3Line.length))
                return A.ioore(component3Line, x3);
                cy = component3Line[x3];
                if (!(x4 < component4Line.length))
                return A.ioore(component4Line, x4);
                ck = component4Line[x4];
            } else {
                if (!(x1 < component1Line.length))
                return A.ioore(component1Line, x1);
                cy = component1Line[x1];
                if (!(x2 < component2Line.length))
                return A.ioore(component2Line, x2);
                cb = component2Line[x2];
                if (!(x3 < component3Line.length))
                return A.ioore(component3Line, x3);
                cr = component3Line[x3];
                if (!(x4 < component4Line.length))
                return A.ioore(component4Line, x4);
                ck = component4Line[x4];
                t14 = cr - 128;
                cc = 255 - B.JSInt_methods.clamp$2(B.JSNumber_methods.toInt$0(cy + 1.402 * t14), 0, 255);
                t15 = cb - 128;
                cm = 255 - B.JSNumber_methods.toInt$0(B.JSNumber_methods.clamp$2(cy - 0.3441363 * t15 - 0.71413636 * t14, 0, 255));
                cy = 255 - B.JSInt_methods.clamp$2(B.JSNumber_methods.toInt$0(cy + 1.772 * t15), 0, 255);
            }
            t14 = B.JSInt_methods._shrOtherPositive$1(cc * ck, 8);
            r = (t14 & 2147483647) - ((t14 & 2147483648) >>> 0);
            t14 = B.JSInt_methods._shrOtherPositive$1(cm * ck, 8);
            g = (t14 & 2147483647) - ((t14 & 2147483648) >>> 0);
            t14 = B.JSInt_methods._shrOtherPositive$1(cy * ck, 8);
            b = (t14 & 2147483647) - ((t14 & 2147483648) >>> 0);
            if (t7) {
                t14 = image.data;
                if (t14 != null)
                t14.setPixelRgb$5(w1 - x, y, r, g, b);
            } else if (t6) {
                t14 = image.data;
                if (t14 != null)
                t14.setPixelRgb$5(w1 - x, t13, r, g, b);
            } else if (t5) {
                t14 = image.data;
                if (t14 != null)
                t14.setPixelRgb$5(x, t13, r, g, b);
            } else if (t4) {
                t14 = image.data;
                if (t14 != null)
                t14.setPixelRgb$5(y, x, r, g, b);
            } else if (t3) {
                t14 = image.data;
                if (t14 != null)
                t14.setPixelRgb$5(t13, x, r, g, b);
            } else if (t2) {
                t14 = image.data;
                if (t14 != null)
                t14.setPixelRgb$5(t13, w1 - x, r, g, b);
            } else {
                t14 = image.data;
                if (t1) {
                if (t14 != null)
                    t14.setPixelRgb$5(y, w1 - x, r, g, b);
                } else if (t14 != null)
                t14.setPixelRgb$5(x, y, r, g, b);
            }
            ++x;
            }
            ++y;
        }
        break;
        default:
        throw A.wrapException(A.ImageException$("Unsupported color mode"));
    }
    return image;
    },
    WebPFilters_horizontalUnfilter(width, height, stride, row, numRows, data) {
    A.WebPFilters__doHorizontalFilter(data, width, height, stride, row, numRows, true, data);
    },
    WebPFilters_verticalUnfilter(width, height, stride, row, numRows, data) {
    A.WebPFilters__doVerticalFilter(data, width, height, stride, row, numRows, true, data);
    },
    WebPFilters_gradientUnfilter(width, height, stride, row, numRows, data) {
    A.WebPFilters__doGradientFilter(data, width, height, stride, row, numRows, true, data);
    },
    WebPFilters__predictLine(src, pred, dst, $length, inverse) {
    var i, t1, t2, t3;
    for (i = 0; i < $length; ++i) {
        t1 = src.buffer;
        t2 = src.offset + i;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = pred.buffer;
        t3 = pred.offset + i;
        if (!(t3 >= 0 && t3 < t1.length))
        return A.ioore(t1, t3);
        t3 = t1[t3];
        J.$indexSet$ax(dst.buffer, dst.offset + i, t2 + t3);
    }
    },
    WebPFilters__doHorizontalFilter(src, width, height, stride, row, numRows, inverse, out) {
    var t1, t2, _null = null,
        startOffset = row * stride,
        lastRow = row + numRows,
        s = A.InputBuffer$(src, false, _null, startOffset),
        o = A.InputBuffer$(src, false, _null, startOffset),
        preds = A.InputBuffer$from(o, _null, 0);
    if (row === 0) {
        t1 = s.buffer;
        t2 = s.offset;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        o.$indexSet(0, 0, t1[t2]);
        A.WebPFilters__predictLine(A.InputBuffer$from(s, _null, 1), preds, A.InputBuffer$from(o, _null, 1), width - 1, true);
        preds.offset += stride;
        s.offset += stride;
        o.offset += stride;
        row = 1;
    }
    for (t1 = -stride, t2 = width - 1; row < lastRow;) {
        A.WebPFilters__predictLine(s, A.InputBuffer$from(preds, _null, t1), o, 1, true);
        A.WebPFilters__predictLine(A.InputBuffer$from(s, _null, 1), preds, A.InputBuffer$from(o, _null, 1), t2, true);
        ++row;
        preds.offset += stride;
        s.offset += stride;
        o.offset += stride;
    }
    },
    WebPFilters__doVerticalFilter(src, width, height, stride, row, numRows, inverse, out) {
    var t1, t2, _null = null,
        startOffset = row * stride,
        lastRow = row + numRows,
        s = A.InputBuffer$(src, false, _null, startOffset),
        o = A.InputBuffer$(out, false, _null, startOffset),
        preds = A.InputBuffer$from(o, _null, 0);
    if (row === 0) {
        t1 = s.buffer;
        t2 = s.offset;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        o.$indexSet(0, 0, t1[t2]);
        A.WebPFilters__predictLine(A.InputBuffer$from(s, _null, 1), preds, A.InputBuffer$from(o, _null, 1), width - 1, true);
        s.offset += stride;
        o.offset += stride;
        row = 1;
    } else
        preds.offset -= stride;
    for (; row < lastRow;) {
        A.WebPFilters__predictLine(s, preds, o, width, true);
        ++row;
        preds.offset += stride;
        s.offset += stride;
        o.offset += stride;
    }
    },
    WebPFilters__doGradientFilter(src, width, height, stride, row, numRows, inverse, out) {
    var t1, t2, w, t3, t4, t5, t6, t7, g, pred, _null = null,
        startOffset = row * stride,
        lastRow = row + numRows,
        s = A.InputBuffer$(src, false, _null, startOffset),
        o = A.InputBuffer$(out, false, _null, startOffset),
        preds = A.InputBuffer$from(o, _null, 0);
    if (row === 0) {
        t1 = s.buffer;
        t2 = s.offset;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        o.$indexSet(0, 0, t1[t2]);
        A.WebPFilters__predictLine(A.InputBuffer$from(s, _null, 1), preds, A.InputBuffer$from(o, _null, 1), width - 1, true);
        preds.offset += stride;
        s.offset += stride;
        o.offset += stride;
        row = 1;
    }
    for (t1 = -stride; row < lastRow;) {
        A.WebPFilters__predictLine(s, A.InputBuffer$from(preds, _null, t1), o, 1, true);
        for (w = 1; w < width; ++w) {
        t2 = preds.buffer;
        t3 = preds.offset;
        t4 = t3 + (w - 1);
        t5 = t2.length;
        if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t2, t4);
        t4 = t2[t4];
        t6 = w - stride;
        t7 = t3 + t6;
        if (!(t7 >= 0 && t7 < t5))
            return A.ioore(t2, t7);
        t7 = t2[t7];
        t6 = t3 + (t6 - 1);
        if (!(t6 >= 0 && t6 < t5))
            return A.ioore(t2, t6);
        g = t4 + t7 - t2[t6];
        if ((g & 4294967040) >>> 0 === 0)
            pred = g;
        else
            pred = g < 0 ? 0 : 255;
        t2 = s.buffer;
        t3 = s.offset + w;
        if (!(t3 >= 0 && t3 < t2.length))
            return A.ioore(t2, t3);
        t3 = t2[t3];
        J.$indexSet$ax(o.buffer, o.offset + w, t3 + pred);
        }
        ++row;
        preds.offset += stride;
        s.offset += stride;
        o.offset += stride;
    }
    },
    copyCrop(src, height, width, x, y) {
    var numFrames, t1, firstFrame, i, value, frame, t2, dst, p, t3, t4, t5, _null = null;
    x = B.JSNumber_methods.toInt$0(B.JSInt_methods.clamp$2(x, 0, src.get$width() - 1));
    y = B.JSNumber_methods.toInt$0(B.JSInt_methods.clamp$2(y, 0, src.get$height() - 1));
    if (x + width > src.get$width())
        width = src.get$width() - x;
    if (y + height > src.get$height())
        height = src.get$height() - y;
    numFrames = src.get$frames().length;
    for (t1 = type$.JSArray_Image, firstFrame = _null, i = 0; i < numFrames; ++i) {
        value = src.__Image_frames_AI;
        if (value === $) {
        value = A._setArrayType([], t1);
        src.set$__Image_frames_AI(value);
        }
        if (!(i < value.length))
        return A.ioore(value, i);
        frame = value[i];
        t2 = firstFrame == null;
        dst = t2 ? _null : firstFrame.addFrame$0();
        if (dst == null)
        dst = A.Image$fromResized(frame, height, true, width);
        if (t2)
        firstFrame = dst;
        for (t2 = dst.data, t2 = t2.get$iterator(t2); t2.moveNext$0();) {
        p = t2.get$current();
        t3 = p.get$x();
        t4 = p.get$y();
        t5 = frame.data;
        t3 = t5 == null ? _null : t5.getPixel$3(x + t3, y + t4, _null);
        p.$set$1(t3 == null ? new A.PixelUndefined() : t3);
        }
    }
    firstFrame.toString;
    return firstFrame;
    },
    countTrailingZeroBits(v) {
    var c;
    v = (v & -v) >>> 0;
    c = v !== 0 ? 31 : 32;
    if ((v & 65535) !== 0)
        c -= 16;
    if ((v & 16711935) !== 0)
        c -= 8;
    if ((v & 252645135) !== 0)
        c -= 4;
    if ((v & 858993459) !== 0)
        c -= 2;
    return (v & 1431655765) !== 0 ? c - 1 : c;
    },
    uint64ToFloat64(d) {
    $.$get$__uint64().$indexSet(0, 0, d);
    return $.$get$__uint64ToFloat64().$index(0, 0);
    },
    rgbaToUint32(r, g, b, a) {
    return (B.JSInt_methods.clamp$2(r, 0, 255) | B.JSInt_methods.clamp$2(g, 0, 255) << 8 | B.JSInt_methods.clamp$2(b, 0, 255) << 16 | B.JSInt_methods.clamp$2(a, 0, 255) << 24) >>> 0;
    },
    _convertColor(c, c2, a) {
    var cl, g, ci, v,
        numChannels = c2.get$length(c2),
        format = c2.get$format(),
        t1 = c.get$palette(),
        fromFormat = t1 == null ? null : t1.get$format();
    if (fromFormat == null)
        fromFormat = c.get$format();
    cl = c.get$length(c);
    if (numChannels === 1) {
        g = c.get$length(c) > 2 ? c.get$luminance() : c.$index(0, 0);
        c2.$indexSet(0, 0, A.convertFormatValue(A._isInt(c.$index(0, 0)) ? B.JSNumber_methods.floor$0(g) : g, fromFormat, format));
    } else if (numChannels <= cl)
        for (ci = 0; ci < numChannels; ++ci)
        c2.$indexSet(0, ci, A.convertFormatValue(c.$index(0, ci), fromFormat, format));
    else {
        for (ci = 0; ci < cl; ++ci)
        c2.$indexSet(0, ci, A.convertFormatValue(c.$index(0, ci), fromFormat, format));
        v = cl === 1 ? c2.$index(0, 0) : 0;
        for (ci = cl; ci < numChannels; ++ci)
        c2.$indexSet(0, ci, ci === 3 ? a : v);
    }
    return c2;
    },
    convertColor(c, alpha, format, numChannels, to) {
    var t2, c2,
        t1 = c.get$palette(),
        fromFormat = t1 == null ? null : t1.get$format();
    if (fromFormat == null)
        fromFormat = c.get$format();
    t1 = to == null;
    t2 = t1 ? null : to.get$format();
    format = t2 == null ? format : t2;
    if (format == null)
        format = c.get$format();
    t2 = t1 ? null : to.get$length(to);
    numChannels = t2 == null ? numChannels : t2;
    if (numChannels == null)
        numChannels = c.get$length(c);
    if (alpha == null)
        alpha = 0;
    if (format === fromFormat && numChannels === c.get$length(c)) {
        if (t1)
        return c.clone$0();
        to.$set$1(c);
        return to;
    }
    switch (format.index) {
        case 3:
        if (t1)
            c2 = new A.ColorUint8(new Uint8Array(numChannels));
        else
            c2 = to;
        return A._convertColor(c, c2, alpha);
        case 0:
        return A._convertColor(c, t1 ? new A.ColorUint1(numChannels, 0) : to, alpha);
        case 1:
        return A._convertColor(c, t1 ? new A.ColorUint2(numChannels, 0) : to, alpha);
        case 2:
        if (t1) {
            t1 = numChannels < 3 ? 1 : 2;
            c2 = new A.ColorUint4(numChannels, new Uint8Array(t1));
        } else
            c2 = to;
        return A._convertColor(c, c2, alpha);
        case 4:
        if (t1)
            c2 = new A.ColorUint16(new Uint16Array(numChannels));
        else
            c2 = to;
        return A._convertColor(c, c2, alpha);
        case 5:
        if (t1)
            c2 = new A.ColorUint32(new Uint32Array(numChannels));
        else
            c2 = to;
        return A._convertColor(c, c2, alpha);
        case 6:
        if (t1)
            c2 = new A.ColorInt8(new Int8Array(numChannels));
        else
            c2 = to;
        return A._convertColor(c, c2, alpha);
        case 7:
        if (t1)
            c2 = new A.ColorInt16(new Int16Array(numChannels));
        else
            c2 = to;
        return A._convertColor(c, c2, alpha);
        case 8:
        if (t1)
            c2 = new A.ColorInt32(new Int32Array(numChannels));
        else
            c2 = to;
        return A._convertColor(c, c2, alpha);
        case 9:
        if (t1)
            c2 = new A.ColorFloat16(new Uint16Array(numChannels));
        else
            c2 = to;
        return A._convertColor(c, c2, alpha);
        case 10:
        if (t1)
            c2 = new A.ColorFloat32(new Float32Array(numChannels));
        else
            c2 = to;
        return A._convertColor(c, c2, alpha);
        case 11:
        if (t1)
            c2 = new A.ColorFloat64(new Float64Array(numChannels));
        else
            c2 = to;
        return A._convertColor(c, c2, alpha);
    }
    },
    getLuminance(c) {
    return 0.299 * c.get$r() + 0.587 * c.get$g() + 0.114 * c.get$b();
    },
    cmykToRgb(c, m, y, k) {
    var t1 = 1 - k / 255;
    return A._setArrayType([B.JSNumber_methods.round$0(255 * (1 - c / 255) * t1), B.JSNumber_methods.round$0(255 * (1 - m / 255) * t1), B.JSNumber_methods.round$0(255 * (1 - y / 255) * t1)], type$.JSArray_int);
    },
    Float16_doubleToFloat16(n) {
    var t1, xI, e, m;
    $.$get$__float32()[0] = n;
    t1 = $.$get$__float32ToUint32();
    if (0 >= t1.length)
        return A.ioore(t1, 0);
    xI = t1[0];
    if (n === 0)
        return xI >>> 16;
    if ($.Float16__toFloatFloat32Data == null)
        A.Float16__initialize();
    e = xI >>> 23 & 511;
    t1 = $.Float16____eLut._readField$0();
    if (!(e < t1.length))
        return A.ioore(t1, e);
    e = t1[e];
    if (e !== 0) {
        m = xI & 8388607;
        return e + (m + 4095 + (m >>> 13 & 1) >>> 13);
    }
    return A.Float16__convert(xI);
    },
    Float16__convert(i) {
    var t, t1,
        s = i >>> 16 & 32768,
        e = (i >>> 23 & 255) - 112,
        m = i & 8388607;
    if (e <= 0) {
        if (e < -10)
        return s;
        m |= 8388608;
        t = 14 - e;
        return (s | B.JSInt_methods.$shr(m + (B.JSInt_methods.$shl(1, t - 1) - 1) + (B.JSInt_methods._shrReceiverPositive$1(m, t) & 1), t)) >>> 0;
    } else if (e === 143)
        if (m === 0)
        return s | 31744;
        else {
        m = m >>> 13;
        t1 = m === 0 ? 1 : 0;
        return s | m | t1 | 31744;
        }
    else {
        m = m + 4095 + (m >>> 13 & 1);
        if ((m & 8388608) !== 0) {
        ++e;
        m = 0;
        }
        if (e > 30)
        return s | 31744;
        return (s | e << 10 | m >>> 13) >>> 0;
    }
    },
    Float16__initialize() {
    var floatUint32Data, i, e, t2, t3,
        t1 = $.Float16__toFloatFloat32Data;
    if (t1 != null)
        return t1;
    floatUint32Data = new Uint32Array(65536);
    $.Float16__toFloatFloat32Data = A.NativeFloat32List_NativeFloat32List$view(floatUint32Data.buffer, 0, null);
    t1 = new Uint16Array(512);
    $.Float16____eLut.__late_helper$_value = t1;
    for (i = 0; i < 256; ++i) {
        e = (i & 255) - 112;
        if (e <= 0 || e >= 30) {
        $.Float16____eLut.toString;
        t1[i] = 0;
        t2 = (i | 256) >>> 0;
        if (!(t2 < 512))
            return A.ioore(t1, t2);
        t1[t2] = 0;
        } else {
        $.Float16____eLut.toString;
        t2 = e << 10 >>> 0;
        t1[i] = t2;
        t3 = (i | 256) >>> 0;
        if (!(t3 < 512))
            return A.ioore(t1, t3);
        t1[t3] = (t2 | 32768) >>> 0;
        }
    }
    for (i = 0; i < 65536; ++i)
        floatUint32Data[i] = A.Float16__halfToFloat(i);
    t1 = $.Float16__toFloatFloat32Data;
    t1.toString;
    return t1;
    },
    Float16__halfToFloat(y) {
    var t1,
        s = y >>> 15 & 1,
        e = y >>> 10 & 31,
        m = y & 1023;
    if (e === 0)
        if (m === 0)
        return s << 31 >>> 0;
        else {
        for (; (m & 1024) === 0;) {
            m = m << 1;
            --e;
        }
        ++e;
        m &= 4294966271;
        }
    else if (e === 31) {
        t1 = s << 31;
        if (m === 0)
        return (t1 | 2139095040) >>> 0;
        else
        return (t1 | m << 13 | 2139095040) >>> 0;
    }
    return (s << 31 | e + 112 << 23 | m << 13) >>> 0;
    },
    main() {
    var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, image, t1, pixel, imageBytes, rect, t2, t3, result, temp;
    var $async$main = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
        return A._asyncRethrow($async$result, $async$completer);
        while (true)
        switch ($async$goto) {
            case 0:
            return;
        }
    });
    return A._asyncStartSync($async$main, $async$completer);
    }
},
J = {
    makeDispatchRecord(interceptor, proto, extension, indexability) {
    return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor(object) {
    var proto, objectProto, $constructor, interceptor, t1,
        record = object[init.dispatchPropertyName];
    if (record == null)
        if ($.initNativeDispatchFlag == null) {
        A.initNativeDispatch();
        record = object[init.dispatchPropertyName];
        }
    if (record != null) {
        proto = record.p;
        if (false === proto)
        return record.i;
        if (true === proto)
        return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
        return record.i;
        if (record.e === objectProto)
        throw A.wrapException(A.UnimplementedError$("Return interceptor for " + A.S(proto(object, record))));
    }
    $constructor = object.constructor;
    if ($constructor == null)
        interceptor = null;
    else {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        interceptor = $constructor[t1];
    }
    if (interceptor != null)
        return interceptor;
    interceptor = A.lookupAndCacheInterceptor(object);
    if (interceptor != null)
        return interceptor;
    if (typeof object == "function")
        return B.JavaScriptFunction_methods;
    proto = Object.getPrototypeOf(object);
    if (proto == null)
        return B.PlainJavaScriptObject_methods;
    if (proto === Object.prototype)
        return B.PlainJavaScriptObject_methods;
    if (typeof $constructor == "function") {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        Object.defineProperty($constructor, t1, {value: B.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return B.UnknownJavaScriptObject_methods;
    }
    return B.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed($length, $E) {
    if ($length < 0 || $length > 4294967295)
        throw A.wrapException(A.RangeError$range($length, 0, 4294967295, "length", null));
    return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$allocateFixed($length, $E) {
    if ($length < 0 || $length > 4294967295)
        throw A.wrapException(A.RangeError$range($length, 0, 4294967295, "length", null));
    return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$growable($length, $E) {
    if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length, null));
    return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$allocateGrowable($length, $E) {
    return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$markFixed(allocation, $E) {
    return J.JSArray_markFixedList(A._setArrayType(allocation, $E._eval$1("JSArray<0>")), $E);
    },
    JSArray_markFixedList(list, $T) {
    list.fixed$length = Array;
    return list;
    },
    getInterceptor$(receiver) {
    if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
        return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
    }
    if (typeof receiver == "string")
        return J.JSString.prototype;
    if (receiver == null)
        return J.JSNull.prototype;
    if (typeof receiver == "boolean")
        return J.JSBool.prototype;
    if (receiver.constructor == Array)
        return J.JSArray.prototype;
    if (typeof receiver != "object") {
        if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
        return receiver;
    }
    if (receiver instanceof A.Object)
        return receiver;
    return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx(receiver) {
    if (typeof receiver == "string")
        return J.JSString.prototype;
    if (receiver == null)
        return receiver;
    if (receiver.constructor == Array)
        return J.JSArray.prototype;
    if (typeof receiver != "object") {
        if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
        return receiver;
    }
    if (receiver instanceof A.Object)
        return receiver;
    return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax(receiver) {
    if (receiver == null)
        return receiver;
    if (receiver.constructor == Array)
        return J.JSArray.prototype;
    if (typeof receiver != "object") {
        if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
        return receiver;
    }
    if (receiver instanceof A.Object)
        return receiver;
    return J.getNativeInterceptor(receiver);
    },
    getInterceptor$n(receiver) {
    if (typeof receiver == "number")
        return J.JSNumber.prototype;
    if (receiver == null)
        return receiver;
    if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
    return receiver;
    },
    getInterceptor$x(receiver) {
    if (receiver == null)
        return receiver;
    if (typeof receiver != "object") {
        if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
        return receiver;
    }
    if (receiver instanceof A.Object)
        return receiver;
    return J.getNativeInterceptor(receiver);
    },
    get$hashCode$(receiver) {
    return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$iterator$ax(receiver) {
    return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$length$asx(receiver) {
    return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    $eq$(receiver, a0) {
    if (receiver == null)
        return a0 == null;
    if (typeof receiver != "object")
        return a0 != null && receiver === a0;
    return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$ax(receiver, a0) {
    if (typeof a0 === "number")
        if (receiver.constructor == Array || A.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
        if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
    return J.getInterceptor$ax(receiver).$index(receiver, a0);
    },
    $indexSet$ax(receiver, a0, a1) {
    return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    elementAt$1$ax(receiver, a0) {
    return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    fillRange$3$ax(receiver, a0, a1, a2) {
    return J.getInterceptor$ax(receiver).fillRange$3(receiver, a0, a1, a2);
    },
    setAll$2$x(receiver, a0, a1) {
    return J.getInterceptor$x(receiver).setAll$2(receiver, a0, a1);
    },
    skip$1$ax(receiver, a0) {
    return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    sublist$2$ax(receiver, a0, a1) {
    return J.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
    },
    toInt$0$n(receiver) {
    return J.getInterceptor$n(receiver).toInt$0(receiver);
    },
    toString$0$(receiver) {
    return J.getInterceptor$(receiver).toString$0(receiver);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    LegacyJavaScriptObject: function LegacyJavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JSArray: function JSArray(t0) {
    this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
    this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
    var _ = this;
    _._iterable = t0;
    _._length = t1;
    _._index = 0;
    _._current = null;
    _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSNumNotInt: function JSNumNotInt() {
    },
    JSString: function JSString() {
    }
},
B = {};
var holders = [A, J, B];
var $ = {};
A.JS_CONST.prototype = {};
J.Interceptor.prototype = {
    $eq(receiver, other) {
    return receiver === other;
    },
    get$hashCode(receiver) {
    return A.Primitives_objectHashCode(receiver);
    },
    toString$0(receiver) {
    return "Instance of '" + A.Primitives_objectTypeName(receiver) + "'";
    }
};
J.JSBool.prototype = {
    toString$0(receiver) {
    return String(receiver);
    },
    get$hashCode(receiver) {
    return receiver ? 519018 : 218159;
    },
    $isbool: 1
};
J.JSNull.prototype = {
    $eq(receiver, other) {
    return null == other;
    },
    toString$0(receiver) {
    return "null";
    },
    get$hashCode(receiver) {
    return 0;
    },
    $isNull: 1
};
J.JavaScriptObject.prototype = {};
J.LegacyJavaScriptObject.prototype = {
    get$hashCode(receiver) {
    return 0;
    },
    toString$0(receiver) {
    return String(receiver);
    }
};
J.PlainJavaScriptObject.prototype = {};
J.UnknownJavaScriptObject.prototype = {};
J.JavaScriptFunction.prototype = {
    toString$0(receiver) {
    var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
    if (dartClosure == null)
        return this.super$LegacyJavaScriptObject$toString(receiver);
    return "JavaScript function for " + J.toString$0$(dartClosure);
    },
    $isFunction: 1
};
J.JSArray.prototype = {
    add$1(receiver, value) {
    A._arrayInstanceType(receiver)._precomputed1._as(value);
    if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("add"));
    receiver.push(value);
    },
    skip$1(receiver, n) {
    return A.SubListIterable$(receiver, n, null, A._arrayInstanceType(receiver)._precomputed1);
    },
    elementAt$1(receiver, index) {
    if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
    return receiver[index];
    },
    sublist$2(receiver, start, end) {
    if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, "start", null));
    if (end < start || end > receiver.length)
        throw A.wrapException(A.RangeError$range(end, start, receiver.length, "end", null));
    if (start === end)
        return A._setArrayType([], A._arrayInstanceType(receiver));
    return A._setArrayType(receiver.slice(start, end), A._arrayInstanceType(receiver));
    },
    get$last(receiver) {
    var t1 = receiver.length;
    if (t1 > 0)
        return receiver[t1 - 1];
    throw A.wrapException(A.IterableElementError_noElement());
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
    var $length, otherList, otherStart, t1, i;
    A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
    if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("setRange"));
    A.RangeError_checkValidRange(start, end, receiver.length);
    $length = end - start;
    if ($length === 0)
        return;
    A.RangeError_checkNotNegative(skipCount, "skipCount");
    if (type$.List_dynamic._is(iterable)) {
        otherList = iterable;
        otherStart = skipCount;
    } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
    }
    t1 = J.getInterceptor$asx(otherList);
    if (otherStart + $length > t1.get$length(otherList))
        throw A.wrapException(A.IterableElementError_tooFew());
    if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
        receiver[start + i] = t1.$index(otherList, otherStart + i);
    else
        for (i = 0; i < $length; ++i)
        receiver[start + i] = t1.$index(otherList, otherStart + i);
    },
    fillRange$3(receiver, start, end, fillValue) {
    var i;
    A._arrayInstanceType(receiver)._eval$1("1?")._as(fillValue);
    if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("fill range"));
    A.RangeError_checkValidRange(start, end, receiver.length);
    for (i = start; i < end; ++i)
        receiver[i] = fillValue;
    },
    contains$1(receiver, other) {
    var i;
    for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
        return true;
    return false;
    },
    toString$0(receiver) {
    return A.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    get$iterator(receiver) {
    return new J.ArrayIterator(receiver, receiver.length, A._arrayInstanceType(receiver)._eval$1("ArrayIterator<1>"));
    },
    get$hashCode(receiver) {
    return A.Primitives_objectHashCode(receiver);
    },
    get$length(receiver) {
    return receiver.length;
    },
    set$length(receiver, newLength) {
    if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("set length"));
    if (newLength < 0)
        throw A.wrapException(A.RangeError$range(newLength, 0, null, "newLength", null));
    if (newLength > receiver.length)
        A._arrayInstanceType(receiver)._precomputed1._as(null);
    receiver.length = newLength;
    },
    $index(receiver, index) {
    if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
    return receiver[index];
    },
    $indexSet(receiver, index, value) {
    A._arrayInstanceType(receiver)._precomputed1._as(value);
    if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("indexed set"));
    if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
    receiver[index] = value;
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
};
J.JSUnmodifiableArray.prototype = {};
J.ArrayIterator.prototype = {
    get$current() {
    var t1 = this._current;
    return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
    var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
    if (_this._length !== $length)
        throw A.wrapException(A.throwConcurrentModificationError(t1));
    t2 = _this._index;
    if (t2 >= $length) {
        _this.set$_current(null);
        return false;
    }
    _this.set$_current(t1[t2]);
    ++_this._index;
    return true;
    },
    set$_current(_current) {
    this._current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
};
J.JSNumber.prototype = {
    compareTo$1(receiver, b) {
    var bIsNegative;
    if (receiver < b)
        return -1;
    else if (receiver > b)
        return 1;
    else if (receiver === b) {
        if (receiver === 0) {
        bIsNegative = this.get$isNegative(b);
        if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
        if (this.get$isNegative(receiver))
            return -1;
        return 1;
        }
        return 0;
    } else if (isNaN(receiver)) {
        if (isNaN(b))
        return 0;
        return 1;
    } else
        return -1;
    },
    get$isNegative(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    toInt$0(receiver) {
    var t1;
    if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
    if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
    }
    throw A.wrapException(A.UnsupportedError$("" + receiver + ".toInt()"));
    },
    ceil$0(receiver) {
    var truncated, d;
    if (receiver >= 0) {
        if (receiver <= 2147483647) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated + 1;
        }
    } else if (receiver >= -2147483648)
        return receiver | 0;
    d = Math.ceil(receiver);
    if (isFinite(d))
        return d;
    throw A.wrapException(A.UnsupportedError$("" + receiver + ".ceil()"));
    },
    floor$0(receiver) {
    var truncated, d;
    if (receiver >= 0) {
        if (receiver <= 2147483647)
        return receiver | 0;
    } else if (receiver >= -2147483648) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated - 1;
    }
    d = Math.floor(receiver);
    if (isFinite(d))
        return d;
    throw A.wrapException(A.UnsupportedError$("" + receiver + ".floor()"));
    },
    round$0(receiver) {
    if (receiver > 0) {
        if (receiver !== 1 / 0)
        return Math.round(receiver);
    } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
    throw A.wrapException(A.UnsupportedError$("" + receiver + ".round()"));
    },
    clamp$2(receiver, lowerLimit, upperLimit) {
    if (this.compareTo$1(lowerLimit, upperLimit) > 0)
        throw A.wrapException(A.argumentErrorValue(lowerLimit));
    if (this.compareTo$1(receiver, lowerLimit) < 0)
        return lowerLimit;
    if (this.compareTo$1(receiver, upperLimit) > 0)
        return upperLimit;
    return receiver;
    },
    toRadixString$1(receiver, radix) {
    var result, match, t1, exponent;
    if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", null));
    result = receiver.toString(radix);
    if (B.JSString_methods.codeUnitAt$1(result, result.length - 1) !== 41)
        return result;
    match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
    if (match == null)
        A.throwExpression(A.UnsupportedError$("Unexpected toString result: " + result));
    t1 = match.length;
    if (1 >= t1)
        return A.ioore(match, 1);
    result = match[1];
    if (3 >= t1)
        return A.ioore(match, 3);
    exponent = +match[3];
    t1 = match[2];
    if (t1 != null) {
        result += t1;
        exponent -= t1.length;
    }
    return result + B.JSString_methods.$mul("0", exponent);
    },
    toString$0(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
    else
        return "" + receiver;
    },
    get$hashCode(receiver) {
    var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
    if (receiver === intValue)
        return intValue & 536870911;
    absolute = Math.abs(receiver);
    floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
    factor = Math.pow(2, floorLog2);
    scaled = absolute < 1 ? absolute / factor : factor / absolute;
    return ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259 & 536870911;
    },
    $mod(receiver, other) {
    var result = receiver % other;
    if (result === 0)
        return 0;
    if (result > 0)
        return result;
    if (other < 0)
        return result - other;
    else
        return result + other;
    },
    $tdiv(receiver, other) {
    A._asNum(other);
    if ((receiver | 0) === receiver)
        if (other >= 1 || other < -1)
        return receiver / other | 0;
    return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1(receiver, other) {
    return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1(receiver, other) {
    var quotient = receiver / other;
    if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
    if (quotient > 0) {
        if (quotient !== 1 / 0)
        return Math.floor(quotient);
    } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
    throw A.wrapException(A.UnsupportedError$("Result of truncating division is " + A.S(quotient) + ": " + A.S(receiver) + " ~/ " + other));
    },
    $shl(receiver, other) {
    if (other < 0)
        throw A.wrapException(A.argumentErrorValue(other));
    return other > 31 ? 0 : receiver << other >>> 0;
    },
    _shlPositive$1(receiver, other) {
    return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr(receiver, other) {
    var t1;
    if (other < 0)
        throw A.wrapException(A.argumentErrorValue(other));
    if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
    else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
    }
    return t1;
    },
    _shrOtherPositive$1(receiver, other) {
    var t1;
    if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
    else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
    }
    return t1;
    },
    _shrReceiverPositive$1(receiver, other) {
    if (0 > other)
        throw A.wrapException(A.argumentErrorValue(other));
    return this._shrBothPositive$1(receiver, other);
    },
    _shrBothPositive$1(receiver, other) {
    return other > 31 ? 0 : receiver >>> other;
    },
    $isdouble: 1,
    $isnum: 1
};
J.JSInt.prototype = {
    toSigned$1(receiver, width) {
    var signMask = this.$shl(1, width - 1);
    return ((receiver & signMask - 1) >>> 0) - ((receiver & signMask) >>> 0);
    },
    $isint: 1
};
J.JSNumNotInt.prototype = {};
J.JSString.prototype = {
    codeUnitAt$1(receiver, index) {
    if (index < 0)
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
    if (index >= receiver.length)
        A.throwExpression(A.diagnoseIndexError(receiver, index));
    return receiver.charCodeAt(index);
    },
    _codeUnitAt$1(receiver, index) {
    if (index >= receiver.length)
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
    return receiver.charCodeAt(index);
    },
    $add(receiver, other) {
    return receiver + other;
    },
    $mul(receiver, times) {
    var s, result;
    if (0 >= times)
        return "";
    if (times === 1 || receiver.length === 0)
        return receiver;
    if (times !== times >>> 0)
        throw A.wrapException(B.C_OutOfMemoryError);
    for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
        result = s + result;
        times = times >>> 1;
        if (times === 0)
        break;
        s += s;
    }
    return result;
    },
    toString$0(receiver) {
    return receiver;
    },
    get$hashCode(receiver) {
    var t1, hash, i;
    for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + receiver.charCodeAt(i) & 536870911;
        hash = hash + ((hash & 524287) << 10) & 536870911;
        hash ^= hash >> 6;
    }
    hash = hash + ((hash & 67108863) << 3) & 536870911;
    hash ^= hash >> 11;
    return hash + ((hash & 16383) << 15) & 536870911;
    },
    get$length(receiver) {
    return receiver.length;
    },
    $isJSIndexable: 1,
    $isString: 1
};
A.LateError.prototype = {
    toString$0(_) {
    return "LateInitializationError: " + this._message;
    }
};
A.CodeUnits.prototype = {
    get$length(_) {
    return this._string.length;
    },
    $index(_, i) {
    return B.JSString_methods.codeUnitAt$1(this._string, i);
    }
};
A.SentinelValue.prototype = {};
A.EfficientLengthIterable.prototype = {};
A.ListIterable.prototype = {
    get$iterator(_) {
    var _this = this;
    return new A.ListIterator(_this, _this.get$length(_this), A._instanceType(_this)._eval$1("ListIterator<ListIterable.E>"));
    },
    skip$1(_, count) {
    return A.SubListIterable$(this, count, null, A._instanceType(this)._eval$1("ListIterable.E"));
    }
};
A.SubListIterable.prototype = {
    get$_endIndex() {
    var $length = J.get$length$asx(this.__internal$_iterable),
        endOrLength = this._endOrLength;
    if (endOrLength == null || endOrLength > $length)
        return $length;
    return endOrLength;
    },
    get$_startIndex() {
    var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this.__internal$_start;
    if (t1 > $length)
        return $length;
    return t1;
    },
    get$length(_) {
    var endOrLength,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this.__internal$_start;
    if (t1 >= $length)
        return 0;
    endOrLength = this._endOrLength;
    if (endOrLength == null || endOrLength >= $length)
        return $length - t1;
    if (typeof endOrLength !== "number")
        return endOrLength.$sub();
    return endOrLength - t1;
    },
    elementAt$1(_, index) {
    var _this = this,
        realIndex = _this.get$_startIndex() + index;
    if (index < 0 || realIndex >= _this.get$_endIndex())
        throw A.wrapException(A.IndexError$withLength(index, _this.get$length(_this), _this, "index"));
    return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    skip$1(_, count) {
    var newStart, endOrLength, _this = this;
    A.RangeError_checkNotNegative(count, "count");
    newStart = _this.__internal$_start + count;
    endOrLength = _this._endOrLength;
    if (endOrLength != null && newStart >= endOrLength)
        return new A.EmptyIterable(_this.$ti._eval$1("EmptyIterable<1>"));
    return A.SubListIterable$(_this.__internal$_iterable, newStart, endOrLength, _this.$ti._precomputed1);
    },
    toList$1$growable(_, growable) {
    var $length, result, i, _this = this,
        start = _this.__internal$_start,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        end = t2.get$length(t1),
        endOrLength = _this._endOrLength;
    if (endOrLength != null && endOrLength < end)
        end = endOrLength;
    $length = end - start;
    if ($length <= 0) {
        t1 = J.JSArray_JSArray$fixed(0, _this.$ti._precomputed1);
        return t1;
    }
    result = A.List_List$filled($length, t2.elementAt$1(t1, start), false, _this.$ti._precomputed1);
    for (i = 1; i < $length; ++i) {
        B.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
        if (t2.get$length(t1) < end)
        throw A.wrapException(A.ConcurrentModificationError$(_this));
    }
    return result;
    }
};
A.ListIterator.prototype = {
    get$current() {
    var t1 = this.__internal$_current;
    return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
    var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
    if (_this.__internal$_length !== $length)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
    t3 = _this.__internal$_index;
    if (t3 >= $length) {
        _this.set$__internal$_current(null);
        return false;
    }
    _this.set$__internal$_current(t2.elementAt$1(t1, t3));
    ++_this.__internal$_index;
    return true;
    },
    set$__internal$_current(_current) {
    this.__internal$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
};
A.MappedIterable.prototype = {
    get$iterator(_) {
    var t1 = A._instanceType(this);
    return new A.MappedIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("MappedIterator<1,2>"));
    },
    get$length(_) {
    return J.get$length$asx(this.__internal$_iterable);
    }
};
A.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1};
A.MappedIterator.prototype = {
    moveNext$0() {
    var _this = this,
        t1 = _this._iterator;
    if (t1.moveNext$0()) {
        _this.set$__internal$_current(_this._f.call$1(t1.get$current()));
        return true;
    }
    _this.set$__internal$_current(null);
    return false;
    },
    get$current() {
    var t1 = this.__internal$_current;
    return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    set$__internal$_current(_current) {
    this.__internal$_current = this.$ti._eval$1("2?")._as(_current);
    }
};
A.SkipIterable.prototype = {
    skip$1(_, count) {
    A.ArgumentError_checkNotNull(count, "count", type$.int);
    A.RangeError_checkNotNegative(count, "count");
    return new A.SkipIterable(this.__internal$_iterable, this._skipCount + count, A._instanceType(this)._eval$1("SkipIterable<1>"));
    },
    get$iterator(_) {
    return new A.SkipIterator(J.get$iterator$ax(this.__internal$_iterable), this._skipCount, A._instanceType(this)._eval$1("SkipIterator<1>"));
    }
};
A.EfficientLengthSkipIterable.prototype = {
    get$length(_) {
    var $length = J.get$length$asx(this.__internal$_iterable) - this._skipCount;
    if ($length >= 0)
        return $length;
    return 0;
    },
    skip$1(_, count) {
    A.ArgumentError_checkNotNull(count, "count", type$.int);
    A.RangeError_checkNotNegative(count, "count");
    return new A.EfficientLengthSkipIterable(this.__internal$_iterable, this._skipCount + count, this.$ti);
    },
    $isEfficientLengthIterable: 1
};
A.SkipIterator.prototype = {
    moveNext$0() {
    var t1, i;
    for (t1 = this._iterator, i = 0; i < this._skipCount; ++i)
        t1.moveNext$0();
    this._skipCount = 0;
    return t1.moveNext$0();
    },
    get$current() {
    return this._iterator.get$current();
    }
};
A.EmptyIterable.prototype = {
    get$iterator(_) {
    return B.C_EmptyIterator;
    },
    get$length(_) {
    return 0;
    },
    skip$1(_, count) {
    A.RangeError_checkNotNegative(count, "count");
    return this;
    },
    toList$1$growable(_, growable) {
    var t1 = J.JSArray_JSArray$fixed(0, this.$ti._precomputed1);
    return t1;
    }
};
A.EmptyIterator.prototype = {
    moveNext$0() {
    return false;
    },
    get$current() {
    throw A.wrapException(A.IterableElementError_noElement());
    },
    $isIterator: 1
};
A.FixedLengthListMixin.prototype = {};
A.UnmodifiableListMixin.prototype = {
    $indexSet(_, index, value) {
    A._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
    throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    setRange$4(_, start, end, iterable, skipCount) {
    A._instanceType(this)._eval$1("Iterable<UnmodifiableListMixin.E>")._as(iterable);
    throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    setRange$3($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
    }
};
A.UnmodifiableListBase.prototype = {};
A.ConstantMap.prototype = {
    toString$0(_) {
    return A.MapBase_mapToString(this);
    },
    $isMap: 1
};
A.GeneralConstantMap.prototype = {
    _getMap$0() {
    var t1, t2, t3, _this = this,
        backingMap = _this.$map;
    if (backingMap == null) {
        t1 = _this.$ti;
        t2 = t1._precomputed1;
        t3 = A.GeneralConstantMap__typeTest(t2);
        backingMap = A.LinkedHashMap_LinkedHashMap(A._js_helper_GeneralConstantMap__constantMapHashCode$closure(), t3, t2, t1._rest[1]);
        A.fillLiteralMap(_this._jsData, backingMap);
        _this.$map = backingMap;
    }
    return backingMap;
    },
    $index(_, key) {
    return this._getMap$0().$index(0, key);
    },
    forEach$1(_, f) {
    this.$ti._eval$1("~(1,2)")._as(f);
    this._getMap$0().forEach$1(0, f);
    },
    get$keys() {
    var t1 = this._getMap$0();
    return new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    get$length(_) {
    return this._getMap$0().__js_helper$_length;
    }
};
A.GeneralConstantMap__typeTest_closure.prototype = {
    call$1(o) {
    return this.T._is(o);
    },
    $signature: 34
};
A.Primitives_initTicker_closure.prototype = {
    call$0() {
    return B.JSNumber_methods.floor$0(1000 * this.performance.now());
    },
    $signature: 8
};
A.TypeErrorDecoder.prototype = {
    matchTypeError$1(message) {
    var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
    if (match == null)
        return null;
    result = Object.create(null);
    t1 = _this._arguments;
    if (t1 !== -1)
        result.arguments = match[t1 + 1];
    t1 = _this._argumentsExpr;
    if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
    t1 = _this._expr;
    if (t1 !== -1)
        result.expr = match[t1 + 1];
    t1 = _this._method;
    if (t1 !== -1)
        result.method = match[t1 + 1];
    t1 = _this._receiver;
    if (t1 !== -1)
        result.receiver = match[t1 + 1];
    return result;
    }
};
A.NullError.prototype = {
    toString$0(_) {
    var t1 = this._method;
    if (t1 == null)
        return "NoSuchMethodError: " + this.__js_helper$_message;
    return "NoSuchMethodError: method not found: '" + t1 + "' on null";
    }
};
A.JsNoSuchMethodError.prototype = {
    toString$0(_) {
    var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
    if (t1 == null)
        return "NoSuchMethodError: " + _this.__js_helper$_message;
    t2 = _this._receiver;
    if (t2 == null)
        return _s38_ + t1 + "' (" + _this.__js_helper$_message + ")";
    return _s38_ + t1 + "' on '" + t2 + "' (" + _this.__js_helper$_message + ")";
    }
};
A.UnknownJsTypeError.prototype = {
    toString$0(_) {
    var t1 = this.__js_helper$_message;
    return t1.length === 0 ? "Error" : "Error: " + t1;
    }
};
A.NullThrownFromJavaScriptException.prototype = {
    toString$0(_) {
    return "Throw of null ('" + (this._irritant === null ? "null" : "undefined") + "' from JavaScript)";
    }
};
A.ExceptionAndStackTrace.prototype = {};
A._StackTrace.prototype = {
    toString$0(_) {
    var trace,
        t1 = this._trace;
    if (t1 != null)
        return t1;
    t1 = this._exception;
    trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
    return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
};
A.Closure.prototype = {
    toString$0(_) {
    var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
    return "Closure '" + A.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    $isFunction: 1,
    get$$call() {
    return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
};
A.Closure0Args.prototype = {"call*": "call$0", $requiredArgCount: 0};
A.Closure2Args.prototype = {"call*": "call$2", $requiredArgCount: 2};
A.TearOffClosure.prototype = {};
A.StaticClosure.prototype = {
    toString$0(_) {
    var $name = this.$static_name;
    if ($name == null)
        return "Closure of unknown static method";
    return "Closure '" + A.unminifyOrTag($name) + "'";
    }
};
A.BoundClosure.prototype = {
    $eq(_, other) {
    if (other == null)
        return false;
    if (this === other)
        return true;
    if (!(other instanceof A.BoundClosure))
        return false;
    return this.$_target === other.$_target && this._receiver === other._receiver;
    },
    get$hashCode(_) {
    return (A.objectHashCode(this._receiver) ^ A.Primitives_objectHashCode(this.$_target)) >>> 0;
    },
    toString$0(_) {
    return "Closure '" + this.$_name + "' of " + ("Instance of '" + A.Primitives_objectTypeName(this._receiver) + "'");
    }
};
A.RuntimeError.prototype = {
    toString$0(_) {
    return "RuntimeError: " + this.message;
    }
};
A._AssertionError.prototype = {
    toString$0(_) {
    return "Assertion failed: " + A.Error_safeToString(this.message);
    }
};
A.JsLinkedHashMap.prototype = {
    get$length(_) {
    return this.__js_helper$_length;
    },
    get$keys() {
    return new A.LinkedHashMapKeyIterable(this, A._instanceType(this)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    get$values() {
    var t1 = A._instanceType(this);
    return A.MappedIterable_MappedIterable(new A.LinkedHashMapKeyIterable(this, t1._eval$1("LinkedHashMapKeyIterable<1>")), new A.JsLinkedHashMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    },
    containsKey$1(key) {
    var strings, nums;
    if (typeof key == "string") {
        strings = this._strings;
        if (strings == null)
        return false;
        return strings[key] != null;
    } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this._nums;
        if (nums == null)
        return false;
        return nums[key] != null;
    } else
        return this.internalContainsKey$1(key);
    },
    internalContainsKey$1(key) {
    var rest = this.__js_helper$_rest;
    if (rest == null)
        return false;
    return this.internalFindBucketIndex$2(rest[this.internalComputeHashCode$1(key)], key) >= 0;
    },
    $index(_, key) {
    var strings, cell, t1, nums, _null = null;
    if (typeof key == "string") {
        strings = this._strings;
        if (strings == null)
        return _null;
        cell = strings[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
    } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this._nums;
        if (nums == null)
        return _null;
        cell = nums[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
    } else
        return this.internalGet$1(key);
    },
    internalGet$1(key) {
    var bucket, index,
        rest = this.__js_helper$_rest;
    if (rest == null)
        return null;
    bucket = rest[this.internalComputeHashCode$1(key)];
    index = this.internalFindBucketIndex$2(bucket, key);
    if (index < 0)
        return null;
    return bucket[index].hashMapCellValue;
    },
    $indexSet(_, key, value) {
    var strings, nums, _this = this,
        t1 = A._instanceType(_this);
    t1._precomputed1._as(key);
    t1._rest[1]._as(value);
    if (typeof key == "string") {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
    } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
    } else
        _this.internalSet$2(key, value);
    },
    internalSet$2(key, value) {
    var rest, hash, bucket, index, _this = this,
        t1 = A._instanceType(_this);
    t1._precomputed1._as(key);
    t1._rest[1]._as(value);
    rest = _this.__js_helper$_rest;
    if (rest == null)
        rest = _this.__js_helper$_rest = _this._newHashTable$0();
    hash = _this.internalComputeHashCode$1(key);
    bucket = rest[hash];
    if (bucket == null)
        rest[hash] = [_this._newLinkedCell$2(key, value)];
    else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
        bucket[index].hashMapCellValue = value;
        else
        bucket.push(_this._newLinkedCell$2(key, value));
    }
    },
    remove$1(_, key) {
    var _this = this;
    if (typeof key == "string")
        return _this._removeHashTableEntry$2(_this._strings, key);
    else if (typeof key == "number" && (key & 0x3fffffff) === key)
        return _this._removeHashTableEntry$2(_this._nums, key);
    else
        return _this.internalRemove$1(key);
    },
    internalRemove$1(key) {
    var hash, bucket, index, cell, _this = this,
        rest = _this.__js_helper$_rest;
    if (rest == null)
        return null;
    hash = _this.internalComputeHashCode$1(key);
    bucket = rest[hash];
    index = _this.internalFindBucketIndex$2(bucket, key);
    if (index < 0)
        return null;
    cell = bucket.splice(index, 1)[0];
    _this._unlinkCell$1(cell);
    if (bucket.length === 0)
        delete rest[hash];
    return cell.hashMapCellValue;
    },
    forEach$1(_, action) {
    var cell, modifications, _this = this;
    A._instanceType(_this)._eval$1("~(1,2)")._as(action);
    cell = _this._first;
    modifications = _this._modifications;
    for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
        throw A.wrapException(A.ConcurrentModificationError$(_this));
        cell = cell._next;
    }
    },
    _addHashTableEntry$3(table, key, value) {
    var cell,
        t1 = A._instanceType(this);
    t1._precomputed1._as(key);
    t1._rest[1]._as(value);
    cell = table[key];
    if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
    else
        cell.hashMapCellValue = value;
    },
    _removeHashTableEntry$2(table, key) {
    var cell;
    if (table == null)
        return null;
    cell = table[key];
    if (cell == null)
        return null;
    this._unlinkCell$1(cell);
    delete table[key];
    return cell.hashMapCellValue;
    },
    _modified$0() {
    this._modifications = this._modifications + 1 & 1073741823;
    },
    _newLinkedCell$2(key, value) {
    var _this = this,
        t1 = A._instanceType(_this),
        cell = new A.LinkedHashMapCell(t1._precomputed1._as(key), t1._rest[1]._as(value));
    if (_this._first == null)
        _this._first = _this._last = cell;
    else {
        t1 = _this._last;
        t1.toString;
        cell._previous = t1;
        _this._last = t1._next = cell;
    }
    ++_this.__js_helper$_length;
    _this._modified$0();
    return cell;
    },
    _unlinkCell$1(cell) {
    var _this = this,
        previous = cell._previous,
        next = cell._next;
    if (previous == null)
        _this._first = next;
    else
        previous._next = next;
    if (next == null)
        _this._last = previous;
    else
        next._previous = previous;
    --_this.__js_helper$_length;
    _this._modified$0();
    },
    internalComputeHashCode$1(key) {
    return J.get$hashCode$(key) & 0x3fffffff;
    },
    internalFindBucketIndex$2(bucket, key) {
    var $length, i;
    if (bucket == null)
        return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
        return i;
    return -1;
    },
    toString$0(_) {
    return A.MapBase_mapToString(this);
    },
    _newHashTable$0() {
    var table = Object.create(null);
    table["<non-identifier-key>"] = table;
    delete table["<non-identifier-key>"];
    return table;
    },
    $isLinkedHashMap: 1
};
A.JsLinkedHashMap_values_closure.prototype = {
    call$1(each) {
    var t1 = this.$this,
        t2 = A._instanceType(t1);
    t1 = t1.$index(0, t2._precomputed1._as(each));
    return t1 == null ? t2._rest[1]._as(t1) : t1;
    },
    $signature() {
    return A._instanceType(this.$this)._eval$1("2(1)");
    }
};
A.LinkedHashMapCell.prototype = {};
A.LinkedHashMapKeyIterable.prototype = {
    get$length(_) {
    return this._map.__js_helper$_length;
    },
    get$iterator(_) {
    var t1 = this._map,
        t2 = new A.LinkedHashMapKeyIterator(t1, t1._modifications, this.$ti._eval$1("LinkedHashMapKeyIterator<1>"));
    t2._cell = t1._first;
    return t2;
    }
};
A.LinkedHashMapKeyIterator.prototype = {
    get$current() {
    return this.__js_helper$_current;
    },
    moveNext$0() {
    var cell, _this = this,
        t1 = _this._map;
    if (_this._modifications !== t1._modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
    cell = _this._cell;
    if (cell == null) {
        _this.set$__js_helper$_current(null);
        return false;
    } else {
        _this.set$__js_helper$_current(cell.hashMapCellKey);
        _this._cell = cell._next;
        return true;
    }
    },
    set$__js_helper$_current(_current) {
    this.__js_helper$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
};
A.initHooks_closure.prototype = {
    call$1(o) {
    return this.getTag(o);
    },
    $signature: 20
};
A.initHooks_closure0.prototype = {
    call$2(o, tag) {
    return this.getUnknownTag(o, tag);
    },
    $signature: 17
};
A.initHooks_closure1.prototype = {
    call$1(tag) {
    return this.prototypeForTag(A._asString(tag));
    },
    $signature: 18
};
A._Cell.prototype = {
    _readField$0() {
    var t1 = this.__late_helper$_value;
    if (t1 === this)
        throw A.wrapException(A.LateError$fieldNI(this.__late_helper$_name));
    return t1;
    }
};
A.NativeTypedData.prototype = {
    _invalidPosition$3(receiver, position, $length, $name) {
    var t1 = A.RangeError$range(position, 0, $length, $name, null);
    throw A.wrapException(t1);
    },
    _checkPosition$3(receiver, position, $length, $name) {
    if (position >>> 0 !== position || position > $length)
        this._invalidPosition$3(receiver, position, $length, $name);
    },
    $isTypedData: 1
};
A.NativeTypedArray.prototype = {
    get$length(receiver) {
    return receiver.length;
    },
    _setRangeFast$4(receiver, start, end, source, skipCount) {
    var count, sourceLength,
        targetLength = receiver.length;
    this._checkPosition$3(receiver, start, targetLength, "start");
    this._checkPosition$3(receiver, end, targetLength, "end");
    if (start > end)
        throw A.wrapException(A.RangeError$range(start, 0, end, null, null));
    count = end - start;
    if (skipCount < 0)
        throw A.wrapException(A.ArgumentError$(skipCount, null));
    sourceLength = source.length;
    if (sourceLength - skipCount < count)
        throw A.wrapException(A.StateError$("Not enough elements"));
    if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
    receiver.set(source, start);
    },
    $isJSIndexable: 1,
    $isJavaScriptIndexingBehavior: 1
};
A.NativeTypedArrayOfDouble.prototype = {
    $index(receiver, index) {
    A._checkValidIndex(index, receiver, receiver.length);
    return receiver[index];
    },
    $indexSet(receiver, index, value) {
    A._asDouble(value);
    A._checkValidIndex(index, receiver, receiver.length);
    receiver[index] = value;
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
    type$.Iterable_double._as(iterable);
    if (type$.NativeTypedArrayOfDouble._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
    }
    this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
};
A.NativeTypedArrayOfInt.prototype = {
    $indexSet(receiver, index, value) {
    A._asInt(value);
    A._checkValidIndex(index, receiver, receiver.length);
    receiver[index] = value;
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
    type$.Iterable_int._as(iterable);
    if (type$.NativeTypedArrayOfInt._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
    }
    this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
};
A.NativeFloat32List.prototype = {
    sublist$2(receiver, start, end) {
    return new Float32Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isFloat32List: 1
};
A.NativeFloat64List.prototype = {
    sublist$2(receiver, start, end) {
    return new Float64Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isFloat64List: 1
};
A.NativeInt16List.prototype = {
    $index(receiver, index) {
    A._checkValidIndex(index, receiver, receiver.length);
    return receiver[index];
    },
    sublist$2(receiver, start, end) {
    return new Int16Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isInt16List: 1
};
A.NativeInt32List.prototype = {
    $index(receiver, index) {
    A._checkValidIndex(index, receiver, receiver.length);
    return receiver[index];
    },
    sublist$2(receiver, start, end) {
    return new Int32Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isInt32List: 1
};
A.NativeInt8List.prototype = {
    $index(receiver, index) {
    A._checkValidIndex(index, receiver, receiver.length);
    return receiver[index];
    },
    sublist$2(receiver, start, end) {
    return new Int8Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isInt8List: 1
};
A.NativeUint16List.prototype = {
    $index(receiver, index) {
    A._checkValidIndex(index, receiver, receiver.length);
    return receiver[index];
    },
    sublist$2(receiver, start, end) {
    return new Uint16Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isUint16List: 1
};
A.NativeUint32List.prototype = {
    $index(receiver, index) {
    A._checkValidIndex(index, receiver, receiver.length);
    return receiver[index];
    },
    sublist$2(receiver, start, end) {
    return new Uint32Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isUint32List: 1
};
A.NativeUint8List.prototype = {
    get$length(receiver) {
    return receiver.length;
    },
    $index(receiver, index) {
    A._checkValidIndex(index, receiver, receiver.length);
    return receiver[index];
    },
    sublist$2(receiver, start, end) {
    return new Uint8Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1($receiver, start) {
    return this.sublist$2($receiver, start, null);
    },
    $isNativeUint8List: 1,
    $isUint8List: 1
};
A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
A.Rti.prototype = {
    _eval$1(recipe) {
    return A._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1(typeOrTuple) {
    return A._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
};
A._FunctionParameters.prototype = {};
A._Type.prototype = {
    toString$0(_) {
    return A._rtiToString(this._rti, null);
    },
    $isType: 1
};
A._Error.prototype = {
    toString$0(_) {
    return this.__rti$_message;
    }
};
A._TypeError.prototype = {$isTypeError: 1};
A._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1(_) {
    var t1 = this._box_0,
        f = t1.storedCallback;
    t1.storedCallback = null;
    f.call$0();
    },
    $signature: 9
};
A._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1(callback) {
    var t1, t2;
    this._box_0.storedCallback = type$.void_Function._as(callback);
    t1 = this.div;
    t2 = this.span;
    t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 19
};
A._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0() {
    this.callback.call$0();
    },
    $signature: 11
};
A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0() {
    this.callback.call$0();
    },
    $signature: 11
};
A._TimerImpl.prototype = {
    _TimerImpl$2(milliseconds, callback) {
    if (self.setTimeout != null)
        self.setTimeout(A.convertDartClosureToJS(new A._TimerImpl_internalCallback(this, callback), 0), milliseconds);
    else
        throw A.wrapException(A.UnsupportedError$("`setTimeout()` not found."));
    }
};
A._TimerImpl_internalCallback.prototype = {
    call$0() {
    this.callback.call$0();
    },
    $signature: 2
};
A._AsyncAwaitCompleter.prototype = {};
A._awaitOnObject_closure.prototype = {
    call$1(result) {
    return this.bodyFunction.call$2(0, result);
    },
    $signature: 25
};
A._awaitOnObject_closure0.prototype = {
    call$2(error, stackTrace) {
    this.bodyFunction.call$2(1, new A.ExceptionAndStackTrace(error, type$.StackTrace._as(stackTrace)));
    },
    $signature: 27
};
A._wrapJsFunctionForAsync_closure.prototype = {
    call$2(errorCode, result) {
    this.$protected(A._asInt(errorCode), result);
    },
    $signature: 31
};
A.AsyncError.prototype = {
    toString$0(_) {
    return A.S(this.error);
    },
    $isError: 1,
    get$stackTrace() {
    return this.stackTrace;
    }
};
A._FutureListener.prototype = {
    matchesErrorTest$1(asyncError) {
    if ((this.state & 15) !== 6)
        return true;
    return this.result._zone.runUnary$2$2(type$.bool_Function_Object._as(this.callback), asyncError.error, type$.bool, type$.Object);
    },
    handleError$1(asyncError) {
    var exception, _this = this,
        errorCallback = _this.errorCallback,
        result = null,
        t1 = type$.dynamic,
        t2 = type$.Object,
        t3 = asyncError.error,
        t4 = _this.result._zone;
    if (type$.dynamic_Function_Object_StackTrace._is(errorCallback))
        result = t4.runBinary$3$3(errorCallback, t3, asyncError.stackTrace, t1, t2, type$.StackTrace);
    else
        result = t4.runUnary$2$2(type$.dynamic_Function_Object._as(errorCallback), t3, t1, t2);
    try {
        t1 = _this.$ti._eval$1("2/")._as(result);
        return t1;
    } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception))) {
        if ((_this.state & 1) !== 0)
            throw A.wrapException(A.ArgumentError$("The error handler of Future.then must return a value of the returned future's type", "onError"));
        throw A.wrapException(A.ArgumentError$("The error handler of Future.catchError must return a value of the future's type", "onError"));
        } else
        throw exception;
    }
    }
};
A._Future.prototype = {
    then$1$2$onError(f, onError, $R) {
    var currentZone, result, t2,
        t1 = this.$ti;
    t1._bind$1($R)._eval$1("1/(2)")._as(f);
    currentZone = $.Zone__current;
    if (currentZone === B.C__RootZone) {
        if (onError != null && !type$.dynamic_Function_Object_StackTrace._is(onError) && !type$.dynamic_Function_Object._is(onError))
        throw A.wrapException(A.ArgumentError$value(onError, "onError", string$.Error_));
    } else {
        $R._eval$1("@<0/>")._bind$1(t1._precomputed1)._eval$1("1(2)")._as(f);
        if (onError != null)
        onError = A._registerErrorHandler(onError, currentZone);
    }
    result = new A._Future(currentZone, $R._eval$1("_Future<0>"));
    t2 = onError == null ? 1 : 3;
    this._addListener$1(new A._FutureListener(result, t2, f, onError, t1._eval$1("@<1>")._bind$1($R)._eval$1("_FutureListener<1,2>")));
    return result;
    },
    then$1$1(f, $R) {
    return this.then$1$2$onError(f, null, $R);
    },
    _thenAwait$1$2(f, onError, $E) {
    var result,
        t1 = this.$ti;
    t1._bind$1($E)._eval$1("1/(2)")._as(f);
    result = new A._Future($.Zone__current, $E._eval$1("_Future<0>"));
    this._addListener$1(new A._FutureListener(result, 3, f, onError, t1._eval$1("@<1>")._bind$1($E)._eval$1("_FutureListener<1,2>")));
    return result;
    },
    _setErrorObject$1(error) {
    this._state = this._state & 1 | 16;
    this._resultOrListeners = error;
    },
    _cloneResult$1(source) {
    this._state = source._state & 30 | this._state & 1;
    this._resultOrListeners = source._resultOrListeners;
    },
    _addListener$1(listener) {
    var source, _this = this,
        t1 = _this._state;
    if (t1 <= 3) {
        listener._nextListener = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listener;
    } else {
        if ((t1 & 4) !== 0) {
        source = type$._Future_dynamic._as(_this._resultOrListeners);
        if ((source._state & 24) === 0) {
            source._addListener$1(listener);
            return;
        }
        _this._cloneResult$1(source);
        }
        A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__addListener_closure(_this, listener)));
    }
    },
    _prependListeners$1(listeners) {
    var t1, existingListeners, next, cursor, next0, source, _this = this, _box_0 = {};
    _box_0.listeners = listeners;
    if (listeners == null)
        return;
    t1 = _this._state;
    if (t1 <= 3) {
        existingListeners = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
        next = listeners._nextListener;
        for (cursor = listeners; next != null; cursor = next, next = next0)
            next0 = next._nextListener;
        cursor._nextListener = existingListeners;
        }
    } else {
        if ((t1 & 4) !== 0) {
        source = type$._Future_dynamic._as(_this._resultOrListeners);
        if ((source._state & 24) === 0) {
            source._prependListeners$1(listeners);
            return;
        }
        _this._cloneResult$1(source);
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__prependListeners_closure(_box_0, _this)));
    }
    },
    _removeListeners$0() {
    var current = type$.nullable__FutureListener_dynamic_dynamic._as(this._resultOrListeners);
    this._resultOrListeners = null;
    return this._reverseListeners$1(current);
    },
    _reverseListeners$1(listeners) {
    var current, prev, next;
    for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
    }
    return prev;
    },
    _chainForeignFuture$1(source) {
    var e, s, exception, _this = this;
    _this._state ^= 2;
    try {
        source.then$1$2$onError(new A._Future__chainForeignFuture_closure(_this), new A._Future__chainForeignFuture_closure0(_this), type$.Null);
    } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A.scheduleMicrotask(new A._Future__chainForeignFuture_closure1(_this, e, s));
    }
    },
    _completeWithValue$1(value) {
    var listeners, _this = this;
    _this.$ti._precomputed1._as(value);
    listeners = _this._removeListeners$0();
    _this._state = 8;
    _this._resultOrListeners = value;
    A._Future__propagateToListeners(_this, listeners);
    },
    _completeError$2(error, stackTrace) {
    var listeners;
    type$.StackTrace._as(stackTrace);
    listeners = this._removeListeners$0();
    this._setErrorObject$1(A.AsyncError$(error, stackTrace));
    A._Future__propagateToListeners(this, listeners);
    },
    _asyncComplete$1(value) {
    var t1 = this.$ti;
    t1._eval$1("1/")._as(value);
    if (t1._eval$1("Future<1>")._is(value)) {
        this._chainFuture$1(value);
        return;
    }
    this._asyncCompleteWithValue$1(t1._precomputed1._as(value));
    },
    _asyncCompleteWithValue$1(value) {
    var _this = this;
    _this.$ti._precomputed1._as(value);
    _this._state ^= 2;
    A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__asyncCompleteWithValue_closure(_this, value)));
    },
    _chainFuture$1(value) {
    var _this = this,
        t1 = _this.$ti;
    t1._eval$1("Future<1>")._as(value);
    if (t1._is(value)) {
        if ((value._state & 16) !== 0) {
        _this._state ^= 2;
        A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__chainFuture_closure(_this, value)));
        } else
        A._Future__chainCoreFuture(value, _this);
        return;
    }
    _this._chainForeignFuture$1(value);
    },
    _asyncCompleteError$2(error, stackTrace) {
    this._state ^= 2;
    A._rootScheduleMicrotask(null, null, this._zone, type$.void_Function._as(new A._Future__asyncCompleteError_closure(this, error, stackTrace)));
    },
    $isFuture: 1
};
A._Future__addListener_closure.prototype = {
    call$0() {
    A._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 2
};
A._Future__prependListeners_closure.prototype = {
    call$0() {
    A._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 2
};
A._Future__chainForeignFuture_closure.prototype = {
    call$1(value) {
    var error, stackTrace, exception,
        t1 = this.$this;
    t1._state ^= 2;
    try {
        t1._completeWithValue$1(t1.$ti._precomputed1._as(value));
    } catch (exception) {
        error = A.unwrapException(exception);
        stackTrace = A.getTraceFromException(exception);
        t1._completeError$2(error, stackTrace);
    }
    },
    $signature: 9
};
A._Future__chainForeignFuture_closure0.prototype = {
    call$2(error, stackTrace) {
    this.$this._completeError$2(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    $signature: 33
};
A._Future__chainForeignFuture_closure1.prototype = {
    call$0() {
    this.$this._completeError$2(this.e, this.s);
    },
    $signature: 2
};
A._Future__asyncCompleteWithValue_closure.prototype = {
    call$0() {
    this.$this._completeWithValue$1(this.value);
    },
    $signature: 2
};
A._Future__chainFuture_closure.prototype = {
    call$0() {
    A._Future__chainCoreFuture(this.value, this.$this);
    },
    $signature: 2
};
A._Future__asyncCompleteError_closure.prototype = {
    call$0() {
    this.$this._completeError$2(this.error, this.stackTrace);
    },
    $signature: 2
};
A._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0() {
    var e, s, t1, exception, t2, originalSource, _this = this, completeResult = null;
    try {
        t1 = _this._box_0.listener;
        completeResult = t1.result._zone.run$1$1(type$.dynamic_Function._as(t1.callback), type$.dynamic);
    } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = _this.hasError && type$.AsyncError._as(_this._box_1.source._resultOrListeners).error === e;
        t2 = _this._box_0;
        if (t1)
        t2.listenerValueOrError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        else
        t2.listenerValueOrError = A.AsyncError$(e, s);
        t2.listenerHasError = true;
        return;
    }
    if (completeResult instanceof A._Future && (completeResult._state & 24) !== 0) {
        if ((completeResult._state & 16) !== 0) {
        t1 = _this._box_0;
        t1.listenerValueOrError = type$.AsyncError._as(completeResult._resultOrListeners);
        t1.listenerHasError = true;
        }
        return;
    }
    if (type$.Future_dynamic._is(completeResult)) {
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = completeResult.then$1$1(new A._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), type$.dynamic);
        t1.listenerHasError = false;
    }
    },
    $signature: 2
};
A._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1(_) {
    return this.originalSource;
    },
    $signature: 15
};
A._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0() {
    var e, s, t1, t2, t3, t4, t5, exception;
    try {
        t1 = this._box_0;
        t2 = t1.listener;
        t3 = t2.$ti;
        t4 = t3._precomputed1;
        t5 = t4._as(this.sourceResult);
        t1.listenerValueOrError = t2.result._zone.runUnary$2$2(t3._eval$1("2/(1)")._as(t2.callback), t5, t3._eval$1("2/"), t4);
    } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = this._box_0;
        t1.listenerValueOrError = A.AsyncError$(e, s);
        t1.listenerHasError = true;
    }
    },
    $signature: 2
};
A._Future__propagateToListeners_handleError.prototype = {
    call$0() {
    var asyncError, e, s, t1, exception, t2, _this = this;
    try {
        asyncError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t1 = _this._box_0;
        if (t1.listener.matchesErrorTest$1(asyncError) && t1.listener.errorCallback != null) {
        t1.listenerValueOrError = t1.listener.handleError$1(asyncError);
        t1.listenerHasError = false;
        }
    } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t2 = _this._box_0;
        if (t1.error === e)
        t2.listenerValueOrError = t1;
        else
        t2.listenerValueOrError = A.AsyncError$(e, s);
        t2.listenerHasError = true;
    }
    },
    $signature: 2
};
A._AsyncCallbackEntry.prototype = {};
A.StreamTransformerBase.prototype = {};
A._StreamIterator.prototype = {};
A._Zone.prototype = {$isZone: 1};
A._rootHandleError_closure.prototype = {
    call$0() {
    var t1 = this.error,
        t2 = this.stackTrace;
    A.checkNotNullable(t1, "error", type$.Object);
    A.checkNotNullable(t2, "stackTrace", type$.StackTrace);
    A.Error__throw(t1, t2);
    },
    $signature: 2
};
A._RootZone.prototype = {
    runGuarded$1(f) {
    var e, s, exception;
    type$.void_Function._as(f);
    try {
        if (B.C__RootZone === $.Zone__current) {
        f.call$0();
        return;
        }
        A._rootRun(null, null, this, f, type$.void);
    } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
    }
    },
    bindCallbackGuarded$1(f) {
    return new A._RootZone_bindCallbackGuarded_closure(this, type$.void_Function._as(f));
    },
    run$1$1(f, $R) {
    $R._eval$1("0()")._as(f);
    if ($.Zone__current === B.C__RootZone)
        return f.call$0();
    return A._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2(f, arg, $R, $T) {
    $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
    $T._as(arg);
    if ($.Zone__current === B.C__RootZone)
        return f.call$1(arg);
    return A._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3(f, arg1, arg2, $R, T1, T2) {
    $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
    T1._as(arg1);
    T2._as(arg2);
    if ($.Zone__current === B.C__RootZone)
        return f.call$2(arg1, arg2);
    return A._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    registerBinaryCallback$3$1(f, $R, T1, T2) {
    return $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
    }
};
A._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0() {
    return this.$this.runGuarded$1(this.f);
    },
    $signature: 2
};
A._LinkedCustomHashMap.prototype = {
    $index(_, key) {
    if (!A.boolConversionCheck(this._validKey.call$1(key)))
        return null;
    return this.super$JsLinkedHashMap$internalGet(key);
    },
    $indexSet(_, key, value) {
    var t1 = this.$ti;
    this.super$JsLinkedHashMap$internalSet(t1._precomputed1._as(key), t1._rest[1]._as(value));
    },
    containsKey$1(key) {
    if (!A.boolConversionCheck(this._validKey.call$1(key)))
        return false;
    return this.super$JsLinkedHashMap$internalContainsKey(key);
    },
    remove$1(_, key) {
    if (!A.boolConversionCheck(this._validKey.call$1(key)))
        return null;
    return this.super$JsLinkedHashMap$internalRemove(key);
    },
    internalComputeHashCode$1(key) {
    return this._hashCode.call$1(this.$ti._precomputed1._as(key)) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
    var $length, t1, t2, i;
    if (bucket == null)
        return -1;
    $length = bucket.length;
    for (t1 = this.$ti._precomputed1, t2 = this._equals, i = 0; i < $length; ++i)
        if (A.boolConversionCheck(t2.call$2(t1._as(bucket[i].hashMapCellKey), t1._as(key))))
        return i;
    return -1;
    }
};
A._LinkedCustomHashMap_closure.prototype = {
    call$1(v) {
    return this.K._is(v);
    },
    $signature: 36
};
A.LinkedHashMap_LinkedHashMap$from_closure.prototype = {
    call$2(k, v) {
    this.result.$indexSet(0, this.K._as(k), this.V._as(v));
    },
    $signature: 37
};
A.ListBase.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1};
A.ListMixin.prototype = {
    get$iterator(receiver) {
    return new A.ListIterator(receiver, this.get$length(receiver), A.instanceType(receiver)._eval$1("ListIterator<ListMixin.E>"));
    },
    elementAt$1(receiver, index) {
    return this.$index(receiver, index);
    },
    contains$1(receiver, element) {
    var i,
        $length = this.get$length(receiver);
    for (i = 0; i < $length; ++i) {
        if (this.$index(receiver, i) === element)
        return true;
        if ($length !== this.get$length(receiver))
        throw A.wrapException(A.ConcurrentModificationError$(receiver));
    }
    return false;
    },
    skip$1(receiver, count) {
    return A.SubListIterable$(receiver, count, null, A.instanceType(receiver)._eval$1("ListMixin.E"));
    },
    sublist$2(receiver, start, end) {
    var t1,
        listLength = this.get$length(receiver);
    A.RangeError_checkValidRange(start, end, listLength);
    A.RangeError_checkValidRange(start, end, this.get$length(receiver));
    t1 = A.instanceType(receiver)._eval$1("ListMixin.E");
    return A.List_List$from(A.SubListIterable$(receiver, start, end, t1), t1);
    },
    fillRange$3(receiver, start, end, fill) {
    var i;
    A.instanceType(receiver)._eval$1("ListMixin.E?")._as(fill);
    A.RangeError_checkValidRange(start, end, this.get$length(receiver));
    for (i = start; i < end; ++i)
        this.$indexSet(receiver, i, fill);
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
    var $length, otherStart, otherList, i,
        t1 = A.instanceType(receiver);
    t1._eval$1("Iterable<ListMixin.E>")._as(iterable);
    A.RangeError_checkValidRange(start, end, this.get$length(receiver));
    $length = end - start;
    if ($length === 0)
        return;
    A.RangeError_checkNotNegative(skipCount, "skipCount");
    if (t1._eval$1("List<ListMixin.E>")._is(iterable)) {
        otherStart = skipCount;
        otherList = iterable;
    } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
    }
    t1 = J.getInterceptor$asx(otherList);
    if (otherStart + $length > t1.get$length(otherList))
        throw A.wrapException(A.IterableElementError_tooFew());
    if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
        this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    else
        for (i = 0; i < $length; ++i)
        this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    setRange$3($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
    },
    setAll$2(receiver, index, iterable) {
    A.instanceType(receiver)._eval$1("Iterable<ListMixin.E>")._as(iterable);
    this.setRange$3(receiver, index, index + iterable.length, iterable);
    },
    toString$0(receiver) {
    return A.IterableBase_iterableToFullString(receiver, "[", "]");
    }
};
A.MapBase.prototype = {};
A.MapBase_mapToString_closure.prototype = {
    call$2(k, v) {
    var t2,
        t1 = this._box_0;
    if (!t1.first)
        this.result._contents += ", ";
    t1.first = false;
    t1 = this.result;
    t2 = t1._contents += A.S(k);
    t1._contents = t2 + ": ";
    t1._contents += A.S(v);
    },
    $signature: 16
};
A.MapMixin.prototype = {
    forEach$1(_, action) {
    var t2, key, t3,
        t1 = A._instanceType(this);
    t1._eval$1("~(MapMixin.K,MapMixin.V)")._as(action);
    for (t2 = this.get$keys(), t2 = t2.get$iterator(t2), t1 = t1._eval$1("MapMixin.V"); t2.moveNext$0();) {
        key = t2.get$current();
        t3 = this.$index(0, key);
        action.call$2(key, t3 == null ? t1._as(t3) : t3);
    }
    },
    get$length(_) {
    var t1 = this.get$keys();
    return t1.get$length(t1);
    },
    toString$0(_) {
    return A.MapBase_mapToString(this);
    },
    $isMap: 1
};
A._ListBase_Object_ListMixin.prototype = {};
A.Utf8Decoder__decoder_closure.prototype = {
    call$0() {
    var t1, exception;
    try {
        t1 = new TextDecoder("utf-8", {fatal: true});
        return t1;
    } catch (exception) {
    }
    return null;
    },
    $signature: 12
};
A.Utf8Decoder__decoderNonfatal_closure.prototype = {
    call$0() {
    var t1, exception;
    try {
        t1 = new TextDecoder("utf-8", {fatal: false});
        return t1;
    } catch (exception) {
    }
    return null;
    },
    $signature: 12
};
A._UnicodeSubsetEncoder.prototype = {
    convert$1(string) {
    var i, codeUnit,
        $length = A.RangeError_checkValidRange(0, null, string.length) - 0,
        result = new Uint8Array($length);
    for (i = 0; i < $length; ++i) {
        codeUnit = B.JSString_methods._codeUnitAt$1(string, i);
        if ((codeUnit & 4294967040) !== 0)
        throw A.wrapException(A.ArgumentError$value(string, "string", "Contains invalid characters."));
        if (!(i < $length))
        return A.ioore(result, i);
        result[i] = codeUnit;
    }
    return result;
    }
};
A._UnicodeSubsetDecoder.prototype = {
    convert$1(bytes) {
    var t1, end, i, byte;
    type$.List_int._as(bytes);
    t1 = bytes.length;
    end = A.RangeError_checkValidRange(0, null, t1);
    for (i = 0; i < end; ++i) {
        if (!(i < t1))
        return A.ioore(bytes, i);
        byte = bytes[i];
        if ((byte & 4294967040) !== 0) {
        if (!this._allowInvalid)
            throw A.wrapException(A.FormatException$("Invalid value in input: " + byte, null, null));
        return this._convertInvalid$3(bytes, 0, end);
        }
    }
    return A.String_String$fromCharCodes(bytes, 0, end);
    },
    _convertInvalid$3(bytes, start, end) {
    var t1, i, t2, value;
    type$.List_int._as(bytes);
    for (t1 = bytes.length, i = start, t2 = ""; i < end; ++i) {
        if (!(i < t1))
        return A.ioore(bytes, i);
        value = bytes[i];
        t2 += A.Primitives_stringFromCharCode((value & 4294967040) !== 0 ? 65533 : value);
    }
    return t2.charCodeAt(0) == 0 ? t2 : t2;
    }
};
A.Codec.prototype = {};
A.Converter.prototype = {};
A.Encoding.prototype = {};
A.Latin1Codec.prototype = {
    decode$1(bytes) {
    var t1;
    type$.List_int._as(bytes);
    t1 = B.Latin1Decoder_false.convert$1(bytes);
    return t1;
    }
};
A.Latin1Encoder.prototype = {};
A.Latin1Decoder.prototype = {};
A.Utf8Codec.prototype = {
    decode$2$allowMalformed(codeUnits, allowMalformed) {
    type$.List_int._as(codeUnits);
    return B.Utf8Decoder_true.convert$1(codeUnits);
    }
};
A.Utf8Encoder.prototype = {
    convert$1(string) {
    var t1, encoder,
        end = A.RangeError_checkValidRange(0, null, string.length),
        $length = end - 0;
    if ($length === 0)
        return new Uint8Array(0);
    t1 = new Uint8Array($length * 3);
    encoder = new A._Utf8Encoder(t1);
    if (encoder._fillBuffer$3(string, 0, end) !== end) {
        B.JSString_methods.codeUnitAt$1(string, end - 1);
        encoder._writeReplacementCharacter$0();
    }
    return B.NativeUint8List_methods.sublist$2(t1, 0, encoder._bufferIndex);
    }
};
A._Utf8Encoder.prototype = {
    _writeReplacementCharacter$0() {
    var _this = this,
        t1 = _this._buffer,
        t2 = _this._bufferIndex,
        t3 = _this._bufferIndex = t2 + 1,
        t4 = t1.length;
    if (!(t2 < t4))
        return A.ioore(t1, t2);
    t1[t2] = 239;
    t2 = _this._bufferIndex = t3 + 1;
    if (!(t3 < t4))
        return A.ioore(t1, t3);
    t1[t3] = 191;
    _this._bufferIndex = t2 + 1;
    if (!(t2 < t4))
        return A.ioore(t1, t2);
    t1[t2] = 189;
    },
    _writeSurrogate$2(leadingSurrogate, nextCodeUnit) {
    var rune, t1, t2, t3, t4, _this = this;
    if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10) | nextCodeUnit & 1023;
        t1 = _this._buffer;
        t2 = _this._bufferIndex;
        t3 = _this._bufferIndex = t2 + 1;
        t4 = t1.length;
        if (!(t2 < t4))
        return A.ioore(t1, t2);
        t1[t2] = rune >>> 18 | 240;
        t2 = _this._bufferIndex = t3 + 1;
        if (!(t3 < t4))
        return A.ioore(t1, t3);
        t1[t3] = rune >>> 12 & 63 | 128;
        t3 = _this._bufferIndex = t2 + 1;
        if (!(t2 < t4))
        return A.ioore(t1, t2);
        t1[t2] = rune >>> 6 & 63 | 128;
        _this._bufferIndex = t3 + 1;
        if (!(t3 < t4))
        return A.ioore(t1, t3);
        t1[t3] = rune & 63 | 128;
        return true;
    } else {
        _this._writeReplacementCharacter$0();
        return false;
    }
    },
    _fillBuffer$3(str, start, end) {
    var t1, t2, stringIndex, codeUnit, t3, stringIndex0, t4, _this = this;
    if (start !== end && (B.JSString_methods.codeUnitAt$1(str, end - 1) & 64512) === 55296)
        --end;
    for (t1 = _this._buffer, t2 = t1.length, stringIndex = start; stringIndex < end; ++stringIndex) {
        codeUnit = B.JSString_methods._codeUnitAt$1(str, stringIndex);
        if (codeUnit <= 127) {
        t3 = _this._bufferIndex;
        if (t3 >= t2)
            break;
        _this._bufferIndex = t3 + 1;
        t1[t3] = codeUnit;
        } else {
        t3 = codeUnit & 64512;
        if (t3 === 55296) {
            if (_this._bufferIndex + 4 > t2)
            break;
            stringIndex0 = stringIndex + 1;
            if (_this._writeSurrogate$2(codeUnit, B.JSString_methods._codeUnitAt$1(str, stringIndex0)))
            stringIndex = stringIndex0;
        } else if (t3 === 56320) {
            if (_this._bufferIndex + 3 > t2)
            break;
            _this._writeReplacementCharacter$0();
        } else if (codeUnit <= 2047) {
            t3 = _this._bufferIndex;
            t4 = t3 + 1;
            if (t4 >= t2)
            break;
            _this._bufferIndex = t4;
            if (!(t3 < t2))
            return A.ioore(t1, t3);
            t1[t3] = codeUnit >>> 6 | 192;
            _this._bufferIndex = t4 + 1;
            t1[t4] = codeUnit & 63 | 128;
        } else {
            t3 = _this._bufferIndex;
            if (t3 + 2 >= t2)
            break;
            t4 = _this._bufferIndex = t3 + 1;
            if (!(t3 < t2))
            return A.ioore(t1, t3);
            t1[t3] = codeUnit >>> 12 | 224;
            t3 = _this._bufferIndex = t4 + 1;
            if (!(t4 < t2))
            return A.ioore(t1, t4);
            t1[t4] = codeUnit >>> 6 & 63 | 128;
            _this._bufferIndex = t3 + 1;
            if (!(t3 < t2))
            return A.ioore(t1, t3);
            t1[t3] = codeUnit & 63 | 128;
        }
        }
    }
    return stringIndex;
    }
};
A.Utf8Decoder.prototype = {
    convert$1(codeUnits) {
    var t1, result;
    type$.List_int._as(codeUnits);
    t1 = this._allowMalformed;
    result = A.Utf8Decoder__convertIntercepted(t1, codeUnits, 0, null);
    if (result != null)
        return result;
    return new A._Utf8Decoder(t1).convertGeneral$4(codeUnits, 0, null, true);
    }
};
A._Utf8Decoder.prototype = {
    convertGeneral$4(codeUnits, start, maybeEnd, single) {
    var end, bytes, result, t1, message, _this = this;
    type$.List_int._as(codeUnits);
    end = A.RangeError_checkValidRange(start, maybeEnd, codeUnits.length);
    if (start === end)
        return "";
    bytes = A._Utf8Decoder__makeUint8List(codeUnits, start, end);
    result = _this._convertRecursive$4(bytes, 0, end - start, true);
    t1 = _this._convert$_state;
    if ((t1 & 1) !== 0) {
        message = A._Utf8Decoder_errorDescription(t1);
        _this._convert$_state = 0;
        throw A.wrapException(A.FormatException$(message, codeUnits, start + _this._charOrIndex));
    }
    return result;
    },
    _convertRecursive$4(bytes, start, end, single) {
    var mid, s1, _this = this;
    if (end - start > 1000) {
        mid = B.JSInt_methods._tdivFast$1(start + end, 2);
        s1 = _this._convertRecursive$4(bytes, start, mid, false);
        if ((_this._convert$_state & 1) !== 0)
        return s1;
        return s1 + _this._convertRecursive$4(bytes, mid, end, single);
    }
    return _this.decodeGeneral$4(bytes, start, end, single);
    },
    decodeGeneral$4(bytes, start, end, single) {
    var byte, t2, type, t3, i0, markEnd, i1, m, _this = this, _65533 = 65533,
        state = _this._convert$_state,
        char = _this._charOrIndex,
        buffer = new A.StringBuffer(""),
        i = start + 1,
        t1 = bytes.length;
    if (!(start >= 0 && start < t1))
        return A.ioore(bytes, start);
    byte = bytes[start];
    $label0$0:
        for (t2 = _this.allowMalformed; true;) {
        for (; true; i = i0) {
            type = B.JSString_methods._codeUnitAt$1("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHIHHHJEEBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBKCCCCCCCCCCCCDCLONNNMEEEEEEEEEEE", byte) & 31;
            char = state <= 32 ? byte & 61694 >>> type : (byte & 63 | char << 6) >>> 0;
            state = B.JSString_methods._codeUnitAt$1(" \x000:XECCCCCN:lDb \x000:XECCCCCNvlDb \x000:XECCCCCN:lDb AAAAA\x00\x00\x00\x00\x00AAAAA00000AAAAA:::::AAAAAGG000AAAAA00KKKAAAAAG::::AAAAA:IIIIAAAAA000\x800AAAAA\x00\x00\x00\x00 AAAAA", state + type);
            if (state === 0) {
            buffer._contents += A.Primitives_stringFromCharCode(char);
            if (i === end)
                break $label0$0;
            break;
            } else if ((state & 1) !== 0) {
            if (t2)
                switch (state) {
                case 69:
                case 67:
                    buffer._contents += A.Primitives_stringFromCharCode(_65533);
                    break;
                case 65:
                    buffer._contents += A.Primitives_stringFromCharCode(_65533);
                    --i;
                    break;
                default:
                    t3 = buffer._contents += A.Primitives_stringFromCharCode(_65533);
                    buffer._contents = t3 + A.Primitives_stringFromCharCode(_65533);
                    break;
                }
            else {
                _this._convert$_state = state;
                _this._charOrIndex = i - 1;
                return "";
            }
            state = 0;
            }
            if (i === end)
            break $label0$0;
            i0 = i + 1;
            if (!(i >= 0 && i < t1))
            return A.ioore(bytes, i);
            byte = bytes[i];
        }
        i0 = i + 1;
        if (!(i >= 0 && i < t1))
            return A.ioore(bytes, i);
        byte = bytes[i];
        if (byte < 128) {
            while (true) {
            if (!(i0 < end)) {
                markEnd = end;
                break;
            }
            i1 = i0 + 1;
            if (!(i0 >= 0 && i0 < t1))
                return A.ioore(bytes, i0);
            byte = bytes[i0];
            if (byte >= 128) {
                markEnd = i1 - 1;
                i0 = i1;
                break;
            }
            i0 = i1;
            }
            if (markEnd - i < 20)
            for (m = i; m < markEnd; ++m) {
                if (!(m < t1))
                return A.ioore(bytes, m);
                buffer._contents += A.Primitives_stringFromCharCode(bytes[m]);
            }
            else
            buffer._contents += A.String_String$fromCharCodes(bytes, i, markEnd);
            if (markEnd === end)
            break $label0$0;
            i = i0;
        } else
            i = i0;
        }
    if (single && state > 32)
        if (t2)
        buffer._contents += A.Primitives_stringFromCharCode(_65533);
        else {
        _this._convert$_state = 77;
        _this._charOrIndex = end;
        return "";
        }
    _this._convert$_state = state;
    _this._charOrIndex = char;
    t1 = buffer._contents;
    return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
};
A.DateTime.prototype = {
    $eq(_, other) {
    if (other == null)
        return false;
    return other instanceof A.DateTime && this._value === other._value && true;
    },
    get$hashCode(_) {
    var t1 = this._value;
    return (t1 ^ B.JSInt_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
    },
    toString$0(_) {
    var _this = this,
        y = A.DateTime__fourDigits(A.Primitives_getYear(_this)),
        m = A.DateTime__twoDigits(A.Primitives_getMonth(_this)),
        d = A.DateTime__twoDigits(A.Primitives_getDay(_this)),
        h = A.DateTime__twoDigits(A.Primitives_getHours(_this)),
        min = A.DateTime__twoDigits(A.Primitives_getMinutes(_this)),
        sec = A.DateTime__twoDigits(A.Primitives_getSeconds(_this)),
        ms = A.DateTime__threeDigits(A.Primitives_getMilliseconds(_this));
    return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
    }
};
A._Enum.prototype = {
    toString$0(_) {
    return this._enumToString$0();
    }
};
A.Error.prototype = {
    get$stackTrace() {
    return A.getTraceFromException(this.$thrownJsError);
    }
};
A.AssertionError.prototype = {
    toString$0(_) {
    var t1 = this.message;
    if (t1 != null)
        return "Assertion failed: " + A.Error_safeToString(t1);
    return "Assertion failed";
    }
};
A.TypeError.prototype = {};
A.NullThrownError.prototype = {
    toString$0(_) {
    return "Throw of null.";
    },
    $isTypeError: 1
};
A.ArgumentError.prototype = {
    get$_errorName() {
    return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation() {
    return "";
    },
    toString$0(_) {
    var _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + A.S(message),
        prefix = _this.get$_errorName() + nameString + messageString;
    if (!_this._hasValue)
        return prefix;
    return prefix + _this.get$_errorExplanation() + ": " + A.Error_safeToString(_this.get$invalidValue());
    },
    get$invalidValue() {
    return this.invalidValue;
    }
};
A.RangeError.prototype = {
    get$invalidValue() {
    return A._asNumQ(this.invalidValue);
    },
    get$_errorName() {
    return "RangeError";
    },
    get$_errorExplanation() {
    var explanation,
        start = this.start,
        end = this.end;
    if (start == null)
        explanation = end != null ? ": Not less than or equal to " + A.S(end) : "";
    else if (end == null)
        explanation = ": Not greater than or equal to " + A.S(start);
    else if (end > start)
        explanation = ": Not in inclusive range " + A.S(start) + ".." + A.S(end);
    else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + A.S(start);
    return explanation;
    }
};
A.IndexError.prototype = {
    get$invalidValue() {
    return A._asInt(this.invalidValue);
    },
    get$_errorName() {
    return "RangeError";
    },
    get$_errorExplanation() {
    if (A._asInt(this.invalidValue) < 0)
        return ": index must not be negative";
    var t1 = this.length;
    if (t1 === 0)
        return ": no indices are valid";
    return ": index should be less than " + t1;
    },
    get$length(receiver) {
    return this.length;
    }
};
A.UnsupportedError.prototype = {
    toString$0(_) {
    return "Unsupported operation: " + this.message;
    }
};
A.UnimplementedError.prototype = {
    toString$0(_) {
    return "UnimplementedError: " + this.message;
    }
};
A.StateError.prototype = {
    toString$0(_) {
    return "Bad state: " + this.message;
    }
};
A.ConcurrentModificationError.prototype = {
    toString$0(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
        return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + A.Error_safeToString(t1) + ".";
    }
};
A.OutOfMemoryError.prototype = {
    toString$0(_) {
    return "Out of Memory";
    },
    get$stackTrace() {
    return null;
    },
    $isError: 1
};
A.StackOverflowError.prototype = {
    toString$0(_) {
    return "Stack Overflow";
    },
    get$stackTrace() {
    return null;
    },
    $isError: 1
};
A.CyclicInitializationError.prototype = {
    toString$0(_) {
    return "Reading static variable '" + this.variableName + "' during its initialization";
    }
};
A._Exception.prototype = {
    toString$0(_) {
    return "Exception: " + this.message;
    }
};
A.FormatException.prototype = {
    toString$0(_) {
    var message = this.message,
        report = "" !== message ? "FormatException: " + message : "FormatException",
        offset = this.offset;
    return offset != null ? report + (" (at offset " + A.S(offset) + ")") : report;
    }
};
A.Iterable.prototype = {
    toList$1$growable(_, growable) {
    return A.List_List$of(this, growable, A._instanceType(this)._eval$1("Iterable.E"));
    },
    get$length(_) {
    var count,
        it = this.get$iterator(this);
    for (count = 0; it.moveNext$0();)
        ++count;
    return count;
    },
    skip$1(_, count) {
    return A.SkipIterable_SkipIterable(this, count, A._instanceType(this)._eval$1("Iterable.E"));
    },
    elementAt$1(_, index) {
    var t1, elementIndex, element;
    A.RangeError_checkNotNegative(index, "index");
    for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
        return element;
        ++elementIndex;
    }
    throw A.wrapException(A.IndexError$withLength(index, elementIndex, this, "index"));
    },
    toString$0(_) {
    return A.IterableBase_iterableToShortString(this, "(", ")");
    }
};
A.Iterator.prototype = {};
A.Null.prototype = {
    get$hashCode(_) {
    return A.Object.prototype.get$hashCode.call(this, this);
    },
    toString$0(_) {
    return "null";
    }
};
A.Object.prototype = {$isObject: 1,
    $eq(_, other) {
    return this === other;
    },
    get$hashCode(_) {
    return A.Primitives_objectHashCode(this);
    },
    toString$0(_) {
    return "Instance of '" + A.Primitives_objectTypeName(this) + "'";
    },
    toString() {
    return this.toString$0(this);
    }
};
A._StringStackTrace.prototype = {
    toString$0(_) {
    return "";
    },
    $isStackTrace: 1
};
A.Stopwatch.prototype = {
    get$elapsedMicroseconds() {
    var ticks,
        t1 = this._stop;
    if (t1 == null)
        t1 = $.Primitives_timerTicks.call$0();
    ticks = t1 - this._start;
    if ($.$get$Stopwatch__frequency() === 1000000)
        return ticks;
    return ticks * 1000;
    }
};
A.StringBuffer.prototype = {
    get$length(_) {
    return this._contents.length;
    },
    toString$0(_) {
    var t1 = this._contents;
    return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
};
A.DomException.prototype = {
    toString$0(receiver) {
    return String(receiver);
    }
};
A.OSError.prototype = {
    toString$0(_) {
    var t1 = "" + "OS Error",
        t2 = this.message;
    if (t2.length !== 0) {
        t1 = t1 + ": " + t2;
        t2 = this.errorCode;
        if (t2 !== -1)
        t1 = t1 + ", errno = " + B.JSInt_methods.toString$0(t2);
    } else {
        t2 = this.errorCode;
        if (t2 !== -1)
        t1 = t1 + ": errno = " + B.JSInt_methods.toString$0(t2);
    }
    return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
};
A._BufferAndStart.prototype = {};
A.FileMode.prototype = {};
A.FileSystemException.prototype = {
    _toStringHelper$1(className) {
    var _this = this,
        t1 = "" + className,
        t2 = _this.message;
    if (t2.length !== 0) {
        t1 = t1 + (": " + t2) + (", path = '" + _this.path + "'");
        t2 = _this.osError;
        if (t2 != null)
        t1 += " (" + t2.toString$0(0) + ")";
    } else {
        t2 = _this.osError;
        if (t2 != null)
        t1 = t1 + (": " + t2.toString$0(0)) + (", path = '" + _this.path + "'");
        else
        t1 += ": " + _this.path;
    }
    return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    toString$0(_) {
    return this._toStringHelper$1("FileSystemException");
    }
};
A.PathNotFoundException.prototype = {
    toString$0(_) {
    return this._toStringHelper$1("PathNotFoundException");
    }
};
A._File.prototype = {
    open$1$mode(mode) {
    if (mode !== B.FileMode_0 && mode !== B.FileMode_1 && mode !== B.FileMode_2 && mode !== B.FileMode_3 && mode !== B.FileMode_4)
        return A.Future_Future$error(new A.ArgumentError(false, null, null, "Invalid file mode for this operation"), type$.RandomAccessFile);
    return A._File__dispatchWithNamespace(5, [null, this._rawPath, mode._mode]).then$1$1(new A._File_open_closure(this), type$.RandomAccessFile);
    },
    length$0(_) {
    return A._File__dispatchWithNamespace(12, [null, this._rawPath]).then$1$1(new A._File_length_closure(this), type$.int);
    },
    writeAsBytes$1(bytes) {
    type$.List_int._as(bytes);
    return this.open$1$mode(B.FileMode_1).then$1$1(new A._File_writeAsBytes_closure(this, bytes, false), type$.File);
    },
    toString$0(_) {
    return "File: '" + this._path + "'";
    },
    $isFile: 1
};
A._File_open_closure.prototype = {
    call$1(response) {
    var t1 = this.$this._path;
    A._checkForErrorResponse(response, "Cannot open file", t1);
    return new A._RandomAccessFile(t1, A._RandomAccessFileOps__RandomAccessFileOps(response));
    },
    $signature: 10
};
A._File_length_closure.prototype = {
    call$1(response) {
    A._checkForErrorResponse(response, "Cannot retrieve length of file", this.$this._path);
    return response;
    },
    $signature: 5
};
A._File_writeAsBytes_closure.prototype = {
    call$1(file) {
    var t1, action, t2, result;
    type$.RandomAccessFile._as(file);
    t1 = this.bytes;
    t1 = file.writeFrom$3(t1, 0, t1.length).then$1$1(new A._File_writeAsBytes__closure(this.$this, this.flush, file), type$.File);
    action = type$.dynamic_Function._as(file.get$close());
    t2 = t1.$ti;
    result = new A._Future($.Zone__current, t2);
    t1._addListener$1(new A._FutureListener(result, 8, action, null, t2._eval$1("@<1>")._bind$1(t2._precomputed1)._eval$1("_FutureListener<1,2>")));
    return result;
    },
    $signature: 21
};
A._File_writeAsBytes__closure.prototype = {
    call$1(_) {
    type$.RandomAccessFile._as(_);
    return this.$this;
    },
    $signature: 22
};
A._RandomAccessFile.prototype = {
    close$0() {
    return this._dispatch$3$markClosed(7, [null], true).then$1$1(new A._RandomAccessFile_close_closure(this), type$.void);
    },
    writeFrom$3(buffer, start, end) {
    var e, t2, exception, request, t1 = {};
    t1.end = end;
    t2 = type$.List_int;
    t2._as(buffer);
    A.ArgumentError_checkNotNull(buffer, "buffer", t2);
    A.ArgumentError_checkNotNull(start, "start", type$.int);
    end = t1.end = A.RangeError_checkValidRange(start, end, buffer.length);
    if (end === start)
        return A.Future_Future$value(this, type$.RandomAccessFile);
    t1.result = null;
    try {
        t2 = t1.result = A._ensureFastAndSerializableByteData(buffer, start, end);
    } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.Future_Future$error(e, type$.RandomAccessFile);
        return t1;
    }
    request = A.List_List$filled(4, null, false, type$.dynamic);
    B.JSArray_methods.$indexSet(request, 0, null);
    B.JSArray_methods.$indexSet(request, 1, t2.buffer);
    t2 = t2.start;
    B.JSArray_methods.$indexSet(request, 2, t2);
    B.JSArray_methods.$indexSet(request, 3, end - (start - t2));
    return this._dispatch$2(22, request).then$1$1(new A._RandomAccessFile_writeFrom_closure(t1, this, start), type$.RandomAccessFile);
    },
    length$0(_) {
    return this._dispatch$2(11, [null]).then$1$1(new A._RandomAccessFile_length_closure(this), type$.int);
    },
    _pointer$0() {
    return this._ops.getPointer$0();
    },
    _dispatch$3$markClosed(request, data, markClosed) {
    var _this = this;
    if (_this.closed)
        return A.Future_Future$error(new A.FileSystemException("File closed", _this.path, null), type$.nullable_Object);
    if (_this._asyncDispatched)
        return A.Future_Future$error(new A.FileSystemException("An async operation is currently pending", _this.path, null), type$.nullable_Object);
    if (markClosed)
        _this.closed = true;
    _this._asyncDispatched = true;
    B.JSArray_methods.$indexSet(data, 0, _this._pointer$0());
    },
    _dispatch$2(request, data) {
    return this._dispatch$3$markClosed(request, data, false);
    },
    $isRandomAccessFile: 1
};
A._RandomAccessFile_close_closure.prototype = {
    call$1(result) {
    var t2,
        t1 = J.getInterceptor$(result);
    if (t1.$eq(result, -1))
        throw A.wrapException(A.FileSystemException$("Cannot close file", this.$this.path, null));
    t2 = this.$this;
    t1 = t2.closed || t1.$eq(result, 0);
    t2.closed = t1;
    if (t1) {
        t1 = t2.___RandomAccessFile__resourceInfo_A;
        t1 === $ && A.throwLateFieldNI("_resourceInfo");
        $._FileResourceInfo_openFiles.remove$1(0, t1.id);
    }
    },
    $signature: 24
};
A._RandomAccessFile_writeFrom_closure.prototype = {
    call$1(response) {
    var t2, t3,
        t1 = this.$this;
    A._checkForErrorResponse(response, "writeFrom failed", t1.path);
    t2 = t1.___RandomAccessFile__resourceInfo_A;
    t2 === $ && A.throwLateFieldNI("_resourceInfo");
    t3 = this._box_0;
    t2.addWrite$1(t3.end - (this.start - t3.result.start));
    return t1;
    },
    $signature: 10
};
A._RandomAccessFile_length_closure.prototype = {
    call$1(response) {
    A._checkForErrorResponse(response, "length failed", this.$this.path);
    return A._asInt(response);
    },
    $signature: 5
};
A.FileSystemEntity.prototype = {};
A.ArchiveException.prototype = {};
A.InputStreamBase.prototype = {};
A.InputStream.prototype = {
    get$length(_) {
    var t1 = this.__InputStream__length_A;
    t1 === $ && A.throwLateFieldNI("_length");
    return t1 - (this.offset - this.start);
    },
    get$isEOS() {
    var t1 = this.offset,
        t2 = this.__InputStream__length_A;
    t2 === $ && A.throwLateFieldNI("_length");
    return t1 >= this.start + t2;
    },
    readByte$0() {
    var t1 = this.buffer,
        t2 = this.offset++;
    if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
    return t1[t2];
    },
    readBytes$1(count) {
    var t2, $length, bytes, _this = this,
        t1 = _this.start,
        position = _this.offset - t1 + t1;
    if (count < 0) {
        t2 = _this.__InputStream__length_A;
        t2 === $ && A.throwLateFieldNI("_length");
        $length = t2 - (position - t1);
    } else
        $length = count;
    bytes = A.InputStream$(_this.buffer, _this.byteOrder, $length, position);
    _this.offset = _this.offset + bytes.get$length(bytes);
    return bytes;
    },
    readUint32$0() {
    var b1, b2, b3, b4, _this = this,
        t1 = _this.buffer,
        t2 = _this.offset,
        t3 = _this.offset = t2 + 1,
        t4 = t1.length;
    if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
    t2 = t1[t2];
    if (typeof t2 !== "number")
        return t2.$and();
    b1 = t2 & 255;
    t2 = _this.offset = t3 + 1;
    if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
    t3 = t1[t3];
    if (typeof t3 !== "number")
        return t3.$and();
    b2 = t3 & 255;
    t3 = _this.offset = t2 + 1;
    if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
    t2 = t1[t2];
    if (typeof t2 !== "number")
        return t2.$and();
    b3 = t2 & 255;
    _this.offset = t3 + 1;
    if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
    t3 = t1[t3];
    if (typeof t3 !== "number")
        return t3.$and();
    b4 = t3 & 255;
    if (_this.byteOrder === 1)
        return (b1 << 24 | b2 << 16 | b3 << 8 | b4) >>> 0;
    return (b4 << 24 | b3 << 16 | b2 << 8 | b1) >>> 0;
    },
    toUint8List$0() {
    var t2, t3, end, end0, _this = this,
        len = _this.get$length(_this),
        t1 = _this.buffer;
    if (type$.Uint8List._is(t1)) {
        t2 = _this.offset;
        t3 = t1.length;
        if (t2 + len > t3)
        len = t3 - t2;
        return A.NativeUint8List_NativeUint8List$view(t1.buffer, t1.byteOffset + t2, len);
    }
    t2 = _this.offset;
    end = t2 + len;
    end0 = t1.length;
    return new Uint8Array(A._ensureNativeList(J.sublist$2$ax(t1, t2, end > end0 ? end0 : end)));
    }
};
A.OutputStreamBase.prototype = {};
A.OutputStream.prototype = {
    writeByte$1(value) {
    var t1, t2, _this = this;
    if (_this.length === _this._output_stream$_buffer.length)
        _this._output_stream$_expandBuffer$0();
    t1 = _this._output_stream$_buffer;
    t2 = _this.length++;
    if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
    t1[t2] = value & 255;
    },
    writeBytes$2(bytes, len) {
    var t1, t2, t3, t4, _this = this;
    type$.List_int._as(bytes);
    if (len == null)
        len = bytes.length;
    for (; t1 = _this.length, t2 = t1 + len, t3 = _this._output_stream$_buffer, t4 = t3.length, t2 > t4;)
        _this._output_stream$_expandBuffer$1(t2 - t4);
    B.NativeUint8List_methods.setRange$3(t3, t1, t2, bytes);
    _this.length += len;
    },
    writeBytes$1(bytes) {
    return this.writeBytes$2(bytes, null);
    },
    writeInputStream$1(stream) {
    var t2, t3, t4, t5, _this = this,
        t1 = stream.start;
    while (true) {
        t2 = _this.length;
        t3 = stream.__InputStream__length_A;
        t3 === $ && A.throwLateFieldNI("_length");
        t3 = t2 + (t3 - (stream.offset - t1));
        t4 = _this._output_stream$_buffer;
        t5 = t4.length;
        if (!(t3 > t5))
        break;
        _this._output_stream$_expandBuffer$1(t3 - t5);
    }
    B.NativeUint8List_methods.setRange$4(t4, t2, t2 + stream.get$length(stream), stream.buffer, stream.offset);
    _this.length = _this.length + stream.get$length(stream);
    },
    writeUint32$1(value) {
    var _this = this;
    if (_this.byteOrder === 1) {
        _this.writeByte$1(value >>> 24 & 255);
        _this.writeByte$1(value >>> 16 & 255);
        _this.writeByte$1(value >>> 8 & 255);
        _this.writeByte$1(value & 255);
        return;
    }
    _this.writeByte$1(value & 255);
    _this.writeByte$1(value >>> 8 & 255);
    _this.writeByte$1(value >>> 16 & 255);
    _this.writeByte$1(value >>> 24 & 255);
    },
    subset$2(start, end) {
    var _this = this;
    if (start < 0)
        start = _this.length + start;
    if (end == null)
        end = _this.length;
    else if (end < 0)
        end = _this.length + end;
    return A.NativeUint8List_NativeUint8List$view(_this._output_stream$_buffer.buffer, start, end - start);
    },
    subset$1(start) {
    return this.subset$2(start, null);
    },
    _output_stream$_expandBuffer$1(required) {
    var blockSize = required != null ? required > 32768 ? required : 32768 : 32768,
        t1 = this._output_stream$_buffer,
        t2 = t1.length,
        newBuffer = new Uint8Array((t2 + blockSize) * 2);
    B.NativeUint8List_methods.setRange$3(newBuffer, 0, t2, t1);
    this._output_stream$_buffer = newBuffer;
    },
    _output_stream$_expandBuffer$0() {
    return this._output_stream$_expandBuffer$1(null);
    },
    get$length(receiver) {
    return this.length;
    }
};
A._ZLibDecoder.prototype = {
    decodeBuffer$2$verify(input, verify) {
    var t1, t2, t3, buffer,
        cmf = input.readByte$0(),
        flg = input.readByte$0(),
        method = cmf & 8;
    B.JSInt_methods._shrOtherPositive$1(cmf, 3);
    if (method !== 8)
        throw A.wrapException(A.ArchiveException$("Only DEFLATE compression supported: " + method));
    if (B.JSInt_methods.$mod((cmf << 8 >>> 0) + flg, 31) !== 0)
        throw A.wrapException(A.ArchiveException$("Invalid FCHECK"));
    if ((flg >>> 5 & 1) !== 0) {
        input.readUint32$0();
        throw A.wrapException(A.ArchiveException$("FDICT Encoding not currently supported"));
    }
    t1 = A.HuffmanTable$(B.List_2Bc);
    t2 = A.HuffmanTable$(B.List_X3d);
    t3 = A.OutputStream$(0, null);
    t2 = new A.Inflate(input, t3, t1, t2);
    t2.inputSet = true;
    t2._inflate$0();
    buffer = type$.List_int._as(A.NativeUint8List_NativeUint8List$view(t3._output_stream$_buffer.buffer, 0, t3.length));
    input.readUint32$0();
    return buffer;
    }
};
A.Deflate.prototype = {
    _deflate$1(flush) {
    var t1, bstate, t2, i, _this = this;
    if (flush > 4 || false)
        throw A.wrapException(A.ArchiveException$("Invalid Deflate Parameter"));
    t1 = _this.__Deflate__pending_A;
    t1 === $ && A.throwLateFieldNI("_pending");
    if (t1 !== 0)
        _this._flushPending$0();
    if (_this._deflate$_input.get$isEOS()) {
        t1 = _this.__Deflate__lookAhead_A;
        t1 === $ && A.throwLateFieldNI("_lookAhead");
        if (t1 === 0)
        t1 = flush !== 0 && _this._status !== 666;
        else
        t1 = true;
    } else
        t1 = true;
    if (t1) {
        switch ($.Deflate____config._readField$0().$function) {
        case 0:
            bstate = _this._deflateStored$1(flush);
            break;
        case 1:
            bstate = _this._deflateFast$1(flush);
            break;
        case 2:
            bstate = _this._deflateSlow$1(flush);
            break;
        default:
            bstate = -1;
            break;
        }
        t1 = bstate === 2;
        if (t1 || bstate === 3)
        _this._status = 666;
        if (bstate === 0 || t1)
        return 0;
        if (bstate === 1) {
        if (flush === 1) {
            _this._sendBits$2(2, 3);
            _this._sendCode$2(256, B.List_Xg4);
            _this.biFlush$0();
            t1 = _this.__Deflate__lastEOBLen_A;
            t1 === $ && A.throwLateFieldNI("_lastEOBLen");
            t2 = _this.__Deflate__numValidBits_A;
            t2 === $ && A.throwLateFieldNI("_numValidBits");
            if (1 + t1 + 10 - t2 < 9) {
            _this._sendBits$2(2, 3);
            _this._sendCode$2(256, B.List_Xg4);
            _this.biFlush$0();
            }
            _this.__Deflate__lastEOBLen_A = 7;
        } else {
            _this._trStoredBlock$3(0, 0, false);
            if (flush === 3) {
            t1 = _this.__Deflate__hashSize_A;
            t1 === $ && A.throwLateFieldNI("_hashSize");
            t2 = _this.__Deflate__head_A;
            i = 0;
            for (; i < t1; ++i) {
                t2 === $ && A.throwLateFieldNI("_head");
                if (!(i < t2.length))
                return A.ioore(t2, i);
                t2[i] = 0;
            }
            }
        }
        _this._flushPending$0();
        }
    }
    if (flush !== 4)
        return 0;
    return 1;
    },
    _lmInit$0() {
    var t2, t3, i, _this = this,
        t1 = _this.__Deflate__windowSize_A;
    t1 === $ && A.throwLateFieldNI("_windowSize");
    _this.__Deflate__actualWindowSize_A = 2 * t1;
    t1 = _this.__Deflate__head_A;
    t1 === $ && A.throwLateFieldNI("_head");
    t2 = _this.__Deflate__hashSize_A;
    t2 === $ && A.throwLateFieldNI("_hashSize");
    --t2;
    t3 = t1.length;
    if (!(t2 >= 0 && t2 < t3))
        return A.ioore(t1, t2);
    t1[t2] = 0;
    for (i = 0; i < t2; ++i) {
        if (!(i < t3))
        return A.ioore(t1, i);
        t1[i] = 0;
    }
    _this.__Deflate__lookAhead_A = _this.__Deflate__blockStart_A = _this.__Deflate__strStart_A = 0;
    _this.__Deflate__matchLength_A = _this.__Deflate__prevLength_A = 2;
    _this.__Deflate__insertHash_A = _this.__Deflate__matchAvailable_A = 0;
    },
    _initBlock$0() {
    var t1, i, t2, t3, _this = this,
        _s18_ = "_dynamicLengthTree";
    for (t1 = _this.__Deflate__dynamicLengthTree_A, i = 0; i < 286; ++i) {
        t1 === $ && A.throwLateFieldNI(_s18_);
        t2 = i * 2;
        if (!(t2 < 1146))
        return A.ioore(t1, t2);
        t1[t2] = 0;
    }
    for (t2 = _this.__Deflate__dynamicDistTree_A, i = 0; i < 30; ++i) {
        t2 === $ && A.throwLateFieldNI("_dynamicDistTree");
        t3 = i * 2;
        if (!(t3 < 122))
        return A.ioore(t2, t3);
        t2[t3] = 0;
    }
    for (t2 = _this.__Deflate__bitLengthTree_A, i = 0; i < 19; ++i) {
        t2 === $ && A.throwLateFieldNI("_bitLengthTree");
        t3 = i * 2;
        if (!(t3 < 78))
        return A.ioore(t2, t3);
        t2[t3] = 0;
    }
    t1 === $ && A.throwLateFieldNI(_s18_);
    t1[512] = 1;
    _this.__Deflate__lastLit_A = _this.__Deflate__matches_A = _this.__Deflate__optimalLen_A = _this.__Deflate__staticLen_A = 0;
    },
    _pqdownheap$2(tree, k) {
    var v, j, t2, t3, j0,
        t1 = this._heap;
    if (!(k >= 0 && k < 573))
        return A.ioore(t1, k);
    v = t1[k];
    j = k << 1 >>> 0;
    t2 = this._depth;
    while (true) {
        t3 = this.__Deflate__heapLen_A;
        t3 === $ && A.throwLateFieldNI("_heapLen");
        if (!(j <= t3))
        break;
        if (j < t3) {
        t3 = j + 1;
        if (!(t3 >= 0 && t3 < 573))
            return A.ioore(t1, t3);
        t3 = t1[t3];
        if (!(j >= 0 && j < 573))
            return A.ioore(t1, j);
        t3 = A.Deflate__smaller(tree, t3, t1[j], t2);
        } else
        t3 = false;
        if (t3)
        ++j;
        if (!(j >= 0 && j < 573))
        return A.ioore(t1, j);
        if (A.Deflate__smaller(tree, v, t1[j], t2))
        break;
        t3 = t1[j];
        if (!(k >= 0 && k < 573))
        return A.ioore(t1, k);
        t1[k] = t3;
        j0 = j << 1 >>> 0;
        k = j;
        j = j0;
    }
    if (!(k >= 0 && k < 573))
        return A.ioore(t1, k);
    t1[k] = v;
    },
    _scanTree$2(tree, maxCode) {
    var nextLen, maxCount, minCount, t2, n, prevLen, count, t3, nextLen0,
        _s14_ = "_bitLengthTree",
        t1 = tree.length;
    if (1 >= t1)
        return A.ioore(tree, 1);
    nextLen = tree[1];
    if (nextLen === 0) {
        maxCount = 138;
        minCount = 3;
    } else {
        maxCount = 7;
        minCount = 4;
    }
    t2 = (maxCode + 1) * 2 + 1;
    if (!(t2 >= 0 && t2 < t1))
        return A.ioore(tree, t2);
    tree[t2] = 65535;
    for (t2 = this.__Deflate__bitLengthTree_A, n = 0, prevLen = -1, count = 0; n <= maxCode; nextLen = nextLen0) {
        ++n;
        t3 = n * 2 + 1;
        if (!(t3 < t1))
        return A.ioore(tree, t3);
        nextLen0 = tree[t3];
        ++count;
        if (count < maxCount && nextLen === nextLen0)
        continue;
        else if (count < minCount) {
        t2 === $ && A.throwLateFieldNI(_s14_);
        t3 = nextLen * 2;
        if (!(t3 >= 0 && t3 < 78))
            return A.ioore(t2, t3);
        t2[t3] = t2[t3] + count;
        } else if (nextLen !== 0) {
        if (nextLen !== prevLen) {
            t2 === $ && A.throwLateFieldNI(_s14_);
            t3 = nextLen * 2;
            if (!(t3 >= 0 && t3 < 78))
            return A.ioore(t2, t3);
            t2[t3] = t2[t3] + 1;
        }
        t2 === $ && A.throwLateFieldNI(_s14_);
        t2[32] = t2[32] + 1;
        } else if (count <= 10) {
        t2 === $ && A.throwLateFieldNI(_s14_);
        t2[34] = t2[34] + 1;
        } else {
        t2 === $ && A.throwLateFieldNI(_s14_);
        t2[36] = t2[36] + 1;
        }
        if (nextLen0 === 0) {
        maxCount = 138;
        minCount = 3;
        } else if (nextLen === nextLen0) {
        maxCount = 6;
        minCount = 3;
        } else {
        maxCount = 7;
        minCount = 4;
        }
        prevLen = nextLen;
        count = 0;
    }
    },
    _buildBitLengthTree$0() {
    var t2, maxBLIndex, _this = this,
        t1 = _this.__Deflate__dynamicLengthTree_A;
    t1 === $ && A.throwLateFieldNI("_dynamicLengthTree");
    t2 = _this._lDesc.___HuffmanTree_maxCode_A;
    t2 === $ && A.throwLateFieldNI("maxCode");
    _this._scanTree$2(t1, t2);
    t2 = _this.__Deflate__dynamicDistTree_A;
    t2 === $ && A.throwLateFieldNI("_dynamicDistTree");
    t1 = _this._dDesc.___HuffmanTree_maxCode_A;
    t1 === $ && A.throwLateFieldNI("maxCode");
    _this._scanTree$2(t2, t1);
    _this._blDesc._buildTree$1(_this);
    for (t1 = _this.__Deflate__bitLengthTree_A, maxBLIndex = 18; maxBLIndex >= 3; --maxBLIndex) {
        t1 === $ && A.throwLateFieldNI("_bitLengthTree");
        t2 = B.List_uSC[maxBLIndex] * 2 + 1;
        if (!(t2 < 78))
        return A.ioore(t1, t2);
        if (t1[t2] !== 0)
        break;
    }
    t1 = _this.__Deflate__optimalLen_A;
    t1 === $ && A.throwLateFieldNI("_optimalLen");
    _this.__Deflate__optimalLen_A = t1 + (3 * (maxBLIndex + 1) + 5 + 5 + 4);
    return maxBLIndex;
    },
    _sendAllTrees$3(lcodes, dcodes, blcodes) {
    var t1, rank, t2, t3, _this = this;
    _this._sendBits$2(lcodes - 257, 5);
    t1 = dcodes - 1;
    _this._sendBits$2(t1, 5);
    _this._sendBits$2(blcodes - 4, 4);
    for (rank = 0; rank < blcodes; ++rank) {
        t2 = _this.__Deflate__bitLengthTree_A;
        t2 === $ && A.throwLateFieldNI("_bitLengthTree");
        if (!(rank < 19))
        return A.ioore(B.List_uSC, rank);
        t3 = B.List_uSC[rank] * 2 + 1;
        if (!(t3 < 78))
        return A.ioore(t2, t3);
        _this._sendBits$2(t2[t3], 3);
    }
    t2 = _this.__Deflate__dynamicLengthTree_A;
    t2 === $ && A.throwLateFieldNI("_dynamicLengthTree");
    _this._sendTree$2(t2, lcodes - 1);
    t2 = _this.__Deflate__dynamicDistTree_A;
    t2 === $ && A.throwLateFieldNI("_dynamicDistTree");
    _this._sendTree$2(t2, t1);
    },
    _sendTree$2(tree, maxCode) {
    var nextLen, maxCount, minCount, t2, n, prevLen, count, t3, nextLen0, t4, t5, t6, _this = this,
        _s14_ = "_bitLengthTree",
        t1 = tree.length;
    if (1 >= t1)
        return A.ioore(tree, 1);
    nextLen = tree[1];
    if (nextLen === 0) {
        maxCount = 138;
        minCount = 3;
    } else {
        maxCount = 7;
        minCount = 4;
    }
    for (t2 = type$.List_int, n = 0, prevLen = -1, count = 0; n <= maxCode; nextLen = nextLen0) {
        ++n;
        t3 = n * 2 + 1;
        if (!(t3 < t1))
        return A.ioore(tree, t3);
        nextLen0 = tree[t3];
        ++count;
        if (count < maxCount && nextLen === nextLen0)
        continue;
        else if (count < minCount) {
        t3 = nextLen * 2;
        t4 = t3 + 1;
        do {
            t5 = _this.__Deflate__bitLengthTree_A;
            t5 === $ && A.throwLateFieldNI(_s14_);
            t2._as(t5);
            if (!(t3 >= 0 && t3 < 78))
            return A.ioore(t5, t3);
            t6 = t5[t3];
            if (!(t4 >= 0 && t4 < 78))
            return A.ioore(t5, t4);
            _this._sendBits$2(t6 & 65535, t5[t4] & 65535);
        } while (--count, count !== 0);
        } else if (nextLen !== 0) {
        if (nextLen !== prevLen) {
            t3 = _this.__Deflate__bitLengthTree_A;
            t3 === $ && A.throwLateFieldNI(_s14_);
            t2._as(t3);
            t4 = nextLen * 2;
            if (!(t4 >= 0 && t4 < 78))
            return A.ioore(t3, t4);
            t5 = t3[t4];
            ++t4;
            if (!(t4 < 78))
            return A.ioore(t3, t4);
            _this._sendBits$2(t5 & 65535, t3[t4] & 65535);
            --count;
        }
        t3 = _this.__Deflate__bitLengthTree_A;
        t3 === $ && A.throwLateFieldNI(_s14_);
        t2._as(t3);
        _this._sendBits$2(t3[32] & 65535, t3[33] & 65535);
        _this._sendBits$2(count - 3, 2);
        } else {
        t3 = _this.__Deflate__bitLengthTree_A;
        if (count <= 10) {
            t3 === $ && A.throwLateFieldNI(_s14_);
            t2._as(t3);
            _this._sendBits$2(t3[34] & 65535, t3[35] & 65535);
            _this._sendBits$2(count - 3, 3);
        } else {
            t3 === $ && A.throwLateFieldNI(_s14_);
            t2._as(t3);
            _this._sendBits$2(t3[36] & 65535, t3[37] & 65535);
            _this._sendBits$2(count - 11, 7);
        }
        }
        if (nextLen0 === 0) {
        maxCount = 138;
        minCount = 3;
        } else if (nextLen === nextLen0) {
        maxCount = 6;
        minCount = 3;
        } else {
        maxCount = 7;
        minCount = 4;
        }
        prevLen = nextLen;
        count = 0;
    }
    },
    _putBytes$3(p, start, len) {
    var t1, t2, _this = this;
    if (len === 0)
        return;
    t1 = _this.__Deflate__pendingBuffer_A;
    t1 === $ && A.throwLateFieldNI("_pendingBuffer");
    t2 = _this.__Deflate__pending_A;
    t2 === $ && A.throwLateFieldNI("_pending");
    B.NativeUint8List_methods.setRange$4(t1, t2, t2 + len, p, start);
    _this.__Deflate__pending_A = _this.__Deflate__pending_A + len;
    },
    _putByte$1(c) {
    var t2,
        t1 = this.__Deflate__pendingBuffer_A;
    t1 === $ && A.throwLateFieldNI("_pendingBuffer");
    t2 = this.__Deflate__pending_A;
    t2 === $ && A.throwLateFieldNI("_pending");
    this.__Deflate__pending_A = t2 + 1;
    if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
    t1[t2] = c;
    },
    _sendCode$2(c, tree) {
    var t1, t2, t3;
    type$.List_int._as(tree);
    t1 = c * 2;
    t2 = tree.length;
    if (!(t1 >= 0 && t1 < t2))
        return A.ioore(tree, t1);
    t3 = tree[t1];
    ++t1;
    if (!(t1 < t2))
        return A.ioore(tree, t1);
    this._sendBits$2(t3 & 65535, tree[t1] & 65535);
    },
    _sendBits$2(valueRenamed, $length) {
    var t2, _this = this,
        _s10_ = "_bitBuffer",
        t1 = _this.__Deflate__numValidBits_A;
    t1 === $ && A.throwLateFieldNI("_numValidBits");
    t2 = _this.__Deflate__bitBuffer_A;
    if (t1 > 16 - $length) {
        t2 === $ && A.throwLateFieldNI(_s10_);
        t1 = _this.__Deflate__bitBuffer_A = (t2 | B.JSInt_methods.$shl(valueRenamed, t1) & 65535) >>> 0;
        _this._putByte$1(t1);
        _this._putByte$1(A._rshift(t1, 8));
        t1 = _this.__Deflate__numValidBits_A;
        _this.__Deflate__bitBuffer_A = A._rshift(valueRenamed, 16 - t1);
        _this.__Deflate__numValidBits_A = t1 + ($length - 16);
    } else {
        t2 === $ && A.throwLateFieldNI(_s10_);
        _this.__Deflate__bitBuffer_A = (t2 | B.JSInt_methods.$shl(valueRenamed, t1) & 65535) >>> 0;
        _this.__Deflate__numValidBits_A = t1 + $length;
    }
    },
    _trTally$2(dist, lc) {
    var t2, t3, t4, t5, outLength, dcode, _this = this,
        _s18_ = "_dynamicLengthTree",
        _s8_ = "_matches",
        _s16_ = "_dynamicDistTree",
        t1 = _this.__Deflate__pendingBuffer_A;
    t1 === $ && A.throwLateFieldNI("_pendingBuffer");
    t2 = _this.__Deflate__dbuf_A;
    t2 === $ && A.throwLateFieldNI("_dbuf");
    t3 = _this.__Deflate__lastLit_A;
    t3 === $ && A.throwLateFieldNI("_lastLit");
    t2 += t3 * 2;
    t4 = A._rshift(dist, 8);
    t5 = t1.length;
    if (!(t2 < t5))
        return A.ioore(t1, t2);
    t1[t2] = t4;
    ++t2;
    if (!(t2 < t5))
        return A.ioore(t1, t2);
    t1[t2] = dist;
    t2 = _this.__Deflate__lbuf_A;
    t2 === $ && A.throwLateFieldNI("_lbuf");
    t2 += t3;
    if (!(t2 < t5))
        return A.ioore(t1, t2);
    t1[t2] = lc;
    _this.__Deflate__lastLit_A = t3 + 1;
    if (dist === 0) {
        t1 = _this.__Deflate__dynamicLengthTree_A;
        t1 === $ && A.throwLateFieldNI(_s18_);
        t2 = lc * 2;
        if (!(t2 >= 0 && t2 < 1146))
        return A.ioore(t1, t2);
        t1[t2] = t1[t2] + 1;
    } else {
        t1 = _this.__Deflate__matches_A;
        t1 === $ && A.throwLateFieldNI(_s8_);
        _this.__Deflate__matches_A = t1 + 1;
        t1 = _this.__Deflate__dynamicLengthTree_A;
        t1 === $ && A.throwLateFieldNI(_s18_);
        if (!(lc >= 0 && lc < 256))
        return A.ioore(B.List_NUU, lc);
        t2 = (B.List_NUU[lc] + 256 + 1) * 2;
        if (!(t2 < 1146))
        return A.ioore(t1, t2);
        t1[t2] = t1[t2] + 1;
        t2 = _this.__Deflate__dynamicDistTree_A;
        t2 === $ && A.throwLateFieldNI(_s16_);
        t1 = A._HuffmanTree__dCode(dist - 1) * 2;
        if (!(t1 < 122))
        return A.ioore(t2, t1);
        t2[t1] = t2[t1] + 1;
    }
    t1 = _this.__Deflate__lastLit_A;
    if ((t1 & 8191) === 0) {
        t2 = _this.__Deflate__level_A;
        t2 === $ && A.throwLateFieldNI("_level");
        t2 = t2 > 2;
    } else
        t2 = false;
    if (t2) {
        outLength = t1 * 8;
        t2 = _this.__Deflate__strStart_A;
        t2 === $ && A.throwLateFieldNI("_strStart");
        t3 = _this.__Deflate__blockStart_A;
        t3 === $ && A.throwLateFieldNI("_blockStart");
        for (t4 = _this.__Deflate__dynamicDistTree_A, dcode = 0; dcode < 30; ++dcode) {
        t4 === $ && A.throwLateFieldNI(_s16_);
        t5 = dcode * 2;
        if (!(t5 < 122))
            return A.ioore(t4, t5);
        outLength += t4[t5] * (5 + B.List_X3d0[dcode]);
        }
        outLength = A._rshift(outLength, 3);
        t4 = _this.__Deflate__matches_A;
        t4 === $ && A.throwLateFieldNI(_s8_);
        if (t4 < t1 / 2 && outLength < (t2 - t3) / 2)
        return true;
    }
    t2 = _this.__Deflate__litBufferSize_A;
    t2 === $ && A.throwLateFieldNI("_litBufferSize");
    return t1 === t2 - 1;
    },
    _compressBlock$2(ltree, dtree) {
    var lx, t2, t3, t4, dist, lc, code, extra, _this = this,
        t1 = type$.List_int;
    t1._as(ltree);
    t1._as(dtree);
    t1 = _this.__Deflate__lastLit_A;
    t1 === $ && A.throwLateFieldNI("_lastLit");
    if (t1 !== 0) {
        lx = 0;
        do {
        t1 = _this.__Deflate__pendingBuffer_A;
        t1 === $ && A.throwLateFieldNI("_pendingBuffer");
        t2 = _this.__Deflate__dbuf_A;
        t2 === $ && A.throwLateFieldNI("_dbuf");
        t2 += lx * 2;
        t3 = t1.length;
        if (!(t2 < t3))
            return A.ioore(t1, t2);
        t4 = t1[t2];
        ++t2;
        if (!(t2 < t3))
            return A.ioore(t1, t2);
        dist = t4 << 8 & 65280 | t1[t2] & 255;
        t2 = _this.__Deflate__lbuf_A;
        t2 === $ && A.throwLateFieldNI("_lbuf");
        t2 += lx;
        if (!(t2 < t3))
            return A.ioore(t1, t2);
        lc = t1[t2] & 255;
        ++lx;
        if (dist === 0)
            _this._sendCode$2(lc, ltree);
        else {
            code = B.List_NUU[lc];
            _this._sendCode$2(code + 256 + 1, ltree);
            if (!(code < 29))
            return A.ioore(B.List_qQn0, code);
            extra = B.List_qQn0[code];
            if (extra !== 0)
            _this._sendBits$2(lc - B.List_qQn1[code], extra);
            --dist;
            code = A._HuffmanTree__dCode(dist);
            _this._sendCode$2(code, dtree);
            if (!(code < 30))
            return A.ioore(B.List_X3d0, code);
            extra = B.List_X3d0[code];
            if (extra !== 0)
            _this._sendBits$2(dist - B.List_X3d1[code], extra);
        }
        } while (lx < _this.__Deflate__lastLit_A);
    }
    _this._sendCode$2(256, ltree);
    if (513 >= ltree.length)
        return A.ioore(ltree, 513);
    _this.__Deflate__lastEOBLen_A = ltree[513];
    },
    setDataType$0() {
    var t1, n, binFreq, t2, asciiFreq,
        _s18_ = "_dynamicLengthTree";
    for (t1 = this.__Deflate__dynamicLengthTree_A, n = 0, binFreq = 0; n < 7;) {
        t1 === $ && A.throwLateFieldNI(_s18_);
        t2 = n * 2;
        if (!(t2 < 1146))
        return A.ioore(t1, t2);
        binFreq += t1[t2];
        ++n;
    }
    for (asciiFreq = 0; n < 128;) {
        t1 === $ && A.throwLateFieldNI(_s18_);
        t2 = n * 2;
        if (!(t2 < 1146))
        return A.ioore(t1, t2);
        asciiFreq += t1[t2];
        ++n;
    }
    for (; n < 256;) {
        t1 === $ && A.throwLateFieldNI(_s18_);
        t2 = n * 2;
        if (!(t2 < 1146))
        return A.ioore(t1, t2);
        binFreq += t1[t2];
        ++n;
    }
    this._dataType = binFreq > A._rshift(asciiFreq, 2) ? 0 : 1;
    },
    biFlush$0() {
    var _this = this,
        _s10_ = "_bitBuffer",
        t1 = _this.__Deflate__numValidBits_A;
    t1 === $ && A.throwLateFieldNI("_numValidBits");
    if (t1 === 16) {
        t1 = _this.__Deflate__bitBuffer_A;
        t1 === $ && A.throwLateFieldNI(_s10_);
        _this._putByte$1(t1);
        _this._putByte$1(A._rshift(t1, 8));
        _this.__Deflate__numValidBits_A = _this.__Deflate__bitBuffer_A = 0;
    } else if (t1 >= 8) {
        t1 = _this.__Deflate__bitBuffer_A;
        t1 === $ && A.throwLateFieldNI(_s10_);
        _this._putByte$1(t1);
        _this.__Deflate__bitBuffer_A = A._rshift(_this.__Deflate__bitBuffer_A, 8);
        _this.__Deflate__numValidBits_A = _this.__Deflate__numValidBits_A - 8;
    }
    },
    _biWindup$0() {
    var _this = this,
        _s10_ = "_bitBuffer",
        t1 = _this.__Deflate__numValidBits_A;
    t1 === $ && A.throwLateFieldNI("_numValidBits");
    if (t1 > 8) {
        t1 = _this.__Deflate__bitBuffer_A;
        t1 === $ && A.throwLateFieldNI(_s10_);
        _this._putByte$1(t1);
        _this._putByte$1(A._rshift(t1, 8));
    } else if (t1 > 0) {
        t1 = _this.__Deflate__bitBuffer_A;
        t1 === $ && A.throwLateFieldNI(_s10_);
        _this._putByte$1(t1);
    }
    _this.__Deflate__numValidBits_A = _this.__Deflate__bitBuffer_A = 0;
    },
    _flushBlockOnly$1(eof) {
    var t2, t3, maxBlIndex, optLenb, staticLenb, _this = this,
        t1 = _this.__Deflate__blockStart_A;
    t1 === $ && A.throwLateFieldNI("_blockStart");
    if (t1 >= 0)
        t2 = t1;
    else
        t2 = -1;
    t3 = _this.__Deflate__strStart_A;
    t3 === $ && A.throwLateFieldNI("_strStart");
    t1 = t3 - t1;
    t3 = _this.__Deflate__level_A;
    t3 === $ && A.throwLateFieldNI("_level");
    if (t3 > 0) {
        if (_this._dataType === 2)
        _this.setDataType$0();
        _this._lDesc._buildTree$1(_this);
        _this._dDesc._buildTree$1(_this);
        maxBlIndex = _this._buildBitLengthTree$0();
        t3 = _this.__Deflate__optimalLen_A;
        t3 === $ && A.throwLateFieldNI("_optimalLen");
        optLenb = A._rshift(t3 + 3 + 7, 3);
        t3 = _this.__Deflate__staticLen_A;
        t3 === $ && A.throwLateFieldNI("_staticLen");
        staticLenb = A._rshift(t3 + 3 + 7, 3);
        if (staticLenb <= optLenb)
        optLenb = staticLenb;
    } else {
        staticLenb = t1 + 5;
        optLenb = staticLenb;
        maxBlIndex = 0;
    }
    if (t1 + 4 <= optLenb && t2 !== -1)
        _this._trStoredBlock$3(t2, t1, eof);
    else if (staticLenb === optLenb) {
        _this._sendBits$2(2 + (eof ? 1 : 0), 3);
        _this._compressBlock$2(B.List_Xg4, B.List_iYO);
    } else {
        _this._sendBits$2(4 + (eof ? 1 : 0), 3);
        t1 = _this._lDesc.___HuffmanTree_maxCode_A;
        t1 === $ && A.throwLateFieldNI("maxCode");
        t2 = _this._dDesc.___HuffmanTree_maxCode_A;
        t2 === $ && A.throwLateFieldNI("maxCode");
        _this._sendAllTrees$3(t1 + 1, t2 + 1, maxBlIndex + 1);
        t2 = _this.__Deflate__dynamicLengthTree_A;
        t2 === $ && A.throwLateFieldNI("_dynamicLengthTree");
        t1 = _this.__Deflate__dynamicDistTree_A;
        t1 === $ && A.throwLateFieldNI("_dynamicDistTree");
        _this._compressBlock$2(t2, t1);
    }
    _this._initBlock$0();
    if (eof)
        _this._biWindup$0();
    _this.__Deflate__blockStart_A = _this.__Deflate__strStart_A;
    _this._flushPending$0();
    },
    _deflateStored$1(flush) {
    var maxBlockSize, t2, t3, maxStart, t4, _this = this,
        t1 = _this.__Deflate__pendingBufferSize_A;
    t1 === $ && A.throwLateFieldNI("_pendingBufferSize");
    maxBlockSize = t1 - 5;
    maxBlockSize = 65535 > maxBlockSize ? maxBlockSize : 65535;
    for (t1 = flush === 0; true;) {
        t2 = _this.__Deflate__lookAhead_A;
        t2 === $ && A.throwLateFieldNI("_lookAhead");
        if (t2 <= 1) {
        _this._fillWindow$0();
        t2 = _this.__Deflate__lookAhead_A;
        t3 = t2 === 0;
        if (t3 && t1)
            return 0;
        if (t3)
            break;
        }
        t3 = _this.__Deflate__strStart_A;
        t3 === $ && A.throwLateFieldNI("_strStart");
        t2 = _this.__Deflate__strStart_A = t3 + t2;
        _this.__Deflate__lookAhead_A = 0;
        t3 = _this.__Deflate__blockStart_A;
        t3 === $ && A.throwLateFieldNI("_blockStart");
        maxStart = t3 + maxBlockSize;
        if (t2 >= maxStart) {
        _this.__Deflate__lookAhead_A = t2 - maxStart;
        _this.__Deflate__strStart_A = maxStart;
        _this._flushBlockOnly$1(false);
        }
        t2 = _this.__Deflate__strStart_A;
        t3 = _this.__Deflate__blockStart_A;
        t4 = _this.__Deflate__windowSize_A;
        t4 === $ && A.throwLateFieldNI("_windowSize");
        if (t2 - t3 >= t4 - 262)
        _this._flushBlockOnly$1(false);
    }
    t1 = flush === 4;
    _this._flushBlockOnly$1(t1);
    return t1 ? 3 : 1;
    },
    _trStoredBlock$3(buf, storedLen, eof) {
    var t1, _this = this;
    _this._sendBits$2(eof ? 1 : 0, 3);
    _this._biWindup$0();
    _this.__Deflate__lastEOBLen_A = 8;
    _this._putByte$1(storedLen);
    _this._putByte$1(A._rshift(storedLen, 8));
    t1 = (~storedLen >>> 0) + 65536 & 65535;
    _this._putByte$1(t1);
    _this._putByte$1(A._rshift(t1, 8));
    t1 = _this.__Deflate__window_A;
    t1 === $ && A.throwLateFieldNI("_window");
    _this._putBytes$3(t1, buf, storedLen);
    },
    _fillWindow$0() {
    var t2, t3, t4, more, p, p0, n, m, t5, t6, t7, _this = this,
        _s11_ = "_windowSize",
        t1 = _this._deflate$_input;
    do {
        t2 = _this.__Deflate__actualWindowSize_A;
        t2 === $ && A.throwLateFieldNI("_actualWindowSize");
        t3 = _this.__Deflate__lookAhead_A;
        t3 === $ && A.throwLateFieldNI("_lookAhead");
        t4 = _this.__Deflate__strStart_A;
        t4 === $ && A.throwLateFieldNI("_strStart");
        more = t2 - t3 - t4;
        if (more === 0 && t4 === 0 && t3 === 0) {
        t2 = _this.__Deflate__windowSize_A;
        t2 === $ && A.throwLateFieldNI(_s11_);
        more = t2;
        } else {
        t2 = _this.__Deflate__windowSize_A;
        t2 === $ && A.throwLateFieldNI(_s11_);
        if (t4 >= t2 + t2 - 262) {
            t3 = _this.__Deflate__window_A;
            t3 === $ && A.throwLateFieldNI("_window");
            B.NativeUint8List_methods.setRange$4(t3, 0, t2, t3, t2);
            t2 = _this._matchStart;
            p = _this.__Deflate__windowSize_A;
            _this._matchStart = t2 - p;
            _this.__Deflate__strStart_A = _this.__Deflate__strStart_A - p;
            t2 = _this.__Deflate__blockStart_A;
            t2 === $ && A.throwLateFieldNI("_blockStart");
            _this.__Deflate__blockStart_A = t2 - p;
            t2 = _this.__Deflate__hashSize_A;
            t2 === $ && A.throwLateFieldNI("_hashSize");
            t3 = _this.__Deflate__head_A;
            t3 === $ && A.throwLateFieldNI("_head");
            t4 = t3.length;
            p0 = t2;
            n = p0;
            do {
            --p0;
            if (!(p0 >= 0 && p0 < t4))
                return A.ioore(t3, p0);
            m = t3[p0] & 65535;
            t3[p0] = m >= p ? m - p : 0;
            } while (--n, n !== 0);
            t2 = _this.__Deflate__prev_A;
            t2 === $ && A.throwLateFieldNI("_prev");
            t3 = t2.length;
            p0 = p;
            n = p0;
            do {
            --p0;
            if (!(p0 >= 0 && p0 < t3))
                return A.ioore(t2, p0);
            m = t2[p0] & 65535;
            t2[p0] = m >= p ? m - p : 0;
            } while (--n, n !== 0);
            more += p;
        }
        }
        if (t1.get$isEOS())
        return;
        t2 = _this.__Deflate__window_A;
        t2 === $ && A.throwLateFieldNI("_window");
        n = _this._readBuf$3(t2, _this.__Deflate__strStart_A + _this.__Deflate__lookAhead_A, more);
        t2 = _this.__Deflate__lookAhead_A = _this.__Deflate__lookAhead_A + n;
        if (t2 >= 3) {
        t3 = _this.__Deflate__window_A;
        t4 = _this.__Deflate__strStart_A;
        t5 = t3.length;
        if (t4 >>> 0 !== t4 || t4 >= t5)
            return A.ioore(t3, t4);
        t6 = t3[t4] & 255;
        _this.__Deflate__insertHash_A = t6;
        t7 = _this.__Deflate__hashShift_A;
        t7 === $ && A.throwLateFieldNI("_hashShift");
        t7 = B.JSInt_methods.$shl(t6, t7);
        ++t4;
        if (!(t4 < t5))
            return A.ioore(t3, t4);
        t4 = t3[t4];
        t3 = _this.__Deflate__hashMask_A;
        t3 === $ && A.throwLateFieldNI("_hashMask");
        _this.__Deflate__insertHash_A = ((t7 ^ t4 & 255) & t3) >>> 0;
        }
    } while (t2 < 262 && !t1.get$isEOS());
    },
    _deflateFast$1(flush) {
    var t1, hashHead, t2, t3, t4, t5, t6, t7, bflush, t8, _this = this,
        _s11_ = "_insertHash",
        _s10_ = "_hashShift",
        _s7_ = "_window",
        _s9_ = "_strStart",
        _s9_0 = "_hashMask",
        _s11_0 = "_windowMask";
    for (t1 = flush === 0, hashHead = 0; true;) {
        t2 = _this.__Deflate__lookAhead_A;
        t2 === $ && A.throwLateFieldNI("_lookAhead");
        if (t2 < 262) {
        _this._fillWindow$0();
        t2 = _this.__Deflate__lookAhead_A;
        if (t2 < 262 && t1)
            return 0;
        if (t2 === 0)
            break;
        }
        if (t2 >= 3) {
        t2 = _this.__Deflate__insertHash_A;
        t2 === $ && A.throwLateFieldNI(_s11_);
        t3 = _this.__Deflate__hashShift_A;
        t3 === $ && A.throwLateFieldNI(_s10_);
        t3 = B.JSInt_methods.$shl(t2, t3);
        t2 = _this.__Deflate__window_A;
        t2 === $ && A.throwLateFieldNI(_s7_);
        t4 = _this.__Deflate__strStart_A;
        t4 === $ && A.throwLateFieldNI(_s9_);
        t5 = t4 + 2;
        if (!(t5 >= 0 && t5 < t2.length))
            return A.ioore(t2, t5);
        t5 = t2[t5];
        t2 = _this.__Deflate__hashMask_A;
        t2 === $ && A.throwLateFieldNI(_s9_0);
        t2 = ((t3 ^ t5 & 255) & t2) >>> 0;
        _this.__Deflate__insertHash_A = t2;
        t5 = _this.__Deflate__head_A;
        t5 === $ && A.throwLateFieldNI("_head");
        if (!(t2 < t5.length))
            return A.ioore(t5, t2);
        t3 = t5[t2];
        hashHead = t3 & 65535;
        t6 = _this.__Deflate__prev_A;
        t6 === $ && A.throwLateFieldNI("_prev");
        t7 = _this.__Deflate__windowMask_A;
        t7 === $ && A.throwLateFieldNI(_s11_0);
        t7 = (t4 & t7) >>> 0;
        if (!(t7 >= 0 && t7 < t6.length))
            return A.ioore(t6, t7);
        t6[t7] = t3;
        t5[t2] = t4;
        }
        if (hashHead !== 0) {
        t2 = _this.__Deflate__strStart_A;
        t2 === $ && A.throwLateFieldNI(_s9_);
        t3 = _this.__Deflate__windowSize_A;
        t3 === $ && A.throwLateFieldNI("_windowSize");
        t3 = (t2 - hashHead & 65535) <= t3 - 262;
        t2 = t3;
        } else
        t2 = false;
        if (t2) {
        t2 = _this.__Deflate__strategy_A;
        t2 === $ && A.throwLateFieldNI("_strategy");
        if (t2 !== 2)
            _this.__Deflate__matchLength_A = _this._longestMatch$1(hashHead);
        }
        t2 = _this.__Deflate__matchLength_A;
        t2 === $ && A.throwLateFieldNI("_matchLength");
        t3 = _this.__Deflate__strStart_A;
        if (t2 >= 3) {
        t3 === $ && A.throwLateFieldNI(_s9_);
        bflush = _this._trTally$2(t3 - _this._matchStart, t2 - 3);
        t2 = _this.__Deflate__lookAhead_A;
        t3 = _this.__Deflate__matchLength_A;
        t2 -= t3;
        _this.__Deflate__lookAhead_A = t2;
        t4 = $.Deflate____config.__late_helper$_value;
        if (t4 == null ? $.Deflate____config == null : t4 === $.Deflate____config)
            A.throwExpression(A.LateError$fieldNI($.Deflate____config.__late_helper$_name));
        if (t3 <= t4.maxLazy && t2 >= 3) {
            t2 = _this.__Deflate__matchLength_A = t3 - 1;
            do {
            t3 = _this.__Deflate__strStart_A = _this.__Deflate__strStart_A + 1;
            t4 = _this.__Deflate__insertHash_A;
            t4 === $ && A.throwLateFieldNI(_s11_);
            t5 = _this.__Deflate__hashShift_A;
            t5 === $ && A.throwLateFieldNI(_s10_);
            t5 = B.JSInt_methods.$shl(t4, t5);
            t4 = _this.__Deflate__window_A;
            t4 === $ && A.throwLateFieldNI(_s7_);
            t6 = t3 + 2;
            if (!(t6 >= 0 && t6 < t4.length))
                return A.ioore(t4, t6);
            t6 = t4[t6];
            t4 = _this.__Deflate__hashMask_A;
            t4 === $ && A.throwLateFieldNI(_s9_0);
            t4 = ((t5 ^ t6 & 255) & t4) >>> 0;
            _this.__Deflate__insertHash_A = t4;
            t6 = _this.__Deflate__head_A;
            t6 === $ && A.throwLateFieldNI("_head");
            if (!(t4 < t6.length))
                return A.ioore(t6, t4);
            t5 = t6[t4];
            hashHead = t5 & 65535;
            t7 = _this.__Deflate__prev_A;
            t7 === $ && A.throwLateFieldNI("_prev");
            t8 = _this.__Deflate__windowMask_A;
            t8 === $ && A.throwLateFieldNI(_s11_0);
            t8 = (t3 & t8) >>> 0;
            if (!(t8 >= 0 && t8 < t7.length))
                return A.ioore(t7, t8);
            t7[t8] = t5;
            t6[t4] = t3;
            } while (t2 = _this.__Deflate__matchLength_A = t2 - 1, t2 !== 0);
            _this.__Deflate__strStart_A = t3 + 1;
        } else {
            t2 = _this.__Deflate__strStart_A = _this.__Deflate__strStart_A + t3;
            _this.__Deflate__matchLength_A = 0;
            t3 = _this.__Deflate__window_A;
            t3 === $ && A.throwLateFieldNI(_s7_);
            t4 = t3.length;
            if (!(t2 >= 0 && t2 < t4))
            return A.ioore(t3, t2);
            t5 = t3[t2] & 255;
            _this.__Deflate__insertHash_A = t5;
            t6 = _this.__Deflate__hashShift_A;
            t6 === $ && A.throwLateFieldNI(_s10_);
            t6 = B.JSInt_methods.$shl(t5, t6);
            ++t2;
            if (!(t2 < t4))
            return A.ioore(t3, t2);
            t2 = t3[t2];
            t3 = _this.__Deflate__hashMask_A;
            t3 === $ && A.throwLateFieldNI(_s9_0);
            _this.__Deflate__insertHash_A = ((t6 ^ t2 & 255) & t3) >>> 0;
        }
        } else {
        t2 = _this.__Deflate__window_A;
        t2 === $ && A.throwLateFieldNI(_s7_);
        t3 === $ && A.throwLateFieldNI(_s9_);
        if (!(t3 >= 0 && t3 < t2.length))
            return A.ioore(t2, t3);
        bflush = _this._trTally$2(0, t2[t3] & 255);
        _this.__Deflate__lookAhead_A = _this.__Deflate__lookAhead_A - 1;
        _this.__Deflate__strStart_A = _this.__Deflate__strStart_A + 1;
        }
        if (bflush)
        _this._flushBlockOnly$1(false);
    }
    t1 = flush === 4;
    _this._flushBlockOnly$1(t1);
    return t1 ? 3 : 1;
    },
    _deflateSlow$1(flush) {
    var t1, hashHead, t2, t3, t4, t5, t6, t7, maxInsert, bflush, t8, _this = this,
        _s11_ = "_insertHash",
        _s10_ = "_hashShift",
        _s7_ = "_window",
        _s9_ = "_strStart",
        _s9_0 = "_hashMask",
        _s11_0 = "_windowMask",
        _s15_ = "_matchAvailable";
    for (t1 = flush === 0, hashHead = 0; true;) {
        t2 = _this.__Deflate__lookAhead_A;
        t2 === $ && A.throwLateFieldNI("_lookAhead");
        if (t2 < 262) {
        _this._fillWindow$0();
        t2 = _this.__Deflate__lookAhead_A;
        if (t2 < 262 && t1)
            return 0;
        if (t2 === 0)
            break;
        }
        if (t2 >= 3) {
        t2 = _this.__Deflate__insertHash_A;
        t2 === $ && A.throwLateFieldNI(_s11_);
        t3 = _this.__Deflate__hashShift_A;
        t3 === $ && A.throwLateFieldNI(_s10_);
        t3 = B.JSInt_methods.$shl(t2, t3);
        t2 = _this.__Deflate__window_A;
        t2 === $ && A.throwLateFieldNI(_s7_);
        t4 = _this.__Deflate__strStart_A;
        t4 === $ && A.throwLateFieldNI(_s9_);
        t5 = t4 + 2;
        if (!(t5 >= 0 && t5 < t2.length))
            return A.ioore(t2, t5);
        t5 = t2[t5];
        t2 = _this.__Deflate__hashMask_A;
        t2 === $ && A.throwLateFieldNI(_s9_0);
        t2 = ((t3 ^ t5 & 255) & t2) >>> 0;
        _this.__Deflate__insertHash_A = t2;
        t5 = _this.__Deflate__head_A;
        t5 === $ && A.throwLateFieldNI("_head");
        if (!(t2 < t5.length))
            return A.ioore(t5, t2);
        t3 = t5[t2];
        hashHead = t3 & 65535;
        t6 = _this.__Deflate__prev_A;
        t6 === $ && A.throwLateFieldNI("_prev");
        t7 = _this.__Deflate__windowMask_A;
        t7 === $ && A.throwLateFieldNI(_s11_0);
        t7 = (t4 & t7) >>> 0;
        if (!(t7 >= 0 && t7 < t6.length))
            return A.ioore(t6, t7);
        t6[t7] = t3;
        t5[t2] = t4;
        }
        t2 = _this.__Deflate__matchLength_A;
        t2 === $ && A.throwLateFieldNI("_matchLength");
        _this.__Deflate__prevLength_A = t2;
        _this.__Deflate__prevMatch_A = _this._matchStart;
        _this.__Deflate__matchLength_A = 2;
        if (hashHead !== 0) {
        t3 = $.Deflate____config.__late_helper$_value;
        if (t3 == null ? $.Deflate____config == null : t3 === $.Deflate____config)
            A.throwExpression(A.LateError$fieldNI($.Deflate____config.__late_helper$_name));
        if (t2 < t3.maxLazy) {
            t2 = _this.__Deflate__strStart_A;
            t2 === $ && A.throwLateFieldNI(_s9_);
            t3 = _this.__Deflate__windowSize_A;
            t3 === $ && A.throwLateFieldNI("_windowSize");
            t3 = (t2 - hashHead & 65535) <= t3 - 262;
            t2 = t3;
        } else
            t2 = false;
        } else
        t2 = false;
        if (t2) {
        t2 = _this.__Deflate__strategy_A;
        t2 === $ && A.throwLateFieldNI("_strategy");
        if (t2 !== 2) {
            t2 = _this._longestMatch$1(hashHead);
            _this.__Deflate__matchLength_A = t2;
        } else
            t2 = 2;
        if (t2 <= 5)
            if (_this.__Deflate__strategy_A !== 1)
            if (t2 === 3) {
                t3 = _this.__Deflate__strStart_A;
                t3 === $ && A.throwLateFieldNI(_s9_);
                t3 = t3 - _this._matchStart > 4096;
            } else
                t3 = false;
            else
            t3 = true;
        else
            t3 = false;
        if (t3) {
            _this.__Deflate__matchLength_A = 2;
            t2 = 2;
        }
        } else
        t2 = 2;
        t3 = _this.__Deflate__prevLength_A;
        if (t3 >= 3 && t2 <= t3) {
        t2 = _this.__Deflate__strStart_A;
        t2 === $ && A.throwLateFieldNI(_s9_);
        maxInsert = t2 + _this.__Deflate__lookAhead_A - 3;
        bflush = _this._trTally$2(t2 - 1 - _this.__Deflate__prevMatch_A, t3 - 3);
        t3 = _this.__Deflate__lookAhead_A;
        t2 = _this.__Deflate__prevLength_A;
        _this.__Deflate__lookAhead_A = t3 - (t2 - 1);
        t2 = _this.__Deflate__prevLength_A = t2 - 2;
        do {
            t3 = _this.__Deflate__strStart_A = _this.__Deflate__strStart_A + 1;
            if (t3 <= maxInsert) {
            t4 = _this.__Deflate__insertHash_A;
            t4 === $ && A.throwLateFieldNI(_s11_);
            t5 = _this.__Deflate__hashShift_A;
            t5 === $ && A.throwLateFieldNI(_s10_);
            t5 = B.JSInt_methods.$shl(t4, t5);
            t4 = _this.__Deflate__window_A;
            t4 === $ && A.throwLateFieldNI(_s7_);
            t6 = t3 + 2;
            if (!(t6 >= 0 && t6 < t4.length))
                return A.ioore(t4, t6);
            t6 = t4[t6];
            t4 = _this.__Deflate__hashMask_A;
            t4 === $ && A.throwLateFieldNI(_s9_0);
            t4 = ((t5 ^ t6 & 255) & t4) >>> 0;
            _this.__Deflate__insertHash_A = t4;
            t6 = _this.__Deflate__head_A;
            t6 === $ && A.throwLateFieldNI("_head");
            if (!(t4 < t6.length))
                return A.ioore(t6, t4);
            t5 = t6[t4];
            hashHead = t5 & 65535;
            t7 = _this.__Deflate__prev_A;
            t7 === $ && A.throwLateFieldNI("_prev");
            t8 = _this.__Deflate__windowMask_A;
            t8 === $ && A.throwLateFieldNI(_s11_0);
            t8 = (t3 & t8) >>> 0;
            if (!(t8 >= 0 && t8 < t7.length))
                return A.ioore(t7, t8);
            t7[t8] = t5;
            t6[t4] = t3;
            }
        } while (t2 = _this.__Deflate__prevLength_A = t2 - 1, t2 !== 0);
        _this.__Deflate__matchAvailable_A = 0;
        _this.__Deflate__matchLength_A = 2;
        _this.__Deflate__strStart_A = t3 + 1;
        if (bflush)
            _this._flushBlockOnly$1(false);
        } else {
        t2 = _this.__Deflate__matchAvailable_A;
        t2 === $ && A.throwLateFieldNI(_s15_);
        if (t2 !== 0) {
            t2 = _this.__Deflate__window_A;
            t2 === $ && A.throwLateFieldNI(_s7_);
            t3 = _this.__Deflate__strStart_A;
            t3 === $ && A.throwLateFieldNI(_s9_);
            --t3;
            if (!(t3 >= 0 && t3 < t2.length))
            return A.ioore(t2, t3);
            if (_this._trTally$2(0, t2[t3] & 255))
            _this._flushBlockOnly$1(false);
            _this.__Deflate__strStart_A = _this.__Deflate__strStart_A + 1;
            _this.__Deflate__lookAhead_A = _this.__Deflate__lookAhead_A - 1;
        } else {
            _this.__Deflate__matchAvailable_A = 1;
            t2 = _this.__Deflate__strStart_A;
            t2 === $ && A.throwLateFieldNI(_s9_);
            _this.__Deflate__strStart_A = t2 + 1;
            _this.__Deflate__lookAhead_A = _this.__Deflate__lookAhead_A - 1;
        }
        }
    }
    t1 = _this.__Deflate__matchAvailable_A;
    t1 === $ && A.throwLateFieldNI(_s15_);
    if (t1 !== 0) {
        t1 = _this.__Deflate__window_A;
        t1 === $ && A.throwLateFieldNI(_s7_);
        t2 = _this.__Deflate__strStart_A;
        t2 === $ && A.throwLateFieldNI(_s9_);
        --t2;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        _this._trTally$2(0, t1[t2] & 255);
        _this.__Deflate__matchAvailable_A = 0;
    }
    t1 = flush === 4;
    _this._flushBlockOnly$1(t1);
    return t1 ? 3 : 1;
    },
    _longestMatch$1(curMatch) {
    var t2, t3, limit, niceMatch, strend, t4, t5, t6, t7, scanEnd1, scanEnd, scan, bestLen, scan0, match, len, _this = this,
        chainLength = $.Deflate____config._readField$0().maxChain,
        t1 = _this.__Deflate__strStart_A;
    t1 === $ && A.throwLateFieldNI("_strStart");
    t2 = _this.__Deflate__prevLength_A;
    t2 === $ && A.throwLateFieldNI("_prevLength");
    t3 = _this.__Deflate__windowSize_A;
    t3 === $ && A.throwLateFieldNI("_windowSize");
    t3 -= 262;
    limit = t1 > t3 ? t1 - t3 : 0;
    niceMatch = $.Deflate____config._readField$0().niceLength;
    t3 = _this.__Deflate__windowMask_A;
    t3 === $ && A.throwLateFieldNI("_windowMask");
    strend = _this.__Deflate__strStart_A + 258;
    t4 = _this.__Deflate__window_A;
    t4 === $ && A.throwLateFieldNI("_window");
    t5 = t1 + t2;
    t6 = t5 - 1;
    t7 = t4.length;
    if (!(t6 >= 0 && t6 < t7))
        return A.ioore(t4, t6);
    scanEnd1 = t4[t6];
    if (!(t5 >= 0 && t5 < t7))
        return A.ioore(t4, t5);
    scanEnd = t4[t5];
    if (_this.__Deflate__prevLength_A >= $.Deflate____config._readField$0().goodLength)
        chainLength = chainLength >>> 2;
    t4 = _this.__Deflate__lookAhead_A;
    t4 === $ && A.throwLateFieldNI("_lookAhead");
    if (niceMatch > t4)
        niceMatch = t4;
    scan = strend - 258;
    bestLen = t2;
    scan0 = t1;
    do {
        c$0: {
        t1 = _this.__Deflate__window_A;
        t2 = curMatch + bestLen;
        t4 = t1.length;
        if (!(t2 >= 0 && t2 < t4))
            return A.ioore(t1, t2);
        if (t1[t2] === scanEnd) {
            --t2;
            if (!(t2 >= 0))
            return A.ioore(t1, t2);
            if (t1[t2] === scanEnd1) {
            if (!(curMatch >= 0 && curMatch < t4))
                return A.ioore(t1, curMatch);
            t2 = t1[curMatch];
            if (!(scan0 >= 0 && scan0 < t4))
                return A.ioore(t1, scan0);
            if (t2 === t1[scan0]) {
                match = curMatch + 1;
                if (!(match < t4))
                return A.ioore(t1, match);
                t2 = t1[match];
                t5 = scan0 + 1;
                if (!(t5 < t4))
                return A.ioore(t1, t5);
                t5 = t2 !== t1[t5];
                t2 = t5;
            } else {
                match = curMatch;
                t2 = true;
            }
            } else {
            match = curMatch;
            t2 = true;
            }
        } else {
            match = curMatch;
            t2 = true;
        }
        if (t2)
            break c$0;
        scan0 += 2;
        ++match;
        do {
            ++scan0;
            if (!(scan0 >= 0 && scan0 < t4))
            return A.ioore(t1, scan0);
            t2 = t1[scan0];
            ++match;
            if (!(match >= 0 && match < t4))
            return A.ioore(t1, match);
            if (t2 === t1[match]) {
            ++scan0;
            if (!(scan0 < t4))
                return A.ioore(t1, scan0);
            t2 = t1[scan0];
            ++match;
            if (!(match < t4))
                return A.ioore(t1, match);
            if (t2 === t1[match]) {
                ++scan0;
                if (!(scan0 < t4))
                return A.ioore(t1, scan0);
                t2 = t1[scan0];
                ++match;
                if (!(match < t4))
                return A.ioore(t1, match);
                if (t2 === t1[match]) {
                ++scan0;
                if (!(scan0 < t4))
                    return A.ioore(t1, scan0);
                t2 = t1[scan0];
                ++match;
                if (!(match < t4))
                    return A.ioore(t1, match);
                if (t2 === t1[match]) {
                    ++scan0;
                    if (!(scan0 < t4))
                    return A.ioore(t1, scan0);
                    t2 = t1[scan0];
                    ++match;
                    if (!(match < t4))
                    return A.ioore(t1, match);
                    if (t2 === t1[match]) {
                    ++scan0;
                    if (!(scan0 < t4))
                        return A.ioore(t1, scan0);
                    t2 = t1[scan0];
                    ++match;
                    if (!(match < t4))
                        return A.ioore(t1, match);
                    if (t2 === t1[match]) {
                        ++scan0;
                        if (!(scan0 < t4))
                        return A.ioore(t1, scan0);
                        t2 = t1[scan0];
                        ++match;
                        if (!(match < t4))
                        return A.ioore(t1, match);
                        if (t2 === t1[match]) {
                        ++scan0;
                        if (!(scan0 < t4))
                            return A.ioore(t1, scan0);
                        t2 = t1[scan0];
                        ++match;
                        if (!(match < t4))
                            return A.ioore(t1, match);
                        t2 = t2 === t1[match] && scan0 < strend;
                        } else
                        t2 = false;
                    } else
                        t2 = false;
                    } else
                    t2 = false;
                } else
                    t2 = false;
                } else
                t2 = false;
            } else
                t2 = false;
            } else
            t2 = false;
        } while (t2);
        len = 258 - (strend - scan0);
        if (len > bestLen) {
            _this._matchStart = curMatch;
            if (len >= niceMatch) {
            bestLen = len;
            break;
            }
            t1 = _this.__Deflate__window_A;
            t2 = scan + len;
            t4 = t2 - 1;
            t5 = t1.length;
            if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t1, t4);
            scanEnd1 = t1[t4];
            if (!(t2 < t5))
            return A.ioore(t1, t2);
            scanEnd = t1[t2];
            bestLen = len;
        }
        scan0 = scan;
        }
        t1 = _this.__Deflate__prev_A;
        t1 === $ && A.throwLateFieldNI("_prev");
        t2 = curMatch & t3;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        curMatch = t1[t2] & 65535;
        if (curMatch > limit) {
        --chainLength;
        t1 = chainLength !== 0;
        } else
        t1 = false;
    } while (t1);
    t1 = _this.__Deflate__lookAhead_A;
    if (bestLen <= t1)
        return bestLen;
    return t1;
    },
    _readBuf$3(buf, start, size) {
    var data, len, bytes, len0, _this = this;
    if (size === 0 || _this._deflate$_input.get$isEOS())
        return 0;
    data = _this._deflate$_input.readBytes$1(size);
    len = data.get$length(data);
    if (len === 0)
        return 0;
    bytes = data.toUint8List$0();
    len0 = bytes.length;
    if (len > len0)
        len = len0;
    B.NativeUint8List_methods.setRange$3(buf, start, start + len, bytes);
    _this.total += len;
    _this.crc32 = A.getCrc32(bytes, _this.crc32);
    return len;
    },
    _flushPending$0() {
    var t2, _this = this,
        t1 = _this.__Deflate__pending_A;
    t1 === $ && A.throwLateFieldNI("_pending");
    t2 = _this.__Deflate__pendingBuffer_A;
    t2 === $ && A.throwLateFieldNI("_pendingBuffer");
    _this._deflate$_output.writeBytes$2(t2, t1);
    t2 = _this.__Deflate__pendingOut_A;
    t2 === $ && A.throwLateFieldNI("_pendingOut");
    _this.__Deflate__pendingOut_A = t2 + t1;
    t1 = _this.__Deflate__pending_A - t1;
    _this.__Deflate__pending_A = t1;
    if (t1 === 0)
        _this.__Deflate__pendingOut_A = 0;
    },
    _getConfig$1(level) {
    switch (level) {
        case 0:
        return new A._DeflaterConfig(0, 0, 0, 0, 0);
        case 1:
        return new A._DeflaterConfig(4, 4, 8, 4, 1);
        case 2:
        return new A._DeflaterConfig(4, 5, 16, 8, 1);
        case 3:
        return new A._DeflaterConfig(4, 6, 32, 32, 1);
        case 4:
        return new A._DeflaterConfig(4, 4, 16, 16, 2);
        case 5:
        return new A._DeflaterConfig(8, 16, 32, 32, 2);
        case 6:
        return new A._DeflaterConfig(8, 16, 128, 128, 2);
        case 7:
        return new A._DeflaterConfig(8, 32, 128, 256, 2);
        case 8:
        return new A._DeflaterConfig(32, 128, 258, 1024, 2);
        case 9:
        return new A._DeflaterConfig(32, 258, 258, 4096, 2);
    }
    throw A.wrapException(A.ArchiveException$("Invalid Deflate parameter"));
    }
};
A._DeflaterConfig.prototype = {};
A._HuffmanTree.prototype = {
    _genBitlen$1(s) {
    var t2, stree, extra, baseRenamed, maxLength, bits, t3, t4, t5, t6, h, overflow, n, t7, t8, t9, xbits, f, bits0, m, _this = this,
        _s11_ = "_optimalLen",
        t1 = _this.___HuffmanTree_dynamicTree_A;
    t1 === $ && A.throwLateFieldNI("dynamicTree");
    t2 = _this.___HuffmanTree_staticDesc_A;
    t2 === $ && A.throwLateFieldNI("staticDesc");
    stree = t2.staticTree;
    extra = t2.extraBits;
    baseRenamed = t2.extraBase;
    maxLength = t2.maxLength;
    for (t2 = s._bitLengthCount, bits = 0; bits <= 15; ++bits)
        t2[bits] = 0;
    t3 = s._heap;
    t4 = s.__Deflate__heapMax_A;
    t4 === $ && A.throwLateFieldNI("_heapMax");
    if (!(t4 >= 0 && t4 < 573))
        return A.ioore(t3, t4);
    t5 = t3[t4] * 2 + 1;
    t6 = t1.length;
    if (!(t5 >= 0 && t5 < t6))
        return A.ioore(t1, t5);
    t1[t5] = 0;
    for (h = t4 + 1, t4 = stree != null, t5 = extra.length, overflow = 0; h < 573; ++h) {
        n = t3[h];
        t7 = n * 2;
        t8 = t7 + 1;
        if (!(t8 >= 0 && t8 < t6))
        return A.ioore(t1, t8);
        t9 = t1[t8] * 2 + 1;
        if (!(t9 >= 0 && t9 < t6))
        return A.ioore(t1, t9);
        bits = t1[t9] + 1;
        if (bits > maxLength) {
        ++overflow;
        bits = maxLength;
        }
        t1[t8] = bits;
        t9 = _this.___HuffmanTree_maxCode_A;
        t9 === $ && A.throwLateFieldNI("maxCode");
        if (n > t9)
        continue;
        if (!(bits >= 0 && bits < 16))
        return A.ioore(t2, bits);
        t2[bits] = t2[bits] + 1;
        if (n >= baseRenamed) {
        t9 = n - baseRenamed;
        if (!(t9 >= 0 && t9 < t5))
            return A.ioore(extra, t9);
        xbits = extra[t9];
        } else
        xbits = 0;
        if (!(t7 >= 0 && t7 < t6))
        return A.ioore(t1, t7);
        f = t1[t7];
        t7 = s.__Deflate__optimalLen_A;
        t7 === $ && A.throwLateFieldNI(_s11_);
        s.__Deflate__optimalLen_A = t7 + f * (bits + xbits);
        if (t4) {
        t7 = s.__Deflate__staticLen_A;
        t7 === $ && A.throwLateFieldNI("_staticLen");
        if (!(t8 < stree.length))
            return A.ioore(stree, t8);
        s.__Deflate__staticLen_A = t7 + f * (stree[t8] + xbits);
        }
    }
    if (overflow === 0)
        return;
    bits = maxLength - 1;
    do {
        bits0 = bits;
        while (true) {
        if (!(bits0 >= 0 && bits0 < 16))
            return A.ioore(t2, bits0);
        t4 = t2[bits0];
        if (!(t4 === 0))
            break;
        --bits0;
        }
        t2[bits0] = t4 - 1;
        t4 = bits0 + 1;
        if (!(t4 < 16))
        return A.ioore(t2, t4);
        t2[t4] = t2[t4] + 2;
        if (!(maxLength < 16))
        return A.ioore(t2, maxLength);
        t2[maxLength] = t2[maxLength] - 1;
        overflow -= 2;
    } while (overflow > 0);
    for (bits = maxLength; bits !== 0; --bits) {
        if (!(bits >= 0))
        return A.ioore(t2, bits);
        n = t2[bits];
        for (; n !== 0;) {
        --h;
        if (!(h >= 0 && h < 573))
            return A.ioore(t3, h);
        m = t3[h];
        t4 = _this.___HuffmanTree_maxCode_A;
        t4 === $ && A.throwLateFieldNI("maxCode");
        if (m > t4)
            continue;
        t4 = m * 2;
        t5 = t4 + 1;
        if (!(t5 >= 0 && t5 < t6))
            return A.ioore(t1, t5);
        t7 = t1[t5];
        if (t7 !== bits) {
            t8 = s.__Deflate__optimalLen_A;
            t8 === $ && A.throwLateFieldNI(_s11_);
            if (!(t4 >= 0 && t4 < t6))
            return A.ioore(t1, t4);
            s.__Deflate__optimalLen_A = t8 + (bits - t7) * t1[t4];
            t1[t5] = bits;
        }
        --n;
        }
    }
    },
    _buildTree$1(s) {
    var t2, stree, elems, t3, t4, n, maxCode, t5, t6, node, t7, m, t8, t9, node0, _this = this,
        t1 = _this.___HuffmanTree_dynamicTree_A;
    t1 === $ && A.throwLateFieldNI("dynamicTree");
    t2 = _this.___HuffmanTree_staticDesc_A;
    t2 === $ && A.throwLateFieldNI("staticDesc");
    stree = t2.staticTree;
    elems = t2.numElements;
    s.__Deflate__heapLen_A = 0;
    s.__Deflate__heapMax_A = 573;
    for (t2 = t1.length, t3 = s._heap, t4 = s._depth, n = 0, maxCode = -1; n < elems; ++n) {
        t5 = n * 2;
        if (!(t5 < t2))
        return A.ioore(t1, t5);
        if (t1[t5] !== 0) {
        t5 = ++s.__Deflate__heapLen_A;
        if (!(t5 >= 0 && t5 < 573))
            return A.ioore(t3, t5);
        t3[t5] = n;
        if (!(n < 573))
            return A.ioore(t4, n);
        t4[n] = 0;
        maxCode = n;
        } else {
        ++t5;
        if (!(t5 < t2))
            return A.ioore(t1, t5);
        t1[t5] = 0;
        }
    }
    for (t5 = stree != null; t6 = s.__Deflate__heapLen_A, t6 < 2;) {
        ++t6;
        s.__Deflate__heapLen_A = t6;
        if (maxCode < 2) {
        ++maxCode;
        node = maxCode;
        } else
        node = 0;
        if (!(t6 >= 0))
        return A.ioore(t3, t6);
        t3[t6] = node;
        t6 = node * 2;
        if (!(t6 >= 0 && t6 < t2))
        return A.ioore(t1, t6);
        t1[t6] = 1;
        t4[node] = 0;
        t7 = s.__Deflate__optimalLen_A;
        t7 === $ && A.throwLateFieldNI("_optimalLen");
        s.__Deflate__optimalLen_A = t7 - 1;
        if (t5) {
        t7 = s.__Deflate__staticLen_A;
        t7 === $ && A.throwLateFieldNI("_staticLen");
        ++t6;
        if (!(t6 < stree.length))
            return A.ioore(stree, t6);
        s.__Deflate__staticLen_A = t7 - stree[t6];
        }
    }
    _this.___HuffmanTree_maxCode_A = maxCode;
    for (n = B.JSInt_methods._tdivFast$1(t6, 2); n >= 1; --n)
        s._pqdownheap$2(t1, n);
    node = elems;
    do {
        n = t3[1];
        t5 = s.__Deflate__heapLen_A--;
        if (!(t5 >= 0 && t5 < 573))
        return A.ioore(t3, t5);
        t3[1] = t3[t5];
        s._pqdownheap$2(t1, 1);
        m = t3[1];
        t5 = --s.__Deflate__heapMax_A;
        if (!(t5 >= 0 && t5 < 573))
        return A.ioore(t3, t5);
        t3[t5] = n;
        --t5;
        s.__Deflate__heapMax_A = t5;
        if (!(t5 >= 0))
        return A.ioore(t3, t5);
        t3[t5] = m;
        t5 = node * 2;
        t6 = n * 2;
        if (!(t6 >= 0 && t6 < t2))
        return A.ioore(t1, t6);
        t7 = t1[t6];
        t8 = m * 2;
        if (!(t8 >= 0 && t8 < t2))
        return A.ioore(t1, t8);
        t9 = t1[t8];
        if (!(t5 < t2))
        return A.ioore(t1, t5);
        t1[t5] = t7 + t9;
        if (!(n >= 0 && n < 573))
        return A.ioore(t4, n);
        t9 = t4[n];
        if (!(m >= 0 && m < 573))
        return A.ioore(t4, m);
        t7 = t4[m];
        t5 = t9 > t7 ? t9 : t7;
        if (!(node < 573))
        return A.ioore(t4, node);
        t4[node] = t5 + 1;
        ++t6;
        ++t8;
        if (!(t8 < t2))
        return A.ioore(t1, t8);
        t1[t8] = node;
        if (!(t6 < t2))
        return A.ioore(t1, t6);
        t1[t6] = node;
        node0 = node + 1;
        t3[1] = node;
        s._pqdownheap$2(t1, 1);
        if (s.__Deflate__heapLen_A >= 2) {
        node = node0;
        continue;
        } else
        break;
    } while (true);
    t2 = --s.__Deflate__heapMax_A;
    t4 = t3[1];
    if (!(t2 >= 0 && t2 < 573))
        return A.ioore(t3, t2);
    t3[t2] = t4;
    _this._genBitlen$1(s);
    A._HuffmanTree__genCodes(t1, maxCode, s._bitLengthCount);
    }
};
A._StaticTree.prototype = {};
A.HuffmanTable.prototype = {
    HuffmanTable$1(lengths) {
    var i, t1, t2, size, bitLength, code, skip, rtemp, reversed, j, t3, _this = this,
        listSize = lengths.length;
    for (i = 0; i < listSize; ++i) {
        if (!(i < lengths.length))
        return A.ioore(lengths, i);
        t1 = lengths[i];
        t2 = _this.maxCodeLength;
        if (typeof t1 !== "number")
        return t1.$gt();
        if (t1 > t2)
        _this.set$maxCodeLength(t1);
        if (!(i < lengths.length))
        return A.ioore(lengths, i);
        t1 = lengths[i];
        t2 = _this.minCodeLength;
        if (typeof t1 !== "number")
        return t1.$lt();
        if (t1 < t2)
        _this.set$minCodeLength(t1);
    }
    size = B.JSInt_methods.$shl(1, _this.maxCodeLength);
    _this.__HuffmanTable_table_A = new Uint32Array(size);
    for (bitLength = 1, code = 0, skip = 2; bitLength <= _this.maxCodeLength;) {
        for (t1 = bitLength << 16, i = 0; i < listSize; ++i) {
        if (!(i < lengths.length))
            return A.ioore(lengths, i);
        if (J.$eq$(lengths[i], bitLength)) {
            for (rtemp = code, reversed = 0, j = 0; j < bitLength; ++j) {
            reversed = (reversed << 1 | rtemp & 1) >>> 0;
            rtemp = rtemp >>> 1;
            }
            for (t2 = _this.__HuffmanTable_table_A, t3 = (t1 | i) >>> 0, j = reversed; j < size; j += skip) {
            if (!(j >= 0 && j < t2.length))
                return A.ioore(t2, j);
            t2[j] = t3;
            }
            ++code;
        }
        }
        ++bitLength;
        code = code << 1 >>> 0;
        skip = skip << 1 >>> 0;
    }
    },
    set$maxCodeLength(maxCodeLength) {
    this.maxCodeLength = A._asInt(maxCodeLength);
    },
    set$minCodeLength(minCodeLength) {
    this.minCodeLength = A._asInt(minCodeLength);
    }
};
A.Inflate.prototype = {
    _inflate$0() {
    var t1, t2, t3, t4, _this = this;
    _this._bitBufferLen = _this._bitBuffer = 0;
    if (!_this.inputSet)
        return;
    t1 = _this.__Inflate_input_A;
    t1 === $ && A.throwLateFieldNI("input");
    t2 = t1.start;
    while (true) {
        t3 = t1.offset;
        t4 = t1.__InputStream__length_A;
        t4 === $ && A.throwLateFieldNI("_length");
        if (!(t3 < t2 + t4))
        break;
        if (!_this._parseBlock$0())
        break;
    }
    },
    _parseBlock$0() {
    var blockHeader, _this = this,
        t1 = _this.__Inflate_input_A;
    t1 === $ && A.throwLateFieldNI("input");
    if (t1.get$isEOS())
        return false;
    blockHeader = _this._readBits$1(3);
    switch (B.JSInt_methods._shrOtherPositive$1(blockHeader, 1)) {
        case 0:
        if (_this._parseUncompressedBlock$0() === -1)
            return false;
        break;
        case 1:
        if (_this._decodeHuffman$2(_this._fixedLiteralLengthTable, _this._fixedDistanceTable) === -1)
            return false;
        break;
        case 2:
        if (_this._parseDynamicHuffmanBlock$0() === -1)
            return false;
        break;
        default:
        return false;
    }
    return (blockHeader & 1) === 0;
    },
    _readBits$1($length) {
    var t1, t2, t3, t4, _this = this;
    if ($length === 0)
        return 0;
    for (t1 = _this.__Inflate_input_A; t2 = _this._bitBufferLen, t2 < $length;) {
        t1 === $ && A.throwLateFieldNI("input");
        t3 = t1.offset;
        t4 = t1.__InputStream__length_A;
        t4 === $ && A.throwLateFieldNI("_length");
        if (t3 >= t1.start + t4)
        return -1;
        t4 = t1.buffer;
        t1.offset = t3 + 1;
        if (!(t3 >= 0 && t3 < t4.length))
        return A.ioore(t4, t3);
        t3 = t4[t3];
        _this._bitBuffer = (_this._bitBuffer | B.JSInt_methods.$shl(t3, t2)) >>> 0;
        _this._bitBufferLen = t2 + 8;
    }
    t1 = _this._bitBuffer;
    t3 = B.JSInt_methods._shlPositive$1(1, $length);
    _this._bitBuffer = B.JSInt_methods._shrBothPositive$1(t1, $length);
    _this._bitBufferLen = t2 - $length;
    return (t1 & t3 - 1) >>> 0;
    },
    _readCodeByTable$1(table) {
    var maxCodeLength, t2, t3, t4, t5, codeWithLength, codeLength, _this = this,
        t1 = table.__HuffmanTable_table_A;
    t1 === $ && A.throwLateFieldNI("table");
    maxCodeLength = table.maxCodeLength;
    for (t2 = _this.__Inflate_input_A; t3 = _this._bitBufferLen, t3 < maxCodeLength;) {
        t2 === $ && A.throwLateFieldNI("input");
        t4 = t2.offset;
        t5 = t2.__InputStream__length_A;
        t5 === $ && A.throwLateFieldNI("_length");
        if (t4 >= t2.start + t5)
        return -1;
        t5 = t2.buffer;
        t2.offset = t4 + 1;
        if (!(t4 >= 0 && t4 < t5.length))
        return A.ioore(t5, t4);
        t4 = t5[t4];
        _this._bitBuffer = (_this._bitBuffer | B.JSInt_methods.$shl(t4, t3)) >>> 0;
        _this._bitBufferLen = t3 + 8;
    }
    t2 = _this._bitBuffer;
    t4 = (t2 & B.JSInt_methods.$shl(1, maxCodeLength) - 1) >>> 0;
    if (!(t4 < t1.length))
        return A.ioore(t1, t4);
    codeWithLength = t1[t4];
    codeLength = codeWithLength >>> 16;
    _this._bitBuffer = B.JSInt_methods._shrBothPositive$1(t2, codeLength);
    _this._bitBufferLen = t3 - codeLength;
    return codeWithLength & 65535;
    },
    _parseUncompressedBlock$0() {
    var len, t1, _this = this;
    _this._bitBufferLen = _this._bitBuffer = 0;
    len = _this._readBits$1(16);
    t1 = _this._readBits$1(16);
    if (len !== 0 && len !== (t1 ^ 65535) >>> 0)
        return -1;
    t1 = _this.__Inflate_input_A;
    t1 === $ && A.throwLateFieldNI("input");
    if (len > t1.get$length(t1))
        return -1;
    _this.output.writeInputStream$1(t1.readBytes$1(len));
    return 0;
    },
    _parseDynamicHuffmanBlock$0() {
    var numDistanceCodes, numCodeLengths, codeLengths, i, len, t1, codeLengthsTable, litLenDistLengths, litlenLengths, distLengths, _this = this,
        numLitLengthCodes = _this._readBits$1(5);
    if (numLitLengthCodes === -1)
        return -1;
    numLitLengthCodes += 257;
    if (numLitLengthCodes > 288)
        return -1;
    numDistanceCodes = _this._readBits$1(5);
    if (numDistanceCodes === -1)
        return -1;
    ++numDistanceCodes;
    if (numDistanceCodes > 32)
        return -1;
    numCodeLengths = _this._readBits$1(4);
    if (numCodeLengths === -1)
        return -1;
    numCodeLengths += 4;
    if (numCodeLengths > 19)
        return -1;
    codeLengths = new Uint8Array(19);
    for (i = 0; i < numCodeLengths; ++i) {
        len = _this._readBits$1(3);
        if (len === -1)
        return -1;
        t1 = B.List_uSC[i];
        if (!(t1 < 19))
        return A.ioore(codeLengths, t1);
        codeLengths[t1] = len;
    }
    codeLengthsTable = A.HuffmanTable$(codeLengths);
    t1 = numLitLengthCodes + numDistanceCodes;
    litLenDistLengths = new Uint8Array(t1);
    litlenLengths = A.NativeUint8List_NativeUint8List$view(litLenDistLengths.buffer, 0, numLitLengthCodes);
    distLengths = A.NativeUint8List_NativeUint8List$view(litLenDistLengths.buffer, numLitLengthCodes, numDistanceCodes);
    if (_this._decode$3(t1, codeLengthsTable, litLenDistLengths) === -1)
        return -1;
    return _this._decodeHuffman$2(A.HuffmanTable$(litlenLengths), A.HuffmanTable$(distLengths));
    },
    _decodeHuffman$2(litlen, dist) {
    var t1, code, ti, codeLength, distCode, distance, t2, _this = this;
    for (t1 = _this.output; true;) {
        code = _this._readCodeByTable$1(litlen);
        if (code < 0 || code > 285)
        return -1;
        if (code === 256)
        break;
        if (code < 256) {
        t1.writeByte$1(code & 255);
        continue;
        }
        ti = code - 257;
        if (!(ti >= 0 && ti < 29))
        return A.ioore(B.List_qQn, ti);
        codeLength = B.List_qQn[ti] + _this._readBits$1(B.List_eea[ti]);
        distCode = _this._readCodeByTable$1(dist);
        if (distCode < 0 || distCode > 29)
        return -1;
        if (!(distCode >= 0 && distCode < 30))
        return A.ioore(B.List_i3t, distCode);
        distance = B.List_i3t[distCode] + _this._readBits$1(B.List_X3d0[distCode]);
        for (t2 = -distance; codeLength > distance;) {
        t1.writeBytes$1(t1.subset$1(t2));
        codeLength -= distance;
        }
        if (codeLength === distance)
        t1.writeBytes$1(t1.subset$1(t2));
        else
        t1.writeBytes$1(t1.subset$2(t2, codeLength - distance));
    }
    for (t1 = _this.__Inflate_input_A; t2 = _this._bitBufferLen, t2 >= 8;) {
        _this._bitBufferLen = t2 - 8;
        t1 === $ && A.throwLateFieldNI("input");
        if (--t1.offset < 0)
        t1.offset = 0;
    }
    return 0;
    },
    _decode$3(num, table, codeLengths) {
    var t1, prev, i, code, repeat, repeat0, i0, _this = this;
    type$.List_int._as(codeLengths);
    for (t1 = codeLengths.length, prev = 0, i = 0; i < num;) {
        code = _this._readCodeByTable$1(table);
        if (code === -1)
        return -1;
        switch (code) {
        case 16:
            repeat = _this._readBits$1(2);
            if (repeat === -1)
            return -1;
            repeat += 3;
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
            i0 = i + 1;
            if (!(i >= 0 && i < t1))
                return A.ioore(codeLengths, i);
            codeLengths[i] = prev;
            }
            break;
        case 17:
            repeat = _this._readBits$1(3);
            if (repeat === -1)
            return -1;
            repeat += 3;
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
            i0 = i + 1;
            if (!(i >= 0 && i < t1))
                return A.ioore(codeLengths, i);
            codeLengths[i] = 0;
            }
            prev = 0;
            break;
        case 18:
            repeat = _this._readBits$1(7);
            if (repeat === -1)
            return -1;
            repeat += 11;
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
            i0 = i + 1;
            if (!(i >= 0 && i < t1))
                return A.ioore(codeLengths, i);
            codeLengths[i] = 0;
            }
            prev = 0;
            break;
        default:
            if (code < 0 || code > 15)
            return -1;
            i0 = i + 1;
            if (!(i >= 0 && i < t1))
            return A.ioore(codeLengths, i);
            codeLengths[i] = code;
            i = i0;
            prev = code;
            break;
        }
    }
    return 0;
    }
};
A.ZLibDecoderBase.prototype = {};
A.ZLibDecoder.prototype = {};
A.ZLibEncoder.prototype = {
    encode$2$level(data, level) {
    var output, fcheck, t2, adler32, input, t3, t4, t5, t6, t7, t8, t9,
        t1 = type$.List_int;
    t1._as(data);
    output = A.OutputStream$(1, 32768);
    output.writeByte$1(120);
    for (fcheck = 0; t2 = (fcheck | 0) >>> 0, (30720 + t2) % 31 !== 0;)
        ++fcheck;
    output.writeByte$1(t2);
    adler32 = A.getAdler32(data);
    input = A.InputStream$(data, 1, null, 0);
    t2 = A._HuffmanTree$();
    t3 = A._HuffmanTree$();
    t4 = A._HuffmanTree$();
    t5 = new Uint16Array(16);
    t6 = new Uint32Array(573);
    t7 = new Uint8Array(573);
    t8 = A.OutputStream$(0, 32768);
    t5 = new A.Deflate(input, t8, t2, t3, t4, t5, t6, t7);
    if (level == null || level === -1)
        level = 6;
    if (typeof level !== "number")
        return level.$lt();
    if (level <= 9)
        t6 = false;
    else
        t6 = true;
    if (t6)
        A.throwExpression(A.ArchiveException$("Invalid Deflate parameter"));
    $.Deflate____config.__late_helper$_value = t5._getConfig$1(level);
    t6 = new Uint16Array(1146);
    t5.__Deflate__dynamicLengthTree_A = t6;
    t7 = new Uint16Array(122);
    t5.__Deflate__dynamicDistTree_A = t7;
    t9 = new Uint16Array(78);
    t5.__Deflate__bitLengthTree_A = t9;
    t5.__Deflate__windowBits_A = 15;
    t5.__Deflate__windowSize_A = 32768;
    t5.__Deflate__windowMask_A = 32767;
    t5.__Deflate__hashBits_A = 15;
    t5.__Deflate__hashSize_A = 32768;
    t5.__Deflate__hashMask_A = 32767;
    t5.__Deflate__hashShift_A = 5;
    t5.__Deflate__window_A = new Uint8Array(65536);
    t5.__Deflate__prev_A = new Uint16Array(32768);
    t5.__Deflate__head_A = new Uint16Array(32768);
    t5.__Deflate__litBufferSize_A = 16384;
    t5.__Deflate__pendingBuffer_A = new Uint8Array(65536);
    t5.__Deflate__pendingBufferSize_A = 65536;
    t5.__Deflate__dbuf_A = 16384;
    t5.__Deflate__lbuf_A = 49152;
    t5.__Deflate__level_A = A._asInt(level);
    t5.__Deflate__pendingOut_A = t5.__Deflate__pending_A = t5.__Deflate__strategy_A = 0;
    t5._status = 113;
    t5.crc32 = 0;
    t2.___HuffmanTree_dynamicTree_A = t6;
    t6 = type$._StaticTree;
    t2.___HuffmanTree_staticDesc_A = t6._as($.$get$_StaticTree_staticLDesc());
    t3.___HuffmanTree_dynamicTree_A = t7;
    t3.___HuffmanTree_staticDesc_A = t6._as($.$get$_StaticTree_staticDDesc());
    t4.___HuffmanTree_dynamicTree_A = t9;
    t4.___HuffmanTree_staticDesc_A = t6._as($.$get$_StaticTree_staticBlDesc());
    t5.__Deflate__numValidBits_A = t5.__Deflate__bitBuffer_A = 0;
    t5.__Deflate__lastEOBLen_A = 8;
    t5._initBlock$0();
    t5._lmInit$0();
    t5._deflate$1(4);
    t5._flushPending$0();
    output.writeBytes$1(t1._as(A.NativeUint8List_NativeUint8List$view(t8._output_stream$_buffer.buffer, 0, t8.length)));
    output.writeUint32$1(adler32);
    t1 = A.NativeUint8List_NativeUint8List$view(output._output_stream$_buffer.buffer, 0, output.length);
    return t1;
    },
    encode$1(data) {
    return this.encode$2$level(data, null);
    }
};
A.Channel.prototype = {
    _enumToString$0() {
    return "Channel." + this._name;
    }
};
A.ChannelIterator.prototype = {
    moveNext$0() {
    var t1 = this.color;
    return ++this.index < t1.get$length(t1);
    },
    get$current() {
    return this.color.$index(0, this.index);
    }
};
A.ColorFloat16.prototype = {
    clone$0() {
    return new A.ColorFloat16(new Uint16Array(A._ensureNativeList(this.data)));
    },
    get$format() {
    return B.Format_9;
    },
    get$length(_) {
    return this.data.length;
    },
    get$palette() {
    return null;
    },
    $index(_, index) {
    var t1 = this.data,
        t2 = t1.length;
    if (index < t2) {
        if (!(index >= 0))
        return A.ioore(t1, index);
        t1 = t1[index];
        t2 = $.Float16__toFloatFloat32Data;
        t2 = t2 != null ? t2 : A.Float16__initialize();
        if (!(t1 < t2.length))
        return A.ioore(t2, t1);
        t1 = t2[t1];
    } else
        t1 = 0;
    return t1;
    },
    $indexSet(_, index, value) {
    var t1, t2, t3;
    A._asNum(value);
    t1 = this.data;
    t2 = t1.length;
    if (index < t2) {
        t3 = A.Float16_doubleToFloat16(value);
        if (!(index >= 0))
        return A.ioore(t1, index);
        t1[index] = t3;
    }
    },
    get$index() {
    return this.get$r();
    },
    get$r() {
    var t1 = this.data,
        t2 = t1.length;
    if (t2 !== 0) {
        if (0 >= t2)
        return A.ioore(t1, 0);
        t1 = t1[0];
        t2 = $.Float16__toFloatFloat32Data;
        t2 = t2 != null ? t2 : A.Float16__initialize();
        if (!(t1 < t2.length))
        return A.ioore(t2, t1);
        t1 = t2[t1];
    } else
        t1 = 0;
    return t1;
    },
    get$g() {
    var t2,
        t1 = this.data;
    if (t1.length > 1) {
        t1 = t1[1];
        t2 = $.Float16__toFloatFloat32Data;
        t2 = t2 != null ? t2 : A.Float16__initialize();
        if (!(t1 < t2.length))
        return A.ioore(t2, t1);
        t1 = t2[t1];
    } else
        t1 = 0;
    return t1;
    },
    get$b() {
    var t2,
        t1 = this.data;
    if (t1.length > 2) {
        t1 = t1[2];
        t2 = $.Float16__toFloatFloat32Data;
        t2 = t2 != null ? t2 : A.Float16__initialize();
        if (!(t1 < t2.length))
        return A.ioore(t2, t1);
        t1 = t2[t1];
    } else
        t1 = 0;
    return t1;
    },
    get$a() {
    var t2,
        t1 = this.data;
    if (t1.length > 3) {
        t1 = t1[3];
        t2 = $.Float16__toFloatFloat32Data;
        t2 = t2 != null ? t2 : A.Float16__initialize();
        if (!(t1 < t2.length))
        return A.ioore(t2, t1);
        t1 = t2[t1];
    } else
        t1 = 0;
    return t1;
    },
    get$luminance() {
    return A.getLuminance(this);
    },
    $set$1(c) {
    var t1 = c.get$r(),
        t2 = this.data,
        t3 = t2.length;
    if (t3 !== 0) {
        t1 = A.Float16_doubleToFloat16(t1);
        if (0 >= t3)
        return A.ioore(t2, 0);
        t2[0] = t1;
    }
    t1 = c.get$g();
    if (t3 > 1)
        t2[1] = A.Float16_doubleToFloat16(t1);
    t1 = c.get$b();
    if (t3 > 2)
        t2[2] = A.Float16_doubleToFloat16(t1);
    t1 = c.get$a();
    if (t3 > 3)
        t2[3] = A.Float16_doubleToFloat16(t1);
    },
    get$iterator(_) {
    return new A.ChannelIterator(this);
    },
    $eq(_, other) {
    if (other == null)
        return false;
    return type$.Color._is(other) && other.get$length(other) === this.data.length && other.get$hashCode(other) === A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    get$hashCode(_) {
    return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isColor: 1
};
A.ColorFloat32.prototype = {
    clone$0() {
    return new A.ColorFloat32(new Float32Array(A._ensureNativeList(this.data)));
    },
    get$format() {
    return B.Format_10;
    },
    get$length(_) {
    return this.data.length;
    },
    get$palette() {
    return null;
    },
    $index(_, index) {
    var t1 = this.data,
        t2 = t1.length;
    if (index < t2) {
        if (!(index >= 0))
        return A.ioore(t1, index);
        t1 = t1[index];
    } else
        t1 = 0;
    return t1;
    },
    $indexSet(_, index, value) {
    var t1, t2;
    A._asNum(value);
    t1 = this.data;
    t2 = t1.length;
    if (index < t2) {
        if (!(index >= 0))
        return A.ioore(t1, index);
        t1[index] = value;
    }
    },
    get$index() {
    var t1 = this.data,
        t2 = t1.length;
    if (t2 !== 0) {
        if (0 >= t2)
        return A.ioore(t1, 0);
        t1 = t1[0];
    } else
        t1 = 0;
    return t1;
    },
    get$r() {
    var t1 = this.data,
        t2 = t1.length;
    if (t2 !== 0) {
        if (0 >= t2)
        return A.ioore(t1, 0);
        t1 = t1[0];
    } else
        t1 = 0;
    return t1;
    },
    get$g() {
    var t1 = this.data;
    return t1.length > 1 ? t1[1] : 0;
    },
    get$b() {
    var t1 = this.data;
    return t1.length > 2 ? t1[2] : 0;
    },
    get$a() {
    var t1 = this.data;
    return t1.length > 3 ? t1[3] : 1;
    },
    get$luminance() {
    return A.getLuminance(this);
    },
    $set$1(c) {
    var t1 = c.get$r(),
        t2 = this.data,
        t3 = t2.length;
    if (t3 !== 0) {
        if (0 >= t3)
        return A.ioore(t2, 0);
        t2[0] = t1;
    }
    t1 = c.get$g();
    if (t3 > 1)
        t2[1] = t1;
    t1 = c.get$b();
    if (t3 > 2)
        t2[2] = t1;
    t1 = c.get$a();
    if (t3 > 3)
        t2[3] = t1;
    },
    get$iterator(_) {
    return new A.ChannelIterator(this);
    },
    $eq(_, other) {
    if (other == null)
        return false;
    return type$.Color._is(other) && other.get$length(other) === this.data.length && other.get$hashCode(other) === A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    get$hashCode(_) {
    return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isColor: 1
};
A.ColorFloat64.prototype = {
    clone$0() {
    return new A.ColorFloat64(new Float64Array(A._ensureNativeList(this.data)));
    },
    get$format() {
    return B.Format_11;
    },
    get$length(_) {
    return this.data.length;
    },
    get$palette() {
    return null;
    },
    $index(_, index) {
    var t1 = this.data,
        t2 = t1.length;
    if (index < t2) {
        if (!(index >= 0))
        return A.ioore(t1, index);
        t1 = t1[index];
    } else
        t1 = 0;
    return t1;
    },
    $indexSet(_, index, value) {
    var t1, t2;
    A._asNum(value);
    t1 = this.data;
    t2 = t1.length;
    if (index < t2) {
        if (!(index >= 0))
        return A.ioore(t1, index);
        t1[index] = value;
    }
    },
    get$index() {
    var t1 = this.data,
        t2 = t1.length;
    if (t2 !== 0) {
        if (0 >= t2)
        return A.ioore(t1, 0);
        t1 = t1[0];
    } else
        t1 = 0;
    return t1;
    },
    get$r() {
    var t1 = this.data,
        t2 = t1.length;
    if (t2 !== 0) {
        if (0 >= t2)
        return A.ioore(t1, 0);
        t1 = t1[0];
    } else
        t1 = 0;
    return t1;
    },
    get$g() {
    var t1 = this.data;
    return t1.length > 1 ? t1[1] : 0;
    },
    get$b() {
    var t1 = this.data;
    return t1.length > 2 ? t1[2] : 0;
    },
    get$a() {
    var t1 = this.data;
    return t1.length > 3 ? t1[3] : 1;
    },
    get$luminance() {
    return A.getLuminance(this);
    },
    $set$1(c) {
    var t1 = c.get$r(),
        t2 = this.data,
        t3 = t2.length;
    if (t3 !== 0) {
        if (0 >= t3)
        return A.ioore(t2, 0);
        t2[0] = t1;
    }
    t1 = c.get$g();
    if (t3 > 1)
        t2[1] = t1;
    t1 = c.get$b();
    if (t3 > 2)
        t2[2] = t1;
    t1 = c.get$a();
    if (t3 > 3)
        t2[3] = t1;
    },
    get$iterator(_) {
    return new A.ChannelIterator(this);
    },
    $eq(_, other) {
    if (other == null)
        return false;
    return type$.Color._is(other) && other.get$length(other) === this.data.length && other.get$hashCode(other) === A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    get$hashCode(_) {
    return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isColor: 1
};
A.ColorInt16.prototype = {
    clone$0() {
    return new A.ColorInt16(new Int16Array(A._ensureNativeList(this.data)));
    },
    get$format() {
    return B.Format_7;
    },
    get$length(_) {
    return this.data.length;
    },
    get$palette() {
    return null;
    },
    $index(_, index) {
    var t1 = this.data,
        t2 = t1.length;
    if (index < t2) {
        if (!(index >= 0))
        return A.ioore(t1, index);
        t1 = t1[index];
    } else
        t1 = 0;
    return t1;
    },
    $indexSet(_, index, value) {
    var t1, t2, t3;
    A._asNum(value);
    t1 = this.data;
    t2 = t1.length;
    if (index < t2) {
        t3 = B.JSNumber_methods.toInt$0(value);
        if (!(index >= 0))
        return A.ioore(t1, index);
        t1[index] = t3;
    }
    },
    get$index() {
    var t1 = this.data,
        t2 = t1.length;
    if (t2 !== 0) {
        if (0 >= t2)
        return A.ioore(t1, 0);
        t1 = t1[0];
    } else
        t1 = 0;
    return t1;
    },
    get$r() {
    var t1 = this.data,
        t2 = t1.length;
    if (t2 !== 0) {
        if (0 >= t2)
        return A.ioore(t1, 0);
        t1 = t1[0];
    } else
        t1 = 0;
    return t1;
    },
    get$g() {
    var t1 = this.data;
    return t1.length > 1 ? t1[1] : 0;
    },
    get$b() {
    var t1 = this.data;
    return t1.length > 2 ? t1[2] : 0;
    },
    get$a() {
    var t1 = this.data;
    return t1.length > 3 ? t1[3] : 0;
    },
    get$luminance() {
    return A.getLuminance(this);
    },
    $set$1(c) {
    var t1 = c.get$r(),
        t2 = this.data,
        t3 = t2.length;
    if (t3 !== 0) {
        t1 = B.JSNumber_methods.toInt$0(t1);
        if (0 >= t3)
        return A.ioore(t2, 0);
        t2[0] = t1;
    }
    t1 = c.get$g();
    if (t3 > 1)
        t2[1] = B.JSNumber_methods.toInt$0(t1);
    t1 = c.get$b();
    if (t3 > 2)
        t2[2] = B.JSNumber_methods.toInt$0(t1);
    t1 = c.get$a();
    if (t3 > 3)
        t2[3] = B.JSNumber_methods.toInt$0(t1);
    },
    get$iterator(_) {
    return new A.ChannelIterator(this);
    },
    $eq(_, other) {
    if (other == null)
        return false;
    return type$.Color._is(other) && other.get$length(other) === this.data.length && other.get$hashCode(other) === A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    get$hashCode(_) {
    return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isColor: 1
};
A.ColorInt32.prototype = {
    clone$0() {
    return new A.ColorInt32(new Int32Array(A._ensureNativeList(this.data)));
    },
    get$format() {
    return B.Format_8;
    },
    get$length(_) {
    return this.data.length;
    },
    get$palette() {
    return null;
    },
    $index(_, index) {
    var t1 = this.data,
        t2 = t1.length;
    if (index < t2) {
        if (!(index >= 0))
        return A.ioore(t1, index);
        t1 = t1[index];
    } else
        t1 = 0;
    return t1;
    },
    $indexSet(_, index, value) {
    var t1, t2, t3;
    A._asNum(value);
    t1 = this.data;
    t2 = t1.length;
    if (index < t2) {
        t3 = B.JSNumber_methods.toInt$0(value);
        if (!(index >= 0))
        return A.ioore(t1, index);
        t1[index] = t3;
    }
    },
    get$index() {
    var t1 = this.data,
        t2 = t1.length;
    if (t2 !== 0) {
        if (0 >= t2)
        return A.ioore(t1, 0);
        t1 = t1[0];
    } else
        t1 = 0;
    return t1;
    },
    get$r() {
    var t1 = this.data,
        t2 = t1.length;
    if (t2 !== 0) {
        if (0 >= t2)
        return A.ioore(t1, 0);
        t1 = t1[0];
    } else
        t1 = 0;
    return t1;
    },
    get$g() {
    var t1 = this.data;
    return t1.length > 1 ? t1[1] : 0;
    },
    get$b() {
    var t1 = this.data;
    return t1.length > 2 ? t1[2] : 0;
    },
    get$a() {
    var t1 = this.data;
    return t1.length > 3 ? t1[3] : 0;
    },
    get$luminance() {
    return A.getLuminance(this);
    },
    $set$1(c) {
    var t1 = c.get$r(),
        t2 = this.data,
        t3 = t2.length;
    if (t3 !== 0) {
        A._asInt(t1);
        if (0 >= t3)
        return A.ioore(t2, 0);
        t2[0] = t1;
    }
    t1 = c.get$g();
    if (t3 > 1)
        t2[1] = B.JSNumber_methods.toInt$0(t1);
    t1 = c.get$b();
    if (t3 > 2)
        t2[2] = B.JSNumber_methods.toInt$0(t1);
    t1 = c.get$a();
    if (t3 > 3)
        t2[3] = B.JSNumber_methods.toInt$0(t1);
    },
    get$iterator(_) {
    return new A.ChannelIterator(this);
    },
    $eq(_, other) {
    if (other == null)
        return false;
    return type$.Color._is(other) && other.get$length(other) === this.data.length && other.get$hashCode(other) === A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    get$hashCode(_) {
    return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isColor: 1
};
A.ColorInt8.prototype = {
    clone$0() {
    return new A.ColorInt8(new Int8Array(A._ensureNativeList(this.data)));
    },
    get$format() {
    return B.Format_6;
    },
    get$length(_) {
    return this.data.length;
    },
    get$palette() {
    return null;
    },
    $index(_, index) {
    var t1 = this.data,
        t2 = t1.length;
    if (index < t2) {
        if (!(index >= 0))
        return A.ioore(t1, index);
        t1 = t1[index];
    } else
        t1 = 0;
    return t1;
    },
    $indexSet(_, index, value) {
    var t1, t2, t3;
    A._asNum(value);
    t1 = this.data;
    t2 = t1.length;
    if (index < t2) {
        t3 = B.JSNumber_methods.toInt$0(value);
        if (!(index >= 0))
        return A.ioore(t1, index);
        t1[index] = t3;
    }
    },
    get$index() {
    var t1 = this.data,
        t2 = t1.length;
    if (t2 !== 0) {
        if (0 >= t2)
        return A.ioore(t1, 0);
        t1 = t1[0];
    } else
        t1 = 0;
    return t1;
    },
    get$r() {
    var t1 = this.data,
        t2 = t1.length;
    if (t2 !== 0) {
        if (0 >= t2)
        return A.ioore(t1, 0);
        t1 = t1[0];
    } else
        t1 = 0;
    return t1;
    },
    get$g() {
    var t1 = this.data;
    return t1.length > 1 ? t1[1] : 0;
    },
    get$b() {
    var t1 = this.data;
    return t1.length > 2 ? t1[2] : 0;
    },
    get$a() {
    var t1 = this.data;
    return t1.length > 3 ? t1[3] : 0;
    },
    get$luminance() {
    return A.getLuminance(this);
    },
    $set$1(c) {
    var t1 = c.get$r(),
        t2 = this.data,
        t3 = t2.length;
    if (t3 !== 0) {
        t1 = B.JSNumber_methods.toInt$0(t1);
        if (0 >= t3)
        return A.ioore(t2, 0);
        t2[0] = t1;
    }
    t1 = c.get$g();
    if (t3 > 1)
        t2[1] = B.JSNumber_methods.toInt$0(t1);
    t1 = c.get$b();
    if (t3 > 2)
        t2[2] = B.JSNumber_methods.toInt$0(t1);
    t1 = c.get$a();
    if (t3 > 3)
        t2[3] = B.JSNumber_methods.toInt$0(t1);
    },
    get$iterator(_) {
    return new A.ChannelIterator(this);
    },
    $eq(_, other) {
    if (other == null)
        return false;
    return type$.Color._is(other) && other.get$length(other) === this.data.length && other.get$hashCode(other) === A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    get$hashCode(_) {
    return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isColor: 1
};
A.ColorUint1.prototype = {
    clone$0() {
    var t1 = this.__ColorUint1_data_A;
    t1 === $ && A.throwLateFieldNI("data");
    return new A.ColorUint1(this.length, t1);
    },
    get$format() {
    return B.Format_0;
    },
    get$palette() {
    return null;
    },
    _color_uint1$_getChannel$1(ci) {
    var t1;
    if (ci < this.length) {
        t1 = this.__ColorUint1_data_A;
        t1 === $ && A.throwLateFieldNI("data");
        t1 = B.JSInt_methods._shrReceiverPositive$1(t1, 7 - ci) & 1;
    } else
        t1 = 0;
    return t1;
    },
    _color_uint1$_setChannel$2(ci, value) {
    var t1;
    if (ci >= this.length)
        return;
    ci = 7 - ci;
    t1 = this.__ColorUint1_data_A;
    t1 === $ && A.throwLateFieldNI("data");
    this.__ColorUint1_data_A = value !== 0 ? (t1 | B.JSInt_methods.$shl(1, ci)) >>> 0 : (t1 & ~(B.JSInt_methods.$shl(1, ci) & 255)) >>> 0;
    },
    $index(_, index) {
    return this._color_uint1$_getChannel$1(index);
    },
    $indexSet(_, index, value) {
    return this._color_uint1$_setChannel$2(index, A._asNum(value));
    },
    get$index() {
    return this._color_uint1$_getChannel$1(0);
    },
    get$r() {
    return this._color_uint1$_getChannel$1(0);
    },
    get$g() {
    return this._color_uint1$_getChannel$1(1);
    },
    get$b() {
    return this._color_uint1$_getChannel$1(2);
    },
    get$a() {
    return this._color_uint1$_getChannel$1(3);
    },
    get$luminance() {
    return A.getLuminance(this);
    },
    $set$1(c) {
    var _this = this,
        t1 = c.get$r(),
        t2 = c.get$g(),
        t3 = c.get$b(),
        t4 = c.get$a();
    _this._color_uint1$_setChannel$2(0, t1);
    _this._color_uint1$_setChannel$2(1, t2);
    _this._color_uint1$_setChannel$2(2, t3);
    _this._color_uint1$_setChannel$2(3, t4);
    },
    get$iterator(_) {
    return new A.ChannelIterator(this);
    },
    $eq(_, other) {
    if (other == null)
        return false;
    return type$.Color._is(other) && other.get$length(other) === this.length && other.get$hashCode(other) === A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    get$hashCode(_) {
    return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isColor: 1,
    get$length(receiver) {
    return this.length;
    }
};
A.ColorUint16.prototype = {
    clone$0() {
    return new A.ColorUint16(new Uint16Array(A._ensureNativeList(this.data)));
    },
    get$format() {
    return B.Format_4;
    },
    get$length(_) {
    return this.data.length;
    },
    get$palette() {
    return null;
    },
    $index(_, index) {
    var t1 = this.data,
        t2 = t1.length;
    if (index < t2) {
        if (!(index >= 0))
        return A.ioore(t1, index);
        t1 = t1[index];
    } else
        t1 = 0;
    return t1;
    },
    $indexSet(_, index, value) {
    var t1, t2, t3;
    A._asNum(value);
    t1 = this.data;
    t2 = t1.length;
    if (index < t2) {
        t3 = B.JSNumber_methods.toInt$0(value);
        if (!(index >= 0))
        return A.ioore(t1, index);
        t1[index] = t3;
    }
    },
    get$index() {
    var t1 = this.data,
        t2 = t1.length;
    if (t2 !== 0) {
        if (0 >= t2)
        return A.ioore(t1, 0);
        t1 = t1[0];
    } else
        t1 = 0;
    return t1;
    },
    get$r() {
    var t1 = this.data,
        t2 = t1.length;
    if (t2 !== 0) {
        if (0 >= t2)
        return A.ioore(t1, 0);
        t1 = t1[0];
    } else
        t1 = 0;
    return t1;
    },
    get$g() {
    var t1 = this.data;
    return t1.length > 1 ? t1[1] : 0;
    },
    get$b() {
    var t1 = this.data;
    return t1.length > 2 ? t1[2] : 0;
    },
    get$a() {
    var t1 = this.data;
    return t1.length > 3 ? t1[3] : 0;
    },
    get$luminance() {
    return A.getLuminance(this);
    },
    $set$1(c) {
    var t1 = c.get$r(),
        t2 = this.data,
        t3 = t2.length;
    if (t3 !== 0) {
        t1 = B.JSNumber_methods.toInt$0(t1);
        if (0 >= t3)
        return A.ioore(t2, 0);
        t2[0] = t1;
    }
    t1 = c.get$g();
    if (t3 > 1)
        t2[1] = B.JSNumber_methods.toInt$0(t1);
    t1 = c.get$b();
    if (t3 > 2)
        t2[2] = B.JSNumber_methods.toInt$0(t1);
    t1 = c.get$a();
    if (t3 > 3)
        t2[3] = B.JSNumber_methods.toInt$0(t1);
    },
    get$iterator(_) {
    return new A.ChannelIterator(this);
    },
    $eq(_, other) {
    if (other == null)
        return false;
    return type$.Color._is(other) && other.get$length(other) === this.data.length && other.get$hashCode(other) === A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    get$hashCode(_) {
    return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isColor: 1
};
A.ColorUint2.prototype = {
    clone$0() {
    var t1 = this.__ColorUint2_data_A;
    t1 === $ && A.throwLateFieldNI("data");
    return new A.ColorUint2(this.length, t1);
    },
    get$format() {
    return B.Format_1;
    },
    get$palette() {
    return null;
    },
    _color_uint2$_getChannel$1(ci) {
    var t1;
    if (ci < this.length) {
        t1 = this.__ColorUint2_data_A;
        t1 === $ && A.throwLateFieldNI("data");
        t1 = B.JSInt_methods._shrReceiverPositive$1(t1, 6 - (ci << 1 >>> 0)) & 3;
    } else
        t1 = 0;
    return t1;
    },
    _color_uint2$_setChannel$2(ci, value) {
    var mask, t1, t2;
    if (ci >= this.length)
        return;
    if (!(ci >= 0 && ci < 4))
        return A.ioore(B.List_63_207_243_252, ci);
    mask = B.List_63_207_243_252[ci];
    t1 = B.JSNumber_methods.toInt$0(value);
    t2 = this.__ColorUint2_data_A;
    t2 === $ && A.throwLateFieldNI("data");
    this.__ColorUint2_data_A = (t2 & mask | B.JSInt_methods.$shl(t1 & 3, 6 - (ci << 1 >>> 0))) >>> 0;
    },
    $index(_, index) {
    return this._color_uint2$_getChannel$1(index);
    },
    $indexSet(_, index, value) {
    return this._color_uint2$_setChannel$2(index, A._asNum(value));
    },
    get$index() {
    return this._color_uint2$_getChannel$1(0);
    },
    get$r() {
    return this._color_uint2$_getChannel$1(0);
    },
    get$g() {
    return this._color_uint2$_getChannel$1(1);
    },
    get$b() {
    return this._color_uint2$_getChannel$1(2);
    },
    get$a() {
    return this._color_uint2$_getChannel$1(3);
    },
    get$luminance() {
    return A.getLuminance(this);
    },
    $set$1(c) {
    var _this = this,
        t1 = c.get$r(),
        t2 = c.get$g(),
        t3 = c.get$b(),
        t4 = c.get$a();
    _this._color_uint2$_setChannel$2(0, t1);
    _this._color_uint2$_setChannel$2(1, t2);
    _this._color_uint2$_setChannel$2(2, t3);
    _this._color_uint2$_setChannel$2(3, t4);
    },
    get$iterator(_) {
    return new A.ChannelIterator(this);
    },
    $eq(_, other) {
    if (other == null)
        return false;
    return type$.Color._is(other) && other.get$length(other) === this.length && other.get$hashCode(other) === A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    get$hashCode(_) {
    return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isColor: 1,
    get$length(receiver) {
    return this.length;
    }
};
A.ColorUint32.prototype = {
    clone$0() {
    return new A.ColorUint32(new Uint32Array(A._ensureNativeList(this.data)));
    },
    get$format() {
    return B.Format_5;
    },
    get$length(_) {
    return this.data.length;
    },
    get$palette() {
    return null;
    },
    $index(_, index) {
    var t1 = this.data,
        t2 = t1.length;
    if (index < t2) {
        if (!(index >= 0))
        return A.ioore(t1, index);
        t1 = t1[index];
    } else
        t1 = 0;
    return t1;
    },
    $indexSet(_, index, value) {
    var t1, t2, t3;
    A._asNum(value);
    t1 = this.data;
    t2 = t1.length;
    if (index < t2) {
        t3 = B.JSNumber_methods.toInt$0(value);
        if (!(index >= 0))
        return A.ioore(t1, index);
        t1[index] = t3;
    }
    },
    get$index() {
    var t1 = this.data,
        t2 = t1.length;
    if (t2 !== 0) {
        if (0 >= t2)
        return A.ioore(t1, 0);
        t1 = t1[0];
    } else
        t1 = 0;
    return t1;
    },
    get$r() {
    var t1 = this.data,
        t2 = t1.length;
    if (t2 !== 0) {
        if (0 >= t2)
        return A.ioore(t1, 0);
        t1 = t1[0];
    } else
        t1 = 0;
    return t1;
    },
    get$g() {
    var t1 = this.data;
    return t1.length > 1 ? t1[1] : 0;
    },
    get$b() {
    var t1 = this.data;
    return t1.length > 2 ? t1[2] : 0;
    },
    get$a() {
    var t1 = this.data;
    return t1.length > 3 ? t1[3] : 0;
    },
    get$luminance() {
    return A.getLuminance(this);
    },
    $set$1(c) {
    var t1 = c.get$r(),
        t2 = this.data,
        t3 = t2.length;
    if (t3 !== 0) {
        t1 = B.JSNumber_methods.toInt$0(t1);
        if (0 >= t3)
        return A.ioore(t2, 0);
        t2[0] = t1;
    }
    t1 = c.get$g();
    if (t3 > 1)
        t2[1] = B.JSNumber_methods.toInt$0(t1);
    t1 = c.get$b();
    if (t3 > 2)
        t2[2] = B.JSNumber_methods.toInt$0(t1);
    t1 = c.get$a();
    if (t3 > 3)
        t2[3] = B.JSNumber_methods.toInt$0(t1);
    },
    get$iterator(_) {
    return new A.ChannelIterator(this);
    },
    $eq(_, other) {
    if (other == null)
        return false;
    return type$.Color._is(other) && other.get$length(other) === this.data.length && other.get$hashCode(other) === A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    get$hashCode(_) {
    return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isColor: 1
};
A.ColorUint4.prototype = {
    clone$0() {
    return new A.ColorUint4(this.length, new Uint8Array(A._ensureNativeList(this.data)));
    },
    get$format() {
    return B.Format_2;
    },
    get$palette() {
    return null;
    },
    _color_uint4$_getChannel$1(ci) {
    var t1, t2;
    if (ci < 0 || ci >= this.length)
        t1 = 0;
    else {
        t1 = this.data;
        t2 = t1.length;
        if (ci < 2) {
        if (0 >= t2)
            return A.ioore(t1, 0);
        t1 = B.JSInt_methods._shrReceiverPositive$1(t1[0], 4 - (ci << 2 >>> 0)) & 15;
        } else {
        if (1 >= t2)
            return A.ioore(t1, 1);
        t1 = B.JSInt_methods._shrReceiverPositive$1(t1[1], 4 - ((ci & 1) << 2)) & 15;
        }
    }
    return t1;
    },
    _color_uint4$_setChannel$2(ci, value) {
    var vi, i, t1;
    if (ci >= this.length)
        return;
    vi = B.JSInt_methods.clamp$2(B.JSNumber_methods.toInt$0(value), 0, 15);
    if (ci > 1) {
        ci &= 1;
        i = 1;
    } else
        i = 0;
    if (ci === 0) {
        t1 = this.data;
        if (!(i < t1.length))
        return A.ioore(t1, i);
        t1[i] = (t1[i] & 15 | vi << 4) >>> 0;
    } else if (ci === 1) {
        t1 = this.data;
        if (!(i < t1.length))
        return A.ioore(t1, i);
        t1[i] = (t1[i] & 240 | vi) >>> 0;
    }
    },
    $index(_, index) {
    return this._color_uint4$_getChannel$1(index);
    },
    $indexSet(_, index, value) {
    return this._color_uint4$_setChannel$2(index, A._asNum(value));
    },
    get$index() {
    return this._color_uint4$_getChannel$1(0);
    },
    get$r() {
    return this._color_uint4$_getChannel$1(0);
    },
    get$g() {
    return this._color_uint4$_getChannel$1(1);
    },
    get$b() {
    return this._color_uint4$_getChannel$1(2);
    },
    get$a() {
    return this._color_uint4$_getChannel$1(3);
    },
    get$luminance() {
    return A.getLuminance(this);
    },
    $set$1(c) {
    var _this = this,
        t1 = c.get$r(),
        t2 = c.get$g(),
        t3 = c.get$b(),
        t4 = c.get$a();
    _this._color_uint4$_setChannel$2(0, t1);
    _this._color_uint4$_setChannel$2(1, t2);
    _this._color_uint4$_setChannel$2(2, t3);
    _this._color_uint4$_setChannel$2(3, t4);
    },
    get$iterator(_) {
    return new A.ChannelIterator(this);
    },
    $eq(_, other) {
    if (other == null)
        return false;
    return type$.Color._is(other) && other.get$length(other) === this.length && other.get$hashCode(other) === A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    get$hashCode(_) {
    return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isColor: 1,
    get$length(receiver) {
    return this.length;
    }
};
A.ColorUint8.prototype = {
    clone$0() {
    return new A.ColorUint8(new Uint8Array(A._ensureNativeList(this.data)));
    },
    get$format() {
    return B.Format_3;
    },
    get$length(_) {
    return this.data.length;
    },
    get$palette() {
    return null;
    },
    $index(_, index) {
    var t1 = this.data,
        t2 = t1.length;
    if (index < t2) {
        if (!(index >= 0))
        return A.ioore(t1, index);
        t1 = t1[index];
    } else
        t1 = 0;
    return t1;
    },
    $indexSet(_, index, value) {
    var t1, t2, t3;
    A._asNum(value);
    t1 = this.data;
    t2 = t1.length;
    if (index < t2) {
        t3 = B.JSNumber_methods.toInt$0(value);
        if (!(index >= 0))
        return A.ioore(t1, index);
        t1[index] = t3;
    }
    },
    get$index() {
    var t1 = this.data,
        t2 = t1.length;
    if (t2 !== 0) {
        if (0 >= t2)
        return A.ioore(t1, 0);
        t1 = t1[0];
    } else
        t1 = 0;
    return t1;
    },
    get$r() {
    var t1 = this.data,
        t2 = t1.length;
    if (t2 !== 0) {
        if (0 >= t2)
        return A.ioore(t1, 0);
        t1 = t1[0];
    } else
        t1 = 0;
    return t1;
    },
    get$g() {
    var t1 = this.data;
    return t1.length > 1 ? t1[1] : 0;
    },
    get$b() {
    var t1 = this.data;
    return t1.length > 2 ? t1[2] : 0;
    },
    get$a() {
    var t1 = this.data;
    return t1.length > 3 ? t1[3] : 255;
    },
    get$luminance() {
    return A.getLuminance(this);
    },
    $set$1(c) {
    var t1 = c.get$r(),
        t2 = this.data,
        t3 = t2.length;
    if (t3 !== 0) {
        t1 = B.JSNumber_methods.toInt$0(t1);
        if (0 >= t3)
        return A.ioore(t2, 0);
        t2[0] = t1;
    }
    t1 = c.get$g();
    if (t3 > 1)
        t2[1] = B.JSNumber_methods.toInt$0(t1);
    t1 = c.get$b();
    if (t3 > 2)
        t2[2] = B.JSNumber_methods.toInt$0(t1);
    t1 = c.get$a();
    if (t3 > 3)
        t2[3] = B.JSNumber_methods.toInt$0(t1);
    },
    get$iterator(_) {
    return new A.ChannelIterator(this);
    },
    $eq(_, other) {
    if (other == null)
        return false;
    return type$.Color._is(other) && other.get$length(other) === this.data.length && other.get$hashCode(other) === A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    get$hashCode(_) {
    return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isColor: 1
};
A.ColorRgb8.prototype = {};
A.ColorRgba8.prototype = {};
A.Format.prototype = {
    _enumToString$0() {
    return "Format." + this._name;
    }
};
A.BlendMode.prototype = {
    _enumToString$0() {
    return "BlendMode." + this._name;
    }
};
A.ExifData.prototype = {
    getTagName$1(tag) {
    var t1 = $.$get$exifImageTags();
    if (!t1.containsKey$1(tag))
        return "<unknown>";
    return t1.$index(0, tag).name;
    },
    toString$0(_) {
    var t1, t2, t3, t4, t5, t6, t7, t8, directory, t9, value, t10, subDirectory, t11, _this = this;
    for (t1 = _this.directories, t2 = A.LinkedHashMapKeyIterator$(t1, t1._modifications, A._instanceType(t1)._precomputed1), t3 = type$.int, t4 = type$.IfdValue, t5 = type$.String, t6 = type$.IfdDirectory, t7 = ""; t2.moveNext$0();) {
        t8 = t2.__js_helper$_current;
        t7 += t8 + "\n";
        directory = t1.$index(0, t8);
        for (t8 = directory.data, t9 = new A.LinkedHashMapKeyIterator(t8, t8._modifications, A._instanceType(t8)._eval$1("LinkedHashMapKeyIterator<1>")), t9._cell = t8._first; t9.moveNext$0();) {
        t8 = t9.__js_helper$_current;
        value = directory.$index(0, t8);
        t7 = value == null ? t7 + ("\t" + _this.getTagName$1(t8) + "\n") : t7 + ("\t" + _this.getTagName$1(t8) + ": " + value.toString$0(0) + "\n");
        }
        for (t8 = directory.sub.directories, t9 = new A.LinkedHashMapKeyIterator(t8, t8._modifications, A._instanceType(t8)._eval$1("LinkedHashMapKeyIterator<1>")), t9._cell = t8._first; t9.moveNext$0();) {
        t10 = t9.__js_helper$_current;
        t7 += t10 + "\n";
        if (!t8.containsKey$1(t10))
            t8.$indexSet(0, t10, new A.IfdDirectory(A.LinkedHashMap_LinkedHashMap$_empty(t3, t4), new A.IfdContainer(A.LinkedHashMap_LinkedHashMap$_empty(t5, t6))));
        subDirectory = t8.$index(0, t10);
        for (t10 = subDirectory.data, t11 = new A.LinkedHashMapKeyIterator(t10, t10._modifications, A._instanceType(t10)._eval$1("LinkedHashMapKeyIterator<1>")), t11._cell = t10._first; t11.moveNext$0();) {
            t10 = t11.__js_helper$_current;
            value = subDirectory.$index(0, t10);
            t7 = value == null ? t7 + ("\t" + _this.getTagName$1(t10) + "\n") : t7 + ("\t" + _this.getTagName$1(t10) + ": " + value.toString$0(0) + "\n");
        }
        }
    }
    return t7.charCodeAt(0) == 0 ? t7 : t7;
    },
    read$1(block) {
    var blockOffset, endian, ifdOffset, t1, t2, t3, t4, t5, t6, index, directory, numEntries, dir, i, t7, _i, entry, t8, t9, t10, t11, t12, t13, t14,
        _s39_ = "Length must be a non-negative integer: ",
        saveEndian = block.bigEndian;
    block.bigEndian = true;
    blockOffset = block.offset;
    endian = block.readUint16$0();
    if (endian === 18761) {
        block.bigEndian = false;
        if (block.readUint16$0() !== 42) {
        block.bigEndian = saveEndian;
        return false;
        }
    } else if (endian === 19789) {
        block.bigEndian = true;
        if (block.readUint16$0() !== 42) {
        block.bigEndian = saveEndian;
        return false;
        }
    } else
        return false;
    ifdOffset = block.readUint32$0();
    for (t1 = this.directories, t2 = type$.JSArray__ExifEntry, t3 = type$.int, t4 = type$.IfdValue, t5 = type$.String, t6 = type$.IfdDirectory, index = 0; ifdOffset > 0;) {
        block.offset = blockOffset + ifdOffset;
        directory = new A.IfdDirectory(A.LinkedHashMap_LinkedHashMap$_empty(t3, t4), new A.IfdContainer(A.LinkedHashMap_LinkedHashMap$_empty(t5, t6)));
        numEntries = block.readUint16$0();
        dir = A._setArrayType(new Array(numEntries), t2);
        for (i = 0; i < numEntries; ++i)
        dir[i] = this._readEntry$2(block, blockOffset);
        for (t7 = dir.length, _i = 0; _i < dir.length; dir.length === t7 || (0, A.throwConcurrentModificationError)(dir), ++_i) {
        entry = dir[_i];
        t8 = entry.value;
        if (t8 != null)
            directory.$indexSet(0, entry.tag, t8);
        }
        t1.$indexSet(0, "ifd" + index, directory);
        ++index;
        ifdOffset = block.readUint32$0();
    }
    for (t1 = t1.get$values(), t7 = A._instanceType(t1), t7 = t7._eval$1("@<1>")._bind$1(t7._rest[1]), t1 = new A.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, t7._eval$1("MappedIterator<1,2>")), t7 = t7._rest[1]; t1.moveNext$0();) {
        t8 = t1.__internal$_current;
        if (t8 == null)
        t8 = t7._as(t8);
        for (t9 = B.Map_ecXR3.get$keys(), t9 = t9.get$iterator(t9), t10 = t8.data, t11 = t8.sub.directories; t9.moveNext$0();) {
        t12 = t9.get$current();
        if (t10.containsKey$1(t12)) {
            block.offset = blockOffset + t8.$index(0, t12).toInt$0(0);
            directory = new A.IfdDirectory(A.LinkedHashMap_LinkedHashMap$_empty(t3, t4), new A.IfdContainer(A.LinkedHashMap_LinkedHashMap$_empty(t5, t6)));
            numEntries = block.readUint16$0();
            dir = A._setArrayType(new Array(numEntries), t2);
            for (i = 0; i < numEntries; ++i)
            dir[i] = this._readEntry$2(block, blockOffset);
            for (t13 = dir.length, _i = 0; _i < dir.length; dir.length === t13 || (0, A.throwConcurrentModificationError)(dir), ++_i) {
            entry = dir[_i];
            t14 = entry.value;
            if (t14 != null)
                directory.$indexSet(0, entry.tag, t14);
            }
            t12 = B.Map_ecXR3.$index(0, t12);
            t12.toString;
            t11.$indexSet(0, t12, directory);
        }
        }
    }
    block.bigEndian = saveEndian;
    return false;
    },
    _readEntry$2(block, blockOffset) {
    var f, size, t1, data,
        tag = block.readUint16$0(),
        format = block.readUint16$0(),
        count = block.readUint32$0(),
        entry = new A._ExifEntry(tag, null);
    if (format > 13)
        return entry;
    if (!(format < 13))
        return A.ioore(B.List_XtE, format);
    f = B.List_XtE[format];
    size = count * B.List_mC8[format];
    t1 = block.offset;
    if ((size > 4 ? block.offset = block.readUint32$0() + blockOffset : t1) + size > block.end)
        return entry;
    data = block.readBytes$1(size);
    switch (f.index) {
        case 0:
        break;
        case 6:
        entry.value = new A.IfdValueSByte(new Int8Array(A._ensureNativeList(A.NativeInt8List_NativeInt8List$view(data.toUint8List$0().buffer, 0, count))));
        break;
        case 1:
        entry.value = new A.IfdByteValue(new Uint8Array(A._ensureNativeList(data.readBytes$1(count).toUint8List$0())));
        break;
        case 7:
        entry.value = new A.IfdValueUndefined(new Uint8Array(A._ensureNativeList(data.readBytes$1(count).toUint8List$0())));
        break;
        case 2:
        entry.value = new A.IfdValueAscii(count === 0 ? "" : data.readString$1(count - 1));
        break;
        case 3:
        entry.value = A.IfdValueShort$data(data, count);
        break;
        case 4:
        entry.value = A.IfdValueLong$data(data, count);
        break;
        case 5:
        entry.value = A.IfdValueRational$data(data, count);
        break;
        case 10:
        entry.value = A.IfdValueSRational$data(data, count);
        break;
        case 8:
        entry.value = A.IfdValueSShort$data(data, count);
        break;
        case 9:
        entry.value = A.IfdValueSLong$data(data, count);
        break;
        case 11:
        entry.value = A.IfdValueSingle$data(data, count);
        break;
        case 12:
        entry.value = A.IfdValueDouble$data(data, count);
        break;
    }
    block.offset = t1 + 4;
    return entry;
    }
};
A._ExifEntry.prototype = {};
A.ExifTag.prototype = {};
A.IfdContainer.prototype = {
    IfdContainer$from$1(other) {
    other.directories.forEach$1(0, new A.IfdContainer$from_closure(this));
    },
    $index(_, ifdName) {
    var t1 = this.directories;
    if (!t1.containsKey$1(ifdName))
        t1.$indexSet(0, ifdName, new A.IfdDirectory(A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.IfdValue), new A.IfdContainer(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.IfdDirectory))));
    t1 = t1.$index(0, ifdName);
    t1.toString;
    return t1;
    }
};
A.IfdContainer$from_closure.prototype = {
    call$2(key, value) {
    var t1, t2;
    A._asString(key);
    t1 = type$.IfdDirectory;
    t2 = new A.IfdDirectory(A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.IfdValue), new A.IfdContainer(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, t1)));
    t2.copy$1(t1._as(value));
    this.$this.directories.$indexSet(0, key, t2);
    return t2;
    },
    $signature: 38
};
A.IfdDirectory.prototype = {
    copy$1(other) {
    other.data.forEach$1(0, new A.IfdDirectory_copy_closure(this));
    },
    $index(_, tag) {
    var t1 = this.data.$index(0, tag);
    return t1;
    },
    $indexSet(_, tag, value) {
    this.data.$indexSet(0, tag, value);
    }
};
A.IfdDirectory_copy_closure.prototype = {
    call$2(tag, value) {
    var t1;
    A._asInt(tag);
    t1 = type$.IfdValue._as(value).clone$0();
    this.$this.data.$indexSet(0, tag, t1);
    return t1;
    },
    $signature: 26
};
A.IfdValueType.prototype = {
    _enumToString$0() {
    return "IfdValueType." + this._name;
    }
};
A.IfdValue.prototype = {
    toInt$1(_, index) {
    return 0;
    },
    toInt$0($receiver) {
    return this.toInt$1($receiver, 0);
    },
    toData$0() {
    return new Uint8Array(0);
    },
    toString$0(_) {
    return "";
    },
    $eq(_, other) {
    var _this = this;
    if (other == null)
        return false;
    return other instanceof A.IfdValue && _this.get$type(_this) === other.get$type(other) && _this.get$length(_this) === other.get$length(other) && _this.get$hashCode(_this) === other.get$hashCode(other);
    },
    get$hashCode(_) {
    return 0;
    }
};
A.IfdByteValue.prototype = {
    clone$0() {
    return new A.IfdByteValue(new Uint8Array(A._ensureNativeList(this.value)));
    },
    get$type(_) {
    return B.IfdValueType_1;
    },
    get$length(_) {
    return this.value.length;
    },
    $eq(_, other) {
    var t1, t2;
    if (other == null)
        return false;
    if (other instanceof A.IfdByteValue) {
        t1 = this.value;
        t2 = other.value;
        t1 = t1.length === t2.length && A.Object_hashAll(t1) === A.Object_hashAll(t2);
    } else
        t1 = false;
    return t1;
    },
    get$hashCode(_) {
    return A.Object_hashAll(this.value);
    },
    toInt$1(_, index) {
    var t1 = this.value;
    if (!(index < t1.length))
        return A.ioore(t1, index);
    return t1[index];
    },
    toInt$0($receiver) {
    return this.toInt$1($receiver, 0);
    },
    toData$0() {
    return this.value;
    },
    toString$0(_) {
    var t1 = this.value,
        t2 = t1.length;
    if (t2 === 1) {
        if (0 >= t2)
        return A.ioore(t1, 0);
        t1 = "" + t1[0];
    } else
        t1 = A.S(t1);
    return t1;
    }
};
A.IfdValueAscii.prototype = {
    clone$0() {
    return new A.IfdValueAscii(this.value);
    },
    get$type(_) {
    return B.IfdValueType_2;
    },
    get$length(_) {
    return this.value.length + 1;
    },
    $eq(_, other) {
    var t1, t2;
    if (other == null)
        return false;
    if (other instanceof A.IfdValueAscii) {
        t1 = this.value;
        t2 = other.value;
        t1 = t1.length + 1 === t2.length + 1 && B.JSString_methods.get$hashCode(t1) === B.JSString_methods.get$hashCode(t2);
    } else
        t1 = false;
    return t1;
    },
    get$hashCode(_) {
    return B.JSString_methods.get$hashCode(this.value);
    },
    toData$0() {
    return new Uint8Array(A._ensureNativeList(new A.CodeUnits(this.value)));
    },
    toString$0(_) {
    return this.value;
    }
};
A.IfdValueShort.prototype = {
    IfdValueShort$data$2(data, count) {
    var t1, i, t2;
    for (t1 = this.value, i = 0; i < count; ++i) {
        t2 = data.readUint16$0();
        if (!(i < t1.length))
        return A.ioore(t1, i);
        t1[i] = t2;
    }
    },
    clone$0() {
    return new A.IfdValueShort(new Uint16Array(A._ensureNativeList(this.value)));
    },
    get$type(_) {
    return B.IfdValueType_3;
    },
    get$length(_) {
    return this.value.length;
    },
    $eq(_, other) {
    var t1, t2, t3;
    if (other == null)
        return false;
    if (other instanceof A.IfdValueShort) {
        t1 = this.value;
        t2 = t1.length;
        t3 = other.value;
        t1 = t2 === t3.length && A.Object_hashAll(t1) === A.Object_hashAll(t3);
    } else
        t1 = false;
    return t1;
    },
    get$hashCode(_) {
    return A.Object_hashAll(this.value);
    },
    toInt$1(_, index) {
    var t1 = this.value;
    if (!(index < t1.length))
        return A.ioore(t1, index);
    return t1[index];
    },
    toInt$0($receiver) {
    return this.toInt$1($receiver, 0);
    },
    toData$0() {
    return A.NativeUint8List_NativeUint8List$view(this.value.buffer, 0, null);
    },
    toString$0(_) {
    var t1 = this.value,
        t2 = t1.length;
    if (t2 === 1) {
        if (0 >= t2)
        return A.ioore(t1, 0);
        t1 = "" + t1[0];
    } else
        t1 = A.S(t1);
    return t1;
    }
};
A.IfdValueLong.prototype = {
    IfdValueLong$data$2(data, count) {
    var t1, i, t2;
    for (t1 = this.value, i = 0; i < count; ++i) {
        t2 = data.readUint32$0();
        if (!(i < t1.length))
        return A.ioore(t1, i);
        t1[i] = t2;
    }
    },
    clone$0() {
    return new A.IfdValueLong(new Uint32Array(A._ensureNativeList(this.value)));
    },
    get$type(_) {
    return B.IfdValueType_4;
    },
    get$length(_) {
    return this.value.length;
    },
    $eq(_, other) {
    var t1, t2, t3;
    if (other == null)
        return false;
    if (other instanceof A.IfdValueLong) {
        t1 = this.value;
        t2 = t1.length;
        t3 = other.value;
        t1 = t2 === t3.length && A.Object_hashAll(t1) === A.Object_hashAll(t3);
    } else
        t1 = false;
    return t1;
    },
    get$hashCode(_) {
    return A.Object_hashAll(this.value);
    },
    toInt$1(_, index) {
    var t1 = this.value;
    if (!(index < t1.length))
        return A.ioore(t1, index);
    return t1[index];
    },
    toInt$0($receiver) {
    return this.toInt$1($receiver, 0);
    },
    toData$0() {
    return A.NativeUint8List_NativeUint8List$view(this.value.buffer, 0, null);
    },
    toString$0(_) {
    var t1 = this.value,
        t2 = t1.length;
    if (t2 === 1) {
        if (0 >= t2)
        return A.ioore(t1, 0);
        t1 = "" + t1[0];
    } else
        t1 = A.S(t1);
    return t1;
    }
};
A.IfdValueRational.prototype = {
    clone$0() {
    return new A.IfdValueRational(A.List_List$from(this.value, type$.Rational));
    },
    get$type(_) {
    return B.IfdValueType_5;
    },
    get$length(_) {
    return this.value.length;
    },
    toInt$1(_, index) {
    var t1 = this.value;
    if (!(index < t1.length))
        return A.ioore(t1, index);
    return J.toInt$0$n(t1[index]);
    },
    toInt$0($receiver) {
    return this.toInt$1($receiver, 0);
    },
    $eq(_, other) {
    var t1, t2, t3;
    if (other == null)
        return false;
    if (other instanceof A.IfdValueRational) {
        t1 = this.value;
        t2 = t1.length;
        t3 = other.value;
        t1 = t2 === t3.length && A.Object_hashAll(t1) === A.Object_hashAll(t3);
    } else
        t1 = false;
    return t1;
    },
    get$hashCode(_) {
    return A.Object_hashAll(this.value);
    },
    toString$0(_) {
    var t1 = this.value,
        t2 = t1.length;
    if (t2 === 1) {
        if (0 >= t2)
        return A.ioore(t1, 0);
        t1 = A.S(t1[0]);
    } else
        t1 = A.S(t1);
    return t1;
    }
};
A.IfdValueSByte.prototype = {
    clone$0() {
    return new A.IfdValueSByte(new Int8Array(A._ensureNativeList(this.value)));
    },
    get$type(_) {
    return B.IfdValueType_6;
    },
    get$length(_) {
    return this.value.length;
    },
    $eq(_, other) {
    var t1, t2;
    if (other == null)
        return false;
    if (other instanceof A.IfdValueSByte) {
        t1 = this.value;
        t2 = other.value;
        t1 = t1.length === t2.length && A.Object_hashAll(t1) === A.Object_hashAll(t2);
    } else
        t1 = false;
    return t1;
    },
    get$hashCode(_) {
    return A.Object_hashAll(this.value);
    },
    toInt$1(_, index) {
    var t1 = this.value;
    if (!(index < t1.length))
        return A.ioore(t1, index);
    return t1[index];
    },
    toInt$0($receiver) {
    return this.toInt$1($receiver, 0);
    },
    toData$0() {
    return A.NativeUint8List_NativeUint8List$view(this.value.buffer, 0, null);
    },
    toString$0(_) {
    var t1 = this.value,
        t2 = t1.length;
    if (t2 === 1) {
        if (0 >= t2)
        return A.ioore(t1, 0);
        t1 = "" + t1[0];
    } else
        t1 = A.S(t1);
    return t1;
    }
};
A.IfdValueSShort.prototype = {
    IfdValueSShort$data$2(data, count) {
    var t1, i, t2;
    for (t1 = this.value, i = 0; i < count; ++i) {
        t2 = data.readUint16$0();
        $.$get$__uint16()[0] = t2;
        t2 = $.$get$__uint16ToInt16();
        if (0 >= t2.length)
        return A.ioore(t2, 0);
        t2 = t2[0];
        if (!(i < t1.length))
        return A.ioore(t1, i);
        t1[i] = t2;
    }
    },
    clone$0() {
    return new A.IfdValueSShort(new Int16Array(A._ensureNativeList(this.value)));
    },
    get$type(_) {
    return B.IfdValueType_8;
    },
    get$length(_) {
    return this.value.length;
    },
    $eq(_, other) {
    var t1, t2, t3;
    if (other == null)
        return false;
    if (other instanceof A.IfdValueSShort) {
        t1 = this.value;
        t2 = t1.length;
        t3 = other.value;
        t1 = t2 === t3.length && A.Object_hashAll(t1) === A.Object_hashAll(t3);
    } else
        t1 = false;
    return t1;
    },
    get$hashCode(_) {
    return A.Object_hashAll(this.value);
    },
    toInt$1(_, index) {
    var t1 = this.value;
    if (!(index < t1.length))
        return A.ioore(t1, index);
    return t1[index];
    },
    toInt$0($receiver) {
    return this.toInt$1($receiver, 0);
    },
    toData$0() {
    return A.NativeUint8List_NativeUint8List$view(this.value.buffer, 0, null);
    },
    toString$0(_) {
    var t1 = this.value,
        t2 = t1.length;
    if (t2 === 1) {
        if (0 >= t2)
        return A.ioore(t1, 0);
        t1 = "" + t1[0];
    } else
        t1 = A.S(t1);
    return t1;
    }
};
A.IfdValueSLong.prototype = {
    IfdValueSLong$data$2(data, count) {
    var t1, i, t2;
    for (t1 = this.value, i = 0; i < count; ++i) {
        t2 = data.readUint32$0();
        $.$get$__uint32()[0] = t2;
        t2 = $.$get$__uint32ToInt32();
        if (0 >= t2.length)
        return A.ioore(t2, 0);
        t2 = t2[0];
        if (!(i < t1.length))
        return A.ioore(t1, i);
        t1[i] = t2;
    }
    },
    clone$0() {
    return new A.IfdValueSLong(new Int32Array(A._ensureNativeList(this.value)));
    },
    get$type(_) {
    return B.IfdValueType_9;
    },
    get$length(_) {
    return this.value.length;
    },
    $eq(_, other) {
    var t1, t2, t3;
    if (other == null)
        return false;
    if (other instanceof A.IfdValueSLong) {
        t1 = this.value;
        t2 = t1.length;
        t3 = other.value;
        t1 = t2 === t3.length && A.Object_hashAll(t1) === A.Object_hashAll(t3);
    } else
        t1 = false;
    return t1;
    },
    get$hashCode(_) {
    return A.Object_hashAll(this.value);
    },
    toInt$1(_, index) {
    var t1 = this.value;
    if (!(index < t1.length))
        return A.ioore(t1, index);
    return t1[index];
    },
    toInt$0($receiver) {
    return this.toInt$1($receiver, 0);
    },
    toData$0() {
    return A.NativeUint8List_NativeUint8List$view(this.value.buffer, 0, null);
    },
    toString$0(_) {
    var t1 = this.value,
        t2 = t1.length;
    if (t2 === 1) {
        if (0 >= t2)
        return A.ioore(t1, 0);
        t1 = "" + t1[0];
    } else
        t1 = A.S(t1);
    return t1;
    }
};
A.IfdValueSRational.prototype = {
    clone$0() {
    return new A.IfdValueSRational(A.List_List$from(this.value, type$.Rational));
    },
    get$type(_) {
    return B.IfdValueType_10;
    },
    get$length(_) {
    return this.value.length;
    },
    $eq(_, other) {
    var t1, t2, t3;
    if (other == null)
        return false;
    if (other instanceof A.IfdValueSRational) {
        t1 = this.value;
        t2 = t1.length;
        t3 = other.value;
        t1 = t2 === t3.length && A.Object_hashAll(t1) === A.Object_hashAll(t3);
    } else
        t1 = false;
    return t1;
    },
    get$hashCode(_) {
    return A.Object_hashAll(this.value);
    },
    toInt$1(_, index) {
    var t1 = this.value;
    if (!(index < t1.length))
        return A.ioore(t1, index);
    return J.toInt$0$n(t1[index]);
    },
    toInt$0($receiver) {
    return this.toInt$1($receiver, 0);
    },
    toString$0(_) {
    var t1 = this.value,
        t2 = t1.length;
    if (t2 === 1) {
        if (0 >= t2)
        return A.ioore(t1, 0);
        t1 = A.S(t1[0]);
    } else
        t1 = A.S(t1);
    return t1;
    }
};
A.IfdValueSingle.prototype = {
    IfdValueSingle$data$2(data, count) {
    var t1, i, t2;
    for (t1 = this.value, i = 0; i < count; ++i) {
        t2 = data.readUint32$0();
        $.$get$__uint32()[0] = t2;
        t2 = $.$get$__uint32ToFloat32();
        if (0 >= t2.length)
        return A.ioore(t2, 0);
        t2 = t2[0];
        if (!(i < t1.length))
        return A.ioore(t1, i);
        t1[i] = t2;
    }
    },
    clone$0() {
    return new A.IfdValueSingle(new Float32Array(A._ensureNativeList(this.value)));
    },
    get$type(_) {
    return B.IfdValueType_11;
    },
    get$length(_) {
    return this.value.length;
    },
    $eq(_, other) {
    var t1, t2, t3;
    if (other == null)
        return false;
    if (other instanceof A.IfdValueSingle) {
        t1 = this.value;
        t2 = t1.length;
        t3 = other.value;
        t1 = t2 === t3.length && A.Object_hashAll(t1) === A.Object_hashAll(t3);
    } else
        t1 = false;
    return t1;
    },
    get$hashCode(_) {
    return A.Object_hashAll(this.value);
    },
    toData$0() {
    return A.NativeUint8List_NativeUint8List$view(this.value.buffer, 0, null);
    },
    toString$0(_) {
    var t1 = this.value,
        t2 = t1.length;
    if (t2 === 1) {
        if (0 >= t2)
        return A.ioore(t1, 0);
        t1 = A.S(t1[0]);
    } else
        t1 = A.S(t1);
    return t1;
    }
};
A.IfdValueDouble.prototype = {
    IfdValueDouble$data$2(data, count) {
    var t1, i, t2;
    for (t1 = this.value, i = 0; i < count; ++i) {
        t2 = data.readUint32$0();
        $.$get$__uint32()[0] = t2;
        t2 = $.$get$__uint32ToFloat32();
        if (0 >= t2.length)
        return A.ioore(t2, 0);
        t2 = t2[0];
        if (!(i < t1.length))
        return A.ioore(t1, i);
        t1[i] = t2;
    }
    },
    clone$0() {
    return new A.IfdValueDouble(new Float64Array(A._ensureNativeList(this.value)));
    },
    get$type(_) {
    return B.IfdValueType_12;
    },
    get$length(_) {
    return this.value.length;
    },
    $eq(_, other) {
    var t1, t2, t3;
    if (other == null)
        return false;
    if (other instanceof A.IfdValueDouble) {
        t1 = this.value;
        t2 = t1.length;
        t3 = other.value;
        t1 = t2 === t3.length && A.Object_hashAll(t1) === A.Object_hashAll(t3);
    } else
        t1 = false;
    return t1;
    },
    get$hashCode(_) {
    return A.Object_hashAll(this.value);
    },
    toData$0() {
    return A.NativeUint8List_NativeUint8List$view(this.value.buffer, 0, null);
    },
    toString$0(_) {
    var t1 = this.value,
        t2 = t1.length;
    if (t2 === 1) {
        if (0 >= t2)
        return A.ioore(t1, 0);
        t1 = A.S(t1[0]);
    } else
        t1 = A.S(t1);
    return t1;
    }
};
A.IfdValueUndefined.prototype = {
    clone$0() {
    return new A.IfdValueUndefined(new Uint8Array(A._ensureNativeList(this.value)));
    },
    get$type(_) {
    return B.IfdValueType_7;
    },
    get$length(_) {
    return this.value.length;
    },
    toData$0() {
    return this.value;
    },
    $eq(_, other) {
    var t1, t2;
    if (other == null)
        return false;
    if (other instanceof A.IfdValueUndefined) {
        t1 = this.value;
        t2 = other.value;
        t1 = t1.length === t2.length && A.Object_hashAll(t1) === A.Object_hashAll(t2);
    } else
        t1 = false;
    return t1;
    },
    get$hashCode(_) {
    return A.Object_hashAll(this.value);
    },
    toString$0(_) {
    return "<data>";
    }
};
A.BmpCompression.prototype = {
    _enumToString$0() {
    return "BmpCompression." + this._name;
    }
};
A.BmpFileHeader.prototype = {};
A.BmpInfo.prototype = {
    BmpInfo$2$fileHeader(p, fileHeader) {
    var t3, t4, redDepth, t5, greenDepth, blueDepth, alphaDepth, _this = this,
        t1 = _this.headerSize,
        t2 = t1 <= 40;
    if (t2) {
        t3 = _this.compression;
        t3 = t3 === B.BmpCompression_3 || t3 === B.BmpCompression_6;
    } else
        t3 = true;
    if (t3) {
        t3 = _this.__BmpInfo_redMask_A = p.readUint32$0();
        t4 = A.countTrailingZeroBits(t3);
        _this.__BmpInfo__redShift_A = t4;
        redDepth = B.JSInt_methods._shrReceiverPositive$1(t3, t4);
        t3 = redDepth > 0;
        _this.__BmpInfo__redScale_A = t3 ? 255 / redDepth : 0;
        t4 = _this.__BmpInfo_greenMask_A = p.readUint32$0();
        t5 = A.countTrailingZeroBits(t4);
        _this.__BmpInfo__greenShift_A = t5;
        greenDepth = B.JSInt_methods._shrReceiverPositive$1(t4, t5);
        _this.__BmpInfo__greenScale_A = t3 ? 255 / greenDepth : 0;
        t4 = _this.__BmpInfo_blueMask_A = p.readUint32$0();
        t5 = A.countTrailingZeroBits(t4);
        _this.__BmpInfo__blueShift_A = t5;
        blueDepth = B.JSInt_methods._shrReceiverPositive$1(t4, t5);
        _this.__BmpInfo__blueScale_A = t3 ? 255 / blueDepth : 0;
        if (!t2 || _this.compression === B.BmpCompression_6) {
        t2 = _this.__BmpInfo_alphaMask_A = p.readUint32$0();
        t3 = A.countTrailingZeroBits(t2);
        _this.__BmpInfo__alphaShift_A = t3;
        alphaDepth = B.JSInt_methods._shrReceiverPositive$1(t2, t3);
        _this.__BmpInfo__alphaScale_A = alphaDepth > 0 ? 255 / alphaDepth : 0;
        } else if (_this.bitsPerPixel === 16) {
        _this.__BmpInfo_alphaMask_A = 4278190080;
        _this.__BmpInfo__alphaShift_A = 24;
        _this.__BmpInfo__alphaScale_A = 1;
        } else {
        _this.__BmpInfo_alphaMask_A = 4278190080;
        _this.__BmpInfo__alphaShift_A = 24;
        _this.__BmpInfo__alphaScale_A = 1;
        }
    } else if (_this.bitsPerPixel === 16) {
        _this.__BmpInfo_redMask_A = 31744;
        _this.__BmpInfo__redShift_A = 10;
        _this.__BmpInfo__redScale_A = 8.225806451612904;
        _this.__BmpInfo_greenMask_A = 992;
        _this.__BmpInfo__greenShift_A = 5;
        _this.__BmpInfo__greenScale_A = 8.225806451612904;
        _this.__BmpInfo_blueMask_A = 31;
        _this.__BmpInfo__blueShift_A = 0;
        _this.__BmpInfo__blueScale_A = 8.225806451612904;
        _this.__BmpInfo__alphaScale_A = _this.__BmpInfo__alphaShift_A = _this.__BmpInfo_alphaMask_A = 0;
    } else {
        _this.__BmpInfo_redMask_A = 16711680;
        _this.__BmpInfo__redShift_A = 16;
        _this.__BmpInfo__redScale_A = 1;
        _this.__BmpInfo_greenMask_A = 65280;
        _this.__BmpInfo__greenShift_A = 8;
        _this.__BmpInfo__greenScale_A = 1;
        _this.__BmpInfo_blueMask_A = 255;
        _this.__BmpInfo__blueShift_A = 0;
        _this.__BmpInfo__blueScale_A = 1;
        _this.__BmpInfo_alphaMask_A = 4278190080;
        _this.__BmpInfo__alphaShift_A = 24;
        _this.__BmpInfo__alphaScale_A = 1;
    }
    t2 = p.offset;
    p.offset = t2 + (t1 - (t2 - _this._startPos));
    if (_this.bitsPerPixel <= 8)
        _this.readPalette$1(p);
    },
    get$ignoreAlphaChannel() {
    var t1 = this.headerSize;
    if (t1 !== 40)
        if (t1 === 124) {
        t1 = this.__BmpInfo_alphaMask_A;
        t1 === $ && A.throwLateFieldNI("alphaMask");
        t1 = t1 === 0;
        } else
        t1 = false;
    else
        t1 = true;
    return t1;
    },
    get$height() {
    return Math.abs(this._height);
    },
    readPalette$1(input) {
    var i, t1, t2, t3, t4, t5, t6, _this = this,
        numColors = _this.totalColors;
    if (numColors === 0)
        numColors = B.JSInt_methods._shlPositive$1(1, _this.bitsPerPixel);
    _this.palette = new A.PaletteUint8(new Uint8Array(numColors * 3), numColors, 3);
    for (i = 0; i < numColors; ++i) {
        t1 = input.buffer;
        t2 = input.offset;
        t3 = input.offset = t2 + 1;
        t4 = t1.length;
        if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t5 = input.offset = t3 + 1;
        if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
        t3 = t1[t3];
        t6 = input.offset = t5 + 1;
        if (!(t5 >= 0 && t5 < t4))
        return A.ioore(t1, t5);
        t5 = t1[t5];
        input.offset = t6 + 1;
        if (!(t6 >= 0 && t6 < t4))
        return A.ioore(t1, t6);
        t6 = t1[t6];
        _this.palette.setRgba$5(i, t5, t3, t2, t6);
    }
    },
    decodePixel$2(input, pixel) {
    var t1, bi, i, p, t2, r, g, b, a, _this = this,
        _s9_ = "_redShift",
        _s9_0 = "_redScale",
        _s9_1 = "greenMask",
        _s11_ = "_greenShift",
        _s11_0 = "_greenScale",
        _s8_ = "blueMask",
        _s10_ = "_blueShift",
        _s10_0 = "_blueScale",
        _s9_2 = "alphaMask",
        _s11_1 = "_alphaShift",
        _s11_2 = "_alphaScale";
    type$.void_Function_num_num_num_num._as(pixel);
    if (_this.palette != null) {
        t1 = _this.bitsPerPixel;
        if (t1 === 1) {
        bi = input.readByte$0();
        for (i = 7; i >= 0; --i)
            pixel.call$4(B.JSInt_methods.$shr(bi, i) & 1, 0, 0, 0);
        return;
        } else if (t1 === 2) {
        bi = input.readByte$0();
        for (i = 6; i >= 0; i -= 2)
            pixel.call$4(B.JSInt_methods.$shr(bi, i) & 2, 0, 0, 0);
        } else if (t1 === 4) {
        bi = input.readByte$0();
        pixel.call$4(B.JSInt_methods._shrOtherPositive$1(bi, 4) & 15, 0, 0, 0);
        pixel.call$4(bi & 15, 0, 0, 0);
        return;
        } else if (t1 === 8) {
        pixel.call$4(input.readByte$0(), 0, 0, 0);
        return;
        }
    }
    t1 = _this.compression;
    if (t1 === B.BmpCompression_3 && _this.bitsPerPixel === 32) {
        p = input.readUint32$0();
        t1 = _this.__BmpInfo_redMask_A;
        t1 === $ && A.throwLateFieldNI("redMask");
        t2 = _this.__BmpInfo__redShift_A;
        t2 === $ && A.throwLateFieldNI(_s9_);
        t2 = B.JSInt_methods._shrReceiverPositive$1((p & t1) >>> 0, t2);
        t1 = _this.__BmpInfo__redScale_A;
        t1 === $ && A.throwLateFieldNI(_s9_0);
        r = B.JSNumber_methods.toInt$0(t2 * t1);
        t1 = _this.__BmpInfo_greenMask_A;
        t1 === $ && A.throwLateFieldNI(_s9_1);
        t2 = _this.__BmpInfo__greenShift_A;
        t2 === $ && A.throwLateFieldNI(_s11_);
        t2 = B.JSInt_methods._shrReceiverPositive$1((p & t1) >>> 0, t2);
        t1 = _this.__BmpInfo__greenScale_A;
        t1 === $ && A.throwLateFieldNI(_s11_0);
        g = B.JSNumber_methods.toInt$0(t2 * t1);
        t1 = _this.__BmpInfo_blueMask_A;
        t1 === $ && A.throwLateFieldNI(_s8_);
        t2 = _this.__BmpInfo__blueShift_A;
        t2 === $ && A.throwLateFieldNI(_s10_);
        t2 = B.JSInt_methods._shrReceiverPositive$1((p & t1) >>> 0, t2);
        t1 = _this.__BmpInfo__blueScale_A;
        t1 === $ && A.throwLateFieldNI(_s10_0);
        b = B.JSNumber_methods.toInt$0(t2 * t1);
        if (_this.get$ignoreAlphaChannel())
        a = 255;
        else {
        t1 = _this.__BmpInfo_alphaMask_A;
        t1 === $ && A.throwLateFieldNI(_s9_2);
        t2 = _this.__BmpInfo__alphaShift_A;
        t2 === $ && A.throwLateFieldNI(_s11_1);
        t2 = B.JSInt_methods._shrReceiverPositive$1((p & t1) >>> 0, t2);
        t1 = _this.__BmpInfo__alphaScale_A;
        t1 === $ && A.throwLateFieldNI(_s11_2);
        a = B.JSNumber_methods.toInt$0(t2 * t1);
        }
        return pixel.call$4(r, g, b, a);
    } else {
        t2 = _this.bitsPerPixel;
        if (t2 === 32 && t1 === B.BmpCompression_0) {
        b = input.readByte$0();
        g = input.readByte$0();
        r = input.readByte$0();
        a = input.readByte$0();
        return pixel.call$4(r, g, b, _this.get$ignoreAlphaChannel() ? 255 : a);
        } else if (t2 === 24) {
        b = input.readByte$0();
        g = input.readByte$0();
        return pixel.call$4(input.readByte$0(), g, b, 255);
        } else if (t2 === 16) {
        p = input.readUint16$0();
        t1 = _this.__BmpInfo_redMask_A;
        t1 === $ && A.throwLateFieldNI("redMask");
        t2 = _this.__BmpInfo__redShift_A;
        t2 === $ && A.throwLateFieldNI(_s9_);
        t2 = B.JSInt_methods._shrReceiverPositive$1((p & t1) >>> 0, t2);
        t1 = _this.__BmpInfo__redScale_A;
        t1 === $ && A.throwLateFieldNI(_s9_0);
        r = B.JSNumber_methods.toInt$0(t2 * t1);
        t1 = _this.__BmpInfo_greenMask_A;
        t1 === $ && A.throwLateFieldNI(_s9_1);
        t2 = _this.__BmpInfo__greenShift_A;
        t2 === $ && A.throwLateFieldNI(_s11_);
        t2 = B.JSInt_methods._shrReceiverPositive$1((p & t1) >>> 0, t2);
        t1 = _this.__BmpInfo__greenScale_A;
        t1 === $ && A.throwLateFieldNI(_s11_0);
        g = B.JSNumber_methods.toInt$0(t2 * t1);
        t1 = _this.__BmpInfo_blueMask_A;
        t1 === $ && A.throwLateFieldNI(_s8_);
        t2 = _this.__BmpInfo__blueShift_A;
        t2 === $ && A.throwLateFieldNI(_s10_);
        t2 = B.JSInt_methods._shrReceiverPositive$1((p & t1) >>> 0, t2);
        t1 = _this.__BmpInfo__blueScale_A;
        t1 === $ && A.throwLateFieldNI(_s10_0);
        b = B.JSNumber_methods.toInt$0(t2 * t1);
        if (_this.get$ignoreAlphaChannel())
            a = 255;
        else {
            t1 = _this.__BmpInfo_alphaMask_A;
            t1 === $ && A.throwLateFieldNI(_s9_2);
            t2 = _this.__BmpInfo__alphaShift_A;
            t2 === $ && A.throwLateFieldNI(_s11_1);
            t2 = B.JSInt_methods._shrReceiverPositive$1((p & t1) >>> 0, t2);
            t1 = _this.__BmpInfo__alphaScale_A;
            t1 === $ && A.throwLateFieldNI(_s11_2);
            a = B.JSNumber_methods.toInt$0(t2 * t1);
        }
        return pixel.call$4(r, g, b, a);
        } else
        throw A.wrapException(A.ImageException$("Unsupported bitsPerPixel (" + t2 + ") or compression (" + t1.toString$0(0) + ")."));
    }
    },
    $isDecodeInfo: 1
};
A.BmpDecoder.prototype = {
    startDecode$1(bytes) {
    var t1, _null = null;
    if (!A.BmpFileHeader_isValidFile(A.InputBuffer$(bytes, false, _null, 0)))
        return _null;
    t1 = A.InputBuffer$(bytes, false, _null, 0);
    this.__BmpDecoder__input_A = t1;
    return this.info = A.BmpInfo$(t1, _null);
    },
    decodeFrame$1(frame) {
    var t2, t3, bpp, rowStride, nc, t4, format, palette, image, y, _box_0, line, t5, bytes, t6, w, p, _this = this, _null = null,
        t1 = _this.info;
    if (t1 == null)
        return new A.Image(_null, _null, _null, _null, 0, B.FrameType_2, 0, 0);
    t2 = _this.__BmpDecoder__input_A;
    t2 === $ && A.throwLateFieldNI("_input");
    t3 = t1.header.__BmpFileHeader_imageOffset_A;
    t3 === $ && A.throwLateFieldNI("imageOffset");
    t2.offset = t3;
    bpp = t1.bitsPerPixel;
    t3 = t1.width;
    rowStride = B.JSInt_methods._tdivFast$1(t3 * bpp + 31, 32) * 4;
    t2 = _this.forceRgba;
    if (t2)
        nc = 4;
    else if (bpp === 1 || bpp === 4 || bpp === 8)
        nc = 1;
    else {
        t4 = bpp === 32 ? 4 : 3;
        nc = t4;
    }
    if (t2)
        format = B.Format_3;
    else if (bpp === 1)
        format = B.Format_0;
    else {
        if (bpp === 2)
        t4 = B.Format_1;
        else if (bpp === 4)
        t4 = B.Format_2;
        else {
        if (bpp !== 8)
            if (bpp !== 16)
            bpp !== 24;
        t4 = B.Format_3;
        }
        format = t4;
    }
    palette = t2 ? _null : t1.palette;
    image = A.Image$(_null, _null, format, 0, B.FrameType_2, t1.get$height(), _null, 0, nc, palette, t3, false);
    for (y = image.get$height() - 1, t2 = t1._height, t3 = 1 / t2 < 0, t4 = t2 < 0, t2 = t2 === 0; y >= 0; --y) {
        _box_0 = {};
        if (!(t2 ? t3 : t4))
        line = y;
        else {
        t5 = image.data;
        t5 = t5 == null ? _null : t5.height;
        line = (t5 == null ? 0 : t5) - 1 - y;
        }
        t5 = _this.__BmpDecoder__input_A;
        bytes = t5.subset$1(rowStride);
        t5.offset = t5.offset + (bytes.end - bytes.offset);
        t5 = image.data;
        t6 = t5 == null;
        w = t6 ? _null : t5.width;
        if (w == null)
        w = 0;
        _box_0.x = 0;
        p = t6 ? _null : t5.getPixel$3(0, line, _null);
        if (p == null)
        p = new A.PixelUndefined();
        for (; _box_0.x < w;)
        t1.decodePixel$2(bytes, new A.BmpDecoder_decodeFrame_closure(_box_0, _this, w, t1, p));
    }
    return image;
    },
    decode$2$frame(data, frame) {
    if (this.startDecode$1(data) == null)
        return null;
    return this.decodeFrame$1(0);
    }
};
A.BmpDecoder_decodeFrame_closure.prototype = {
    call$4(r, g, b, a) {
    var t2, t3, _this = this,
        t1 = _this._box_0;
    if (t1.x < _this.w) {
        t2 = _this.$this.forceRgba && _this.inf.palette != null;
        t3 = _this.p;
        if (t2) {
        t2 = _this.inf;
        t3.setRgba$4(t2.palette.getRed$1(r), t2.palette.getGreen$1(r), t2.palette.getBlue$1(r), t2.palette.getAlpha$1(r));
        } else
        t3.setRgba$4(r, g, b, a);
        t3.moveNext$0();
        ++t1.x;
    }
    },
    $signature: 28
};
A.DibDecoder.prototype = {};
A.Decoder.prototype = {};
A.Encoder.prototype = {};
A.ExrAttribute.prototype = {};
A.InternalExrB44Compressor.prototype = {
    numScanLines$0() {
    return this._numScanLines;
    },
    uncompress$5(input, x, y, width, height) {
    throw A.wrapException(A.ImageException$("B44 compression not yet supported."));
    },
    uncompress$3(input, x, y) {
    return this.uncompress$5(input, x, y, null, null);
    },
    toString$0(_) {
    return A.S(this._maxScanLineSize) + " " + this._optFlatFields;
    }
};
A.ExrChannelType.prototype = {
    _enumToString$0() {
    return "ExrChannelType." + this._name;
    }
};
A.ExrChannelName.prototype = {
    _enumToString$0() {
    return "ExrChannelName." + this._name;
    }
};
A.ExrChannel.prototype = {
    get$dataType() {
    var t1 = this.__ExrChannel_dataType_A;
    t1 === $ && A.throwLateFieldNI("dataType");
    return t1;
    },
    ExrChannel$1(input) {
    var _this = this,
        t1 = input.readString$0();
    _this.__ExrChannel_name_A = t1;
    if (t1.length === 0)
        return;
    t1 = input.readUint32$0();
    if (!(t1 < 3))
        return A.ioore(B.List_gUw, t1);
    _this.__ExrChannel_dataType_A = B.List_gUw[t1];
    input.readByte$0();
    input.offset += 3;
    _this.__ExrChannel_xSampling_A = input.readUint32$0();
    _this.__ExrChannel_ySampling_A = input.readUint32$0();
    t1 = _this.__ExrChannel_name_A;
    if (t1 === "R") {
        _this.__ExrChannel_isColorChannel_A = true;
        _this.__ExrChannel_nameType_A = B.ExrChannelName_0;
    } else if (t1 === "G") {
        _this.__ExrChannel_isColorChannel_A = true;
        _this.__ExrChannel_nameType_A = B.ExrChannelName_1;
    } else if (t1 === "B") {
        _this.__ExrChannel_isColorChannel_A = true;
        _this.__ExrChannel_nameType_A = B.ExrChannelName_2;
    } else if (t1 === "A") {
        _this.__ExrChannel_isColorChannel_A = true;
        _this.__ExrChannel_nameType_A = B.ExrChannelName_3;
    } else {
        _this.__ExrChannel_isColorChannel_A = false;
        _this.__ExrChannel_nameType_A = B.ExrChannelName_4;
    }
    switch (_this.__ExrChannel_dataType_A.index) {
        case 0:
        _this.__ExrChannel_dataSize_A = 4;
        break;
        case 1:
        _this.__ExrChannel_dataSize_A = 2;
        break;
        case 2:
        _this.__ExrChannel_dataSize_A = 4;
        break;
        default:
        throw A.wrapException(A.ImageException$("EXR Invalid pixel type: " + _this.get$dataType().toString$0(0)));
    }
    }
};
A.ExrCompressorType.prototype = {
    _enumToString$0() {
    return "ExrCompressorType." + this._name;
    }
};
A.ExrCompressor.prototype = {
    uncompress$5(input, x, y, width, height) {
    throw A.wrapException(A.ImageException$("Unsupported compression type"));
    },
    uncompress$3(input, x, y) {
    return this.uncompress$5(input, x, y, null, null);
    }
};
A.InternalExrCompressor.prototype = {};
A.ExrHufDec.prototype = {
    set$p(p) {
    this.p = type$.nullable_List_int._as(p);
    }
};
A.ExrImage.prototype = {
    ExrImage$1(bytes) {
    var t1, t2, part, _i, _this = this,
        input = A.InputBuffer$(bytes, false, null, 0);
    if (input.readUint32$0() !== 20000630)
        throw A.wrapException(A.ImageException$("File is not an OpenEXR image file."));
    t1 = _this.version = input.readByte$0();
    if (t1 !== 2)
        throw A.wrapException(A.ImageException$("Cannot read version " + t1 + " image files."));
    t1 = _this.__ExrImage_flags_A = input.readUint24$0();
    if ((t1 & 4294967289) >>> 0 !== 0)
        throw A.wrapException(A.ImageException$("The file format version number's flag field contains unrecognized flags."));
    if ((t1 & 16) === 0) {
        t2 = _this._parts;
        part = A.InternalExrPart$(t2.length, (t1 & 2) !== 0, input);
        if (part.width > 0)
        B.JSArray_methods.add$1(t2, part);
    } else
        for (t1 = _this._parts; true;) {
        part = A.InternalExrPart$(t1.length, (_this.__ExrImage_flags_A & 2) !== 0, input);
        if (part.width <= 0)
            break;
        B.JSArray_methods.add$1(t1, part);
        }
    t1 = _this._parts;
    t2 = t1.length;
    if (t2 === 0)
        throw A.wrapException(A.ImageException$("Error reading image header"));
    for (_i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].readOffsets$1(input);
    _this._readImage$1(input);
    },
    _readImage$1(input) {
    var t1, t2, _i, part, _this = this;
    for (t1 = _this._parts, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        part = t1[_i];
        _this.set$width(Math.max(_this.width, part.width));
        _this.set$height(Math.max(_this.height, part.height));
        if (part._tiled)
        _this._readTiledPart$2(part, input);
        else
        _this._readScanlinePart$2(part, input);
    }
    },
    _readTiledPart$2(part, input) {
    var multiPart, compressor, offsets, imgData, t2, t3, ly, l, t4, lx, ty, oi, t5, tx, tileX, tileY, bytes, ty0, t6, uncompressedData, tileWidth, tileHeight, len, numChannels, si, yi, ci, ch, tx0, xx, v, p, _null = null,
        t1 = this.__ExrImage_flags_A;
    t1 === $ && A.throwLateFieldNI("flags");
    multiPart = (t1 & 16) !== 0;
    t1 = part.framebuffer;
    t1.toString;
    compressor = part._compressor;
    offsets = part._offsets;
    imgData = A.InputBuffer$from(input, _null, 0);
    t2 = part.channels;
    t3 = part.index;
    ly = 0;
    l = 0;
    while (true) {
        t4 = part._numYLevels;
        t4.toString;
        if (!(ly < t4))
        break;
        lx = 0;
        while (true) {
        t4 = part._numXLevels;
        t4.toString;
        if (!(lx < t4))
            break;
        t4 = l !== 0;
        ty = 0;
        oi = 0;
        while (true) {
            t5 = part._numYTiles;
            if (!(ly < t5.length))
            return A.ioore(t5, ly);
            if (!(ty < t5[ly]))
            break;
            tx = 0;
            while (true) {
            t5 = part._numXTiles;
            if (!(lx < t5.length))
                return A.ioore(t5, lx);
            if (!(tx < t5[lx]))
                break;
            if (t4)
                break;
            if (!(l >= 0 && l < offsets.length))
                return A.ioore(offsets, l);
            t5 = offsets[l];
            if (!(oi >= 0 && oi < t5.length))
                return A.ioore(t5, oi);
            imgData.offset = t5[oi];
            if (multiPart)
                if (imgData.readUint32$0() !== t3)
                throw A.wrapException(A.ImageException$("Invalid Image Data"));
            tileX = imgData.readUint32$0();
            tileY = imgData.readUint32$0();
            imgData.readUint32$0();
            imgData.readUint32$0();
            bytes = imgData.subset$1(imgData.readUint32$0());
            imgData.offset = imgData.offset + (bytes.end - bytes.offset);
            t5 = part._tileHeight;
            t5.toString;
            ty0 = tileY * t5;
            t6 = part._tileWidth;
            t6.toString;
            t5 = compressor.uncompress$5(bytes, tileX * t6, ty0, t6, t5);
            t6 = t5.length;
            uncompressedData = new A.InputBuffer(t5, 0, t6, 0, false);
            tileWidth = compressor.decodedWidth;
            tileHeight = compressor.decodedHeight;
            len = t6 - 0;
            numChannels = t2.length;
            si = 0;
            yi = 0;
            while (true) {
                if (!(yi < tileHeight && ty0 < this.height))
                break;
                for (ci = 0; ci < numChannels; ++ci) {
                if (si >= len)
                    break;
                if (!(ci < t2.length))
                    return A.ioore(t2, ci);
                ch = t2[ci];
                t5 = part._tileWidth;
                t5.toString;
                tx0 = tileX * t5;
                for (xx = 0; xx < tileWidth; ++xx, ++tx0) {
                    t5 = ch.__ExrChannel_dataType_A;
                    t5 === $ && A.throwLateFieldNI("dataType");
                    switch (t5.index) {
                    case 1:
                        t5 = uncompressedData.readUint16$0();
                        t6 = $.Float16__toFloatFloat32Data;
                        t6 = t6 != null ? t6 : A.Float16__initialize();
                        if (!(t5 < t6.length))
                        return A.ioore(t6, t5);
                        v = t6[t5];
                        break;
                    case 2:
                        v = uncompressedData.readUint16$0();
                        break;
                    case 0:
                        v = uncompressedData.readUint32$0();
                        break;
                    default:
                        v = _null;
                    }
                    t5 = ch.__ExrChannel_dataSize_A;
                    t5 === $ && A.throwLateFieldNI("dataSize");
                    si += t5;
                    t5 = ch.__ExrChannel_isColorChannel_A;
                    t5 === $ && A.throwLateFieldNI("isColorChannel");
                    if (t5) {
                    t5 = t1.data;
                    p = t5 == null ? _null : t5.getPixel$3(tx0, ty0, _null);
                    if (p == null)
                        p = new A.PixelUndefined();
                    t5 = ch.__ExrChannel_nameType_A;
                    t5 === $ && A.throwLateFieldNI("nameType");
                    p.$indexSet(0, t5.index, v);
                    } else {
                    t5 = ch.__ExrChannel_name_A;
                    t5 === $ && A.throwLateFieldNI("name");
                    t6 = t1.extraChannels;
                    t5 = t6 != null ? t6.$index(0, t5) : _null;
                    if (t5 != null)
                        t5.setPixelRgb$5(tx0, ty0, v, 0, 0);
                    }
                }
                }
                ++yi;
                ++ty0;
            }
            ++tx;
            ++oi;
            }
            ++ty;
        }
        ++lx;
        ++l;
        }
        ++ly;
    }
    },
    _readScanlinePart$2(part, input) {
    var multiPart, compressor, t2, offsets, linesInBuffer, imgData, t3, t4, yy, _i, t5, t6, bytes, uncompressedData, len, numChannels, yi, si, ci, ch, pw, xx, v, p, _null = null,
        t1 = this.__ExrImage_flags_A;
    t1 === $ && A.throwLateFieldNI("flags");
    multiPart = (t1 & 16) !== 0;
    t1 = part.framebuffer;
    t1.toString;
    compressor = part._compressor;
    t2 = part._offsets;
    if (0 >= t2.length)
        return A.ioore(t2, 0);
    offsets = t2[0];
    linesInBuffer = part._linesInBuffer;
    imgData = A.InputBuffer$from(input, _null, 0);
    for (t2 = offsets.length, t3 = part.channels, t4 = compressor != null, yy = 0, _i = 0; _i < t2; ++_i) {
        imgData.offset = offsets[_i];
        if (multiPart)
        if (imgData.readUint32$0() !== 3.141592653589793)
            throw A.wrapException(A.ImageException$("Invalid Image Data"));
        t5 = imgData.readUint32$0();
        t6 = $.$get$__uint32();
        t6[0] = t5;
        t5 = $.$get$__uint32ToInt32();
        if (0 >= t5.length)
        return A.ioore(t5, 0);
        t6[0] = imgData.readUint32$0();
        if (0 >= t5.length)
        return A.ioore(t5, 0);
        bytes = imgData.subset$1(t5[0]);
        imgData.offset = imgData.offset + (bytes.end - bytes.offset);
        if (t4) {
        t5 = compressor.uncompress$3(bytes, 0, yy);
        uncompressedData = new A.InputBuffer(t5, 0, t5.length, 0, false);
        } else
        uncompressedData = bytes;
        len = uncompressedData.end - uncompressedData.offset;
        numChannels = t3.length;
        yi = 0;
        while (true) {
        if (!(yi < linesInBuffer && yy < this.height))
            break;
        t5 = part._offsetInLineBuffer;
        if (!(yy >= 0 && yy < t5.length))
            return A.ioore(t5, yy);
        si = t5[yy];
        if (si >= len)
            break;
        for (ci = 0; ci < numChannels; ++ci) {
            if (si >= len)
            break;
            if (!(ci < t3.length))
            return A.ioore(t3, ci);
            ch = t3[ci];
            pw = part.width;
            for (xx = 0; xx < pw; ++xx) {
            t5 = ch.__ExrChannel_dataType_A;
            t5 === $ && A.throwLateFieldNI("dataType");
            switch (t5.index) {
                case 1:
                t5 = uncompressedData.readUint16$0();
                t6 = $.Float16__toFloatFloat32Data;
                t6 = t6 != null ? t6 : A.Float16__initialize();
                if (!(t5 < t6.length))
                    return A.ioore(t6, t5);
                v = t6[t5];
                break;
                case 2:
                v = uncompressedData.readUint16$0();
                break;
                case 0:
                v = uncompressedData.readUint32$0();
                break;
                default:
                v = _null;
            }
            t5 = ch.__ExrChannel_dataSize_A;
            t5 === $ && A.throwLateFieldNI("dataSize");
            si += t5;
            t5 = ch.__ExrChannel_isColorChannel_A;
            t5 === $ && A.throwLateFieldNI("isColorChannel");
            if (t5) {
                t5 = t1.data;
                p = t5 == null ? _null : t5.getPixel$3(xx, yy, _null);
                if (p == null)
                p = new A.PixelUndefined();
                t5 = ch.__ExrChannel_nameType_A;
                t5 === $ && A.throwLateFieldNI("nameType");
                p.$indexSet(0, t5.index, v);
            } else {
                t5 = ch.__ExrChannel_name_A;
                t5 === $ && A.throwLateFieldNI("name");
                t6 = t1.extraChannels;
                t5 = t6 != null ? t6.$index(0, t5) : _null;
                if (t5 != null)
                t5.setPixelRgb$5(xx, yy, v, 0, 0);
            }
            }
        }
        ++yi;
        ++yy;
        }
    }
    },
    set$width(width) {
    this.width = A._asInt(width);
    },
    set$height(height) {
    this.height = A._asInt(height);
    },
    $isDecodeInfo: 1
};
A.ExrPart.prototype = {
    ExrPart$3(index, _tiled, input, _box_0) {
    var t1, t2, t3, t4, colorFormat, $name, bytes, channel, t5, t6, t7, t8, t9, s, minX, maxX, minY, maxY, num, w, h, _i, ch, nBytes, y, maxBytesPerLine, offset, i, _this = this, _null = null,
        _s8_ = "dataType",
        _s10_ = "dataWindow",
        _s25_ = "Unknown LevelMode format.",
        extraChannels = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.ImageData);
    for (t1 = _this.attributes, t2 = type$.JSArray_int, t3 = type$.List_int, t4 = _this.channels, colorFormat = B.Format_9; true;) {
        $name = input.readString$0();
        if ($name.length === 0)
        break;
        input.readString$0();
        bytes = input.subset$1(input.readUint32$0());
        input.offset = input.offset + (bytes.end - bytes.offset);
        t1.$indexSet(0, $name, new A.ExrAttribute());
        switch ($name) {
        case "channels":
            for (; true;) {
            channel = new A.ExrChannel();
            channel.ExrChannel$1(bytes);
            t5 = channel.__ExrChannel_name_A;
            t5 === $ && A.throwLateFieldNI("name");
            if (t5.length === 0)
                break;
            t6 = channel.__ExrChannel_isColorChannel_A;
            t6 === $ && A.throwLateFieldNI("isColorChannel");
            if (t6) {
                ++_this.numColorChannels;
                t5 = channel.__ExrChannel_dataType_A;
                t5 === $ && A.throwLateFieldNI(_s8_);
                if (t5 === B.ExrChannelType_1)
                colorFormat = B.Format_9;
                else
                colorFormat = t5 === B.ExrChannelType_2 ? B.Format_10 : B.Format_5;
            } else {
                t6 = channel.__ExrChannel_dataType_A;
                t6 === $ && A.throwLateFieldNI(_s8_);
                if (t6 === B.ExrChannelType_1) {
                t6 = _this.width;
                t7 = _this.height;
                extraChannels.$indexSet(0, t5, new A.ImageDataFloat16(new Uint16Array(t6 * t7), t6, t7, 1));
                } else if (t6 === B.ExrChannelType_2) {
                t6 = _this.width;
                t7 = _this.height;
                extraChannels.$indexSet(0, t5, new A.ImageDataFloat32(new Float32Array(t6 * t7), t6, t7, 1));
                } else if (t6 === B.ExrChannelType_0) {
                t6 = _this.width;
                t7 = _this.height;
                extraChannels.$indexSet(0, t5, new A.ImageDataUint32(new Uint32Array(t6 * t7), t6, t7, 1));
                }
            }
            B.JSArray_methods.add$1(t4, channel);
            }
            break;
        case "chromaticities":
            t5 = new Float32Array(8);
            _this.__ExrPart_chromaticities_A = t5;
            t6 = bytes.readUint32$0();
            t7 = $.$get$__uint32();
            t7[0] = t6;
            t6 = $.$get$__uint32ToFloat32();
            if (0 >= t6.length)
            return A.ioore(t6, 0);
            t5[0] = t6[0];
            t5 = _this.__ExrPart_chromaticities_A;
            t7[0] = bytes.readUint32$0();
            t5[1] = t6[0];
            t5 = _this.__ExrPart_chromaticities_A;
            t7[0] = bytes.readUint32$0();
            t5[2] = t6[0];
            t5 = _this.__ExrPart_chromaticities_A;
            t7[0] = bytes.readUint32$0();
            t5[3] = t6[0];
            t5 = _this.__ExrPart_chromaticities_A;
            t7[0] = bytes.readUint32$0();
            t5[4] = t6[0];
            t5 = _this.__ExrPart_chromaticities_A;
            t7[0] = bytes.readUint32$0();
            t5[5] = t6[0];
            t5 = _this.__ExrPart_chromaticities_A;
            t7[0] = bytes.readUint32$0();
            t5[6] = t6[0];
            t5 = _this.__ExrPart_chromaticities_A;
            t7[0] = bytes.readUint32$0();
            t5[7] = t6[0];
            break;
        case "compression":
            t5 = bytes.buffer;
            t6 = bytes.offset++;
            if (!(t6 >= 0 && t6 < t5.length))
            return A.ioore(t5, t6);
            t6 = t5[t6];
            if (t6 >>> 0 !== t6 || t6 >= 8)
            return A.ioore(B.List_79Z, t6);
            _this._compressionType = B.List_79Z[t6];
            break;
        case "dataWindow":
            t5 = bytes.readUint32$0();
            t6 = $.$get$__uint32();
            t6[0] = t5;
            t5 = $.$get$__uint32ToInt32();
            if (0 >= t5.length)
            return A.ioore(t5, 0);
            t7 = t5[0];
            t6[0] = bytes.readUint32$0();
            t8 = t5[0];
            t6[0] = bytes.readUint32$0();
            t9 = t5[0];
            t6[0] = bytes.readUint32$0();
            _this.set$__ExrPart_dataWindow_A(t3._as(A._setArrayType([t7, t8, t9, t5[0]], t2)));
            t5 = _this.__ExrPart_dataWindow_A;
            t5 === $ && A.throwLateFieldNI(_s10_);
            _this.width = t5[2] - t5[0] + 1;
            _this.height = t5[3] - t5[1] + 1;
            break;
        case "displayWindow":
            t5 = bytes.readUint32$0();
            t6 = $.$get$__uint32();
            t6[0] = t5;
            t5 = $.$get$__uint32ToInt32();
            if (0 >= t5.length)
            return A.ioore(t5, 0);
            t7 = t5[0];
            t6[0] = bytes.readUint32$0();
            t8 = t5[0];
            t6[0] = bytes.readUint32$0();
            t9 = t5[0];
            t6[0] = bytes.readUint32$0();
            _this.set$displayWindow(A._setArrayType([t7, t8, t9, t5[0]], t2));
            break;
        case "lineOrder":
            break;
        case "pixelAspectRatio":
            t5 = bytes.readUint32$0();
            $.$get$__uint32()[0] = t5;
            t5 = $.$get$__uint32ToFloat32();
            if (0 >= t5.length)
            return A.ioore(t5, 0);
            break;
        case "screenWindowCenter":
            t5 = bytes.readUint32$0();
            t6 = $.$get$__uint32();
            t6[0] = t5;
            t5 = $.$get$__uint32ToFloat32();
            if (0 >= t5.length)
            return A.ioore(t5, 0);
            t6[0] = bytes.readUint32$0();
            break;
        case "screenWindowWidth":
            t5 = bytes.readUint32$0();
            $.$get$__uint32()[0] = t5;
            t5 = $.$get$__uint32ToFloat32();
            if (0 >= t5.length)
            return A.ioore(t5, 0);
            break;
        case "tiles":
            _this._tileWidth = bytes.readUint32$0();
            _this._tileHeight = bytes.readUint32$0();
            t5 = bytes.buffer;
            t6 = bytes.offset++;
            if (!(t6 >= 0 && t6 < t5.length))
            return A.ioore(t5, t6);
            t6 = t5[t6];
            _this._tileLevelMode = t6 & 15;
            _this._tileRoundingMode = B.JSInt_methods._shrOtherPositive$1(t6, 4) & 15;
            break;
        case "type":
            s = bytes.readString$0();
            if (s !== "deepscanline")
            if (s !== "deeptile")
                throw A.wrapException(A.ImageException$("EXR Invalid type: " + s));
            break;
        default:
            break;
        }
    }
    t1 = _this.width;
    _this.framebuffer = A.Image$(_null, _null, colorFormat, 0, B.FrameType_2, _this.height, _null, 0, _this.numColorChannels, _null, t1, false);
    for (t1 = A.LinkedHashMapKeyIterator$(extraChannels, extraChannels._modifications, extraChannels.$ti._precomputed1); t1.moveNext$0();) {
        t2 = t1.__js_helper$_current;
        t3 = _this.framebuffer;
        t3.toString;
        t5 = extraChannels.$index(0, t2);
        t5.toString;
        t3.setExtraChannel$2(t2, t5);
    }
    if (_this._tiled) {
        t1 = _this.__ExrPart_dataWindow_A;
        t1 === $ && A.throwLateFieldNI(_s10_);
        minX = t1[0];
        maxX = t1[2];
        minY = t1[1];
        maxY = t1[3];
        switch (_this._tileLevelMode) {
        case 0:
            num = 1;
            break;
        case 1:
            t1 = Math.max(maxX - minX + 1, maxY - minY + 1);
            t2 = _this._tileRoundingMode;
            A._asInt(t1);
            num = (t2 === 0 ? _this._floorLog2$1(t1) : _this._ceilLog2$1(t1)) + 1;
            break;
        case 2:
            w = maxX - minX + 1;
            num = (_this._tileRoundingMode === 0 ? _this._floorLog2$1(w) : _this._ceilLog2$1(w)) + 1;
            break;
        default:
            A.throwExpression(A.ImageException$(_s25_));
            num = 0;
        }
        _this._numXLevels = num;
        t1 = _this.__ExrPart_dataWindow_A;
        minX = t1[0];
        maxX = t1[2];
        minY = t1[1];
        maxY = t1[3];
        switch (_this._tileLevelMode) {
        case 0:
            num = 1;
            break;
        case 1:
            t1 = Math.max(maxX - minX + 1, maxY - minY + 1);
            t2 = _this._tileRoundingMode;
            A._asInt(t1);
            num = (t2 === 0 ? _this._floorLog2$1(t1) : _this._ceilLog2$1(t1)) + 1;
            break;
        case 2:
            h = maxY - minY + 1;
            num = (_this._tileRoundingMode === 0 ? _this._floorLog2$1(h) : _this._ceilLog2$1(h)) + 1;
            break;
        default:
            A.throwExpression(A.ImageException$(_s25_));
            num = 0;
        }
        _this._numYLevels = num;
        if (_this._tileLevelMode !== 2)
        _this._numYLevels = 1;
        t1 = _this._numXLevels;
        t1.toString;
        t2 = _this.__ExrPart_dataWindow_A;
        _this.set$_numXTiles(_this._calculateNumTiles$5(t1, t2[0], t2[2], _this._tileWidth, _this._tileRoundingMode));
        t2 = _this._numYLevels;
        t2.toString;
        t1 = _this.__ExrPart_dataWindow_A;
        _this.set$_numYTiles(_this._calculateNumTiles$5(t2, t1[1], t1[3], _this._tileHeight, _this._tileRoundingMode));
        t1 = _this._calculateBytesPerPixel$0();
        _this.__ExrPart__bytesPerPixel_A = t1;
        t2 = _this._tileWidth;
        t2.toString;
        t2 = t1 * t2;
        _this._maxBytesPerTileLine = t2;
        _this._compressor = A.ExrCompressor_ExrCompressor(_this._compressionType, _this, t2, _this._tileHeight);
        _box_0.ly = _box_0.lx = 0;
        t2 = _this._numXLevels;
        t2.toString;
        t1 = _this._numYLevels;
        t1.toString;
        _this.set$_offsets(A.List_List$generate(t2 * t1, new A.ExrPart_closure(_box_0, _this), type$.Uint32List));
    } else {
        t1 = _this.height;
        t2 = _this.__ExrPart__bytesPerLine_A = new Uint32Array(t1 + 1);
        for (t3 = t4.length, t5 = _this.__ExrPart_dataWindow_A, t6 = _this.width, _i = 0; _i < t3; ++_i) {
        ch = t4[_i];
        t7 = ch.__ExrChannel_dataSize_A;
        t7 === $ && A.throwLateFieldNI("dataSize");
        t8 = ch.__ExrChannel_xSampling_A;
        t8 === $ && A.throwLateFieldNI("xSampling");
        nBytes = B.JSInt_methods.$tdiv(t7 * t6, t8);
        for (t7 = ch.__ExrChannel_ySampling_A, y = 0; y < t1; ++y) {
            t5 === $ && A.throwLateFieldNI(_s10_);
            t8 = t5[1];
            t7 === $ && A.throwLateFieldNI("ySampling");
            if (B.JSInt_methods.$mod(y + t8, t7) === 0)
            t2[y] = t2[y] + nBytes;
        }
        }
        for (maxBytesPerLine = 0, y = 0; y < t1; ++y)
        maxBytesPerLine = Math.max(maxBytesPerLine, t2[y]);
        t1 = A.ExrCompressor_ExrCompressor(_this._compressionType, _this, maxBytesPerLine, _null);
        _this._compressor = t1;
        t1 = _this._linesInBuffer = t1.numScanLines$0();
        t2 = _this.__ExrPart__bytesPerLine_A;
        t3 = t2.length;
        t4 = new Uint32Array(t3);
        _this._offsetInLineBuffer = t4;
        for (--t3, offset = 0, i = 0; i <= t3; ++i) {
        if (B.JSInt_methods.$mod(i, t1) === 0)
            offset = 0;
        t4[i] = offset;
        offset += t2[i];
        }
        t1 = B.JSInt_methods.$tdiv(_this.height + t1, t1);
        _this.set$_offsets(A._setArrayType([new Uint32Array(t1 - 1)], type$.JSArray_nullable_Uint32List));
    }
    },
    _floorLog2$1(x) {
    var y;
    for (y = 0; x > 1;) {
        ++y;
        x = B.JSInt_methods._shrOtherPositive$1(x, 1);
    }
    return y;
    },
    _ceilLog2$1(x) {
    var y, r;
    for (y = 0, r = 0; x > 1;) {
        if ((x & 1) !== 0)
        r = 1;
        ++y;
        x = B.JSInt_methods._shrOtherPositive$1(x, 1);
    }
    return y + r;
    },
    _calculateBytesPerPixel$0() {
    var t1, t2, bytesPerPixel, _i, t3;
    for (t1 = this.channels, t2 = t1.length, bytesPerPixel = 0, _i = 0; _i < t2; ++_i) {
        t3 = t1[_i].__ExrChannel_dataSize_A;
        t3 === $ && A.throwLateFieldNI("dataSize");
        bytesPerPixel += t3;
    }
    return bytesPerPixel;
    },
    _calculateNumTiles$5(numLevels, min, max, size, rmode) {
    var t1, a, i, b, size0, t2,
        _list = J.JSArray_JSArray$allocateFixed(numLevels, type$.int);
    for (t1 = rmode === 1, a = max - min + 1, i = 0; i < numLevels; ++i) {
        b = B.JSInt_methods._shlPositive$1(1, i);
        size0 = B.JSInt_methods.$tdiv(a, b);
        if (t1 && size0 * b < a)
        ++size0;
        t2 = Math.max(size0, 1);
        size.toString;
        _list[i] = B.JSInt_methods.$tdiv(t2 + size - 1, size);
    }
    return _list;
    },
    set$displayWindow(displayWindow) {
    type$.nullable_List_int._as(displayWindow);
    },
    set$__ExrPart_dataWindow_A(__ExrPart_dataWindow_A) {
    this.__ExrPart_dataWindow_A = type$.List_int._as(__ExrPart_dataWindow_A);
    },
    set$_offsets(_offsets) {
    this._offsets = type$.nullable_List_nullable_Uint32List._as(_offsets);
    },
    set$_numXTiles(_numXTiles) {
    this._numXTiles = type$.nullable_List_nullable_int._as(_numXTiles);
    },
    set$_numYTiles(_numYTiles) {
    this._numYTiles = type$.nullable_List_nullable_int._as(_numYTiles);
    }
};
A.ExrPart_closure.prototype = {
    call$1(l) {
    var t5, t6, result, lx,
        t1 = this.$this,
        t2 = t1._numXTiles,
        t3 = this._box_0,
        t4 = t3.lx;
    if (!(t4 < t2.length))
        return A.ioore(t2, t4);
    t2 = t2[t4];
    t5 = t1._numYTiles;
    t6 = t3.ly;
    if (!(t6 < t5.length))
        return A.ioore(t5, t6);
    t5 = t5[t6];
    result = new Uint32Array(t2 * t5);
    lx = t4 + 1;
    t3.lx = lx;
    if (lx === t1._numXLevels) {
        t3.lx = 0;
        t3.ly = t6 + 1;
    }
    return result;
    },
    $signature: 29
};
A.InternalExrPart.prototype = {
    readOffsets$1(input) {
    var i, j, t1, numOffsets, t2, _this = this;
    if (_this._tiled)
        for (i = 0; i < _this._offsets.length; ++i) {
        j = 0;
        while (true) {
            t1 = _this._offsets;
            if (!(i < t1.length))
            return A.ioore(t1, i);
            t1 = t1[i];
            if (!(j < t1.length))
            break;
            t1[j] = input.readUint64$0();
            ++j;
        }
        }
    else {
        t1 = _this._offsets;
        if (0 >= t1.length)
        return A.ioore(t1, 0);
        numOffsets = t1[0].length;
        for (i = 0; i < numOffsets; ++i) {
        t1 = _this._offsets;
        if (0 >= t1.length)
            return A.ioore(t1, 0);
        t1 = t1[0];
        t2 = input.readUint64$0();
        if (!(i < t1.length))
            return A.ioore(t1, i);
        t1[i] = t2;
        }
    }
    }
};
A.InternalExrPizCompressor.prototype = {
    InternalExrPizCompressor$3(header, _maxScanLineSize, _numScanLines) {
    var _i, t1, tmpBufferSize, _this = this,
        _length = header.channels.length,
        _list = J.JSArray_JSArray$allocateFixed(_length, type$._PizChannelData);
    for (_i = 0; _i < _length; ++_i)
        _list[_i] = new A._PizChannelData();
    _this.set$__InternalExrPizCompressor__channelData_A(type$.List_nullable__PizChannelData._as(_list));
    t1 = _this._exr_piz_compressor$_maxScanLineSize;
    t1.toString;
    tmpBufferSize = B.JSInt_methods._tdivFast$1(t1 * _this._exr_piz_compressor$_numScanLines, 2);
    _this._tmpBuffer = new Uint16Array(tmpBufferSize);
    },
    numScanLines$0() {
    return this._exr_piz_compressor$_numScanLines;
    },
    uncompress$5(input, x, y, width, height) {
    var maxX, maxY, t1, t2, channels, numChannels, tmpBufferEnd, i, ch, cd, a1, b1, t3, minNonZero, maxNonZero, bitmap, b, len, j, j0, t4, lut, maxValue, t5, _this = this,
        _s12_ = "_channelData";
    if (width == null)
        width = _this._header.width;
    if (height == null)
        height = _this._header._linesInBuffer;
    maxX = x + width - 1;
    maxY = y + height - 1;
    t1 = _this._header;
    t2 = t1.width;
    if (maxX > t2)
        maxX = t2 - 1;
    t2 = t1.height;
    if (maxY > t2)
        maxY = t2 - 1;
    _this.decodedWidth = maxX - x + 1;
    _this.decodedHeight = maxY - y + 1;
    channels = t1.channels;
    numChannels = channels.length;
    for (tmpBufferEnd = 0, i = 0; i < numChannels; ++i) {
        ch = channels[i];
        t1 = _this.__InternalExrPizCompressor__channelData_A;
        t1 === $ && A.throwLateFieldNI(_s12_);
        if (!(i < t1.length))
        return A.ioore(t1, i);
        cd = t1[i];
        cd.___PizChannelData_end_A = cd.___PizChannelData_start_A = tmpBufferEnd;
        t1 = ch.__ExrChannel_xSampling_A;
        t1 === $ && A.throwLateFieldNI("xSampling");
        a1 = B.JSInt_methods.$tdiv(x, t1);
        b1 = B.JSInt_methods.$tdiv(maxX, t1);
        t1 = a1 * t1 < x ? 0 : 1;
        t1 = b1 - a1 + t1;
        cd.___PizChannelData_nx_A = t1;
        t2 = ch.__ExrChannel_ySampling_A;
        t2 === $ && A.throwLateFieldNI("ySampling");
        a1 = B.JSInt_methods.$tdiv(y, t2);
        b1 = B.JSInt_methods.$tdiv(maxY, t2);
        t3 = a1 * t2 < y ? 0 : 1;
        t3 = b1 - a1 + t3;
        cd.___PizChannelData_ny_A = t3;
        cd.___PizChannelData_ys_A = t2;
        t2 = ch.__ExrChannel_dataSize_A;
        t2 === $ && A.throwLateFieldNI("dataSize");
        t2 = t2 / 2 | 0;
        cd.___PizChannelData_size_A = t2;
        tmpBufferEnd += t1 * t3 * t2;
    }
    minNonZero = input.readUint16$0();
    maxNonZero = input.readUint16$0();
    if (maxNonZero >= 8192)
        throw A.wrapException(A.ImageException$("Error in header for PIZ-compressed data (invalid bitmap size)."));
    bitmap = new Uint8Array(8192);
    if (minNonZero <= maxNonZero) {
        b = input.readBytes$1(maxNonZero - minNonZero + 1);
        t1 = b.offset;
        len = b.end - t1;
        for (t2 = b.buffer, t3 = t2.length, j = minNonZero, i = 0; i < len; ++i, j = j0) {
        j0 = j + 1;
        t4 = t1 + i;
        if (!(t4 >= 0 && t4 < t3))
            return A.ioore(t2, t4);
        t4 = t2[t4];
        if (!(j < 8192))
            return A.ioore(bitmap, j);
        bitmap[j] = t4;
        }
    }
    lut = new Uint16Array(65536);
    maxValue = _this._reverseLutFromBitmap$2(bitmap, lut);
    A.ExrHuffman_uncompress(input, input.readUint32$0(), _this._tmpBuffer, tmpBufferEnd);
    for (i = 0; i < numChannels; ++i) {
        t1 = _this.__InternalExrPizCompressor__channelData_A;
        t1 === $ && A.throwLateFieldNI(_s12_);
        if (!(i < t1.length))
        return A.ioore(t1, i);
        cd = t1[i];
        j = 0;
        while (true) {
        t1 = cd.___PizChannelData_size_A;
        t1 === $ && A.throwLateFieldNI("size");
        if (!(j < t1))
            break;
        t2 = _this._tmpBuffer;
        t2.toString;
        t3 = cd.___PizChannelData_start_A;
        t3 === $ && A.throwLateFieldNI("start");
        t4 = cd.___PizChannelData_nx_A;
        t4 === $ && A.throwLateFieldNI("nx");
        t5 = cd.___PizChannelData_ny_A;
        t5 === $ && A.throwLateFieldNI("ny");
        A.ExrWavelet_decode(t2, t3 + j, t4, t1, t5, t4 * t1, maxValue);
        ++j;
        }
    }
    t1 = _this._tmpBuffer;
    t1.toString;
    _this._applyLut$3(lut, t1, tmpBufferEnd);
    t1 = _this._exr_piz_compressor$_output;
    if (t1 == null) {
        t1 = _this._exr_piz_compressor$_maxScanLineSize;
        t1.toString;
        t1 = _this._exr_piz_compressor$_output = A.OutputBuffer$(false, t1 * _this._exr_piz_compressor$_numScanLines + 73728);
    }
    t1.length = 0;
    for (; y <= maxY; ++y)
        for (i = 0; i < numChannels; ++i) {
        t1 = _this.__InternalExrPizCompressor__channelData_A;
        t1 === $ && A.throwLateFieldNI(_s12_);
        if (!(i < t1.length))
            return A.ioore(t1, i);
        cd = t1[i];
        t1 = cd.___PizChannelData_ys_A;
        t1 === $ && A.throwLateFieldNI("ys");
        if (B.JSInt_methods.$mod(y, t1) !== 0)
            continue;
        t1 = cd.___PizChannelData_nx_A;
        t1 === $ && A.throwLateFieldNI("nx");
        t2 = cd.___PizChannelData_size_A;
        t2 === $ && A.throwLateFieldNI("size");
        x = t1 * t2;
        for (; x > 0; --x) {
            t1 = _this._exr_piz_compressor$_output;
            t1.toString;
            t2 = _this._tmpBuffer;
            t2.toString;
            t3 = cd.___PizChannelData_end_A;
            t3 === $ && A.throwLateFieldNI("end");
            cd.___PizChannelData_end_A = t3 + 1;
            if (!(t3 >= 0 && t3 < t2.length))
            return A.ioore(t2, t3);
            t1.writeUint16$1(t2[t3]);
        }
        }
    t1 = _this._exr_piz_compressor$_output;
    return A.NativeUint8List_NativeUint8List$view(t1._output_buffer$_buffer.buffer, 0, t1.length);
    },
    uncompress$3(input, x, y) {
    return this.uncompress$5(input, x, y, null, null);
    },
    _applyLut$3(lut, data, nData) {
    var i, t2,
        t1 = type$.List_int;
    t1._as(lut);
    t1._as(data);
    for (t1 = data.length, i = 0; i < nData; ++i) {
        if (!(i < t1))
        return A.ioore(data, i);
        t2 = data[i];
        if (!(t2 >= 0 && t2 < 65536))
        return A.ioore(lut, t2);
        data[i] = lut[t2];
    }
    },
    _reverseLutFromBitmap$2(bitmap, lut) {
    var k, i, t1, k0, k1;
    for (k = 0, i = 0; i < 65536; ++i) {
        if (i !== 0) {
        t1 = i >>> 3;
        if (!(t1 < 8192))
            return A.ioore(bitmap, t1);
        t1 = (bitmap[t1] & 1 << (i & 7)) >>> 0 !== 0;
        } else
        t1 = true;
        if (t1) {
        k0 = k + 1;
        if (!(k < 65536))
            return A.ioore(lut, k);
        lut[k] = i;
        k = k0;
        }
    }
    for (k0 = k; k0 < 65536; k0 = k1) {
        k1 = k0 + 1;
        if (!(k0 < 65536))
        return A.ioore(lut, k0);
        lut[k0] = 0;
    }
    return k - 1;
    },
    set$__InternalExrPizCompressor__channelData_A(__InternalExrPizCompressor__channelData_A) {
    this.__InternalExrPizCompressor__channelData_A = type$.List_nullable__PizChannelData._as(__InternalExrPizCompressor__channelData_A);
    }
};
A._PizChannelData.prototype = {};
A.InternalExrPxr24Compressor.prototype = {
    numScanLines$0() {
    return this._exr_pxr24_compressor$_numScanLines;
    },
    uncompress$5(input, x, y, width, height) {
    var ptr, pixel, pixelBytes, maxX, maxY, t2, numChannels, t3, yi, tmpEnd, ci, ch, t4, a1, b1, n, j, t5, t6, k, _this = this,
        data = B.C__ZLibDecoder.decodeBuffer$2$verify(A.InputStream$(type$.List_int._as(input.toUint8List$0()), 1, null, 0), false),
        t1 = _this._output;
    if (t1 == null) {
        t1 = _this._exr_pxr24_compressor$_maxScanLineSize;
        t1.toString;
        t1 = _this._output = A.OutputBuffer$(false, _this._exr_pxr24_compressor$_numScanLines * t1);
    }
    t1.length = 0;
    ptr = A._setArrayType([0, 0, 0, 0], type$.JSArray_int);
    pixel = new Uint32Array(1);
    pixelBytes = A.NativeUint8List_NativeUint8List$view(pixel.buffer, 0, null);
    if (width == null)
        width = _this._header.width;
    if (height == null)
        height = _this._header._linesInBuffer;
    maxX = x + width - 1;
    maxY = y + height - 1;
    t1 = _this._header;
    t2 = t1.width;
    if (maxX > t2)
        maxX = t2 - 1;
    t2 = t1.height;
    if (maxY > t2)
        maxY = t2 - 1;
    _this.decodedWidth = maxX - x + 1;
    _this.decodedHeight = maxY - y + 1;
    t1 = t1.channels;
    numChannels = t1.length;
    for (t2 = pixelBytes.length, t3 = data.length, yi = y, tmpEnd = 0; yi <= maxY; ++yi)
        for (ci = 0; ci < numChannels; ++ci) {
        if (!(ci < t1.length))
            return A.ioore(t1, ci);
        ch = t1[ci];
        t4 = ch.__ExrChannel_ySampling_A;
        t4 === $ && A.throwLateFieldNI("ySampling");
        if (B.JSInt_methods.$mod(y, t4) !== 0)
            continue;
        t4 = ch.__ExrChannel_xSampling_A;
        t4 === $ && A.throwLateFieldNI("xSampling");
        a1 = B.JSInt_methods.$tdiv(x, t4);
        b1 = B.JSInt_methods.$tdiv(maxX, t4);
        t4 = a1 * t4 < x ? 0 : 1;
        n = b1 - a1 + t4;
        if (0 >= 1)
            return A.ioore(pixel, 0);
        pixel[0] = 0;
        t4 = ch.__ExrChannel_dataType_A;
        t4 === $ && A.throwLateFieldNI("dataType");
        switch (t4.index) {
            case 0:
            B.JSArray_methods.$indexSet(ptr, 0, tmpEnd);
            B.JSArray_methods.$indexSet(ptr, 1, ptr[0] + n);
            B.JSArray_methods.$indexSet(ptr, 2, ptr[1] + n);
            tmpEnd = ptr[2] + n;
            for (j = 0; j < n; ++j) {
                t4 = ptr[0];
                B.JSArray_methods.$indexSet(ptr, 0, t4 + 1);
                if (!(t4 >= 0 && t4 < t3))
                return A.ioore(data, t4);
                t4 = data[t4];
                t5 = ptr[1];
                B.JSArray_methods.$indexSet(ptr, 1, t5 + 1);
                if (!(t5 >= 0 && t5 < t3))
                return A.ioore(data, t5);
                t5 = data[t5];
                t6 = ptr[2];
                B.JSArray_methods.$indexSet(ptr, 2, t6 + 1);
                if (!(t6 >= 0 && t6 < t3))
                return A.ioore(data, t6);
                t6 = data[t6];
                pixel[0] = pixel[0] + ((t4 << 24 | t5 << 16 | t6 << 8) >>> 0);
                for (k = 0; k < 4; ++k) {
                t4 = _this._output;
                t4.toString;
                if (!(k < t2))
                    return A.ioore(pixelBytes, k);
                t4.writeByte$1(pixelBytes[k]);
                }
            }
            break;
            case 1:
            B.JSArray_methods.$indexSet(ptr, 0, tmpEnd);
            B.JSArray_methods.$indexSet(ptr, 1, ptr[0] + n);
            tmpEnd = ptr[1] + n;
            for (j = 0; j < n; ++j) {
                t4 = ptr[0];
                B.JSArray_methods.$indexSet(ptr, 0, t4 + 1);
                if (!(t4 >= 0 && t4 < t3))
                return A.ioore(data, t4);
                t4 = data[t4];
                t5 = ptr[1];
                B.JSArray_methods.$indexSet(ptr, 1, t5 + 1);
                if (!(t5 >= 0 && t5 < t3))
                return A.ioore(data, t5);
                t5 = data[t5];
                pixel[0] = pixel[0] + ((t4 << 8 | t5) >>> 0);
                for (k = 0; k < 2; ++k) {
                t4 = _this._output;
                t4.toString;
                if (!(k < t2))
                    return A.ioore(pixelBytes, k);
                t4.writeByte$1(pixelBytes[k]);
                }
            }
            break;
            case 2:
            B.JSArray_methods.$indexSet(ptr, 0, tmpEnd);
            B.JSArray_methods.$indexSet(ptr, 1, ptr[0] + n);
            B.JSArray_methods.$indexSet(ptr, 2, ptr[1] + n);
            tmpEnd = ptr[2] + n;
            for (j = 0; j < n; ++j) {
                t4 = ptr[0];
                B.JSArray_methods.$indexSet(ptr, 0, t4 + 1);
                if (!(t4 >= 0 && t4 < t3))
                return A.ioore(data, t4);
                t4 = data[t4];
                t5 = ptr[1];
                B.JSArray_methods.$indexSet(ptr, 1, t5 + 1);
                if (!(t5 >= 0 && t5 < t3))
                return A.ioore(data, t5);
                t5 = data[t5];
                t6 = ptr[2];
                B.JSArray_methods.$indexSet(ptr, 2, t6 + 1);
                if (!(t6 >= 0 && t6 < t3))
                return A.ioore(data, t6);
                t6 = data[t6];
                pixel[0] = pixel[0] + ((t4 << 24 | t5 << 16 | t6 << 8) >>> 0);
                for (k = 0; k < 4; ++k) {
                t4 = _this._output;
                t4.toString;
                if (!(k < t2))
                    return A.ioore(pixelBytes, k);
                t4.writeByte$1(pixelBytes[k]);
                }
            }
            break;
        }
        }
    t1 = _this._output;
    return A.NativeUint8List_NativeUint8List$view(t1._output_buffer$_buffer.buffer, 0, t1.length);
    },
    uncompress$3(input, x, y) {
    return this.uncompress$5(input, x, y, null, null);
    }
};
A.InternalExrRleCompressor.prototype = {
    numScanLines$0() {
    return 1;
    },
    uncompress$5(input, x, y, width, height) {
    var maxX, maxY, t2, t3, n, count, count0, data, len, i, t10, si, si0, t11, t4, t20, _this = this,
        t1 = input.end,
        out = A.OutputBuffer$(false, (t1 - input.offset) * 2);
    if (width == null)
        width = _this._header.width;
    if (height == null)
        height = _this._header._linesInBuffer;
    maxX = x + width - 1;
    maxY = y + height - 1;
    t2 = _this._header;
    t3 = t2.width;
    if (maxX > t3)
        maxX = t3 - 1;
    t2 = t2.height;
    if (maxY > t2)
        maxY = t2 - 1;
    _this.decodedWidth = maxX - x + 1;
    _this.decodedHeight = maxY - y + 1;
    for (; t2 = input.offset, t2 < t1;) {
        t3 = input.buffer;
        input.offset = t2 + 1;
        if (!(t2 >= 0 && t2 < t3.length))
        return A.ioore(t3, t2);
        t2 = t3[t2];
        $.$get$__uint8()[0] = t2;
        t2 = $.$get$__uint8ToInt8();
        if (0 >= t2.length)
        return A.ioore(t2, 0);
        n = t2[0];
        if (n < 0) {
        count = -n;
        for (; count0 = count - 1, count > 0; count = count0) {
            t2 = input.buffer;
            t3 = input.offset++;
            if (!(t3 >= 0 && t3 < t2.length))
            return A.ioore(t2, t3);
            out.writeByte$1(t2[t3]);
        }
        } else
        for (count = n; count0 = count - 1, count >= 0; count = count0) {
            t2 = input.buffer;
            t3 = input.offset++;
            if (!(t3 >= 0 && t3 < t2.length))
            return A.ioore(t2, t3);
            out.writeByte$1(t2[t3]);
        }
    }
    data = A.NativeUint8List_NativeUint8List$view(out._output_buffer$_buffer.buffer, 0, out.length);
    len = data.length;
    for (i = 1; i < len; ++i)
        data[i] = data[i - 1] + data[i] - 128;
    t1 = _this._exr_rle_compressor$_outCache;
    if (t1 == null || t1.length !== len)
        t1 = _this._exr_rle_compressor$_outCache = new Uint8Array(len);
    t2 = B.JSInt_methods._tdivFast$1(len + 1, 2);
    for (t10 = 0, si = 0; true; t2 = t20, t10 = t11) {
        if (si < len) {
        t1.toString;
        si0 = si + 1;
        t11 = t10 + 1;
        if (!(t10 < len))
            return A.ioore(data, t10);
        t3 = data[t10];
        t4 = t1.length;
        if (!(si < t4))
            return A.ioore(t1, si);
        t1[si] = t3;
        } else
        break;
        if (si0 < len) {
        si = si0 + 1;
        t20 = t2 + 1;
        if (!(t2 < len))
            return A.ioore(data, t2);
        t2 = data[t2];
        if (!(si0 < t4))
            return A.ioore(t1, si0);
        t1[si0] = t2;
        } else
        break;
    }
    t1.toString;
    return t1;
    },
    uncompress$3(input, x, y) {
    return this.uncompress$5(input, x, y, null, null);
    },
    toString$0(_) {
    return A.S(this._exr_rle_compressor$_maxScanLineSize);
    }
};
A.InternalExrZipCompressor.prototype = {
    numScanLines$0() {
    return this._exr_zip_compressor$_numScanLines;
    },
    uncompress$5(input, x, y, width, height) {
    var maxX, maxY, t1, t2, len, i, t10, si, si0, t11, t3, t4, t20, _this = this,
        data = B.C__ZLibDecoder.decodeBuffer$2$verify(A.InputStream$(type$.List_int._as(input.toUint8List$0()), 1, null, 0), false);
    if (width == null)
        width = _this._header.width;
    if (height == null)
        height = _this._header._linesInBuffer;
    maxX = x + width - 1;
    maxY = y + height - 1;
    t1 = _this._header;
    t2 = t1.width;
    if (maxX > t2)
        maxX = t2 - 1;
    t1 = t1.height;
    if (maxY > t1)
        maxY = t1 - 1;
    _this.decodedWidth = maxX - x + 1;
    _this.decodedHeight = maxY - y + 1;
    len = data.length;
    for (i = 1; i < len; ++i)
        data[i] = data[i - 1] + data[i] - 128;
    t1 = _this._outCache;
    if (t1 == null || t1.length !== len)
        t1 = _this._outCache = new Uint8Array(len);
    t2 = B.JSInt_methods._tdivFast$1(len + 1, 2);
    for (t10 = 0, si = 0; true; t2 = t20, t10 = t11) {
        if (si < len) {
        t1.toString;
        si0 = si + 1;
        t11 = t10 + 1;
        if (!(t10 < len))
            return A.ioore(data, t10);
        t3 = data[t10];
        t4 = t1.length;
        if (!(si < t4))
            return A.ioore(t1, si);
        t1[si] = t3;
        } else
        break;
        if (si0 < len) {
        si = si0 + 1;
        t20 = t2 + 1;
        if (!(t2 < len))
            return A.ioore(data, t2);
        t2 = data[t2];
        if (!(si0 < t4))
            return A.ioore(t1, si0);
        t1[si0] = t2;
        } else
        break;
    }
    t1.toString;
    return t1;
    },
    uncompress$3(input, x, y) {
    return this.uncompress$5(input, x, y, null, null);
    },
    toString$0(_) {
    return A.S(this._maxScanLines);
    }
};
A.ExrDecoder.prototype = {
    decodeFrame$1(frame) {
    var t1 = this.exrImage;
    if (t1 == null)
        return null;
    t1 = t1._parts;
    if (!(frame < t1.length))
        return A.ioore(t1, frame);
    return t1[frame].framebuffer;
    },
    decode$2$frame(bytes, frame) {
    var t1 = new A.ExrImage(A._setArrayType([], type$.JSArray_ExrPart));
    t1.ExrImage$1(bytes);
    this.exrImage = t1;
    return this.decodeFrame$1(0);
    }
};
A.GifColorMap.prototype = {
    getPalette$0() {
    var t1, t2, p, i, t3, t4, t5, _this = this;
    if (_this.transparent == null)
        return _this._palette;
    t1 = _this._palette;
    t2 = t1.numColors;
    p = new A.PaletteUint8(new Uint8Array(t2 * 4), t2, 4);
    for (i = 0; i < t2; ++i) {
        t3 = t1.getRed$1(i);
        t4 = t1.getGreen$1(i);
        t5 = t1.getBlue$1(i);
        p.setRgba$5(i, t3, t4, t5, i === _this.transparent ? 0 : 255);
    }
    return p;
    }
};
A.GifImageDesc.prototype = {
    GifImageDesc$1(input) {
    var b, i, t1, t2, t3, t4, t5, t6, _this = this;
    _this.__GifImageDesc_x_A = input.readUint16$0();
    _this.__GifImageDesc_y_A = input.readUint16$0();
    _this.__GifImageDesc_width_A = input.readUint16$0();
    _this.__GifImageDesc_height_A = input.readUint16$0();
    b = input.readByte$0();
    _this.__GifImageDesc_interlaced_A = (b & 64) !== 0;
    if ((b & 128) !== 0) {
        _this.colorMap = A.GifColorMap$(B.JSInt_methods._shlPositive$1(1, (b & 7) + 1));
        for (i = 0; t1 = _this.colorMap, i < t1.numColors; ++i) {
        t2 = input.buffer;
        t3 = input.offset;
        t4 = input.offset = t3 + 1;
        t5 = t2.length;
        if (!(t3 >= 0 && t3 < t5))
            return A.ioore(t2, t3);
        t3 = t2[t3];
        t6 = input.offset = t4 + 1;
        if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t2, t4);
        t4 = t2[t4];
        input.offset = t6 + 1;
        if (!(t6 >= 0 && t6 < t5))
            return A.ioore(t2, t6);
        t6 = t2[t6];
        t1._palette.setRgb$4(i, t3, t4, t6);
        }
    }
    _this.__GifImageDesc__inputPosition_A = input.offset - input.start;
    }
};
A.InternalGifImageDesc.prototype = {};
A.GifInfo.prototype = {$isDecodeInfo: 1};
A.GifDecoder.prototype = {
    startDecode$1(bytes) {
    var recordType, gifImage, extCode, t1, t2, t3, t4, t5, exception, _this = this;
    _this._input = A.InputBuffer$(bytes, false, null, 0);
    _this.info = new A.GifInfo(A._setArrayType([], type$.JSArray_GifImageDesc));
    if (!_this._getInfo$0())
        return null;
    try {
        for (; t1 = _this._input, t2 = t1.offset, t2 < t1.end;) {
        t3 = t1.buffer;
        t4 = t1.offset = t2 + 1;
        t5 = t3.length;
        if (!(t2 >= 0 && t2 < t5))
            return A.ioore(t3, t2);
        recordType = t3[t2];
        switch (recordType) {
            case 44:
            gifImage = _this._skipImage$0();
            if (gifImage == null) {
                t1 = _this.info;
                return t1;
            }
            B.JSArray_methods.add$1(_this.info.frames, gifImage);
            break;
            case 33:
            t1.offset = t4 + 1;
            if (!(t4 >= 0 && t4 < t5))
                return A.ioore(t3, t4);
            extCode = t3[t4];
            if (J.$eq$(extCode, 255)) {
                t1 = _this._input;
                t2 = t1.buffer;
                t3 = t1.offset++;
                if (!(t3 >= 0 && t3 < t2.length))
                return A.ioore(t2, t3);
                if (t1.readString$1(t2[t3]) === "NETSCAPE2.0") {
                t2 = t1.buffer;
                t3 = t1.offset;
                t4 = t1.offset = t3 + 1;
                t5 = t2.length;
                if (!(t3 >= 0 && t3 < t5))
                    return A.ioore(t2, t3);
                t3 = t2[t3];
                t1.offset = t4 + 1;
                if (!(t4 >= 0 && t4 < t5))
                    return A.ioore(t2, t4);
                t4 = t2[t4];
                if (t3 === 3 && t4 === 1)
                    _this._repeat = t1.readUint16$0();
                } else
                _this._skipRemainder$0();
            } else if (J.$eq$(extCode, 249)) {
                t1 = _this._input;
                t1.toString;
                _this._readGraphicsControlExt$1(t1);
            } else
                _this._skipRemainder$0();
            break;
            case 59:
            t1 = _this.info;
            return t1;
            default:
            break;
        }
        }
    } catch (exception) {
    }
    return _this.info;
    },
    _readGraphicsControlExt$1(input) {
    var b, duration, transparent, t1, t2, t3, gifImage, _this = this;
    input.readByte$0();
    b = input.readByte$0();
    duration = input.readUint16$0();
    transparent = input.readByte$0();
    input.readByte$0();
    t1 = B.JSInt_methods._shrOtherPositive$1(b, 2);
    t2 = input.subset$2$offset(1, 0);
    t3 = t2.buffer;
    t2 = t2.offset;
    if (!(t2 >= 0 && t2 < t3.length))
        return A.ioore(t3, t2);
    if (t3[t2] === 44) {
        ++input.offset;
        gifImage = _this._skipImage$0();
        if (gifImage == null)
        return;
        gifImage.duration = duration;
        gifImage.clearFrame = (t1 & 7) === 2;
        if ((b & 1) !== 0) {
        t1 = gifImage.colorMap;
        if (t1 == null && _this.info.globalColorMap != null) {
            t1 = _this.info.globalColorMap;
            t1 = gifImage.colorMap = new A.GifColorMap(t1.bitsPerPixel, t1.numColors, t1.transparent, A.PaletteUint8$from(t1._palette));
        }
        if (t1 != null)
            t1.transparent = transparent;
        }
        B.JSArray_methods.add$1(_this.info.frames, gifImage);
    }
    },
    decodeFrame$1(frame) {
    var t2, t3, gifImage, _this = this,
        t1 = _this._input;
    if (t1 == null || _this.info == null)
        return null;
    t2 = _this.info.frames;
    t3 = t2.length;
    if (frame >= t3 || false)
        return null;
    if (!(frame < t3))
        return A.ioore(t2, frame);
    gifImage = t2[frame];
    t1.toString;
    t2 = gifImage.__GifImageDesc__inputPosition_A;
    t2 === $ && A.throwLateFieldNI("_inputPosition");
    t1.offset = t2;
    return _this._decodeImage$1(gifImage);
    },
    decode$2$frame(bytes, frame) {
    var lastImage, firstImage, i, t1, image, t2, t3, t4, t5, t6, colorMap, r, g, b, a, p, _this = this, _null = null;
    if (_this.startDecode$1(bytes) == null)
        return _null;
    if (_this.info.frames.length === 1 || false)
        return _this.decodeFrame$1(0);
    for (lastImage = _null, firstImage = lastImage, i = 0; t1 = _this.info.frames, i < t1.length; ++i) {
        frame = t1[i];
        image = _this.decodeFrame$1(i);
        if (image == null)
        return _null;
        image.frameDuration = frame.duration * 10;
        if (firstImage == null || lastImage == null) {
        image.loopCount = _this._repeat;
        lastImage = image;
        firstImage = lastImage;
        continue;
        }
        t1 = image.data;
        t2 = t1 == null;
        t3 = t2 ? _null : t1.width;
        if (t3 == null)
        t3 = 0;
        t4 = lastImage.data;
        t5 = t4 == null;
        t6 = t5 ? _null : t4.width;
        if (t3 === (t6 == null ? 0 : t6)) {
        t1 = t2 ? _null : t1.height;
        if (t1 == null)
            t1 = 0;
        t2 = t5 ? _null : t4.height;
        if (t1 === (t2 == null ? 0 : t2)) {
            t1 = frame.__GifImageDesc_x_A;
            t1 === $ && A.throwLateFieldNI("x");
            if (t1 === 0) {
            t1 = frame.__GifImageDesc_y_A;
            t1 === $ && A.throwLateFieldNI("y");
            t1 = t1 === 0 && frame.clearFrame;
            } else
            t1 = false;
        } else
            t1 = false;
        } else
        t1 = false;
        if (t1) {
        firstImage.addFrame$1(image);
        lastImage = image;
        continue;
        }
        if (frame.clearFrame) {
        colorMap = frame.colorMap;
        if (!(colorMap != null)) {
            t1 = _this.info.globalColorMap;
            t1.toString;
            colorMap = t1;
        }
        t1 = t5 ? _null : t4.width;
        if (t1 == null)
            t1 = 0;
        t2 = t5 ? _null : t4.height;
        if (t2 == null)
            t2 = 0;
        lastImage = A.Image$(_null, _null, B.Format_3, 0, B.FrameType_2, t2, _null, 0, 1, colorMap.getPalette$0(), t1, false);
        t1 = _this.info.backgroundColor.data;
        t2 = t1.length;
        if (t2 !== 0) {
            if (0 >= t2)
            return A.ioore(t1, 0);
            t1 = t1[0];
        } else
            t1 = 0;
        t2 = colorMap._palette;
        r = t2.getRed$1(t1);
        g = t2.getGreen$1(t1);
        b = t2.getBlue$1(t1);
        a = t1 === colorMap.transparent ? 0 : 255;
        t1 = new Uint8Array(4);
        if (0 >= 4)
            return A.ioore(t1, 0);
        t1[0] = r;
        if (1 >= 4)
            return A.ioore(t1, 1);
        t1[1] = g;
        if (2 >= 4)
            return A.ioore(t1, 2);
        t1[2] = b;
        if (3 >= 4)
            return A.ioore(t1, 3);
        t1[3] = a;
        t2 = lastImage.data;
        if (t2 != null)
            t2.clear$1(0, new A.ColorUint8(t1));
        } else
        lastImage = A.Image$from(lastImage, false, false);
        lastImage.frameDuration = image.frameDuration;
        for (t1 = image.data, t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        p = t1.get$current();
        if (p.get$a() !== 0) {
            t2 = p.get$x();
            t3 = frame.__GifImageDesc_x_A;
            t3 === $ && A.throwLateFieldNI("x");
            t4 = p.get$y();
            t5 = frame.__GifImageDesc_y_A;
            t5 === $ && A.throwLateFieldNI("y");
            lastImage.setPixel$3(t2 + t3, t4 + t5, p);
        }
        }
        firstImage.addFrame$1(lastImage);
    }
    return firstImage;
    },
    _skipImage$0() {
    var gifImage,
        t1 = this._input;
    if (t1.offset >= t1.end)
        return null;
    gifImage = new A.InternalGifImageDesc();
    gifImage.GifImageDesc$1(t1);
    ++this._input.offset;
    this._skipRemainder$0();
    return gifImage;
    },
    _decodeImage$1(gifImage) {
    var t1, t2, t3, t4, colorMap, image, line, i, j, y, _this = this, _null = null;
    if (_this._gif_decoder$_buffer == null) {
        _this._gif_decoder$_buffer = new Uint8Array(256);
        _this.__GifDecoder__stack_A = new Uint8Array(4095);
        _this.__GifDecoder__suffix_A = new Uint8Array(4096);
        _this._prefix = new Uint32Array(4096);
    }
    t1 = _this._bitsPerPixel = _this._input.readByte$0();
    t2 = B.JSInt_methods.$shl(1, t1);
    _this._clearCode = t2;
    ++t2;
    _this._eofCode = t2;
    _this._runningCode = t2 + 1;
    ++t1;
    _this._runningBits = t1;
    _this._maxCode1 = B.JSInt_methods.$shl(1, t1);
    _this._stackPtr = 0;
    _this._lastCode = 4098;
    _this._currentShiftDWord = _this._currentShiftState = 0;
    _this._gif_decoder$_buffer[0] = 0;
    t1 = _this._prefix;
    t1.toString;
    B.NativeUint32List_methods.fillRange$3(t1, 0, 4096, 4098);
    t1 = gifImage.__GifImageDesc_width_A;
    t1 === $ && A.throwLateFieldNI("width");
    t2 = gifImage.__GifImageDesc_height_A;
    t2 === $ && A.throwLateFieldNI("height");
    t3 = gifImage.__GifImageDesc_x_A;
    t3 === $ && A.throwLateFieldNI("x");
    t4 = _this.info;
    if (t3 + t1 <= t4.width) {
        t3 = gifImage.__GifImageDesc_y_A;
        t3 === $ && A.throwLateFieldNI("y");
        t3 = t3 + t2 > t4.height;
    } else
        t3 = true;
    if (t3)
        return _null;
    colorMap = gifImage.colorMap;
    if (!(colorMap != null)) {
        t3 = t4.globalColorMap;
        t3.toString;
        colorMap = t3;
    }
    _this._pixelCount = t1 * t2;
    image = A.Image$(_null, _null, B.Format_3, 0, B.FrameType_2, t2, _null, 0, 1, colorMap.getPalette$0(), t1, false);
    line = new Uint8Array(t1);
    t1 = gifImage.__GifImageDesc_interlaced_A;
    t1 === $ && A.throwLateFieldNI("interlaced");
    if (t1) {
        t1 = gifImage.__GifImageDesc_y_A;
        t1 === $ && A.throwLateFieldNI("y");
        for (t2 = t1 + t2, i = 0, j = 0; i < 4; ++i)
        for (y = t1 + B.List_0_4_2_1[i]; y < t2; y += B.List_8_8_4_2[i], ++j) {
            if (!_this._getLine$1(line))
            return image;
            _this._updateImage$4(image, y, colorMap, line);
        }
    } else
        for (y = 0; y < t2; ++y) {
        if (!_this._getLine$1(line))
            return image;
        _this._updateImage$4(image, y, colorMap, line);
        }
    return image;
    },
    _updateImage$4(image, y, colorMap, line) {
    var x, t1, t2,
        width = line.length;
    for (x = 0; x < width; ++x) {
        t1 = line[x];
        t2 = image.data;
        if (t2 != null)
        t2.setPixelRgb$5(x, y, t1, 0, 0);
    }
    },
    _getInfo$0() {
    var t1, b, i, t2, t3, t4, t5, t6, t7, _this = this,
        tag = _this._input.readString$1(6);
    if (tag !== "GIF87a" && tag !== "GIF89a")
        return false;
    t1 = _this.info;
    t1.toString;
    t1.width = _this._input.readUint16$0();
    t1 = _this.info;
    t1.toString;
    t1.height = _this._input.readUint16$0();
    b = _this._input.readByte$0();
    t1 = _this.info;
    t1.toString;
    t1.backgroundColor = new A.ColorUint8(new Uint8Array(A._ensureNativeList(A._setArrayType([_this._input.readByte$0()], type$.JSArray_int))));
    ++_this._input.offset;
    if ((b & 128) !== 0) {
        t1 = _this.info;
        t1.toString;
        t1.globalColorMap = A.GifColorMap$(B.JSInt_methods._shlPositive$1(1, (b & 7) + 1));
        for (i = 0; t1 = _this.info.globalColorMap, i < t1.numColors; ++i) {
        t2 = _this._input;
        t3 = t2.buffer;
        t4 = t2.offset;
        t5 = t2.offset = t4 + 1;
        t6 = t3.length;
        if (!(t4 >= 0 && t4 < t6))
            return A.ioore(t3, t4);
        t4 = t3[t4];
        t7 = t2.offset = t5 + 1;
        if (!(t5 >= 0 && t5 < t6))
            return A.ioore(t3, t5);
        t5 = t3[t5];
        t2.offset = t7 + 1;
        if (!(t7 >= 0 && t7 < t6))
            return A.ioore(t3, t7);
        t7 = t3[t7];
        t1._palette.setRgb$4(i, t4, t5, t7);
        }
    }
    _this.info.toString;
    return true;
    },
    _getLine$1(line) {
    var _this = this,
        t1 = _this._pixelCount;
    t1.toString;
    _this._pixelCount = t1 - line.length;
    if (!_this._decompressLine$1(line))
        return false;
    if (_this._pixelCount === 0)
        _this._skipRemainder$0();
    return true;
    },
    _skipRemainder$0() {
    var b, t2, t3,
        t1 = this._input;
    if (t1.offset >= t1.end)
        return true;
    b = t1.readByte$0();
    while (true) {
        if (b !== 0) {
        t1 = this._input;
        t1 = t1.offset < t1.end;
        } else
        t1 = false;
        if (!t1)
        break;
        t1 = this._input;
        t2 = t1.offset += b;
        if (t2 >= t1.end)
        return true;
        t3 = t1.buffer;
        t1.offset = t2 + 1;
        if (!(t2 >= 0 && t2 < t3.length))
        return A.ioore(t3, t2);
        b = t3[t2];
    }
    return true;
    },
    _decompressLine$1(line) {
    var lineLen, i, i0, t2, currentPrefix, j, t3, t4, t5, t6, j0, _this = this, _s6_ = "_stack",
        _s7_ = "_suffix",
        t1 = _this._stackPtr;
    if (t1 > 4095)
        return false;
    lineLen = line.length;
    if (t1 !== 0) {
        i = 0;
        while (true) {
        if (!(t1 !== 0 && i < lineLen))
            break;
        i0 = i + 1;
        t2 = _this.__GifDecoder__stack_A;
        t2 === $ && A.throwLateFieldNI(_s6_);
        t1 = _this._stackPtr = t1 - 1;
        if (!(t1 >= 0))
            return A.ioore(t2, t1);
        t2 = t2[t1];
        if (!(i < lineLen))
            return A.ioore(line, i);
        line[i] = t2;
        i = i0;
        }
    } else
        i = 0;
    for (; i < lineLen;) {
        currentPrefix = _this._currentCode = _this._decompressInput$0();
        if (currentPrefix == null)
        return false;
        t1 = _this._eofCode;
        if (currentPrefix === t1)
        return false;
        t2 = _this._clearCode;
        if (currentPrefix === t2) {
        for (t2 = _this._prefix, j = 0; j <= 4095; ++j)
            t2[j] = 4098;
        _this._runningCode = t1 + 1;
        t1 = _this._bitsPerPixel + 1;
        _this._runningBits = t1;
        _this._maxCode1 = B.JSInt_methods.$shl(1, t1);
        _this._lastCode = 4098;
        } else {
        if (currentPrefix < t2) {
            i0 = i + 1;
            if (!(i >= 0))
            return A.ioore(line, i);
            line[i] = currentPrefix;
            i = i0;
        } else {
            t1 = _this._prefix;
            t1.toString;
            if (currentPrefix >>> 0 !== currentPrefix || currentPrefix >= 4096)
            return A.ioore(t1, currentPrefix);
            if (t1[currentPrefix] === 4098) {
            t3 = _this._runningCode - 2;
            if (currentPrefix === t3) {
                currentPrefix = _this._lastCode;
                t4 = _this.__GifDecoder__suffix_A;
                t4 === $ && A.throwLateFieldNI(_s7_);
                t5 = _this.__GifDecoder__stack_A;
                t5 === $ && A.throwLateFieldNI(_s6_);
                t6 = _this._stackPtr++;
                t2 = _this._getPrefixChar$3(t1, currentPrefix, t2);
                if (!(t6 >= 0 && t6 < 4095))
                return A.ioore(t5, t6);
                t5[t6] = t2;
                if (!(t3 >= 0 && t3 < 4096))
                return A.ioore(t4, t3);
                t4[t3] = t2;
            } else
                return false;
            }
            j = 0;
            while (true) {
            j0 = j + 1;
            if (!(j <= 4095 && currentPrefix > _this._clearCode && currentPrefix <= 4095))
                break;
            t1 = _this.__GifDecoder__stack_A;
            t1 === $ && A.throwLateFieldNI(_s6_);
            t2 = _this._stackPtr++;
            t3 = _this.__GifDecoder__suffix_A;
            t3 === $ && A.throwLateFieldNI(_s7_);
            if (!(currentPrefix >= 0 && currentPrefix < 4096))
                return A.ioore(t3, currentPrefix);
            t3 = t3[currentPrefix];
            if (!(t2 >= 0 && t2 < 4095))
                return A.ioore(t1, t2);
            t1[t2] = t3;
            t3 = _this._prefix;
            t3.toString;
            if (!(currentPrefix < 4096))
                return A.ioore(t3, currentPrefix);
            currentPrefix = t3[currentPrefix];
            j = j0;
            }
            if (j0 >= 4095 || currentPrefix > 4095)
            return false;
            t1 = _this.__GifDecoder__stack_A;
            t1 === $ && A.throwLateFieldNI(_s6_);
            t2 = _this._stackPtr++;
            if (!(t2 >= 0 && t2 < 4095))
            return A.ioore(t1, t2);
            t1[t2] = currentPrefix;
            while (true) {
            t1 = _this._stackPtr;
            if (!(t1 !== 0 && i < lineLen))
                break;
            i0 = i + 1;
            t2 = _this.__GifDecoder__stack_A;
            --t1;
            _this._stackPtr = t1;
            if (!(t1 >= 0 && t1 < 4095))
                return A.ioore(t2, t1);
            t1 = t2[t1];
            if (!(i >= 0 && i < lineLen))
                return A.ioore(line, i);
            line[i] = t1;
            i = i0;
            }
        }
        t1 = _this._lastCode;
        if (t1 !== 4098) {
            t2 = _this._prefix;
            t2.toString;
            t3 = _this._runningCode - 2;
            if (!(t3 >= 0 && t3 < 4096))
            return A.ioore(t2, t3);
            t3 = t2[t3] === 4098;
            t2 = t3;
        } else
            t2 = false;
        if (t2) {
            t2 = _this._prefix;
            t2.toString;
            t3 = _this._runningCode - 2;
            if (!(t3 >= 0 && t3 < 4096))
            return A.ioore(t2, t3);
            t2[t3] = t1;
            t4 = _this._currentCode;
            t5 = _this.__GifDecoder__suffix_A;
            t6 = _this._clearCode;
            if (t4 === t3) {
            t5 === $ && A.throwLateFieldNI(_s7_);
            t5[t3] = _this._getPrefixChar$3(t2, t1, t6);
            } else {
            t5 === $ && A.throwLateFieldNI(_s7_);
            t4.toString;
            t5[t3] = _this._getPrefixChar$3(t2, t4, t6);
            }
        }
        t1 = _this._currentCode;
        t1.toString;
        _this._lastCode = t1;
        }
    }
    return true;
    },
    _decompressInput$0() {
    var t1, t2, t3, t4, _this = this;
    if (_this._runningBits > 12)
        return null;
    for (; t1 = _this._currentShiftState, t2 = _this._runningBits, t1 < t2;) {
        t1 = _this._bufferedInput$0();
        t1.toString;
        t2 = _this._currentShiftDWord;
        t3 = _this._currentShiftState;
        _this._currentShiftDWord = (t2 | B.JSInt_methods.$shl(t1, t3)) >>> 0;
        _this._currentShiftState = t3 + 8;
    }
    t3 = _this._currentShiftDWord;
    if (!(t2 >= 0 && t2 < 13))
        return A.ioore(B.List_Qw3, t2);
    t4 = B.List_Qw3[t2];
    _this._currentShiftDWord = B.JSInt_methods._shrBothPositive$1(t3, t2);
    _this._currentShiftState = t1 - t2;
    t1 = _this._runningCode;
    if (t1 < 4097) {
        ++t1;
        _this._runningCode = t1;
        t1 = t1 > _this._maxCode1 && t2 < 12;
    } else
        t1 = false;
    if (t1) {
        _this._maxCode1 = _this._maxCode1 << 1 >>> 0;
        _this._runningBits = t2 + 1;
    }
    return t3 & t4;
    },
    _getPrefixChar$3(prefix, code, clearCode) {
    var i0, t1, i = 0;
    while (true) {
        if (code > clearCode) {
        i0 = i + 1;
        t1 = i <= 4095;
        i = i0;
        } else
        t1 = false;
        if (!t1)
        break;
        if (code > 4095)
        return 4098;
        prefix.toString;
        if (!(code >= 0))
        return A.ioore(prefix, code);
        code = prefix[code];
    }
    return code;
    },
    _bufferedInput$0() {
    var nextByte, t3, _this = this,
        t1 = _this._gif_decoder$_buffer,
        t2 = t1[0];
    if (t2 === 0) {
        t1[0] = _this._input.readByte$0();
        t1 = _this._gif_decoder$_buffer;
        t2 = t1[0];
        if (t2 === 0)
        return null;
        B.NativeUint8List_methods.setRange$3(t1, 1, 1 + t2, _this._input.readBytes$1(t2).toUint8List$0());
        t1 = _this._gif_decoder$_buffer;
        nextByte = t1[1];
        t1[1] = 2;
        t1[0] = t1[0] - 1;
    } else {
        t3 = t1[1];
        t1[1] = t3 + 1;
        if (!(t3 < 256))
        return A.ioore(t1, t3);
        nextByte = t1[t3];
        t1[0] = t2 - 1;
    }
    return nextByte;
    }
};
A.IcoType.prototype = {
    _enumToString$0() {
    return "IcoType." + this._name;
    }
};
A.IcoInfo.prototype = {$isDecodeInfo: 1};
A.IcoInfoImage.prototype = {};
A.IcoBmpInfo.prototype = {
    get$height() {
    return B.JSInt_methods._tdivFast$1(A.BmpInfo.prototype.get$height.call(this), 2);
    },
    get$ignoreAlphaChannel() {
    return !(this.headerSize === 40 && this.bitsPerPixel === 32) && A.BmpInfo.prototype.get$ignoreAlphaChannel.call(this);
    }
};
A.IcoDecoder.prototype = {
    decode$2$frame(bytes, frame) {
    var info, firstImage, i, _this = this,
        t1 = A.InputBuffer$(bytes, false, null, 0);
    _this._ico_decoder$_input = t1;
    info = _this._icoInfo = A.IcoInfo_read(t1);
    if (info == null)
        return null;
    if (info.images.length === 1 || false)
        return _this.decodeFrame$1(0);
    for (firstImage = null, i = 0; i < _this._icoInfo.images.length; ++i) {
        frame = _this.decodeFrame$1(i);
        if (frame == null)
        continue;
        if (firstImage == null) {
        frame.frameType = B.FrameType_2;
        firstImage = frame;
        } else
        firstImage.addFrame$1(frame);
    }
    return firstImage;
    },
    decodeFrame$1(frame) {
    var t2, imageInfo, t3, imageBuffer, png, dummyBmpHeader, t4, t5, t6, t7, t8, t9, t10, bmpInfo, offset, inp, bmp, image, padding, rowLength, y, line, bytes, p, x, j, _null = null,
        t1 = this._ico_decoder$_input;
    if (t1 != null) {
        t2 = this._icoInfo;
        t2 = t2 == null || frame >= t2.numFrames;
    } else
        t2 = true;
    if (t2)
        return _null;
    t2 = this._icoInfo.images;
    if (!(frame < t2.length))
        return A.ioore(t2, frame);
    imageInfo = t2[frame];
    t2 = t1.buffer;
    t1 = t1.start + imageInfo.bytesOffset;
    t3 = imageInfo.bytesSize;
    imageBuffer = J.sublist$2$ax(t2, t1, t1 + t3);
    png = new A.PngDecoder(A.InternalPngInfo$());
    type$.Uint8List._as(imageBuffer);
    if (png.isValidFile$1(imageBuffer))
        return png.decode$1(imageBuffer);
    dummyBmpHeader = A.OutputBuffer$(false, 14);
    dummyBmpHeader.writeUint16$1(19778);
    dummyBmpHeader.writeUint32$1(t3);
    dummyBmpHeader.writeUint32$1(0);
    dummyBmpHeader.writeUint32$1(0);
    t1 = A.InputBuffer$(imageBuffer, false, _null, 0);
    t2 = A.BmpFileHeader$(A.InputBuffer$(A.NativeUint8List_NativeUint8List$view(dummyBmpHeader._output_buffer$_buffer.buffer, 0, dummyBmpHeader.length), false, _null, 0));
    t3 = t1.offset;
    t4 = t1.readUint32$0();
    t5 = t1.readUint32$0();
    t6 = $.$get$__uint32();
    t6[0] = t5;
    t5 = $.$get$__uint32ToInt32();
    if (0 >= t5.length)
        return A.ioore(t5, 0);
    t7 = t5[0];
    t6[0] = t1.readUint32$0();
    t5 = t5[0];
    t8 = t1.readUint16$0();
    t9 = t1.readUint16$0();
    t10 = t1.readUint32$0();
    if (!(t10 < 14))
        return A.ioore(B.List_WrD, t10);
    t10 = B.List_WrD[t10];
    t1.readUint32$0();
    t6[0] = t1.readUint32$0();
    t6[0] = t1.readUint32$0();
    t6 = t1.readUint32$0();
    t1.readUint32$0();
    bmpInfo = new A.IcoBmpInfo(t2, t7, t5, t4, t8, t9, t10, t6, t3);
    bmpInfo.BmpInfo$2$fileHeader(t1, t2);
    if (t4 !== 40 && t8 !== 1)
        return _null;
    offset = t6 === 0 && t9 <= 8 ? 40 + 4 * B.JSInt_methods._shlPositive$1(1, t9) : 40 + 4 * t6;
    t2.__BmpFileHeader_imageOffset_A = offset;
    dummyBmpHeader.length -= 4;
    dummyBmpHeader.writeUint32$1(offset);
    inp = A.InputBuffer$(imageBuffer, false, _null, 0);
    bmp = new A.DibDecoder(true);
    bmp.__BmpDecoder__input_A = inp;
    bmp.info = bmpInfo;
    image = bmp.decodeFrame$1(0);
    if (t9 >= 32)
        return image;
    padding = 32 - B.JSInt_methods.$mod(t7, 32);
    rowLength = B.JSInt_methods._tdivFast$1(padding === 32 ? t7 : t7 + padding, 8);
    for (t1 = 1 / t5 < 0, t2 = t5 < 0, t5 = t5 === 0, y = 0; y < B.JSInt_methods._tdivFast$1(A.BmpInfo.prototype.get$height.call(bmpInfo), 2); ++y) {
        if (!(t5 ? t1 : t2))
        line = y;
        else {
        t3 = image.data;
        t3 = t3 == null ? _null : t3.height;
        line = (t3 == null ? 0 : t3) - 1 - y;
        }
        bytes = inp.subset$1(rowLength);
        inp.offset = inp.offset + (bytes.end - bytes.offset);
        t3 = image.data;
        p = t3 == null ? _null : t3.getPixel$3(0, line, _null);
        if (p == null)
        p = new A.PixelUndefined();
        for (x = 0; x < t7;) {
        t3 = bytes.buffer;
        t4 = bytes.offset++;
        if (!(t4 >= 0 && t4 < t3.length))
            return A.ioore(t3, t4);
        t4 = t3[t4];
        j = 7;
        while (true) {
            if (!(j > -1 && x < t7))
            break;
            if ((t4 & B.JSInt_methods.$shl(1, j)) >>> 0 !== 0)
            p.set$a(0);
            p.moveNext$0();
            ++x;
            --j;
        }
        }
    }
    return image;
    }
};
A.ComponentData.prototype = {};
A.HuffmanNode.prototype = {};
A.HuffmanParent.prototype = {};
A.HuffmanValue.prototype = {};
A.JpegAdobe.prototype = {};
A.JpegComponent.prototype = {
    set$__JpegComponent_blocks_A(__JpegComponent_blocks_A) {
    this.__JpegComponent_blocks_A = type$.List_List_List_int._as(__JpegComponent_blocks_A);
    },
    set$__JpegComponent_huffmanTableDC_A(__JpegComponent_huffmanTableDC_A) {
    this.__JpegComponent_huffmanTableDC_A = type$.List_nullable_HuffmanNode._as(__JpegComponent_huffmanTableDC_A);
    },
    set$__JpegComponent_huffmanTableAC_A(__JpegComponent_huffmanTableAC_A) {
    this.__JpegComponent_huffmanTableAC_A = type$.List_nullable_HuffmanNode._as(__JpegComponent_huffmanTableAC_A);
    }
};
A.JpegData.prototype = {
    validate$1(bytes) {
    var soiCheck, t2, t3, marker, hasSOF, hasSOS, sectionByteSize, _this = this,
        t1 = A.InputBuffer$(type$.List_int._as(bytes), true, null, 0);
    _this.__JpegData_input_A = t1;
    soiCheck = t1.subset$2$offset(2, 0);
    t1 = soiCheck.buffer;
    t2 = soiCheck.offset;
    t3 = t1.length;
    if (!(t2 >= 0 && t2 < t3))
        return A.ioore(t1, t2);
    if (t1[t2] === 255) {
        ++t2;
        if (!(t2 < t3))
        return A.ioore(t1, t2);
        t2 = t1[t2] !== 216;
        t1 = t2;
    } else
        t1 = true;
    if (t1)
        return false;
    if (_this._nextMarker$0() !== 216)
        return false;
    marker = _this._nextMarker$0();
    hasSOF = false;
    hasSOS = false;
    while (true) {
        if (marker !== 217) {
        t1 = _this.__JpegData_input_A;
        t1 = t1.offset < t1.end;
        } else
        t1 = false;
        if (!t1)
        break;
        sectionByteSize = _this.__JpegData_input_A.readUint16$0();
        if (sectionByteSize < 2)
        break;
        t1 = _this.__JpegData_input_A;
        t1.offset = t1.offset + (sectionByteSize - 2);
        switch (marker) {
        case 192:
        case 193:
        case 194:
            hasSOF = true;
            break;
        case 218:
            hasSOS = true;
            break;
        }
        marker = _this._nextMarker$0();
    }
    return hasSOF && hasSOS;
    },
    read$1(bytes) {
    var t1, i, t2, t3, component, t4, t5, t6, _this = this;
    _this.__JpegData_input_A = A.InputBuffer$(type$.List_int._as(bytes), true, null, 0);
    _this._read$0();
    if (_this.frames.length !== 1)
        throw A.wrapException(A.ImageException$("Only single frame JPEGs supported"));
    for (t1 = _this.components, i = 0; t2 = _this.frame, t3 = t2.componentsOrder, i < t3.length; ++i) {
        component = t2.components.$index(0, t3[i]);
        t2 = component.hSamples;
        t3 = _this.frame;
        t4 = t3.maxHSamples;
        t5 = component.vSamples;
        t6 = t3.maxVSamples;
        t3 = _this._buildComponentData$2(t3, component);
        t2 = t2 === 1 && t4 === 2 ? 1 : 0;
        B.JSArray_methods.add$1(t1, new A.ComponentData(t3, t2, t5 === 1 && t6 === 2 ? 1 : 0));
    }
    },
    _read$0() {
    var marker, t1, $length, bytes, t2, t3, t4, t5, _this = this;
    if (_this._nextMarker$0() !== 216)
        throw A.wrapException(A.ImageException$("Start Of Image marker not found."));
    marker = _this._nextMarker$0();
    while (true) {
        if (marker !== 217) {
        t1 = _this.__JpegData_input_A;
        t1 === $ && A.throwLateFieldNI("input");
        t1 = t1.offset < t1.end;
        } else
        t1 = false;
        if (!t1)
        break;
        t1 = _this.__JpegData_input_A;
        t1 === $ && A.throwLateFieldNI("input");
        $length = t1.readUint16$0();
        if ($length < 2)
        A.throwExpression(A.ImageException$("Invalid Block"));
        t1 = _this.__JpegData_input_A;
        bytes = t1.subset$1($length - 2);
        t1.offset = t1.offset + (bytes.end - bytes.offset);
        switch (marker) {
        case 224:
        case 225:
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 231:
        case 232:
        case 233:
        case 234:
        case 235:
        case 236:
        case 237:
        case 238:
        case 239:
        case 254:
            _this._readAppData$2(marker, bytes);
            break;
        case 219:
            _this._readDQT$1(bytes);
            break;
        case 192:
        case 193:
        case 194:
            _this._readFrame$2(marker, bytes);
            break;
        case 195:
        case 197:
        case 198:
        case 199:
        case 200:
        case 201:
        case 202:
        case 203:
        case 205:
        case 206:
        case 207:
            throw A.wrapException(A.ImageException$("Unhandled frame type " + B.JSInt_methods.toRadixString$1(marker, 16)));
        case 196:
            _this._readDHT$1(bytes);
            break;
        case 221:
            _this.resetInterval = bytes.readUint16$0();
            break;
        case 218:
            _this._readSOS$1(bytes);
            break;
        case 255:
            t1 = _this.__JpegData_input_A;
            t2 = t1.buffer;
            t3 = t1.offset;
            if (!(t3 >= 0 && t3 < t2.length))
            return A.ioore(t2, t3);
            if (t2[t3] !== 255)
            t1.offset = t3 - 1;
            break;
        default:
            t1 = _this.__JpegData_input_A;
            t2 = t1.buffer;
            t3 = t1.offset;
            t4 = t3 + -3;
            t5 = t2.length;
            if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t2, t4);
            if (t2[t4] === 255) {
            t4 = t3 + -2;
            if (!(t4 >= 0 && t4 < t5))
                return A.ioore(t2, t4);
            t4 = t2[t4];
            t2 = t4 >= 192 && t4 <= 254;
            } else
            t2 = false;
            if (t2) {
            t1.offset = t3 - 3;
            break;
            }
            if (marker !== 0)
            throw A.wrapException(A.ImageException$("Unknown JPEG marker " + B.JSInt_methods.toRadixString$1(marker, 16)));
            break;
        }
        marker = _this._nextMarker$0();
    }
    },
    _nextMarker$0() {
    var c, _this = this,
        t1 = _this.__JpegData_input_A;
    t1 === $ && A.throwLateFieldNI("input");
    if (t1.offset >= t1.end)
        return 0;
    do {
        do {
        c = _this.__JpegData_input_A.readByte$0();
        if (c !== 255) {
            t1 = _this.__JpegData_input_A;
            t1 = t1.offset < t1.end;
        } else
            t1 = false;
        } while (t1);
        t1 = _this.__JpegData_input_A;
        if (t1.offset >= t1.end)
        return c;
        do {
        c = _this.__JpegData_input_A.readByte$0();
        if (c === 255) {
            t1 = _this.__JpegData_input_A;
            t1 = t1.offset < t1.end;
        } else
            t1 = false;
        } while (t1);
        if (c === 0) {
        t1 = _this.__JpegData_input_A;
        t1 = t1.offset < t1.end;
        } else
        t1 = false;
    } while (t1);
    return c;
    },
    _readExifData$1(block) {
    if (block.readUint32$0() !== 1165519206)
        return;
    if (block.readUint16$0() !== 0)
        return;
    this.exif.read$1(block);
    },
    _readAppData$2(marker, block) {
    var t1, t2, t3, t4, exception,
        appData = block;
    if (marker === 224) {
        t1 = appData;
        t2 = t1.buffer;
        t1 = t1.offset;
        if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
        if (t2[t1] === 74) {
        t1 = appData;
        t2 = t1.buffer;
        t1 = t1.offset + 1;
        if (!(t1 >= 0 && t1 < t2.length))
            return A.ioore(t2, t1);
        if (t2[t1] === 70) {
            t1 = appData;
            t2 = t1.buffer;
            t1 = t1.offset + 2;
            if (!(t1 >= 0 && t1 < t2.length))
            return A.ioore(t2, t1);
            if (t2[t1] === 73) {
            t1 = appData;
            t2 = t1.buffer;
            t1 = t1.offset + 3;
            if (!(t1 >= 0 && t1 < t2.length))
                return A.ioore(t2, t1);
            if (t2[t1] === 70) {
                t1 = appData;
                t2 = t1.buffer;
                t1 = t1.offset + 4;
                if (!(t1 >= 0 && t1 < t2.length))
                return A.ioore(t2, t1);
                t1 = t2[t1] === 0;
            } else
                t1 = false;
            } else
            t1 = false;
        } else
            t1 = false;
        } else
        t1 = false;
        if (t1) {
        t1 = new A.JpegJfif();
        t2 = appData;
        t3 = t2.buffer;
        t2 = t2.offset + 5;
        if (!(t2 >= 0 && t2 < t3.length))
            return A.ioore(t3, t2);
        t3 = appData;
        t2 = t3.buffer;
        t3 = t3.offset + 6;
        if (!(t3 >= 0 && t3 < t2.length))
            return A.ioore(t2, t3);
        t2 = appData;
        t3 = t2.buffer;
        t2 = t2.offset + 7;
        if (!(t2 >= 0 && t2 < t3.length))
            return A.ioore(t3, t2);
        t3 = appData;
        t2 = t3.buffer;
        t3 = t3.offset + 8;
        if (!(t3 >= 0 && t3 < t2.length))
            return A.ioore(t2, t3);
        t2 = appData;
        t3 = t2.buffer;
        t2 = t2.offset + 9;
        if (!(t2 >= 0 && t2 < t3.length))
            return A.ioore(t3, t2);
        t3 = appData;
        t2 = t3.buffer;
        t3 = t3.offset + 10;
        if (!(t3 >= 0 && t3 < t2.length))
            return A.ioore(t2, t3);
        t2 = appData;
        t3 = t2.buffer;
        t2 = t2.offset + 11;
        if (!(t2 >= 0 && t2 < t3.length))
            return A.ioore(t3, t2);
        t3 = appData;
        t2 = t3.buffer;
        t3 = t3.offset + 12;
        if (!(t3 >= 0 && t3 < t2.length))
            return A.ioore(t2, t3);
        t3 = t2[t3];
        t1.__JpegJfif_thumbWidth_A = t3;
        t2 = appData;
        t4 = t2.buffer;
        t2 = t2.offset + 13;
        if (!(t2 >= 0 && t2 < t4.length))
            return A.ioore(t4, t2);
        t2 = t4[t2];
        t1.__JpegJfif_thumbHeight_A = t2;
        this.__JpegData_jfif_A = t1;
        appData.subset$2$offset(14 + 3 * t3 * t2, 14);
        }
    } else if (marker === 225)
        this._readExifData$1(appData);
    else if (marker === 238) {
        t1 = appData;
        t2 = t1.buffer;
        t1 = t1.offset;
        if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
        if (t2[t1] === 65) {
        t1 = appData;
        t2 = t1.buffer;
        t1 = t1.offset + 1;
        if (!(t1 >= 0 && t1 < t2.length))
            return A.ioore(t2, t1);
        if (t2[t1] === 100) {
            t1 = appData;
            t2 = t1.buffer;
            t1 = t1.offset + 2;
            if (!(t1 >= 0 && t1 < t2.length))
            return A.ioore(t2, t1);
            if (t2[t1] === 111) {
            t1 = appData;
            t2 = t1.buffer;
            t1 = t1.offset + 3;
            if (!(t1 >= 0 && t1 < t2.length))
                return A.ioore(t2, t1);
            if (t2[t1] === 98) {
                t1 = appData;
                t2 = t1.buffer;
                t1 = t1.offset + 4;
                if (!(t1 >= 0 && t1 < t2.length))
                return A.ioore(t2, t1);
                if (t2[t1] === 101) {
                t1 = appData;
                t2 = t1.buffer;
                t1 = t1.offset + 5;
                if (!(t1 >= 0 && t1 < t2.length))
                    return A.ioore(t2, t1);
                t1 = t2[t1] === 0;
                } else
                t1 = false;
            } else
                t1 = false;
            } else
            t1 = false;
        } else
            t1 = false;
        } else
        t1 = false;
        if (t1) {
        t1 = new A.JpegAdobe();
        this.adobe = t1;
        t2 = appData;
        t3 = t2.buffer;
        t2 = t2.offset + 6;
        if (!(t2 >= 0 && t2 < t3.length))
            return A.ioore(t3, t2);
        t3 = appData;
        t2 = t3.buffer;
        t3 = t3.offset + 7;
        if (!(t3 >= 0 && t3 < t2.length))
            return A.ioore(t2, t3);
        t2 = appData;
        t3 = t2.buffer;
        t2 = t2.offset + 8;
        if (!(t2 >= 0 && t2 < t3.length))
            return A.ioore(t3, t2);
        t3 = appData;
        t2 = t3.buffer;
        t3 = t3.offset + 9;
        if (!(t3 >= 0 && t3 < t2.length))
            return A.ioore(t2, t3);
        t2 = appData;
        t3 = t2.buffer;
        t2 = t2.offset + 10;
        if (!(t2 >= 0 && t2 < t3.length))
            return A.ioore(t3, t2);
        t3 = appData;
        t2 = t3.buffer;
        t3 = t3.offset + 11;
        if (!(t3 >= 0 && t3 < t2.length))
            return A.ioore(t2, t3);
        t1.transformCode = t2[t3];
        }
    } else if (marker === 254)
        try {
        appData.readStringUtf8$0();
        } catch (exception) {
        A.getTraceFromException(exception);
        }
    },
    _readDQT$1(block) {
    var t1, t2, t3, t4, prec, n, tableData, i, tmp, t5;
    for (t1 = block.end, t2 = this.quantizationTables; t3 = block.offset, t4 = t3 < t1, t4;) {
        t4 = block.buffer;
        block.offset = t3 + 1;
        if (!(t3 >= 0 && t3 < t4.length))
        return A.ioore(t4, t3);
        t3 = t4[t3];
        prec = B.JSInt_methods._shrOtherPositive$1(t3, 4);
        n = t3 & 15;
        if (n >= 4)
        throw A.wrapException(A.ImageException$("Invalid number of quantization tables"));
        if (t2[n] == null)
        B.JSArray_methods.$indexSet(t2, n, new Int16Array(64));
        tableData = t2[n];
        for (t3 = prec !== 0, i = 0; i < 64; ++i) {
        if (t3)
            tmp = block.readUint16$0();
        else {
            t4 = block.buffer;
            t5 = block.offset++;
            if (!(t5 >= 0 && t5 < t4.length))
            return A.ioore(t4, t5);
            tmp = t4[t5];
        }
        tableData.toString;
        t4 = B.List_AZw[i];
        if (!(t4 < 64))
            return A.ioore(tableData, t4);
        tableData[t4] = tmp;
        }
    }
    if (t4)
        throw A.wrapException(A.ImageException$("Bad length for DQT block"));
    },
    _readFrame$2(marker, block) {
    var t1, numComponents, i, t2, t3, t4, t5, t6, t7, _this = this;
    if (_this.frame != null)
        throw A.wrapException(A.ImageException$("Duplicate JPG frame data found."));
    t1 = _this.frame = new A.JpegFrame(A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.JpegComponent), A._setArrayType([], type$.JSArray_int));
    t1.progressive = marker === 194;
    t1.precision = block.readByte$0();
    t1 = _this.frame;
    t1.toString;
    t1.scanLines = block.readUint16$0();
    t1 = _this.frame;
    t1.toString;
    t1.samplesPerLine = block.readUint16$0();
    numComponents = block.readByte$0();
    for (t1 = _this.quantizationTables, i = 0; i < numComponents; ++i) {
        t2 = block.buffer;
        t3 = block.offset;
        t4 = block.offset = t3 + 1;
        t5 = t2.length;
        if (!(t3 >= 0 && t3 < t5))
        return A.ioore(t2, t3);
        t3 = t2[t3];
        t6 = block.offset = t4 + 1;
        if (!(t4 >= 0 && t4 < t5))
        return A.ioore(t2, t4);
        t4 = t2[t4];
        t7 = B.JSInt_methods._shrOtherPositive$1(t4, 4);
        block.offset = t6 + 1;
        if (!(t6 >= 0 && t6 < t5))
        return A.ioore(t2, t6);
        t6 = t2[t6];
        B.JSArray_methods.add$1(_this.frame.componentsOrder, t3);
        _this.frame.components.$indexSet(0, t3, new A.JpegComponent(t7 & 15, t4 & 15, t1, t6));
    }
    _this.frame.prepare$0();
    B.JSArray_methods.add$1(_this.frames, _this.frame);
    },
    _readDHT$1(block) {
    var t1, ht, ht0, t2, t3, t4, index, bits, count, j, bytes, huffmanValues, ht1;
    for (t1 = block.end, ht = this.huffmanTablesDC, ht0 = this.huffmanTablesAC; t2 = block.offset, t2 < t1;) {
        t3 = block.buffer;
        t4 = block.offset = t2 + 1;
        if (!(t2 >= 0 && t2 < t3.length))
        return A.ioore(t3, t2);
        index = t3[t2];
        bits = new Uint8Array(16);
        for (t2 = t4, count = 0, j = 0; j < 16; ++j, t2 = t4) {
        t4 = t2 + 1;
        block.offset = t4;
        if (!(t2 >= 0 && t2 < t3.length))
            return A.ioore(t3, t2);
        t2 = t3[t2];
        if (!(j < 16))
            return A.ioore(bits, j);
        bits[j] = t2;
        count += bits[j];
        }
        bytes = block.subset$1(count);
        block.offset = block.offset + (bytes.end - bytes.offset);
        huffmanValues = bytes.toUint8List$0();
        if ((index & 16) !== 0) {
        index -= 16;
        ht1 = ht0;
        } else
        ht1 = ht;
        if (ht1.length <= index)
        B.JSArray_methods.set$length(ht1, index + 1);
        B.JSArray_methods.$indexSet(ht1, index, this._buildHuffmanTable$2(bits, huffmanValues));
    }
    },
    _readSOS$1(block) {
    var components, spectralStart, spectralEnd, successiveApproximation, t1, t2, t3, _this = this,
        n = block.readByte$0();
    if (n < 1 || n > 4)
        throw A.wrapException(A.ImageException$("Invalid SOS block"));
    components = A.List_List$generate(n, new A.JpegData__readSOS_closure(_this, block), type$.JpegComponent);
    spectralStart = block.readByte$0();
    spectralEnd = block.readByte$0();
    successiveApproximation = block.readByte$0();
    t1 = B.JSInt_methods._shrOtherPositive$1(successiveApproximation, 4);
    t2 = _this.__JpegData_input_A;
    t2 === $ && A.throwLateFieldNI("input");
    t3 = _this.frame;
    t1 = new A.JpegScan(t2, t3, components, _this.resetInterval, spectralStart, spectralEnd, t1 & 15, successiveApproximation & 15);
    t2 = t3.__JpegFrame_mcusPerLine_A;
    t2 === $ && A.throwLateFieldNI("mcusPerLine");
    t1.__JpegScan_mcusPerLine_A = t2;
    t1.progressive = t3.progressive;
    t1.decode$0();
    },
    _buildHuffmanTable$2(codeLengths, values) {
    var t1, p, t2, k, i, j, t3, t4, t5, q, t6,
        code = A._setArrayType([], type$.JSArray__JpegHuffman),
        $length = 16;
    while (true) {
        if (!($length > 0 && codeLengths[$length - 1] === 0))
        break;
        --$length;
    }
    t1 = type$.JSArray_nullable_HuffmanNode;
    B.JSArray_methods.add$1(code, new A._JpegHuffman(A._setArrayType([], t1)));
    if (0 >= code.length)
        return A.ioore(code, 0);
    p = code[0];
    for (t2 = values.length, k = 0, i = 0; i < $length;) {
        for (j = 0; j < codeLengths[i]; ++j) {
        if (0 >= code.length)
            return A.ioore(code, -1);
        p = code.pop();
        t3 = p.children;
        t4 = t3.length;
        t5 = p.index;
        if (t4 <= t5)
            B.JSArray_methods.set$length(t3, t5 + 1);
        t4 = p.index;
        if (!(k >= 0 && k < t2))
            return A.ioore(values, k);
        B.JSArray_methods.$indexSet(t3, t4, new A.HuffmanValue(values[k]));
        for (; t3 = p.index, t3 > 0;) {
            if (0 >= code.length)
            return A.ioore(code, -1);
            p = code.pop();
        }
        p.index = t3 + 1;
        B.JSArray_methods.add$1(code, p);
        for (; code.length <= i; p = q) {
            t3 = A._setArrayType([], t1);
            q = new A._JpegHuffman(t3);
            B.JSArray_methods.add$1(code, q);
            t4 = p.children;
            t5 = t4.length;
            t6 = p.index;
            if (t5 <= t6)
            B.JSArray_methods.set$length(t4, t6 + 1);
            B.JSArray_methods.$indexSet(t4, p.index, new A.HuffmanParent(t3));
        }
        ++k;
        }
        ++i;
        if (i < $length) {
        t3 = A._setArrayType([], t1);
        q = new A._JpegHuffman(t3);
        B.JSArray_methods.add$1(code, q);
        t4 = p.children;
        t5 = t4.length;
        t6 = p.index;
        if (t5 <= t6)
            B.JSArray_methods.set$length(t4, t6 + 1);
        B.JSArray_methods.$indexSet(t4, p.index, new A.HuffmanParent(t3));
        p = q;
        }
    }
    if (0 >= code.length)
        return A.ioore(code, 0);
    return code[0].children;
    },
    _buildComponentData$2(frame, component) {
    var t2, samplesPerLine, $R, r, t3, lines, t4, t5, l, blockRow, scanLine, i, l0, blockCol, t6, t7, sample, offset, j, line, offset0,
        t1 = component.__JpegComponent_blocksPerLine_A;
    t1 === $ && A.throwLateFieldNI("blocksPerLine");
    t2 = component.__JpegComponent_blocksPerColumn_A;
    t2 === $ && A.throwLateFieldNI("blocksPerColumn");
    samplesPerLine = t1 << 3 >>> 0;
    $R = new Int32Array(64);
    r = new Uint8Array(64);
    t3 = t2 * 8;
    lines = A.List_List$filled(t3, null, false, type$.nullable_Uint8List);
    for (t4 = component.quantizationTableList, t5 = component.quantizationIndex, l = 0, blockRow = 0; blockRow < t2; ++blockRow) {
        scanLine = blockRow << 3 >>> 0;
        for (i = 0; i < 8; ++i, l = l0) {
        l0 = l + 1;
        B.JSArray_methods.$indexSet(lines, l, new Uint8Array(samplesPerLine));
        }
        for (blockCol = 0; blockCol < t1; ++blockCol) {
        if (!(t5 >= 0 && t5 < 4))
            return A.ioore(t4, t5);
        t6 = t4[t5];
        t6.toString;
        t7 = component.__JpegComponent_blocks_A;
        t7 === $ && A.throwLateFieldNI("blocks");
        if (!(blockRow < t7.length))
            return A.ioore(t7, blockRow);
        t7 = t7[blockRow];
        if (!(blockCol < t7.length))
            return A.ioore(t7, blockCol);
        A.quantizeAndInverse(t6, t7[blockCol], r, $R);
        sample = blockCol << 3 >>> 0;
        for (offset = 0, j = 0; j < 8; ++j) {
            t6 = scanLine + j;
            if (!(t6 < t3))
            return A.ioore(lines, t6);
            line = lines[t6];
            for (i = 0; i < 8; ++i, offset = offset0) {
            line.toString;
            t6 = sample + i;
            offset0 = offset + 1;
            if (!(offset >= 0 && offset < 64))
                return A.ioore(r, offset);
            t7 = r[offset];
            if (!(t6 < line.length))
                return A.ioore(line, t6);
            line[t6] = t7;
            }
        }
        }
    }
    return lines;
    }
};
A.JpegData__readSOS_closure.prototype = {
    call$1(i) {
    var t2, dcTblNo, acTblNo, t3, t4,
        t1 = this.block,
        id = t1.readByte$0(),
        c = t1.readByte$0();
    t1 = this.$this;
    if (!t1.frame.components.containsKey$1(id))
        throw A.wrapException(A.ImageException$("Invalid Component in SOS block"));
    t2 = t1.frame.components.$index(0, id);
    t2.toString;
    dcTblNo = B.JSInt_methods._shrOtherPositive$1(c, 4) & 15;
    acTblNo = c & 15;
    t3 = t1.huffmanTablesDC;
    t4 = t3.length;
    if (dcTblNo < t4) {
        if (!(dcTblNo < t4))
        return A.ioore(t3, dcTblNo);
        t3 = t3[dcTblNo];
        t3.toString;
        t2.set$__JpegComponent_huffmanTableDC_A(type$.List_nullable_HuffmanNode._as(t3));
    }
    t1 = t1.huffmanTablesAC;
    t3 = t1.length;
    if (acTblNo < t3) {
        if (!(acTblNo < t3))
        return A.ioore(t1, acTblNo);
        t1 = t1[acTblNo];
        t1.toString;
        t2.set$__JpegComponent_huffmanTableAC_A(type$.List_nullable_HuffmanNode._as(t1));
    }
    return t2;
    },
    $signature: 30
};
A._JpegHuffman.prototype = {};
A.JpegFrame.prototype = {
    prepare$0() {
    var t1, t2, t3, component, t4, t5, t6, t7, t8, blocksPerLine, t9, blocksPerColumn, blocksPerLineForMcu, blocksPerColumnForMcu, blocks, _i, _list, _i0, _this = this;
    for (t1 = _this.components, t2 = A._instanceType(t1)._precomputed1, t3 = A.LinkedHashMapKeyIterator$(t1, t1._modifications, t2); t3.moveNext$0();) {
        component = t1.$index(0, t3.__js_helper$_current);
        _this.set$maxHSamples(Math.max(_this.maxHSamples, component.hSamples));
        _this.set$maxVSamples(Math.max(_this.maxVSamples, component.vSamples));
    }
    t3 = _this.samplesPerLine;
    t3.toString;
    _this.__JpegFrame_mcusPerLine_A = B.JSNumber_methods.ceil$0(t3 / 8 / _this.maxHSamples);
    t3 = _this.scanLines;
    t3.toString;
    _this.__JpegFrame_mcusPerColumn_A = B.JSNumber_methods.ceil$0(t3 / 8 / _this.maxVSamples);
    for (t2 = A.LinkedHashMapKeyIterator$(t1, t1._modifications, t2), t3 = type$.List_List_List_int, t4 = type$.Int32List, t5 = type$.List_Int32List; t2.moveNext$0();) {
        t6 = t1.$index(0, t2.__js_helper$_current);
        t6.toString;
        t7 = _this.samplesPerLine;
        t7.toString;
        t8 = t6.hSamples;
        blocksPerLine = B.JSNumber_methods.ceil$0(B.JSNumber_methods.ceil$0(t7 / 8) * t8 / _this.maxHSamples);
        t7 = _this.scanLines;
        t7.toString;
        t9 = t6.vSamples;
        blocksPerColumn = B.JSNumber_methods.ceil$0(B.JSNumber_methods.ceil$0(t7 / 8) * t9 / _this.maxVSamples);
        blocksPerLineForMcu = _this.__JpegFrame_mcusPerLine_A * t8;
        blocksPerColumnForMcu = _this.__JpegFrame_mcusPerColumn_A * t9;
        blocks = J.JSArray_JSArray$allocateFixed(blocksPerColumnForMcu, t5);
        for (_i = 0; _i < blocksPerColumnForMcu; ++_i) {
        _list = J.JSArray_JSArray$allocateFixed(blocksPerLineForMcu, t4);
        for (_i0 = 0; _i0 < blocksPerLineForMcu; ++_i0)
            _list[_i0] = new Int32Array(64);
        blocks[_i] = _list;
        }
        t6.__JpegComponent_blocksPerLine_A = blocksPerLine;
        t6.__JpegComponent_blocksPerColumn_A = blocksPerColumn;
        t6.set$__JpegComponent_blocks_A(t3._as(blocks));
    }
    },
    set$maxHSamples(maxHSamples) {
    this.maxHSamples = A._asInt(maxHSamples);
    },
    set$maxVSamples(maxVSamples) {
    this.maxVSamples = A._asInt(maxVSamples);
    }
};
A.JpegJfif.prototype = {};
A.JpegScan.prototype = {
    decode$0() {
    var decodeFn, t3, t4, mcuExpected, mcu, i, component, n, t5, blockRow, blockCol, h, v, j, k, t6, t7, t8, t9, _this = this,
        _s13_ = "blocksPerLine",
        t1 = _this.components,
        componentsLength = t1.length,
        t2 = _this.progressive;
    t2.toString;
    if (t2)
        if (_this.spectralStart === 0)
        decodeFn = _this.successivePrev === 0 ? _this.get$_decodeDCFirst() : _this.get$_decodeDCSuccessive();
        else
        decodeFn = _this.successivePrev === 0 ? _this.get$_decodeACFirst() : _this.get$_decodeACSuccessive();
    else
        decodeFn = _this.get$_decodeBaseline();
    t2 = componentsLength === 1;
    if (t2) {
        if (0 >= componentsLength)
        return A.ioore(t1, 0);
        t3 = t1[0];
        t4 = t3.__JpegComponent_blocksPerLine_A;
        t4 === $ && A.throwLateFieldNI(_s13_);
        t3 = t3.__JpegComponent_blocksPerColumn_A;
        t3 === $ && A.throwLateFieldNI("blocksPerColumn");
        mcuExpected = t4 * t3;
    } else {
        t3 = _this.__JpegScan_mcusPerLine_A;
        t3 === $ && A.throwLateFieldNI("mcusPerLine");
        t4 = _this.frame.__JpegFrame_mcusPerColumn_A;
        t4 === $ && A.throwLateFieldNI("mcusPerColumn");
        mcuExpected = t3 * t4;
    }
    t3 = _this.resetInterval;
    if (t3 == null || t3 === 0)
        _this.resetInterval = mcuExpected;
    for (t3 = _this.input, t4 = type$.void_Function_2_JpegComponent_and_List_int, mcu = 0; mcu < mcuExpected;) {
        for (i = 0; i < componentsLength; ++i) {
        if (!(i < t1.length))
            return A.ioore(t1, i);
        t1[i].__JpegComponent_pred_A = 0;
        }
        _this.eobrun = 0;
        if (t2) {
        if (0 >= t1.length)
            return A.ioore(t1, 0);
        component = t1[0];
        n = 0;
        while (true) {
            t5 = _this.resetInterval;
            t5.toString;
            if (!(n < t5))
            break;
            t4._as(decodeFn);
            t5 = component.__JpegComponent_blocksPerLine_A;
            t5 === $ && A.throwLateFieldNI(_s13_);
            blockRow = B.JSInt_methods.$tdiv(mcu, t5);
            blockCol = B.JSInt_methods.$mod(mcu, t5);
            t5 = component.__JpegComponent_blocks_A;
            t5 === $ && A.throwLateFieldNI("blocks");
            if (!(blockRow >= 0 && blockRow < t5.length))
            return A.ioore(t5, blockRow);
            t5 = t5[blockRow];
            if (!(blockCol >= 0 && blockCol < t5.length))
            return A.ioore(t5, blockCol);
            decodeFn.call$2(component, t5[blockCol]);
            ++mcu;
            ++n;
        }
        } else {
        n = 0;
        while (true) {
            t5 = _this.resetInterval;
            t5.toString;
            if (!(n < t5))
            break;
            for (i = 0; i < componentsLength; ++i) {
            if (!(i < t1.length))
                return A.ioore(t1, i);
            component = t1[i];
            h = component.hSamples;
            v = component.vSamples;
            for (j = 0; j < v; ++j)
                for (k = 0; k < h; ++k)
                _this._decodeMcu$5(component, decodeFn, mcu, j, k);
            }
            ++mcu;
            ++n;
        }
        }
        _this.bitsCount = 0;
        t5 = t3.buffer;
        t6 = t3.offset;
        t7 = t5.length;
        if (!(t6 >= 0 && t6 < t7))
        return A.ioore(t5, t6);
        t8 = t5[t6];
        t9 = t6 + 1;
        if (!(t9 < t7))
        return A.ioore(t5, t9);
        t9 = t5[t9];
        if (t8 === 255)
        if (t9 >= 208 && t9 <= 215)
            t3.offset = t6 + 2;
        else
            break;
    }
    },
    _readBit$0() {
    var t2, nextByte, _this = this,
        t1 = _this.bitsCount;
    if (t1 > 0) {
        --t1;
        _this.bitsCount = t1;
        return B.JSInt_methods.$shr(_this.bitsData, t1) & 1;
    }
    t1 = _this.input;
    if (t1.offset >= t1.end)
        return null;
    t2 = t1.readByte$0();
    _this.bitsData = t2;
    if (t2 === 255) {
        nextByte = t1.readByte$0();
        if (nextByte !== 0)
        throw A.wrapException(A.ImageException$("unexpected marker: " + B.JSInt_methods.toRadixString$1((_this.bitsData << 8 | nextByte) >>> 0, 16)));
    }
    _this.bitsCount = 7;
    return B.JSInt_methods._shrOtherPositive$1(_this.bitsData, 7) & 1;
    },
    _jpeg_scan$_decodeHuffman$1(tree) {
    var bit, t1,
        node = new A.HuffmanParent(type$.List_nullable_HuffmanNode._as(tree));
    for (; bit = this._readBit$0(), bit != null;) {
        if (node instanceof A.HuffmanParent) {
        t1 = node.children;
        if (bit >>> 0 !== bit || bit >= t1.length)
            return A.ioore(t1, bit);
        node = t1[bit];
        }
        if (node instanceof A.HuffmanValue)
        return node.value;
    }
    return null;
    },
    _receive$1($length) {
    var n, bit;
    for (n = 0; $length > 0;) {
        bit = this._readBit$0();
        if (bit == null)
        return null;
        n = (n << 1 | bit) >>> 0;
        --$length;
    }
    return n;
    },
    _receiveAndExtend$1($length) {
    var t1;
    if ($length === 1)
        return this._readBit$0() === 1 ? 1 : -1;
    $length.toString;
    t1 = this._receive$1($length);
    t1.toString;
    if (t1 >= B.JSInt_methods.$shl(1, $length - 1))
        return t1;
    return t1 + B.JSInt_methods._shlPositive$1(-1, $length) + 1;
    },
    _decodeBaseline$2(component, zz) {
    var t1, t, diff, k, s, r, z, _this = this;
    type$.List_int._as(zz);
    t1 = component.__JpegComponent_huffmanTableDC_A;
    t1 === $ && A.throwLateFieldNI("huffmanTableDC");
    t = _this._jpeg_scan$_decodeHuffman$1(t1);
    diff = t === 0 ? 0 : _this._receiveAndExtend$1(t);
    t1 = component.__JpegComponent_pred_A;
    t1 === $ && A.throwLateFieldNI("pred");
    t1 += diff;
    component.__JpegComponent_pred_A = t1;
    zz[0] = t1;
    for (k = 1; k < 64;) {
        t1 = component.__JpegComponent_huffmanTableAC_A;
        t1 === $ && A.throwLateFieldNI("huffmanTableAC");
        t1 = _this._jpeg_scan$_decodeHuffman$1(t1);
        t1.toString;
        s = t1 & 15;
        r = t1 >>> 4;
        if (s === 0) {
        if (r < 15)
            break;
        k += 16;
        continue;
        }
        k += r;
        s = _this._receiveAndExtend$1(s);
        if (!(k >= 0 && k < 80))
        return A.ioore(B.List_AZw, k);
        z = B.List_AZw[k];
        if (!(z < 64))
        return A.ioore(zz, z);
        zz[z] = s;
        ++k;
    }
    },
    _decodeDCFirst$2(component, zz) {
    var t1, t, diff;
    type$.List_int._as(zz);
    t1 = component.__JpegComponent_huffmanTableDC_A;
    t1 === $ && A.throwLateFieldNI("huffmanTableDC");
    t = this._jpeg_scan$_decodeHuffman$1(t1);
    diff = t === 0 ? 0 : B.JSInt_methods._shlPositive$1(this._receiveAndExtend$1(t), this.successive);
    t1 = component.__JpegComponent_pred_A;
    t1 === $ && A.throwLateFieldNI("pred");
    t1 += diff;
    component.__JpegComponent_pred_A = t1;
    zz[0] = t1;
    },
    _decodeDCSuccessive$2(component, zz) {
    var t1, t2;
    type$.List_int._as(zz);
    t1 = zz[0];
    t2 = this._readBit$0();
    t2.toString;
    zz[0] = (t1 | B.JSInt_methods._shlPositive$1(t2, this.successive)) >>> 0;
    },
    _decodeACFirst$2(component, zz) {
    var t1, k, e, t2, s, r, z, t3, _this = this;
    type$.List_int._as(zz);
    t1 = _this.eobrun;
    if (t1 > 0) {
        _this.eobrun = t1 - 1;
        return;
    }
    k = _this.spectralStart;
    e = _this.spectralEnd;
    for (t1 = _this.successive; k <= e;) {
        t2 = component.__JpegComponent_huffmanTableAC_A;
        t2 === $ && A.throwLateFieldNI("huffmanTableAC");
        t2 = _this._jpeg_scan$_decodeHuffman$1(t2);
        t2.toString;
        s = t2 & 15;
        r = t2 >>> 4;
        if (s === 0) {
        if (r < 15) {
            t1 = _this._receive$1(r);
            t1.toString;
            _this.eobrun = t1 + B.JSInt_methods._shlPositive$1(1, r) - 1;
            break;
        }
        k += 16;
        continue;
        }
        k += r;
        if (!(k >= 0 && k < 80))
        return A.ioore(B.List_AZw, k);
        z = B.List_AZw[k];
        t2 = _this._receiveAndExtend$1(s);
        t3 = B.JSInt_methods._shlPositive$1(1, t1);
        if (!(z < 64))
        return A.ioore(zz, z);
        zz[z] = t2 * t3;
        ++k;
    }
    },
    _decodeACSuccessive$2(component, zz) {
    var k, e, t1, r, z, t2, rs, s, t3, _this = this;
    type$.List_int._as(zz);
    k = _this.spectralStart;
    e = _this.spectralEnd;
    for (t1 = _this.successive, r = 0; k <= e;) {
        if (!(k >= 0 && k < 80))
        return A.ioore(B.List_AZw, k);
        z = B.List_AZw[k];
        t2 = _this.successiveACState;
        switch (t2) {
        case 0:
            t2 = component.__JpegComponent_huffmanTableAC_A;
            t2 === $ && A.throwLateFieldNI("huffmanTableAC");
            rs = _this._jpeg_scan$_decodeHuffman$1(t2);
            if (rs == null)
            throw A.wrapException(A.ImageException$("Invalid progressive encoding"));
            s = rs & 15;
            r = rs >>> 4;
            if (s === 0)
            if (r < 15) {
                t2 = _this._receive$1(r);
                t2.toString;
                _this.eobrun = t2 + B.JSInt_methods._shlPositive$1(1, r);
                _this.successiveACState = 4;
            } else {
                _this.successiveACState = 1;
                r = 16;
            }
            else {
            if (s !== 1)
                throw A.wrapException(A.ImageException$("invalid ACn encoding"));
            _this.__JpegScan_successiveACNextValue_A = _this._receiveAndExtend$1(s);
            _this.successiveACState = r !== 0 ? 2 : 3;
            }
            continue;
        case 1:
        case 2:
            if (!(z < 64))
            return A.ioore(zz, z);
            t3 = zz[z];
            if (t3 !== 0) {
            t2 = _this._readBit$0();
            t2.toString;
            t2 = B.JSInt_methods._shlPositive$1(t2, t1);
            if (!(z < 64))
                return A.ioore(zz, z);
            zz[z] = t3 + t2;
            } else {
            --r;
            if (r === 0)
                _this.successiveACState = t2 === 2 ? 3 : 0;
            }
            break;
        case 3:
            if (!(z < 64))
            return A.ioore(zz, z);
            t2 = zz[z];
            if (t2 !== 0) {
            t3 = _this._readBit$0();
            t3.toString;
            t3 = B.JSInt_methods._shlPositive$1(t3, t1);
            if (!(z < 64))
                return A.ioore(zz, z);
            zz[z] = t2 + t3;
            } else {
            t2 = _this.__JpegScan_successiveACNextValue_A;
            t2 === $ && A.throwLateFieldNI("successiveACNextValue");
            t2 = B.JSInt_methods._shlPositive$1(t2, t1);
            if (!(z < 64))
                return A.ioore(zz, z);
            zz[z] = t2;
            _this.successiveACState = 0;
            }
            break;
        case 4:
            if (!(z < 64))
            return A.ioore(zz, z);
            t2 = zz[z];
            if (t2 !== 0) {
            t3 = _this._readBit$0();
            t3.toString;
            t3 = B.JSInt_methods._shlPositive$1(t3, t1);
            if (!(z < 64))
                return A.ioore(zz, z);
            zz[z] = t2 + t3;
            }
            break;
        }
        ++k;
    }
    if (_this.successiveACState === 4)
        if (--_this.eobrun === 0)
        _this.successiveACState = 0;
    },
    _decodeMcu$5(component, decodeFn, mcu, row, col) {
    var t1, blockRow, blockCol, t2, numCols;
    type$.void_Function_2_JpegComponent_and_List_int._as(decodeFn);
    t1 = this.__JpegScan_mcusPerLine_A;
    t1 === $ && A.throwLateFieldNI("mcusPerLine");
    blockRow = B.JSInt_methods.$tdiv(mcu, t1) * component.vSamples + row;
    blockCol = B.JSInt_methods.$mod(mcu, t1) * component.hSamples + col;
    t1 = component.__JpegComponent_blocks_A;
    t1 === $ && A.throwLateFieldNI("blocks");
    t2 = t1.length;
    if (blockRow >= t2)
        return;
    if (!(blockRow >= 0))
        return A.ioore(t1, blockRow);
    t1 = t1[blockRow];
    numCols = t1.length;
    if (blockCol >= numCols)
        return;
    if (!(blockCol >= 0))
        return A.ioore(t1, blockCol);
    decodeFn.call$2(component, t1[blockCol]);
    }
};
A.JpegDecoder.prototype = {
    decode$2$frame(bytes, frame) {
    var jpeg = A.JpegData$();
    jpeg.read$1(bytes);
    if (jpeg.frames.length !== 1)
        throw A.wrapException(A.ImageException$("only single frame JPEGs supported"));
    return A.getImageFromJpeg(jpeg);
    },
    decode$1(bytes) {
    return this.decode$2$frame(bytes, null);
    }
};
A.PngDisposeMode.prototype = {
    _enumToString$0() {
    return "PngDisposeMode." + this._name;
    }
};
A.PngBlendMode.prototype = {
    _enumToString$0() {
    return "PngBlendMode." + this._name;
    }
};
A.PngFrame.prototype = {};
A.InternalPngFrame.prototype = {};
A.PngFilterType.prototype = {
    _enumToString$0() {
    return "PngFilterType." + this._name;
    }
};
A.PngInfo.prototype = {
    set$palette(palette) {
    this.palette = type$.nullable_List_nullable_int._as(palette);
    },
    set$transparency(transparency) {
    this.transparency = type$.nullable_List_int._as(transparency);
    },
    $isDecodeInfo: 1
};
A.InternalPngInfo.prototype = {};
A.PngDecoder.prototype = {
    isValidFile$1(data) {
    var t1, t2, t3, i, t4,
        bytes = A.InputBuffer$(data, true, null, 0).readBytes$1(8);
    for (t1 = bytes.buffer, t2 = bytes.offset, t3 = t1.length, i = 0; i < 8; ++i) {
        t4 = t2 + i;
        if (!(t4 >= 0 && t4 < t3))
        return A.ioore(t1, t4);
        if (t1[t4] !== B.List_2Vk[i])
        return false;
    }
    return true;
    },
    startDecode$1(data) {
    var pngHeader, t2, t3, i, t4, t5, t6, t7, inputPos, chunkSize, chunkType, bytes, txtData, l, hdr, hdrBytes, t8, t9, t10, t11, crc, t12, t13, t14, t15, t16, t17, p3, r, g, b, _this = this, _null = null,
        t1 = A.InputBuffer$(data, true, _null, 0);
    _this.__PngDecoder__input_A = t1;
    pngHeader = t1.readBytes$1(8);
    for (t1 = pngHeader.buffer, t2 = pngHeader.offset, t3 = t1.length, i = 0; i < 8; ++i) {
        t4 = t2 + i;
        if (!(t4 >= 0 && t4 < t3))
        return A.ioore(t1, t4);
        if (t1[t4] !== B.List_2Vk[i])
        return _null;
    }
    for (t1 = _this._png_decoder$_info, t2 = t1.frames, t3 = type$.JSArray_int, t4 = t1._idat, t5 = type$.List_int, t6 = t1.textData; true;) {
        t7 = _this.__PngDecoder__input_A;
        inputPos = t7.offset - t7.start;
        chunkSize = t7.readUint32$0();
        chunkType = _this.__PngDecoder__input_A.readString$1(4);
        switch (chunkType) {
        case "tEXt":
            t7 = _this.__PngDecoder__input_A;
            bytes = t7.subset$1(chunkSize);
            t7.offset = t7.offset + (bytes.end - bytes.offset);
            txtData = bytes.toUint8List$0();
            l = txtData.length;
            for (i = 0; i < l; ++i)
            if (txtData[i] === 0) {
                t7 = i + 1;
                t6.$indexSet(0, B.C_Latin1Codec.decode$1(new Uint8Array(txtData.subarray(0, A._checkValidRange(0, i, l)))), B.C_Latin1Codec.decode$1(new Uint8Array(txtData.subarray(t7, A._checkValidRange(t7, _null, l)))));
                break;
            }
            _this.__PngDecoder__input_A.offset += 4;
            break;
        case "IHDR":
            t7 = _this.__PngDecoder__input_A;
            bytes = t7.subset$1(chunkSize);
            t7.offset = t7.offset + (bytes.end - bytes.offset);
            hdr = A.InputBuffer$from(bytes, _null, 0);
            hdrBytes = hdr.toUint8List$0();
            t1.width = hdr.readUint32$0();
            t1.height = hdr.readUint32$0();
            t7 = hdr.buffer;
            t8 = hdr.offset;
            t9 = hdr.offset = t8 + 1;
            t10 = t7.length;
            if (!(t8 >= 0 && t8 < t10))
            return A.ioore(t7, t8);
            t1.bits = t7[t8];
            t8 = hdr.offset = t9 + 1;
            if (!(t9 >= 0 && t9 < t10))
            return A.ioore(t7, t9);
            t9 = t1.colorType = t7[t9];
            t11 = hdr.offset = t8 + 1;
            if (!(t8 >= 0 && t8 < t10))
            return A.ioore(t7, t8);
            t8 = hdr.offset = t11 + 1;
            if (!(t11 >= 0 && t11 < t10))
            return A.ioore(t7, t11);
            t11 = t7[t11];
            t1.filterMethod = t11;
            hdr.offset = t8 + 1;
            if (!(t8 >= 0 && t8 < t10))
            return A.ioore(t7, t8);
            t1.interlaceMethod = t7[t8];
            if (!(t9 === 0 || t9 === 2 || t9 === 3 || t9 === 4 || t9 === 6))
            return _null;
            if (t11 !== 0)
            return _null;
            switch (t9) {
            case 0:
                if (!B.JSArray_methods.contains$1(A._setArrayType([1, 2, 4, 8, 16], t3), t1.bits))
                return _null;
                break;
            case 2:
                if (!B.JSArray_methods.contains$1(A._setArrayType([8, 16], t3), t1.bits))
                return _null;
                break;
            case 3:
                if (!B.JSArray_methods.contains$1(A._setArrayType([1, 2, 4, 8], t3), t1.bits))
                return _null;
                break;
            case 4:
                if (!B.JSArray_methods.contains$1(A._setArrayType([8, 16], t3), t1.bits))
                return _null;
                break;
            case 6:
                if (!B.JSArray_methods.contains$1(A._setArrayType([8, 16], t3), t1.bits))
                return _null;
                break;
            }
            if (_this.__PngDecoder__input_A.readUint32$0() !== A.getCrc32(t5._as(hdrBytes), A.getCrc32(new A.CodeUnits(chunkType), 0)))
            throw A.wrapException(A.ImageException$("Invalid " + chunkType + " checksum"));
            break;
        case "PLTE":
            t7 = _this.__PngDecoder__input_A;
            bytes = t7.subset$1(chunkSize);
            t7.offset = t7.offset + (bytes.end - bytes.offset);
            t1.set$palette(bytes.toUint8List$0());
            if (_this.__PngDecoder__input_A.readUint32$0() !== A.getCrc32(t5._as(t5._as(t1.palette)), A.getCrc32(new A.CodeUnits(chunkType), 0)))
            throw A.wrapException(A.ImageException$("Invalid " + chunkType + " checksum"));
            break;
        case "tRNS":
            t7 = _this.__PngDecoder__input_A;
            bytes = t7.subset$1(chunkSize);
            t7.offset = t7.offset + (bytes.end - bytes.offset);
            t1.set$transparency(bytes.toUint8List$0());
            crc = _this.__PngDecoder__input_A.readUint32$0();
            t7 = t1.transparency;
            t7.toString;
            if (crc !== A.getCrc32(t5._as(t7), A.getCrc32(new A.CodeUnits(chunkType), 0)))
            throw A.wrapException(A.ImageException$("Invalid " + chunkType + " checksum"));
            break;
        case "IEND":
            _this.__PngDecoder__input_A.offset += 4;
            break;
        case "gAMA":
            if (chunkSize !== 4)
            throw A.wrapException(A.ImageException$("Invalid gAMA chunk"));
            _this.__PngDecoder__input_A.readUint32$0();
            _this.__PngDecoder__input_A.offset += 4;
            break;
        case "IDAT":
            B.JSArray_methods.add$1(t4, inputPos);
            t7 = _this.__PngDecoder__input_A;
            t8 = t7.offset += chunkSize;
            t7.offset = t8 + 4;
            break;
        case "acTL":
            t1.numFrames = _this.__PngDecoder__input_A.readUint32$0();
            _this.__PngDecoder__input_A.readUint32$0();
            _this.__PngDecoder__input_A.offset += 4;
            break;
        case "fcTL":
            _this.__PngDecoder__input_A.readUint32$0();
            t7 = _this.__PngDecoder__input_A.readUint32$0();
            t8 = _this.__PngDecoder__input_A.readUint32$0();
            t9 = _this.__PngDecoder__input_A.readUint32$0();
            t10 = _this.__PngDecoder__input_A.readUint32$0();
            t11 = _this.__PngDecoder__input_A.readUint16$0();
            t12 = _this.__PngDecoder__input_A.readUint16$0();
            t13 = _this.__PngDecoder__input_A;
            t14 = t13.buffer;
            t15 = t13.offset;
            t16 = t13.offset = t15 + 1;
            t17 = t14.length;
            if (!(t15 >= 0 && t15 < t17))
            return A.ioore(t14, t15);
            t15 = t14[t15];
            if (t15 >>> 0 !== t15 || t15 >= 3)
            return A.ioore(B.List_4CA, t15);
            t15 = B.List_4CA[t15];
            t13.offset = t16 + 1;
            if (!(t16 >= 0 && t16 < t17))
            return A.ioore(t14, t16);
            t16 = t14[t16];
            if (t16 >>> 0 !== t16 || t16 >= 2)
            return A.ioore(B.List_PngBlendMode_0_PngBlendMode_1, t16);
            t16 = B.List_PngBlendMode_0_PngBlendMode_1[t16];
            B.JSArray_methods.add$1(t2, new A.InternalPngFrame(A._setArrayType([], t3), t7, t8, t9, t10, t11, t12, t15, t16));
            _this.__PngDecoder__input_A.offset += 4;
            break;
        case "fdAT":
            _this.__PngDecoder__input_A.readUint32$0();
            B.JSArray_methods.add$1(B.JSArray_methods.get$last(t2).fdat, inputPos);
            t7 = _this.__PngDecoder__input_A;
            t8 = t7.offset += chunkSize - 4;
            t7.offset = t8 + 4;
            break;
        case "bKGD":
            t7 = t1.colorType;
            if (t7 === 3) {
            t7 = _this.__PngDecoder__input_A;
            t8 = t7.buffer;
            t7 = t7.offset++;
            if (!(t7 >= 0 && t7 < t8.length))
                return A.ioore(t8, t7);
            t7 = t8[t7];
            --chunkSize;
            p3 = t7 * 3;
            t8 = t1.palette;
            t9 = t8.length;
            if (!(p3 >= 0 && p3 < t9))
                return A.ioore(t8, p3);
            r = t8[p3];
            t10 = p3 + 1;
            if (!(t10 < t9))
                return A.ioore(t8, t10);
            g = t8[t10];
            t10 = p3 + 2;
            if (!(t10 < t9))
                return A.ioore(t8, t10);
            b = t8[t10];
            t8 = t1.transparency;
            if (t8 != null) {
                t7 = B.NativeUint8List_methods.contains$1(t8, t7) ? 0 : 255;
                t8 = new Uint8Array(4);
                t8[0] = r;
                t8[1] = g;
                t8[2] = b;
                t8[3] = t7;
                t1.backgroundColor = new A.ColorRgba8(t8);
            } else {
                t7 = new Uint8Array(3);
                t7[0] = r;
                t7[1] = g;
                t7[2] = b;
                t1.backgroundColor = new A.ColorRgb8(t7);
            }
            } else if (t7 === 0 || t7 === 4) {
            _this.__PngDecoder__input_A.readUint16$0();
            chunkSize -= 2;
            } else if (t7 === 2 || t7 === 6) {
            t7 = _this.__PngDecoder__input_A;
            t7.readUint16$0();
            t7.readUint16$0();
            t7.readUint16$0();
            chunkSize -= 24;
            }
            if (chunkSize > 0)
            _this.__PngDecoder__input_A.offset += chunkSize;
            _this.__PngDecoder__input_A.offset += 4;
            break;
        case "iCCP":
            t7 = _this.__PngDecoder__input_A.readString$0();
            t1.iccpName = t7;
            t8 = _this.__PngDecoder__input_A;
            t9 = t8.buffer;
            t10 = t8.offset++;
            if (!(t10 >= 0 && t10 < t9.length))
            return A.ioore(t9, t10);
            bytes = t8.subset$1(chunkSize - (t7.length + 2));
            t8.offset = t8.offset + (bytes.end - bytes.offset);
            t1.iccpData = bytes.toUint8List$0();
            _this.__PngDecoder__input_A.offset += 4;
            break;
        default:
            t7 = _this.__PngDecoder__input_A;
            t8 = t7.offset += chunkSize;
            t7.offset = t8 + 4;
            break;
        }
        if (chunkType === "IEND")
        break;
        t7 = _this.__PngDecoder__input_A;
        if (t7.offset >= t7.end)
        return _null;
    }
    return t1;
    },
    decodeFrame$1(frame) {
    var uncompressed, dataBlocks, len, totalSize, i, t4, chunkSize, chunkType, bytes, data, offset, _i, f, numChannels, exception, input, numColors, t, tl, nc, palette, pi, a, t5, t6, t7, nt, to8bit, g, ti, format, image, origW, origH, _this = this, _null = null, imageData = null,
        t1 = _this._png_decoder$_info,
        width = t1.width,
        height = t1.height,
        t2 = t1.frames,
        t3 = t2.length;
    if (t3 === 0 || frame === 0) {
        dataBlocks = A._setArrayType([], type$.JSArray_Uint8List);
        t2 = t1._idat;
        len = t2.length;
        for (t3 = type$.List_int, totalSize = 0, i = 0; i < len; ++i) {
        t4 = _this.__PngDecoder__input_A;
        t4 === $ && A.throwLateFieldNI("_input");
        if (!(i < t2.length))
            return A.ioore(t2, i);
        t4.offset = t2[i];
        chunkSize = t4.readUint32$0();
        chunkType = _this.__PngDecoder__input_A.readString$1(4);
        t4 = _this.__PngDecoder__input_A;
        bytes = t4.subset$1(chunkSize);
        t4.offset = t4.offset + (bytes.end - bytes.offset);
        data = bytes.toUint8List$0();
        totalSize += data.length;
        B.JSArray_methods.add$1(dataBlocks, data);
        if (_this.__PngDecoder__input_A.readUint32$0() !== A.getCrc32(t3._as(data), A.getCrc32(new A.CodeUnits(chunkType), 0)))
            throw A.wrapException(A.ImageException$("Invalid " + chunkType + " checksum"));
        }
        imageData = new Uint8Array(totalSize);
        for (t2 = dataBlocks.length, offset = 0, _i = 0; _i < dataBlocks.length; dataBlocks.length === t2 || (0, A.throwConcurrentModificationError)(dataBlocks), ++_i) {
        data = dataBlocks[_i];
        J.setAll$2$x(imageData, offset, data);
        offset += data.length;
        }
    } else {
        if (frame >= t3)
        throw A.wrapException(A.ImageException$("Invalid Frame Number: " + frame));
        if (!(frame < t3))
        return A.ioore(t2, frame);
        f = t2[frame];
        width = f.width;
        height = f.height;
        dataBlocks = A._setArrayType([], type$.JSArray_Uint8List);
        for (t2 = f.fdat, totalSize = 0, i = 0; i < t2.length; ++i) {
        t3 = _this.__PngDecoder__input_A;
        t3 === $ && A.throwLateFieldNI("_input");
        t3.offset = t2[i];
        chunkSize = t3.readUint32$0();
        t3 = _this.__PngDecoder__input_A;
        t3.readString$1(4);
        t3.offset += 4;
        t3 = _this.__PngDecoder__input_A;
        bytes = t3.subset$1(chunkSize - 4);
        t3.offset = t3.offset + (bytes.end - bytes.offset);
        data = bytes.toUint8List$0();
        totalSize += data.length;
        B.JSArray_methods.add$1(dataBlocks, data);
        }
        imageData = new Uint8Array(totalSize);
        for (t2 = dataBlocks.length, offset = 0, _i = 0; _i < dataBlocks.length; dataBlocks.length === t2 || (0, A.throwConcurrentModificationError)(dataBlocks), ++_i) {
        data = dataBlocks[_i];
        J.setAll$2$x(imageData, offset, data);
        offset += data.length;
        }
    }
    t2 = t1.colorType;
    if (t2 === 3)
        numChannels = 1;
    else if (t2 === 0)
        numChannels = 1;
    else {
        if (t2 === 4)
        t2 = 2;
        else
        t2 = t2 === 6 ? 4 : 3;
        numChannels = t2;
    }
    uncompressed = null;
    try {
        uncompressed = B.C__ZLibDecoder.decodeBuffer$2$verify(A.InputStream$(type$.List_int._as(imageData), 1, _null, 0), false);
    } catch (exception) {
        return _null;
    }
    input = A.InputBuffer$(uncompressed, true, _null, 0);
    _this._png_decoder$_bitBufferLen = _this._png_decoder$_bitBuffer = 0;
    if (t1.colorType === 3) {
        t2 = t1.palette;
        if (t2 != null) {
        t3 = t2.length;
        numColors = t3 / 3 | 0;
        t = t1.transparency;
        t4 = t != null;
        tl = t4 ? t.length : 0;
        nc = t4 ? 4 : 3;
        palette = new A.PaletteUint8(new Uint8Array(numColors * nc), numColors, nc);
        for (t4 = nc === 4, i = 0, pi = 0; i < numColors; ++i, pi += 3) {
            if (t4 && i < tl) {
            if (!(i < t.length))
                return A.ioore(t, i);
            a = t[i];
            } else
            a = 255;
            if (!(pi < t3))
            return A.ioore(t2, pi);
            t5 = t2[pi];
            t6 = pi + 1;
            if (!(t6 < t3))
            return A.ioore(t2, t6);
            t6 = t2[t6];
            t7 = pi + 2;
            if (!(t7 < t3))
            return A.ioore(t2, t7);
            palette.setRgba$5(i, t5, t6, t2[t7], a);
        }
        } else
        palette = _null;
    } else
        palette = _null;
    if (t1.colorType === 0 && t1.transparency != null && palette == null && t1.bits <= 8) {
        t = t1.transparency;
        nt = t.length;
        t2 = t1.bits;
        numColors = B.JSInt_methods.$shl(1, t2);
        palette = new A.PaletteUint8(new Uint8Array(numColors * 4), numColors, 4);
        if (t2 === 1)
        to8bit = 255;
        else if (t2 === 2)
        to8bit = 85;
        else {
        t2 = t2 === 4 ? 17 : 1;
        to8bit = t2;
        }
        for (i = 0; i < numColors; ++i) {
        g = i * to8bit;
        palette.setRgba$5(i, g, g, g, 255);
        }
        for (t2 = palette.numChannels, t3 = 3 < t2, t4 = palette.data, t5 = t4.length, i = 0; i < nt; i += 2) {
        t6 = t[i];
        t7 = i + 1;
        if (!(t7 < nt))
            return A.ioore(t, t7);
        ti = (t6 & 255) << 8 | t[t7] & 255;
        if (ti < numColors)
            if (t3) {
            t6 = ti * t2 + 3;
            if (!(t6 >= 0 && t6 < t5))
                return A.ioore(t4, t6);
            t4[t6] = 0;
            }
        }
    }
    t2 = t1.bits;
    if (t2 === 1)
        format = B.Format_0;
    else if (t2 === 2)
        format = B.Format_1;
    else {
        if (t2 === 4)
        t3 = B.Format_2;
        else
        t3 = t2 === 16 ? B.Format_4 : B.Format_3;
        format = t3;
    }
    t3 = t1.colorType;
    if (t3 === 0 && t1.transparency != null && t2 > 8)
        numChannels = 4;
    image = A.Image$(_null, _null, format, 0, B.FrameType_2, height, _null, 0, t3 === 2 && t1.transparency != null ? 4 : numChannels, palette, width, false);
    origW = t1.width;
    origH = t1.height;
    t1.width = width;
    t1.height = height;
    _this._progressY = 0;
    if (t1.interlaceMethod !== 0) {
        t2 = height + 7 >>> 3;
        _this._processPass$8(input, image, 0, 0, 8, 8, width + 7 >>> 3, t2);
        t3 = width + 3;
        _this._processPass$8(input, image, 4, 0, 8, 8, t3 >>> 3, t2);
        t2 = height + 3;
        _this._processPass$8(input, image, 0, 4, 4, 8, t3 >>> 2, t2 >>> 3);
        t3 = width + 1;
        _this._processPass$8(input, image, 2, 0, 4, 4, t3 >>> 2, t2 >>> 2);
        t2 = height + 1;
        _this._processPass$8(input, image, 0, 2, 2, 4, t3 >>> 1, t2 >>> 2);
        _this._processPass$8(input, image, 1, 0, 2, 2, width >>> 1, t2 >>> 1);
        _this._processPass$8(input, image, 0, 1, 1, 2, width, height >>> 1);
    } else
        _this._process$2(input, image);
    t1.width = origW;
    t1.height = origH;
    t2 = t1.iccpData;
    if (t2 != null)
        image.iccProfile = new A.IccProfile(t1.iccpName, B.IccProfileCompression_1, t2);
    t1 = t1.textData;
    if (t1.__js_helper$_length !== 0)
        image.addTextData$1(t1);
    return image;
    },
    decode$2$frame(bytes, frame) {
    var t1, t2, lastImage, firstImage, i, image, t3, t4, t5, t6, t7, t8, dispose, _this = this, _null = null;
    if (_this.startDecode$1(type$.Uint8List._as(bytes)) == null)
        return _null;
    t1 = _this._png_decoder$_info;
    t2 = t1.frames;
    if (t2.length === 0 || false) {
        t1 = _this.decodeFrame$1(0);
        t1.toString;
        return t1;
    }
    for (lastImage = _null, firstImage = lastImage, i = 0; i < t1.numFrames; ++i) {
        if (!(i < t2.length))
        return A.ioore(t2, i);
        frame = t2[i];
        image = _this.decodeFrame$1(i);
        if (image == null)
        continue;
        if (firstImage == null || lastImage == null) {
        t3 = frame.delayNum;
        image.frameDuration = B.JSNumber_methods.toInt$0((t3 === 0 || frame.delayDen === 0 ? 0 : t3 / frame.delayDen) * 1000);
        lastImage = image;
        firstImage = lastImage;
        continue;
        }
        t3 = image.data;
        t4 = t3 == null;
        t5 = t4 ? _null : t3.width;
        if (t5 == null)
        t5 = 0;
        t6 = lastImage.data;
        t7 = t6 == null;
        t8 = t7 ? _null : t6.width;
        if (t5 === (t8 == null ? 0 : t8)) {
        t3 = t4 ? _null : t3.height;
        if (t3 == null)
            t3 = 0;
        t4 = t7 ? _null : t6.height;
        t3 = t3 === (t4 == null ? 0 : t4) && frame.xOffset === 0 && frame.yOffset === 0 && frame.blend === B.PngBlendMode_0;
        } else
        t3 = false;
        if (t3) {
        t3 = frame.delayNum;
        image.frameDuration = B.JSNumber_methods.toInt$0((t3 === 0 || frame.delayDen === 0 ? 0 : t3 / frame.delayDen) * 1000);
        firstImage.addFrame$1(image);
        lastImage = image;
        continue;
        }
        dispose = frame.dispose;
        if (dispose === B.PngDisposeMode_1) {
        lastImage = A.Image$from(lastImage, false, false);
        t3 = t1.backgroundColor;
        t4 = lastImage.data;
        if (t4 != null)
            t4.clear$1(0, t3);
        } else
        lastImage = dispose === B.PngDisposeMode_2 ? A.Image$from(lastImage, false, false) : A.Image$from(lastImage, false, false);
        t3 = frame.delayNum;
        lastImage.frameDuration = B.JSNumber_methods.toInt$0((t3 === 0 || frame.delayDen === 0 ? 0 : t3 / frame.delayDen) * 1000);
        t3 = frame.blend === B.PngBlendMode_1 ? B.BlendMode_1 : B.BlendMode_0;
        A.compositeImage(lastImage, image, t3, frame.xOffset, frame.yOffset);
        firstImage.addFrame$1(lastImage);
    }
    return firstImage;
    },
    decode$1(bytes) {
    return this.decode$2$frame(bytes, null);
    },
    _processPass$8(input, image, xOffset, yOffset, xStep, yStep, passWidth, passHeight) {
    var channels, pixelDepth, bpp, rowBytes, inData, pixel, blockWidth, dstY, srcY, ri, t3, filterType, bytes, row, prevRow, rowInput, dstX, srcX, i, j, _this = this,
        t1 = _this._png_decoder$_info,
        t2 = t1.colorType;
    if (t2 === 4)
        channels = 2;
    else if (t2 === 2)
        channels = 3;
    else {
        t2 = t2 === 6 ? 4 : 1;
        channels = t2;
    }
    pixelDepth = channels * t1.bits;
    bpp = B.JSInt_methods._shrOtherPositive$1(pixelDepth + 7, 3);
    rowBytes = B.JSInt_methods._shrOtherPositive$1(pixelDepth * passWidth + 7, 3);
    inData = A._setArrayType([null, null], type$.JSArray_nullable_Uint8List);
    pixel = A._setArrayType([0, 0, 0, 0], type$.JSArray_int);
    for (t1 = xStep > 1, blockWidth = xStep - xOffset, dstY = yOffset, srcY = 0, ri = 0; srcY < passHeight; ++srcY, dstY += yStep, ++_this._progressY) {
        t2 = input.buffer;
        t3 = input.offset++;
        if (!(t3 >= 0 && t3 < t2.length))
        return A.ioore(t2, t3);
        t3 = t2[t3];
        if (t3 >>> 0 !== t3 || t3 >= 5)
        return A.ioore(B.List_H48, t3);
        filterType = B.List_H48[t3];
        bytes = input.subset$1(rowBytes);
        input.offset = input.offset + (bytes.end - bytes.offset);
        B.JSArray_methods.$indexSet(inData, ri, bytes.toUint8List$0());
        if (!(ri >= 0 && ri < 2))
        return A.ioore(inData, ri);
        row = inData[ri];
        ri = 1 - ri;
        prevRow = inData[ri];
        row.toString;
        _this._unfilter$4(filterType, bpp, row, prevRow);
        _this._png_decoder$_bitBufferLen = _this._png_decoder$_bitBuffer = 0;
        rowInput = new A.InputBuffer(row, 0, row.length, 0, true);
        for (t2 = blockWidth <= 1, dstX = xOffset, srcX = 0; srcX < passWidth; ++srcX, dstX += xStep) {
        _this._readPixel$2(rowInput, pixel);
        t3 = image.data;
        t3 = t3 == null ? null : t3.getPixel$3(dstX, dstY, null);
        _this._setPixel$2(t3 == null ? new A.PixelUndefined() : t3, pixel);
        if (!t2 || t1)
            for (i = 0; i < xStep; ++i)
            for (t3 = dstY + i, j = 0; j < blockWidth; ++j)
                _this._setPixel$2(image.getPixelSafe$2(dstX + j, t3), pixel);
        }
    }
    },
    _process$2(input, image) {
    var channels, pixelDepth, w, h, rowBytes, bpp, line, inData, pixel, pIter, y, ri, filterType, bytes, ri0, rowInput, x, _this = this,
        t1 = _this._png_decoder$_info,
        t2 = t1.colorType;
    if (t2 === 4)
        channels = 2;
    else if (t2 === 2)
        channels = 3;
    else {
        t2 = t2 === 6 ? 4 : 1;
        channels = t2;
    }
    pixelDepth = channels * t1.bits;
    w = t1.width;
    h = t1.height;
    rowBytes = B.JSInt_methods._shrOtherPositive$1(w * pixelDepth + 7, 3);
    bpp = B.JSInt_methods._shrOtherPositive$1(pixelDepth + 7, 3);
    line = A.List_List$filled(rowBytes, 0, false, type$.int);
    inData = A._setArrayType([line, line], type$.JSArray_List_int);
    pixel = A._setArrayType([0, 0, 0, 0], type$.JSArray_int);
    t1 = image.data;
    pIter = t1.get$iterator(t1);
    pIter.moveNext$0();
    for (y = 0, ri = 0; y < h; ++y, ri = ri0) {
        t1 = input.buffer;
        t2 = input.offset++;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        if (t2 >>> 0 !== t2 || t2 >= 5)
        return A.ioore(B.List_H48, t2);
        filterType = B.List_H48[t2];
        bytes = input.subset$1(rowBytes);
        input.offset = input.offset + (bytes.end - bytes.offset);
        B.JSArray_methods.$indexSet(inData, ri, bytes.toUint8List$0());
        if (!(ri >= 0 && ri < 2))
        return A.ioore(inData, ri);
        ri0 = 1 - ri;
        _this._unfilter$4(filterType, bpp, inData[ri], inData[ri0]);
        _this._png_decoder$_bitBufferLen = _this._png_decoder$_bitBuffer = 0;
        t2 = inData[ri];
        t1 = t2.length;
        rowInput = new A.InputBuffer(t2, 0, t1, 0, true);
        for (x = 0; x < w; ++x) {
        _this._readPixel$2(rowInput, pixel);
        _this._setPixel$2(pIter.get$current(), pixel);
        pIter.moveNext$0();
        }
    }
    },
    _unfilter$4(filterType, bpp, row, prevRow) {
    var rowBytes, t1, x, t2, t3, t4, b, a, t5, c, p, pa, pb, pc, paeth;
    type$.List_int._as(row);
    type$.nullable_List_int._as(prevRow);
    rowBytes = row.length;
    switch (filterType.index) {
        case 0:
        break;
        case 1:
        for (t1 = J.getInterceptor$ax(row), x = bpp; x < rowBytes; ++x) {
            t2 = row.length;
            if (!(x < t2))
            return A.ioore(row, x);
            t3 = row[x];
            t4 = x - bpp;
            if (!(t4 >= 0 && t4 < t2))
            return A.ioore(row, t4);
            t4 = row[t4];
            if (typeof t3 !== "number")
            return t3.$add();
            if (typeof t4 !== "number")
            return A.iae(t4);
            t1.$indexSet(row, x, t3 + t4 & 255);
        }
        break;
        case 2:
        for (t1 = J.getInterceptor$ax(row), t2 = prevRow != null, x = 0; x < rowBytes; ++x) {
            if (t2) {
            if (!(x < prevRow.length))
                return A.ioore(prevRow, x);
            b = prevRow[x];
            } else
            b = 0;
            if (!(x < row.length))
            return A.ioore(row, x);
            t3 = row[x];
            if (typeof t3 !== "number")
            return t3.$add();
            t1.$indexSet(row, x, t3 + b & 255);
        }
        break;
        case 3:
        for (t1 = J.getInterceptor$ax(row), t2 = prevRow != null, x = 0; x < rowBytes; ++x) {
            if (x < bpp)
            a = 0;
            else {
            t3 = x - bpp;
            if (!(t3 >= 0 && t3 < row.length))
                return A.ioore(row, t3);
            a = row[t3];
            }
            if (t2) {
            if (!(x < prevRow.length))
                return A.ioore(prevRow, x);
            b = prevRow[x];
            } else
            b = 0;
            if (!(x < row.length))
            return A.ioore(row, x);
            t3 = row[x];
            t4 = B.JSInt_methods._shrOtherPositive$1(a + b, 1);
            if (typeof t3 !== "number")
            return t3.$add();
            t1.$indexSet(row, x, t3 + t4 & 255);
        }
        break;
        case 4:
        for (t1 = J.getInterceptor$ax(row), t2 = prevRow == null, t3 = !t2, x = 0; x < rowBytes; ++x) {
            t4 = x < bpp;
            if (t4)
            a = 0;
            else {
            t5 = x - bpp;
            if (!(t5 >= 0 && t5 < row.length))
                return A.ioore(row, t5);
            a = row[t5];
            }
            if (t3) {
            if (!(x < prevRow.length))
                return A.ioore(prevRow, x);
            b = prevRow[x];
            } else
            b = 0;
            if (t4 || t2)
            c = 0;
            else {
            t4 = x - bpp;
            if (!(t4 >= 0 && t4 < prevRow.length))
                return A.ioore(prevRow, t4);
            c = prevRow[t4];
            }
            p = a + b - c;
            pa = Math.abs(p - a);
            pb = Math.abs(p - b);
            pc = Math.abs(p - c);
            if (pa <= pb && pa <= pc)
            paeth = a;
            else
            paeth = pb <= pc ? b : c;
            if (!(x < row.length))
            return A.ioore(row, x);
            t4 = row[x];
            if (typeof t4 !== "number")
            return t4.$add();
            t1.$indexSet(row, x, t4 + paeth & 255);
        }
        break;
        default:
        throw A.wrapException(A.ImageException$("Invalid filter value: " + filterType.toString$0(0)));
    }
    },
    _png_decoder$_readBits$2(input, numBits) {
    var t1, t2, t3, t4, mask, _this = this;
    if (numBits === 0)
        return 0;
    if (numBits === 8)
        return input.readByte$0();
    if (numBits === 16)
        return input.readUint16$0();
    for (t1 = input.end; t2 = _this._png_decoder$_bitBufferLen, t2 < numBits;) {
        t3 = input.offset;
        if (t3 >= t1)
        throw A.wrapException(A.ImageException$("Invalid PNG data."));
        t4 = input.buffer;
        input.offset = t3 + 1;
        if (!(t3 >= 0 && t3 < t4.length))
        return A.ioore(t4, t3);
        _this._png_decoder$_bitBuffer = B.JSInt_methods.$shl(t4[t3], t2);
        _this._png_decoder$_bitBufferLen = t2 + 8;
    }
    if (numBits === 1)
        mask = 1;
    else if (numBits === 2)
        mask = 3;
    else {
        if (numBits === 4)
        t1 = 15;
        else
        t1 = 0;
        mask = t1;
    }
    t1 = t2 - numBits;
    t2 = B.JSInt_methods._shrReceiverPositive$1(_this._png_decoder$_bitBuffer, t1);
    _this._png_decoder$_bitBufferLen = t1;
    return (t2 & mask) >>> 0;
    },
    _readPixel$2(input, pixel) {
    var t1, t2, _this = this;
    type$.List_int._as(pixel);
    t1 = _this._png_decoder$_info;
    t2 = t1.colorType;
    switch (t2) {
        case 0:
        B.JSArray_methods.$indexSet(pixel, 0, _this._png_decoder$_readBits$2(input, t1.bits));
        return;
        case 2:
        B.JSArray_methods.$indexSet(pixel, 0, _this._png_decoder$_readBits$2(input, t1.bits));
        B.JSArray_methods.$indexSet(pixel, 1, _this._png_decoder$_readBits$2(input, t1.bits));
        B.JSArray_methods.$indexSet(pixel, 2, _this._png_decoder$_readBits$2(input, t1.bits));
        return;
        case 3:
        B.JSArray_methods.$indexSet(pixel, 0, _this._png_decoder$_readBits$2(input, t1.bits));
        return;
        case 4:
        B.JSArray_methods.$indexSet(pixel, 0, _this._png_decoder$_readBits$2(input, t1.bits));
        B.JSArray_methods.$indexSet(pixel, 1, _this._png_decoder$_readBits$2(input, t1.bits));
        return;
        case 6:
        B.JSArray_methods.$indexSet(pixel, 0, _this._png_decoder$_readBits$2(input, t1.bits));
        B.JSArray_methods.$indexSet(pixel, 1, _this._png_decoder$_readBits$2(input, t1.bits));
        B.JSArray_methods.$indexSet(pixel, 2, _this._png_decoder$_readBits$2(input, t1.bits));
        B.JSArray_methods.$indexSet(pixel, 3, _this._png_decoder$_readBits$2(input, t1.bits));
        return;
    }
    throw A.wrapException(A.ImageException$("Invalid color type: " + t2 + "."));
    },
    _setPixel$2(p, raw) {
    var t1, t2, t, g, r, b, t3, t4, t5, t6, t7;
    type$.List_int._as(raw);
    t1 = this._png_decoder$_info;
    t2 = t1.colorType;
    switch (t2) {
        case 0:
        t = t1.transparency;
        if (t != null && t1.bits > 8) {
            t1 = t.length;
            if (0 >= t1)
            return A.ioore(t, 0);
            t2 = t[0];
            if (1 >= t1)
            return A.ioore(t, 1);
            t1 = t[1];
            g = raw[0];
            p.setRgba$4(g, g, g, g !== ((t2 & 255) << 24 | t1 & 255) >>> 0 ? p.get$maxChannelValue() : 0);
            return;
        }
        p.setRgb$3(raw[0], 0, 0);
        return;
        case 2:
        r = raw[0];
        g = raw[1];
        b = raw[2];
        t1 = t1.transparency;
        if (t1 != null) {
            t2 = t1.length;
            if (0 >= t2)
            return A.ioore(t1, 0);
            t3 = t1[0];
            if (1 >= t2)
            return A.ioore(t1, 1);
            t4 = t1[1];
            if (2 >= t2)
            return A.ioore(t1, 2);
            t5 = t1[2];
            if (3 >= t2)
            return A.ioore(t1, 3);
            t6 = t1[3];
            if (4 >= t2)
            return A.ioore(t1, 4);
            t7 = t1[4];
            if (5 >= t2)
            return A.ioore(t1, 5);
            t1 = t1[5];
            if (r !== ((t3 & 255) << 8 | t4 & 255) || g !== ((t5 & 255) << 8 | t6 & 255) || b !== ((t7 & 255) << 8 | t1 & 255)) {
            p.setRgba$4(r, g, b, p.get$maxChannelValue());
            return;
            }
        }
        p.setRgb$3(r, g, b);
        return;
        case 3:
        p.set$index(raw[0]);
        return;
        case 4:
        p.setRgb$3(raw[0], raw[1], 0);
        return;
        case 6:
        p.setRgba$4(raw[0], raw[1], raw[2], raw[3]);
        return;
    }
    throw A.wrapException(A.ImageException$("Invalid color type: " + t2 + "."));
    }
};
A.PngFilter.prototype = {
    _enumToString$0() {
    return "PngFilter." + this._name;
    }
};
A.PngEncoder.prototype = {
    addFrame$1(image) {
    var chunk, nc, channelBytes, t2, t3, filteredImage, compressed, t4, fdat, _this = this, _8192 = 8192,
        t1 = image.data;
    t1 = t1 == null ? null : t1.get$isHdrFormat();
    if (!(t1 === true && image.get$format() !== B.Format_4))
        t1 = image.get$bitsPerChannel() < 8 && !image.get$hasPalette() && image.get$numChannels() > 1;
    else
        t1 = true;
    if (t1)
        image = image.convert$1$format(B.Format_3);
    if (_this.output == null) {
        t1 = A.OutputBuffer$(true, _8192);
        _this.output = t1;
        t1.writeBytes$1(A._setArrayType([137, 80, 78, 71, 13, 10, 26, 10], type$.JSArray_int));
        chunk = A.OutputBuffer$(true, _8192);
        chunk.writeUint32$1(image.get$width());
        chunk.writeUint32$1(image.get$height());
        chunk.writeByte$1(image.get$bitsPerChannel());
        if (image.get$hasPalette())
        t1 = 3;
        else if (image.get$numChannels() === 1)
        t1 = 0;
        else if (image.get$numChannels() === 2)
        t1 = 4;
        else
        t1 = image.get$numChannels() === 3 ? 2 : 6;
        chunk.writeByte$1(t1);
        chunk.writeByte$1(0);
        chunk.writeByte$1(0);
        chunk.writeByte$1(0);
        t1 = _this.output;
        t1.toString;
        _this._writeChunk$3(t1, "IHDR", A.NativeUint8List_NativeUint8List$view(chunk._output_buffer$_buffer.buffer, 0, chunk.length));
        t1 = image.iccProfile;
        if (t1 != null) {
        chunk = A.OutputBuffer$(true, _8192);
        chunk.writeBytes$1(new A.CodeUnits(t1.name));
        chunk.writeByte$1(0);
        chunk.writeByte$1(0);
        chunk.writeBytes$1(t1.compressed$0());
        t1 = _this.output;
        t1.toString;
        _this._writeChunk$3(t1, "iCCP", A.NativeUint8List_NativeUint8List$view(chunk._output_buffer$_buffer.buffer, 0, chunk.length));
        }
        if (image.get$hasPalette()) {
        t1 = _this._globalQuantizer;
        if (t1 != null) {
            t1 = t1.__NeuralQuantizer_palette_A;
            t1 === $ && A.throwLateFieldNI("palette");
            _this._writePalette$1(t1);
        } else {
            t1 = image.data;
            t1 = t1 == null ? null : t1.get$palette();
            t1.toString;
            _this._writePalette$1(t1);
        }
        }
        if (_this.isAnimated) {
        chunk = A.OutputBuffer$(true, _8192);
        t1 = _this.__PngEncoder__frames_A;
        t1 === $ && A.throwLateFieldNI("_frames");
        chunk.writeUint32$1(t1);
        chunk.writeUint32$1(_this.repeat);
        t1 = _this.output;
        t1.toString;
        _this._writeChunk$3(t1, "acTL", A.NativeUint8List_NativeUint8List$view(chunk._output_buffer$_buffer.buffer, 0, chunk.length));
        }
    }
    nc = image.get$hasPalette() ? 1 : image.get$numChannels();
    channelBytes = image.get$format() === B.Format_4 ? 2 : 1;
    t1 = image.get$width();
    t2 = image.get$height();
    t3 = image.get$height();
    filteredImage = new Uint8Array(t1 * t2 * nc * channelBytes + t3);
    _this._filter$2(0, image, filteredImage);
    compressed = B.C_ZLibEncoder.encode$2$level(filteredImage, _this.level);
    t1 = image.textData;
    if (t1 != null)
        for (t1 = A.LinkedHashMapKeyIterator$(t1, t1._modifications, A._instanceType(t1)._precomputed1); t1.moveNext$0();) {
        t2 = t1.__js_helper$_current;
        t3 = image.textData.$index(0, t2);
        t3.toString;
        A._asString(t3);
        chunk = new A.OutputBuffer(true, new Uint8Array(8192));
        chunk.writeBytes$1(B.C_Latin1Encoder.convert$1(t2));
        chunk.writeByte$1(0);
        chunk.writeBytes$1(B.C_Latin1Encoder.convert$1(t3));
        t2 = _this.output;
        t2.toString;
        t3 = chunk._output_buffer$_buffer.buffer;
        t4 = chunk.length;
        t3 = new Uint8Array(t3, 0, t4);
        _this._writeChunk$3(t2, "tEXt", t3);
        }
    if (_this.isAnimated) {
        chunk = A.OutputBuffer$(true, _8192);
        chunk.writeUint32$1(_this.sequenceNumber);
        chunk.writeUint32$1(image.get$width());
        chunk.writeUint32$1(image.get$height());
        chunk.writeUint32$1(0);
        chunk.writeUint32$1(0);
        chunk.writeUint16$1(image.frameDuration);
        chunk.writeUint16$1(1000);
        chunk.writeByte$1(1);
        chunk.writeByte$1(0);
        t1 = _this.output;
        t1.toString;
        _this._writeChunk$3(t1, "fcTL", A.NativeUint8List_NativeUint8List$view(chunk._output_buffer$_buffer.buffer, 0, chunk.length));
        ++_this.sequenceNumber;
    }
    if (_this.sequenceNumber <= 1) {
        t1 = _this.output;
        t1.toString;
        _this._writeChunk$3(t1, "IDAT", compressed);
    } else {
        fdat = A.OutputBuffer$(true, _8192);
        fdat.writeUint32$1(_this.sequenceNumber);
        fdat.writeBytes$1(compressed);
        t1 = _this.output;
        t1.toString;
        _this._writeChunk$3(t1, "fdAT", A.NativeUint8List_NativeUint8List$view(fdat._output_buffer$_buffer.buffer, 0, fdat.length));
        ++_this.sequenceNumber;
    }
    },
    finish$0() {
    var bytes, _this = this,
        t1 = _this.output;
    if (t1 == null)
        return null;
    _this._writeChunk$3(t1, "IEND", A._setArrayType([], type$.JSArray_int));
    _this.sequenceNumber = 0;
    t1 = _this.output;
    bytes = A.NativeUint8List_NativeUint8List$view(t1._output_buffer$_buffer.buffer, 0, t1.length);
    _this.output = null;
    return bytes;
    },
    encode$2$singleFrame(image, singleFrame) {
    var q, t1, t2, _i, frame, t3, _this = this;
    if (image.get$frames().length <= 1 || false) {
        _this.isAnimated = false;
        _this.addFrame$1(image);
    } else {
        _this.isAnimated = true;
        _this.__PngEncoder__frames_A = image.get$frames().length;
        _this.repeat = image.loopCount;
        if (image.get$hasPalette()) {
        q = new A.NeuralQuantizer(new Int32Array(256));
        q._initialize$1(256);
        q.addImage$1(image);
        _this._globalQuantizer = q;
        for (t1 = image.get$frames(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
            frame = t1[_i];
            if (frame !== image) {
            q._learn$1(frame);
            q._fix$0();
            q._inxBuild$0();
            q._copyColorMap$0();
            }
        }
        }
        for (t1 = image.get$frames(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        frame = t1[_i];
        t3 = _this._globalQuantizer;
        if (t3 != null)
            _this.addFrame$1(t3.getIndexImage$1(frame));
        else
            _this.addFrame$1(frame);
        }
    }
    t1 = _this.finish$0();
    t1.toString;
    return t1;
    },
    _writePalette$1(palette) {
    var t1, chunk, i, _this = this;
    if (palette.get$format() === B.Format_3 && palette.numChannels === 3 && palette.numColors === 256) {
        t1 = _this.output;
        t1.toString;
        _this._writeChunk$3(t1, "PLTE", A.NativeUint8List_NativeUint8List$view(palette.get$buffer(palette), 0, null));
    } else {
        t1 = palette.numColors;
        chunk = A.OutputBuffer$(true, t1 * 3);
        for (i = 0; i < t1; ++i) {
        chunk.writeByte$1(B.JSNumber_methods.toInt$0(palette.getRed$1(i)));
        chunk.writeByte$1(B.JSNumber_methods.toInt$0(palette.getGreen$1(i)));
        chunk.writeByte$1(B.JSNumber_methods.toInt$0(palette.getBlue$1(i)));
        }
        t1 = _this.output;
        t1.toString;
        _this._writeChunk$3(t1, "PLTE", A.NativeUint8List_NativeUint8List$view(chunk._output_buffer$_buffer.buffer, 0, chunk.length));
    }
    if (palette.numChannels === 4) {
        t1 = palette.numColors;
        chunk = A.OutputBuffer$(true, t1);
        for (i = 0; i < t1; ++i)
        chunk.writeByte$1(B.JSNumber_methods.toInt$0(palette.getAlpha$1(i)));
        t1 = _this.output;
        t1.toString;
        _this._writeChunk$3(t1, "tRNS", A.NativeUint8List_NativeUint8List$view(chunk._output_buffer$_buffer.buffer, 0, chunk.length));
    }
    },
    _writeChunk$3(out, type, chunk) {
    type$.List_int._as(chunk);
    out.writeUint32$1(chunk.length);
    out.writeBytes$1(new A.CodeUnits(type));
    out.writeBytes$1(chunk);
    out.writeUint32$1(A.getCrc32(chunk, A.getCrc32(new A.CodeUnits(type), 0)));
    },
    _filter$2(_, image, out) {
    var t2, rowBytes, _this = this,
        filter = image.get$hasPalette() ? B.PngFilter_0 : _this.filter,
        buffer = image.get$buffer(image),
        rowStride = image.data.get$rowStride(),
        nc = image.get$hasPalette() ? 1 : image.get$numChannels(),
        bpp = B.JSInt_methods._shrOtherPositive$1(nc * image.get$bitsPerChannel() + 7, 3),
        bpc = image.get$bitsPerChannel() + 7 >>> 3,
        t1 = filter.index,
        oi = 0, rowOffset = 0, prevRow = null, y = 0;
    while (true) {
        t2 = image.data;
        t2 = t2 == null ? null : t2.height;
        if (!(y < (t2 == null ? 0 : t2)))
        break;
        rowBytes = new Uint8Array(buffer, rowOffset, rowStride);
        rowOffset += rowStride;
        switch (t1) {
        case 1:
            oi = _this._filterSub$5(rowBytes, bpc, bpp, out, oi);
            break;
        case 2:
            oi = _this._filterUp$5(rowBytes, prevRow, bpc, out, oi);
            break;
        case 3:
            oi = _this._filterAverage$6(rowBytes, prevRow, bpc, bpp, out, oi);
            break;
        case 4:
            oi = _this._filterPaeth$6(rowBytes, prevRow, bpc, bpp, out, oi);
            break;
        default:
            oi = _this._filterNone$4(rowBytes, bpc, out, oi);
            break;
        }
        ++y;
        prevRow = rowBytes;
    }
    },
    _write$5(bpc, row, ri, out, oi) {
    var t1, t2, oi0, t3;
    --bpc;
    for (t1 = row.length, t2 = out.length; bpc >= 0; oi = oi0) {
        oi0 = oi + 1;
        t3 = ri + bpc;
        if (!(t3 < t1))
        return A.ioore(row, t3);
        t3 = row[t3];
        if (!(oi < t2))
        return A.ioore(out, oi);
        out[oi] = t3;
        --bpc;
    }
    return oi;
    },
    _filterNone$4(rowBytes, bpc, out, oi) {
    var l, i, t2,
        oi0 = oi + 1,
        t1 = out.length;
    if (!(oi < t1))
        return A.ioore(out, oi);
    out[oi] = 0;
    l = rowBytes.length;
    if (bpc === 1)
        for (oi = oi0, i = 0; i < l; ++i, oi = oi0) {
        oi0 = oi + 1;
        t2 = rowBytes[i];
        if (!(oi < t1))
            return A.ioore(out, oi);
        out[oi] = t2;
        }
    else
        for (oi = oi0, i = 0; i < l; i += bpc)
        oi = this._write$5(bpc, rowBytes, i, out, oi);
    return oi;
    },
    _filterSub$5(row, bpc, bpp, out, oi) {
    var x, l, c2, c20, c, t2, t3,
        oi0 = oi + 1,
        t1 = out.length;
    if (!(oi < t1))
        return A.ioore(out, oi);
    out[oi] = 1;
    for (oi = oi0, x = 0; x < bpp; x += bpc)
        oi = this._write$5(bpc, row, x, out, oi);
    l = row.length;
    for (c2 = bpc - 1, x = bpp; x < l; x += bpc)
        for (c20 = c2, c = 0; c < bpc; ++c, --c20, oi = oi0) {
        oi0 = oi + 1;
        t2 = x + c20;
        if (!(t2 >= 0 && t2 < l))
            return A.ioore(row, t2);
        t3 = row[t2];
        t2 -= bpp;
        if (!(t2 >= 0))
            return A.ioore(row, t2);
        t2 = row[t2];
        if (!(oi >= 0 && oi < t1))
            return A.ioore(out, oi);
        out[oi] = t3 - t2 & 255;
        }
    return oi;
    },
    _filterUp$5(row, prevRow, bpc, out, oi) {
    var l, c2, t2, x, c20, c, t3, b,
        oi0 = oi + 1,
        t1 = out.length;
    if (!(oi < t1))
        return A.ioore(out, oi);
    out[oi] = 2;
    l = row.length;
    for (c2 = bpc - 1, t2 = prevRow != null, oi = oi0, x = 0; x < l; x += bpc)
        for (c20 = c2, c = 0; c < bpc; ++c, --c20, oi = oi0) {
        if (t2) {
            t3 = x + c20;
            if (!(t3 >= 0 && t3 < prevRow.length))
            return A.ioore(prevRow, t3);
            b = prevRow[t3];
        } else
            b = 0;
        oi0 = oi + 1;
        t3 = x + c20;
        if (!(t3 >= 0 && t3 < l))
            return A.ioore(row, t3);
        t3 = row[t3];
        if (!(oi >= 0 && oi < t1))
            return A.ioore(out, oi);
        out[oi] = t3 - b & 255;
        }
    return oi;
    },
    _filterAverage$6(row, prevRow, bpc, bpp, out, oi) {
    var l, c2, t2, x, c20, c, x2, p1, t3, p2, p3,
        oi0 = oi + 1,
        t1 = out.length;
    if (!(oi < t1))
        return A.ioore(out, oi);
    out[oi] = 3;
    l = row.length;
    for (c2 = bpc - 1, t2 = prevRow == null, oi = oi0, x = 0; x < l; x += bpc)
        for (c20 = c2, c = 0; c < bpc; ++c, --c20, oi = oi0) {
        x2 = x + c20;
        if (x2 < bpp)
            p1 = 0;
        else {
            t3 = x2 - bpp;
            if (!(t3 >= 0 && t3 < l))
            return A.ioore(row, t3);
            p1 = row[t3];
        }
        if (t2)
            p2 = 0;
        else {
            if (!(x2 >= 0 && x2 < prevRow.length))
            return A.ioore(prevRow, x2);
            p2 = prevRow[x2];
        }
        if (!(x2 >= 0 && x2 < l))
            return A.ioore(row, x2);
        p3 = row[x2];
        oi0 = oi + 1;
        if (!(oi >= 0 && oi < t1))
            return A.ioore(out, oi);
        out[oi] = p3 - (p1 + p2 >>> 1);
        }
    return oi;
    },
    _paethPredictor$3(a, b, c) {
    var p = a + b - c,
        pa = p > a ? p - a : a - p,
        pb = p > b ? p - b : b - p,
        pc = p > c ? p - c : c - p;
    if (pa <= pb && pa <= pc)
        return a;
    else if (pb <= pc)
        return b;
    return c;
    },
    _filterPaeth$6(row, prevRow, bpc, bpp, out, oi) {
    var l, c2, t2, x, c20, c, x2, t3, p0, t4, p1, p2, p, pi,
        oi0 = oi + 1,
        t1 = out.length;
    if (!(oi < t1))
        return A.ioore(out, oi);
    out[oi] = 4;
    l = row.length;
    for (c2 = bpc - 1, t2 = prevRow == null, oi = oi0, x = 0; x < l; x += bpc)
        for (c20 = c2, c = 0; c < bpc; ++c, --c20, oi = oi0) {
        x2 = x + c20;
        t3 = x2 < bpp;
        if (t3)
            p0 = 0;
        else {
            t4 = x2 - bpp;
            if (!(t4 >= 0 && t4 < l))
            return A.ioore(row, t4);
            p0 = row[t4];
        }
        if (t2)
            p1 = 0;
        else {
            if (!(x2 >= 0 && x2 < prevRow.length))
            return A.ioore(prevRow, x2);
            p1 = prevRow[x2];
        }
        if (t3 || t2)
            p2 = 0;
        else {
            t3 = x2 - bpp;
            if (!(t3 >= 0 && t3 < prevRow.length))
            return A.ioore(prevRow, t3);
            p2 = prevRow[t3];
        }
        if (!(x2 >= 0 && x2 < l))
            return A.ioore(row, x2);
        p = row[x2];
        pi = this._paethPredictor$3(p0, p1, p2);
        oi0 = oi + 1;
        if (!(oi >= 0 && oi < t1))
            return A.ioore(out, oi);
        out[oi] = p - pi & 255;
        }
    return oi;
    }
};
A.PsdBevelEffect.prototype = {
    set$highlightColor(highlightColor) {
    type$.nullable_List_int._as(highlightColor);
    },
    set$shadowColor(shadowColor) {
    type$.nullable_List_int._as(shadowColor);
    },
    set$realHighlightColor(realHighlightColor) {
    type$.nullable_List_int._as(realHighlightColor);
    },
    set$realShadowColor(realShadowColor) {
    type$.nullable_List_int._as(realShadowColor);
    }
};
A.PsdDropShadowEffect.prototype = {
    set$color(color) {
    type$.nullable_List_int._as(color);
    },
    set$nativeColor(nativeColor) {
    type$.nullable_List_int._as(nativeColor);
    }
};
A.PsdEffect.prototype = {};
A.PsdInnerGlowEffect.prototype = {
    set$color(color) {
    type$.nullable_List_int._as(color);
    },
    set$nativeColor(nativeColor) {
    type$.nullable_List_int._as(nativeColor);
    }
};
A.PsdInnerShadowEffect.prototype = {
    set$color(color) {
    type$.nullable_List_int._as(color);
    },
    set$nativeColor(nativeColor) {
    type$.nullable_List_int._as(nativeColor);
    }
};
A.PsdOuterGlowEffect.prototype = {
    set$color(color) {
    type$.nullable_List_int._as(color);
    },
    set$nativeColor(nativeColor) {
    type$.nullable_List_int._as(nativeColor);
    }
};
A.PsdSolidFillEffect.prototype = {
    set$color(color) {
    type$.nullable_List_int._as(color);
    },
    set$nativeColor(nativeColor) {
    type$.nullable_List_int._as(nativeColor);
    }
};
A.PsdLayerAdditionalData.prototype = {};
A.PsdLayerSectionDivider.prototype = {};
A.PsdBlendingRanges.prototype = {
    PsdBlendingRanges$1(input) {
    var numChannels, i, t1, t2, _this = this;
    input.readUint16$0();
    input.readUint16$0();
    input.readUint16$0();
    input.readUint16$0();
    numChannels = B.JSInt_methods._tdivFast$1(input.end - input.offset, 8);
    if (numChannels > 0) {
        _this.__PsdBlendingRanges_blackSrc_A = new Uint16Array(numChannels);
        _this.__PsdBlendingRanges_whiteSrc_A = new Uint16Array(numChannels);
        _this.__PsdBlendingRanges_blackDst_A = new Uint16Array(numChannels);
        _this.__PsdBlendingRanges_whiteDst_A = new Uint16Array(numChannels);
        for (i = 0; i < numChannels; ++i) {
        t1 = _this.__PsdBlendingRanges_blackSrc_A;
        t2 = input.readUint16$0();
        if (!(i < t1.length))
            return A.ioore(t1, i);
        t1[i] = t2;
        t2 = _this.__PsdBlendingRanges_whiteSrc_A;
        t1 = input.readUint16$0();
        if (!(i < t2.length))
            return A.ioore(t2, i);
        t2[i] = t1;
        t1 = _this.__PsdBlendingRanges_blackDst_A;
        t2 = input.readUint16$0();
        if (!(i < t1.length))
            return A.ioore(t1, i);
        t1[i] = t2;
        t2 = _this.__PsdBlendingRanges_whiteDst_A;
        t1 = input.readUint16$0();
        if (!(i < t2.length))
            return A.ioore(t2, i);
        t2[i] = t1;
        }
    }
    }
};
A.PsdChannel.prototype = {
    readPlane$7(input, width, height, bitDepth, compression, lineLengths, planeNum) {
    if (compression == null)
        compression = input.readUint16$0();
    switch (compression) {
        case 0:
        bitDepth.toString;
        this._readPlaneUncompressed$4(input, width, height, bitDepth);
        break;
        case 1:
        if (lineLengths == null)
            lineLengths = this._readLineLengths$2(input, height);
        bitDepth.toString;
        this._readPlaneRleCompressed$6(input, width, height, bitDepth, lineLengths, planeNum);
        break;
        default:
        throw A.wrapException(A.ImageException$("Unsupported compression: " + compression));
    }
    },
    readPlane$4(input, width, height, bitDepth) {
    return this.readPlane$7(input, width, height, bitDepth, null, null, 0);
    },
    _readLineLengths$2(input, height) {
    var i, t1,
        lineLengths = new Uint16Array(height);
    for (i = 0; i < height; ++i) {
        t1 = input.readUint16$0();
        if (!(i < height))
        return A.ioore(lineLengths, i);
        lineLengths[i] = t1;
    }
    return lineLengths;
    },
    _readPlaneUncompressed$4(input, width, height, bitDepth) {
    var t1,
        len = width * height;
    if (bitDepth === 16)
        len *= 2;
    if (len > input.end - input.offset) {
        t1 = new Uint8Array(len);
        this.__PsdChannel_data_A = t1;
        B.NativeUint8List_methods.fillRange$3(t1, 0, len, 255);
        return;
    }
    this.__PsdChannel_data_A = input.readBytes$1(len).toUint8List$0();
    },
    _readPlaneRleCompressed$6(input, width, height, bitDepth, lineLengths, planeNum) {
    var t1, lineIndex, t2, pos, i, lineIndex0, bytes,
        len = width * height;
    if (bitDepth === 16)
        len *= 2;
    t1 = new Uint8Array(len);
    this.__PsdChannel_data_A = t1;
    lineIndex = planeNum * height;
    t2 = lineLengths.length;
    if (lineIndex >= t2) {
        B.NativeUint8List_methods.fillRange$3(t1, 0, len, 255);
        return;
    }
    for (pos = 0, i = 0; i < height; ++i, lineIndex = lineIndex0) {
        lineIndex0 = lineIndex + 1;
        if (!(lineIndex >= 0 && lineIndex < t2))
        return A.ioore(lineLengths, lineIndex);
        bytes = input.subset$1(lineLengths[lineIndex]);
        input.offset = input.offset + (bytes.end - bytes.offset);
        this._decodeRLE$3(bytes, this.__PsdChannel_data_A, pos);
        pos += width;
    }
    },
    _decodeRLE$3(src, dst, dstIndex) {
    var t1, t2, t3, t4, t5, t6, n, i, dstIndex0;
    for (t1 = src.end, t2 = dst.length; t3 = src.offset, t3 < t1;) {
        t4 = src.buffer;
        t5 = src.offset = t3 + 1;
        t6 = t4.length;
        if (!(t3 >= 0 && t3 < t6))
        return A.ioore(t4, t3);
        t3 = t4[t3];
        $.$get$__uint8()[0] = t3;
        t3 = $.$get$__uint8ToInt8();
        if (0 >= t3.length)
        return A.ioore(t3, 0);
        n = t3[0];
        if (n < 0) {
        n = 1 - n;
        src.offset = t5 + 1;
        if (!(t5 >= 0 && t5 < t6))
            return A.ioore(t4, t5);
        t3 = t4[t5];
        for (i = 0; i < n; ++i, dstIndex = dstIndex0) {
            dstIndex0 = dstIndex + 1;
            if (!(dstIndex >= 0 && dstIndex < t2))
            return A.ioore(dst, dstIndex);
            dst[dstIndex] = t3;
        }
        } else {
        ++n;
        for (t3 = t5, i = 0; i < n; ++i, t3 = t5, dstIndex = dstIndex0) {
            dstIndex0 = dstIndex + 1;
            t5 = t3 + 1;
            src.offset = t5;
            if (!(t3 >= 0 && t3 < t4.length))
            return A.ioore(t4, t3);
            t3 = t4[t3];
            if (!(dstIndex >= 0 && dstIndex < t2))
            return A.ioore(dst, dstIndex);
            dst[dstIndex] = t3;
        }
        }
    }
    }
};
A.PsdColorMode.prototype = {
    _enumToString$0() {
    return "PsdColorMode." + this._name;
    }
};
A.PsdImage.prototype = {
    PsdImage$1(bytes) {
    var len, t1, _this = this;
    _this.__PsdImage__input_A = A.InputBuffer$(bytes, true, null, 0);
    _this._psd_image$_readHeader$0();
    if (_this.signature !== 943870035)
        return;
    len = _this.__PsdImage__input_A.readUint32$0();
    _this.__PsdImage__input_A.readBytes$1(len);
    len = _this.__PsdImage__input_A.readUint32$0();
    _this.__PsdImage__imageResourceData_A = _this.__PsdImage__input_A.readBytes$1(len);
    len = _this.__PsdImage__input_A.readUint32$0();
    _this.__PsdImage__layerAndMaskData_A = _this.__PsdImage__input_A.readBytes$1(len);
    t1 = _this.__PsdImage__input_A;
    _this.__PsdImage__imageData_A = t1.readBytes$1(t1.end - t1.offset);
    },
    decode$0() {
    var t1, _this = this;
    if (_this.signature === 943870035) {
        t1 = _this.__PsdImage__input_A;
        t1 === $ && A.throwLateFieldNI("_input");
        t1 = t1 == null;
    } else
        t1 = true;
    if (t1)
        return false;
    _this._readImageResources$0();
    _this._readLayerAndMaskData$0();
    _this._readMergeImageData$0();
    _this.__PsdImage__imageData_A = _this.__PsdImage__layerAndMaskData_A = _this.__PsdImage__imageResourceData_A = _this.__PsdImage__input_A = null;
    return true;
    },
    decodeImage$0() {
    if (!this.decode$0())
        return null;
    return this.renderImage$0();
    },
    renderImage$0() {
    var li, layer, opacity, blendMode, t2, sy, y, dy, sx, x, t3, srcP, br, bg, bb, ba, t4, p, ar, ag, ab, aa, da, a, b, g, r, _this = this, _null = null,
        t1 = _this.mergedImage;
    if (t1 != null)
        return t1;
    t1 = _this.width;
    t1 = A.Image$(_null, _null, B.Format_3, 0, B.FrameType_2, _this.height, _null, 0, 4, _null, t1, false);
    _this.mergedImage = t1;
    t1.clear$0(0);
    li = 0;
    while (true) {
        t1 = _this.__PsdImage_layers_A;
        t1 === $ && A.throwLateFieldNI("layers");
        if (!(li < t1.length))
        break;
        c$0: {
        layer = t1[li];
        t1 = layer.__PsdLayer_flags_A;
        t1 === $ && A.throwLateFieldNI("flags");
        if ((t1 & 2) !== 0)
            break c$0;
        t1 = layer.__PsdLayer_opacity_A;
        t1 === $ && A.throwLateFieldNI("opacity");
        opacity = t1 / 255;
        blendMode = layer.blendMode;
        t1 = layer.__PsdLayer_layerImage_A;
        t1 === $ && A.throwLateFieldNI("layerImage");
        t2 = layer.top;
        t2.toString;
        sy = t2;
        y = 0;
        while (true) {
            t2 = layer.__PsdLayer_height_A;
            t2 === $ && A.throwLateFieldNI("height");
            if (!(y < t2))
            break;
            t2 = layer.top;
            t2.toString;
            dy = t2 + y;
            sx = layer.left;
            t2 = sy >= 0;
            x = 0;
            while (true) {
            t3 = layer.__PsdLayer_width_A;
            t3 === $ && A.throwLateFieldNI("width");
            if (!(x < t3))
                break;
            t3 = t1.data;
            srcP = t3 == null ? _null : t3.getPixel$3(x, y, _null);
            if (srcP == null)
                srcP = new A.PixelUndefined();
            br = B.JSNumber_methods.toInt$0(srcP.get$r());
            bg = B.JSNumber_methods.toInt$0(srcP.get$g());
            bb = B.JSNumber_methods.toInt$0(srcP.get$b());
            ba = B.JSNumber_methods.toInt$0(srcP.get$a());
            sx.toString;
            if (sx >= 0 && sx < _this.width && t2 && sy < _this.height) {
                t3 = layer.left;
                t3.toString;
                t4 = _this.mergedImage.data;
                p = t4 == null ? _null : t4.getPixel$3(t3 + x, dy, _null);
                if (p == null)
                p = new A.PixelUndefined();
                ar = B.JSNumber_methods.toInt$0(p.get$r());
                ag = B.JSNumber_methods.toInt$0(p.get$g());
                ab = B.JSNumber_methods.toInt$0(p.get$b());
                aa = B.JSNumber_methods.toInt$0(p.get$a());
                da = ba / 255 * opacity;
                switch (blendMode) {
                case 1885434739:
                    a = aa;
                    b = ab;
                    g = ag;
                    r = ar;
                    break;
                case 1852797549:
                    a = ba;
                    b = bb;
                    g = bg;
                    r = br;
                    break;
                case 1684632435:
                    a = ba;
                    b = bb;
                    g = bg;
                    r = br;
                    break;
                case 1684107883:
                    r = Math.min(ar, br);
                    g = Math.min(ag, bg);
                    b = Math.min(ab, bb);
                    a = ba;
                    break;
                case 1836411936:
                    r = B.JSInt_methods._shrOtherPositive$1(ar * br, 8);
                    g = B.JSInt_methods._shrOtherPositive$1(ag * bg, 8);
                    b = B.JSInt_methods._shrOtherPositive$1(ab * bb, 8);
                    a = ba;
                    break;
                case 1768188278:
                    r = A.PsdImage__blendColorBurn(ar, br);
                    g = A.PsdImage__blendColorBurn(ag, bg);
                    b = A.PsdImage__blendColorBurn(ab, bb);
                    a = ba;
                    break;
                case 1818391150:
                    r = B.JSNumber_methods.toInt$0(B.JSInt_methods.clamp$2(ar + br - 255, 0, 255));
                    g = B.JSNumber_methods.toInt$0(B.JSInt_methods.clamp$2(ag + bg - 255, 0, 255));
                    b = B.JSNumber_methods.toInt$0(B.JSInt_methods.clamp$2(ab + bb - 255, 0, 255));
                    a = ba;
                    break;
                case 1684751212:
                    a = ba;
                    b = bb;
                    g = bg;
                    r = br;
                    break;
                case 1818850405:
                    r = Math.max(ar, br);
                    g = Math.max(ag, bg);
                    b = Math.max(ab, bb);
                    a = ba;
                    break;
                case 1935897198:
                    r = B.JSNumber_methods.toInt$0(B.JSInt_methods.clamp$2(255 - (255 - br) * (255 - ar), 0, 255));
                    g = B.JSNumber_methods.toInt$0(B.JSInt_methods.clamp$2(255 - (255 - bg) * (255 - ag), 0, 255));
                    b = B.JSNumber_methods.toInt$0(B.JSInt_methods.clamp$2(255 - (255 - bb) * (255 - ab), 0, 255));
                    a = ba;
                    break;
                case 1684633120:
                    r = A.PsdImage__blendColorDodge(ar, br);
                    g = A.PsdImage__blendColorDodge(ag, bg);
                    b = A.PsdImage__blendColorDodge(ab, bb);
                    a = ba;
                    break;
                case 1818518631:
                    r = br + ar > 255 ? 255 : ar + br;
                    g = bg + ag > 255 ? 255 : ag + bg;
                    b = bb + ab > 255 ? 255 : ab + bb;
                    a = ba;
                    break;
                case 1818706796:
                    a = ba;
                    b = bb;
                    g = bg;
                    r = br;
                    break;
                case 1870030194:
                    r = A.PsdImage__blendOverlay(ar, br, aa, ba);
                    g = A.PsdImage__blendOverlay(ag, bg, aa, ba);
                    b = A.PsdImage__blendOverlay(ab, bb, aa, ba);
                    a = ba;
                    break;
                case 1934387572:
                    r = A.PsdImage__blendSoftLight(ar, br);
                    g = A.PsdImage__blendSoftLight(ag, bg);
                    b = A.PsdImage__blendSoftLight(ab, bb);
                    a = ba;
                    break;
                case 1749838196:
                    r = A.PsdImage__blendHardLight(ar, br);
                    g = A.PsdImage__blendHardLight(ag, bg);
                    b = A.PsdImage__blendHardLight(ab, bb);
                    a = ba;
                    break;
                case 1984719220:
                    r = A.PsdImage__blendVividLight(ar, br);
                    g = A.PsdImage__blendVividLight(ag, bg);
                    b = A.PsdImage__blendVividLight(ab, bb);
                    a = ba;
                    break;
                case 1816947060:
                    r = A.PsdImage__blendLinearLight(ar, br);
                    g = A.PsdImage__blendLinearLight(ag, bg);
                    b = A.PsdImage__blendLinearLight(ab, bb);
                    a = ba;
                    break;
                case 1884055924:
                    r = br < 128 ? Math.min(ar, 2 * br) : Math.max(ar, 2 * (br - 128));
                    g = bg < 128 ? Math.min(ag, 2 * bg) : Math.max(ag, 2 * (bg - 128));
                    b = bb < 128 ? Math.min(ab, 2 * bb) : Math.max(ab, 2 * (bb - 128));
                    a = ba;
                    break;
                case 1749903736:
                    r = br < 255 - ar ? 0 : 255;
                    g = bg < 255 - ag ? 0 : 255;
                    b = bb < 255 - ab ? 0 : 255;
                    a = ba;
                    break;
                case 1684629094:
                    r = Math.abs(br - ar);
                    g = Math.abs(bg - ag);
                    b = Math.abs(bb - ab);
                    a = ba;
                    break;
                case 1936553316:
                    r = B.JSNumber_methods.round$0(br + ar - 2 * br * ar / 255);
                    g = B.JSNumber_methods.round$0(bg + ag - 2 * bg * ag / 255);
                    b = B.JSNumber_methods.round$0(bb + ab - 2 * bb * ab / 255);
                    a = ba;
                    break;
                case 1718842722:
                    a = ba;
                    b = bb;
                    g = bg;
                    r = br;
                    break;
                case 1717856630:
                    a = ba;
                    b = bb;
                    g = bg;
                    r = br;
                    break;
                case 1752524064:
                    a = ba;
                    b = bb;
                    g = bg;
                    r = br;
                    break;
                case 1935766560:
                    a = ba;
                    b = bb;
                    g = bg;
                    r = br;
                    break;
                case 1668246642:
                    a = ba;
                    b = bb;
                    g = bg;
                    r = br;
                    break;
                case 1819634976:
                    a = ba;
                    b = bb;
                    g = bg;
                    r = br;
                    break;
                default:
                    a = ba;
                    b = bb;
                    g = bg;
                    r = br;
                }
                t3 = 1 - da;
                p.set$r(B.JSNumber_methods.toInt$0(ar * t3 + r * da));
                p.set$g(B.JSNumber_methods.toInt$0(ag * t3 + g * da));
                p.set$b(B.JSNumber_methods.toInt$0(ab * t3 + b * da));
                p.set$a(B.JSNumber_methods.toInt$0(aa * t3 + a * da));
            }
            ++x;
            ++sx;
            }
            ++y;
            ++sy;
        }
        }
        ++li;
    }
    t1 = _this.mergedImage;
    t1.toString;
    return t1;
    },
    _psd_image$_readHeader$0() {
    var padding, t2, t3, i, t4, _this = this,
        t1 = _this.__PsdImage__input_A;
    t1 === $ && A.throwLateFieldNI("_input");
    _this.signature = t1.readUint32$0();
    t1 = _this.__PsdImage__input_A.readUint16$0();
    _this.version = t1;
    if (t1 !== 1) {
        _this.signature = 0;
        return;
    }
    padding = _this.__PsdImage__input_A.readBytes$1(6);
    for (t1 = padding.buffer, t2 = padding.offset, t3 = t1.length, i = 0; i < 6; ++i) {
        t4 = t2 + i;
        if (!(t4 >= 0 && t4 < t3))
        return A.ioore(t1, t4);
        if (t1[t4] !== 0) {
        _this.signature = 0;
        return;
        }
    }
    _this.__PsdImage_channels_A = _this.__PsdImage__input_A.readUint16$0();
    _this.height = _this.__PsdImage__input_A.readUint32$0();
    _this.width = _this.__PsdImage__input_A.readUint32$0();
    _this.depth = _this.__PsdImage__input_A.readUint16$0();
    t1 = _this.__PsdImage__input_A.readUint16$0();
    if (!(t1 < 8))
        return A.ioore(B.List_S43, t1);
    _this.colorMode = B.List_S43[t1];
    },
    _readImageResources$0() {
    var t2, blockSignature, blockId, t3, t4, len, bytes, _this = this,
        t1 = _this.__PsdImage__imageResourceData_A;
    t1 === $ && A.throwLateFieldNI("_imageResourceData");
    t1.offset = t1.start;
    for (t1 = _this.imageResources; t2 = _this.__PsdImage__imageResourceData_A, t2.offset < t2.end;) {
        blockSignature = t2.readUint32$0();
        blockId = _this.__PsdImage__imageResourceData_A.readUint16$0();
        t2 = _this.__PsdImage__imageResourceData_A;
        t3 = t2.buffer;
        t4 = t2.offset++;
        if (!(t4 >= 0 && t4 < t3.length))
        return A.ioore(t3, t4);
        t4 = t3[t4];
        t2.readString$1(t4);
        if ((t4 & 1) === 0)
        ++_this.__PsdImage__imageResourceData_A.offset;
        len = _this.__PsdImage__imageResourceData_A.readUint32$0();
        t2 = _this.__PsdImage__imageResourceData_A;
        bytes = t2.subset$1(len);
        t2.offset = t2.offset + (bytes.end - bytes.offset);
        if ((len & 1) === 1)
        ++_this.__PsdImage__imageResourceData_A.offset;
        if (blockSignature === 943868237)
        t1.$indexSet(0, blockId, new A.PsdImageResource());
    }
    },
    _readLayerAndMaskData$0() {
    var len, layerData, t2, count, t3, t4, i, layer, t5, maskData, _this = this,
        t1 = _this.__PsdImage__layerAndMaskData_A;
    t1 === $ && A.throwLateFieldNI("_layerAndMaskData");
    t1.offset = t1.start;
    len = t1.readUint32$0();
    if ((len & 1) !== 0)
        ++len;
    layerData = _this.__PsdImage__layerAndMaskData_A.readBytes$1(len);
    t1 = type$.JSArray_PsdLayer;
    _this.set$__PsdImage_layers_A(type$.List_PsdLayer._as(A._setArrayType([], t1)));
    if (len > 0) {
        t2 = layerData.readUint16$0();
        $.$get$__uint16()[0] = t2;
        t2 = $.$get$__uint16ToInt16();
        if (0 >= t2.length)
        return A.ioore(t2, 0);
        count = t2[0];
        if (count < 0)
        count = -count;
        for (t2 = type$.String, t3 = type$.PsdLayerData, t4 = type$.JSArray_PsdEffect, i = 0; i < count; ++i) {
        layer = new A.PsdLayer(A.LinkedHashMap_LinkedHashMap$_empty(t2, t3), A._setArrayType([], t1), A._setArrayType([], t4));
        layer.PsdLayer$1(layerData);
        t5 = _this.__PsdImage_layers_A;
        t5 === $ && A.throwLateFieldNI("layers");
        B.JSArray_methods.add$1(t5, layer);
        }
    }
    i = 0;
    while (true) {
        t1 = _this.__PsdImage_layers_A;
        t1 === $ && A.throwLateFieldNI("layers");
        if (!(i < t1.length))
        break;
        t1[i].readImageData$2(layerData, _this);
        ++i;
    }
    len = _this.__PsdImage__layerAndMaskData_A.readUint32$0();
    maskData = _this.__PsdImage__layerAndMaskData_A.readBytes$1(len);
    if (len > 0) {
        maskData.readUint16$0();
        maskData.readUint16$0();
        maskData.readUint16$0();
        maskData.readUint16$0();
        maskData.readUint16$0();
        maskData.readUint16$0();
        maskData.readByte$0();
    }
    },
    _readMergeImageData$0() {
    var compression, t2, numLines, lineLengths, i, t3, t4, t5, _this = this,
        _s8_ = "channels",
        _s18_ = "mergeImageChannels",
        t1 = _this.__PsdImage__imageData_A;
    t1 === $ && A.throwLateFieldNI("_imageData");
    t1.offset = t1.start;
    compression = t1.readUint16$0();
    if (compression === 1) {
        t1 = _this.height;
        t2 = _this.__PsdImage_channels_A;
        t2 === $ && A.throwLateFieldNI(_s8_);
        numLines = t1 * t2;
        lineLengths = new Uint16Array(numLines);
        for (i = 0; i < numLines; ++i)
        lineLengths[i] = _this.__PsdImage__imageData_A.readUint16$0();
    } else
        lineLengths = null;
    _this.set$__PsdImage_mergeImageChannels_A(type$.List_PsdChannel._as(A._setArrayType([], type$.JSArray_PsdChannel)));
    i = 0;
    while (true) {
        t1 = _this.__PsdImage_channels_A;
        t1 === $ && A.throwLateFieldNI(_s8_);
        if (!(i < t1))
        break;
        t1 = _this.__PsdImage_mergeImageChannels_A;
        t1 === $ && A.throwLateFieldNI(_s18_);
        t2 = _this.__PsdImage__imageData_A;
        t2.toString;
        t3 = i === 3 ? -1 : i;
        t3 = new A.PsdChannel(t3);
        t3.readPlane$7(t2, _this.width, _this.height, _this.depth, compression, lineLengths, i);
        B.JSArray_methods.add$1(t1, t3);
        ++i;
    }
    t1 = _this.colorMode;
    t2 = _this.depth;
    t3 = _this.width;
    t4 = _this.height;
    t5 = _this.__PsdImage_mergeImageChannels_A;
    t5 === $ && A.throwLateFieldNI(_s18_);
    _this.mergedImage = A.PsdImage_createImageFromChannels(t1, t2, t3, t4, t5);
    },
    set$__PsdImage_layers_A(__PsdImage_layers_A) {
    this.__PsdImage_layers_A = type$.List_PsdLayer._as(__PsdImage_layers_A);
    },
    set$__PsdImage_mergeImageChannels_A(__PsdImage_mergeImageChannels_A) {
    this.__PsdImage_mergeImageChannels_A = type$.List_PsdChannel._as(__PsdImage_mergeImageChannels_A);
    },
    $isDecodeInfo: 1
};
A.PsdImageResource.prototype = {};
A.PsdLayer.prototype = {
    PsdLayer$1(input) {
    var numChannels, i, id, sig, len, extra, maskData, padding, t3, t4, t5, tag, bytes, t6, data, numFx, j, fxTag, size, fx, t7, t8, t9, _this = this,
        t1 = input.readUint32$0(),
        t2 = $.$get$__uint32();
    t2[0] = t1;
    t1 = $.$get$__uint32ToInt32();
    if (0 >= t1.length)
        return A.ioore(t1, 0);
    _this.top = t1[0];
    t2[0] = input.readUint32$0();
    _this.left = t1[0];
    t2[0] = input.readUint32$0();
    _this.__PsdLayer_bottom_A = t1[0];
    t2[0] = input.readUint32$0();
    t1 = t1[0];
    _this.__PsdLayer_right_A = t1;
    t2 = _this.left;
    t2.toString;
    _this.__PsdLayer_width_A = t1 - t2;
    t2 = _this.__PsdLayer_bottom_A;
    t1 = _this.top;
    t1.toString;
    _this.__PsdLayer_height_A = t2 - t1;
    _this.set$__PsdLayer_channels_A(type$.List_PsdChannel._as(A._setArrayType([], type$.JSArray_PsdChannel)));
    numChannels = input.readUint16$0();
    for (i = 0; i < numChannels; ++i) {
        t1 = input.readUint16$0();
        $.$get$__uint16()[0] = t1;
        t1 = $.$get$__uint16ToInt16();
        if (0 >= t1.length)
        return A.ioore(t1, 0);
        id = t1[0];
        input.readUint32$0();
        t1 = _this.__PsdLayer_channels_A;
        t1 === $ && A.throwLateFieldNI("channels");
        B.JSArray_methods.add$1(t1, new A.PsdChannel(id));
    }
    sig = input.readUint32$0();
    if (sig !== 943868237)
        throw A.wrapException(A.ImageException$("Invalid PSD layer signature: " + B.JSInt_methods.toRadixString$1(sig, 16)));
    _this.blendMode = input.readUint32$0();
    _this.__PsdLayer_opacity_A = input.readByte$0();
    input.readByte$0();
    _this.__PsdLayer_flags_A = input.readByte$0();
    if (input.readByte$0() !== 0)
        throw A.wrapException(A.ImageException$("Invalid PSD layer data"));
    len = input.readUint32$0();
    extra = input.readBytes$1(len);
    if (len > 0) {
        len = extra.readUint32$0();
        if (len > 0) {
        maskData = extra.readBytes$1(len);
        t1 = maskData.offset;
        maskData.readUint32$0();
        maskData.readUint32$0();
        maskData.readUint32$0();
        maskData.readUint32$0();
        maskData.readByte$0();
        maskData.readByte$0();
        if (maskData.end - t1 === 20)
            maskData.offset += 2;
        else {
            maskData.readByte$0();
            maskData.readByte$0();
            maskData.readUint32$0();
            maskData.readUint32$0();
            maskData.readUint32$0();
            maskData.readUint32$0();
        }
        }
        len = extra.readUint32$0();
        if (len > 0)
        new A.PsdBlendingRanges().PsdBlendingRanges$1(extra.readBytes$1(len));
        len = extra.readByte$0();
        extra.readString$1(len);
        padding = 4 - B.JSInt_methods.$mod(len, 4) - 1;
        if (padding > 0)
        extra.offset += padding;
        for (t1 = extra.end, t2 = _this.additionalData, t3 = _this.effects, t4 = type$.JSArray_int, t5 = type$.PsdLayerAdditionalData; extra.offset < t1;) {
        sig = extra.readUint32$0();
        if (sig !== 943868237)
            throw A.wrapException(A.ImageException$("PSD invalid signature for layer additional data: " + B.JSInt_methods.toRadixString$1(sig, 16)));
        tag = extra.readString$1(4);
        len = extra.readUint32$0();
        bytes = extra.subset$1(len);
        t6 = extra.offset + (bytes.end - bytes.offset);
        extra.offset = t6;
        if ((len & 1) === 1)
            extra.offset = t6 + 1;
        t2.$indexSet(0, tag, A.PsdLayerData_PsdLayerData(tag, bytes));
        if (tag === "lrFX") {
            data = A.InputBuffer$from(t5._as(t2.$index(0, "lrFX")).data, null, 0);
            data.readUint16$0();
            numFx = data.readUint16$0();
            for (j = 0; j < numFx; ++j) {
            data.readString$1(4);
            fxTag = data.readString$1(4);
            size = data.readUint32$0();
            if (fxTag === "dsdw") {
                fx = new A.PsdDropShadowEffect();
                B.JSArray_methods.add$1(t3, fx);
                fx.version = data.readUint32$0();
                data.readUint32$0();
                data.readUint32$0();
                data.readUint32$0();
                data.readUint32$0();
                fx.set$color(A._setArrayType([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t4));
                data.readString$1(8);
                t6 = data.buffer;
                t7 = data.offset;
                t8 = data.offset = t7 + 1;
                t9 = t6.length;
                if (!(t7 >= 0 && t7 < t9))
                return A.ioore(t6, t7);
                t7 = data.offset = t8 + 1;
                if (!(t8 >= 0 && t8 < t9))
                return A.ioore(t6, t8);
                data.offset = t7 + 1;
                if (!(t7 >= 0 && t7 < t9))
                return A.ioore(t6, t7);
                fx.set$nativeColor(A._setArrayType([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t4));
            } else if (fxTag === "isdw") {
                fx = new A.PsdInnerShadowEffect();
                B.JSArray_methods.add$1(t3, fx);
                fx.version = data.readUint32$0();
                data.readUint32$0();
                data.readUint32$0();
                data.readUint32$0();
                data.readUint32$0();
                fx.set$color(A._setArrayType([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t4));
                data.readString$1(8);
                t6 = data.buffer;
                t7 = data.offset;
                t8 = data.offset = t7 + 1;
                t9 = t6.length;
                if (!(t7 >= 0 && t7 < t9))
                return A.ioore(t6, t7);
                t7 = data.offset = t8 + 1;
                if (!(t8 >= 0 && t8 < t9))
                return A.ioore(t6, t8);
                data.offset = t7 + 1;
                if (!(t7 >= 0 && t7 < t9))
                return A.ioore(t6, t7);
                fx.set$nativeColor(A._setArrayType([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t4));
            } else if (fxTag === "oglw") {
                fx = new A.PsdOuterGlowEffect();
                B.JSArray_methods.add$1(t3, fx);
                fx.version = data.readUint32$0();
                data.readUint32$0();
                data.readUint32$0();
                fx.set$color(A._setArrayType([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t4));
                data.readString$1(8);
                t6 = data.buffer;
                t7 = data.offset;
                t8 = data.offset = t7 + 1;
                t9 = t6.length;
                if (!(t7 >= 0 && t7 < t9))
                return A.ioore(t6, t7);
                data.offset = t8 + 1;
                if (!(t8 >= 0 && t8 < t9))
                return A.ioore(t6, t8);
                if (fx.version === 2)
                fx.set$nativeColor(A._setArrayType([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t4));
            } else if (fxTag === "iglw") {
                fx = new A.PsdInnerGlowEffect();
                B.JSArray_methods.add$1(t3, fx);
                fx.version = data.readUint32$0();
                data.readUint32$0();
                data.readUint32$0();
                fx.set$color(A._setArrayType([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t4));
                data.readString$1(8);
                t6 = data.buffer;
                t7 = data.offset;
                t8 = data.offset = t7 + 1;
                t9 = t6.length;
                if (!(t7 >= 0 && t7 < t9))
                return A.ioore(t6, t7);
                t7 = data.offset = t8 + 1;
                if (!(t8 >= 0 && t8 < t9))
                return A.ioore(t6, t8);
                if (fx.version === 2) {
                data.offset = t7 + 1;
                if (!(t7 >= 0 && t7 < t9))
                    return A.ioore(t6, t7);
                fx.set$nativeColor(A._setArrayType([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t4));
                }
            } else if (fxTag === "bevl") {
                fx = new A.PsdBevelEffect();
                B.JSArray_methods.add$1(t3, fx);
                fx.version = data.readUint32$0();
                data.readUint32$0();
                data.readUint32$0();
                data.readUint32$0();
                data.readString$1(8);
                data.readString$1(8);
                fx.set$highlightColor(A._setArrayType([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t4));
                fx.set$shadowColor(A._setArrayType([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t4));
                t6 = data.buffer;
                t7 = data.offset;
                t8 = data.offset = t7 + 1;
                t9 = t6.length;
                if (!(t7 >= 0 && t7 < t9))
                return A.ioore(t6, t7);
                t7 = data.offset = t8 + 1;
                if (!(t8 >= 0 && t8 < t9))
                return A.ioore(t6, t8);
                t8 = data.offset = t7 + 1;
                if (!(t7 >= 0 && t7 < t9))
                return A.ioore(t6, t7);
                t7 = data.offset = t8 + 1;
                if (!(t8 >= 0 && t8 < t9))
                return A.ioore(t6, t8);
                t8 = data.offset = t7 + 1;
                if (!(t7 >= 0 && t7 < t9))
                return A.ioore(t6, t7);
                data.offset = t8 + 1;
                if (!(t8 >= 0 && t8 < t9))
                return A.ioore(t6, t8);
                if (fx.version === 2) {
                fx.set$realHighlightColor(A._setArrayType([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t4));
                fx.set$realShadowColor(A._setArrayType([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t4));
                }
            } else if (fxTag === "sofi") {
                fx = new A.PsdSolidFillEffect();
                B.JSArray_methods.add$1(t3, fx);
                fx.version = data.readUint32$0();
                data.readString$1(4);
                fx.set$color(A._setArrayType([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t4));
                t6 = data.buffer;
                t7 = data.offset;
                t8 = data.offset = t7 + 1;
                t9 = t6.length;
                if (!(t7 >= 0 && t7 < t9))
                return A.ioore(t6, t7);
                data.offset = t8 + 1;
                if (!(t8 >= 0 && t8 < t9))
                return A.ioore(t6, t8);
                fx.set$nativeColor(A._setArrayType([data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0(), data.readUint16$0()], t4));
            } else
                data.offset += size;
            }
        }
        }
    }
    },
    readImageData$2(input, psd) {
    var t1, t2, t3, t4, t5, _this = this, i = 0;
    while (true) {
        t1 = _this.__PsdLayer_channels_A;
        t1 === $ && A.throwLateFieldNI("channels");
        if (!(i < t1.length))
        break;
        t1 = t1[i];
        t2 = _this.__PsdLayer_width_A;
        t2 === $ && A.throwLateFieldNI("width");
        t3 = _this.__PsdLayer_height_A;
        t3 === $ && A.throwLateFieldNI("height");
        t1.readPlane$4(input, t2, t3, psd.depth);
        ++i;
    }
    t2 = psd.colorMode;
    t3 = psd.depth;
    t4 = _this.__PsdLayer_width_A;
    t4 === $ && A.throwLateFieldNI("width");
    t5 = _this.__PsdLayer_height_A;
    t5 === $ && A.throwLateFieldNI("height");
    _this.__PsdLayer_layerImage_A = A.PsdImage_createImageFromChannels(t2, t3, t4, t5, t1);
    },
    set$__PsdLayer_channels_A(__PsdLayer_channels_A) {
    this.__PsdLayer_channels_A = type$.List_PsdChannel._as(__PsdLayer_channels_A);
    }
};
A.PsdLayerData.prototype = {};
A.PsdDecoder.prototype = {
    decode$2$frame(bytes, frame) {
    var len, firstImage, i, _null = null,
        t1 = A.PsdImage$(bytes);
    this.info = t1;
    len = 1;
    if (len === 1 || false) {
        t1 = t1.decodeImage$0();
        return t1;
    }
    for (firstImage = _null, i = 0; i < len; ++i) {
        t1 = this.info;
        frame = t1 == null ? _null : t1.decodeImage$0();
        if (frame == null)
        continue;
        if (firstImage == null) {
        frame.frameType = B.FrameType_1;
        firstImage = frame;
        } else
        firstImage.addFrame$1(frame);
    }
    return firstImage;
    }
};
A.PvrColorRgbCore.prototype = {};
A.PvrColorRgb.prototype = {};
A.PvrColorRgba.prototype = {
    $add(_, x) {
    var _this = this;
    return new A.PvrColorRgba(_this.r + x.r, _this.g + x.g, _this.b + x.b, _this.a + x.a);
    }
};
A.Pvr2Info.prototype = {$isDecodeInfo: 1,
    get$height() {
    return this.height;
    }
};
A.Pvr3Info.prototype = {$isDecodeInfo: 1,
    get$height() {
    return this.height;
    }
};
A.PvrAppleInfo.prototype = {$isDecodeInfo: 1,
    get$height() {
    return this.height;
    }
};
A.PvrPacket.prototype = {
    set$colorData(x) {
    var t1 = this.rawData,
        t2 = this.index + 1;
    if (!(t2 < t1.length))
        return A.ioore(t1, t2);
    t1[t2] = x;
    },
    getColorRgbA$0() {
    var r,
        t1 = this._colorAIsOpaque,
        t2 = this._colorA;
    if (t1) {
        r = t2 >>> 9;
        if (!(r < 32))
        return A.ioore(B.List_wM5, r);
        return new A.PvrColorRgb(B.List_wM5[r], B.List_wM5[t2 >>> 4 & 31], B.List_GBZ[t2 & 15]);
    } else
        return new A.PvrColorRgb(B.List_GBZ[t2 >>> 7 & 15], B.List_GBZ[t2 >>> 3 & 15], B.List_PjU[t2 & 7]);
    },
    getColorRgbaA$0() {
    var r,
        t1 = this._colorAIsOpaque,
        t2 = this._colorA;
    if (t1) {
        r = t2 >>> 9;
        if (!(r < 32))
        return A.ioore(B.List_wM5, r);
        return new A.PvrColorRgba(B.List_wM5[r], B.List_wM5[t2 >>> 4 & 31], B.List_GBZ[t2 & 15], 255);
    } else
        return new A.PvrColorRgba(B.List_GBZ[t2 >>> 7 & 15], B.List_GBZ[t2 >>> 3 & 15], B.List_PjU[t2 & 7], B.List_PjU[t2 >>> 11 & 7]);
    },
    getColorRgbB$0() {
    var r,
        t1 = this._colorBIsOpaque,
        t2 = this._colorB;
    if (t1) {
        r = t2 >>> 10;
        if (!(r < 32))
        return A.ioore(B.List_wM5, r);
        return new A.PvrColorRgb(B.List_wM5[r], B.List_wM5[t2 >>> 5 & 31], B.List_wM5[t2 & 31]);
    } else
        return new A.PvrColorRgb(B.List_GBZ[t2 >>> 8 & 15], B.List_GBZ[t2 >>> 4 & 15], B.List_GBZ[t2 & 15]);
    },
    getColorRgbaB$0() {
    var r,
        t1 = this._colorBIsOpaque,
        t2 = this._colorB;
    if (t1) {
        r = t2 >>> 10;
        if (!(r < 32))
        return A.ioore(B.List_wM5, r);
        return new A.PvrColorRgba(B.List_wM5[r], B.List_wM5[t2 >>> 5 & 31], B.List_wM5[t2 & 31], 255);
    } else
        return new A.PvrColorRgba(B.List_GBZ[t2 >>> 8 & 15], B.List_GBZ[t2 >>> 4 & 15], B.List_GBZ[t2 & 15], B.List_PjU[t2 >>> 12 & 7]);
    },
    _getColorData$0() {
    var _this = this,
        t1 = _this._usePunchthroughAlpha ? 1 : 0,
        t2 = _this._colorA,
        t3 = _this._colorAIsOpaque ? 1 : 0,
        t4 = _this._colorB,
        t5 = _this._colorBIsOpaque ? 1 : 0;
    return (t1 | (t2 & 16383) << 1 | t3 << 15 | (t4 & 32767) << 16 | t5 << 31) >>> 0;
    },
    _update$0() {
    var x, _this = this,
        t1 = _this.rawData,
        t2 = _this.index + 1;
    if (!(t2 < t1.length))
        return A.ioore(t1, t2);
    x = t1[t2];
    _this._usePunchthroughAlpha = (x & 1) === 1;
    _this.set$colorData(_this._getColorData$0());
    _this._colorA = x >>> 1 & 16383;
    _this.set$colorData(_this._getColorData$0());
    _this._colorAIsOpaque = (x >>> 15 & 1) === 1;
    _this.set$colorData(_this._getColorData$0());
    _this._colorB = x >>> 16 & 32767;
    _this.set$colorData(_this._getColorData$0());
    _this._colorBIsOpaque = (x >>> 31 & 1) === 1;
    _this.set$colorData(_this._getColorData$0());
    }
};
A.PvrDecoder.prototype = {
    startDecode$1(bytes) {
    var info, _this = this,
        t1 = bytes.length,
        x = t1 - (t1 >>> 1 & 1431655765) >>> 0;
    x = (x & 858993459) + (x >>> 2 & 858993459);
    if ((x + (x >>> 4) >>> 0 & 252645135) * 16843009 >>> 0 >>> 24 === 1) {
        info = _this._decodeApplePvrtcHeader$1(bytes);
        if (info != null) {
        _this._data = bytes;
        return _this._info = info;
        }
    }
    info = _this._decodePvr3Header$1(bytes);
    if (info != null) {
        _this._data = bytes;
        return _this._info = info;
    }
    info = _this._decodePvr2Header$1(bytes);
    if (info != null) {
        _this._data = bytes;
        return _this._info = info;
    }
    return null;
    },
    _decodePvr3Header$1(bytes) {
    var t1, info,
        input = A.InputBuffer$(bytes, false, null, 0);
    if (input.readUint32$0() !== 52)
        return null;
    if (input.readUint32$0() !== 55727696)
        return null;
    t1 = A._setArrayType([0, 0, 0, 0], type$.JSArray_int);
    info = new A.Pvr3Info(t1);
    input.readUint32$0();
    info.format = input.readUint32$0();
    B.JSArray_methods.$indexSet(t1, 0, input.readByte$0());
    B.JSArray_methods.$indexSet(t1, 1, input.readByte$0());
    B.JSArray_methods.$indexSet(t1, 2, input.readByte$0());
    B.JSArray_methods.$indexSet(t1, 3, input.readByte$0());
    input.readUint32$0();
    input.readUint32$0();
    info.height = input.readUint32$0();
    info.width = input.readUint32$0();
    input.readUint32$0();
    input.readUint32$0();
    input.readUint32$0();
    input.readUint32$0();
    info.metadataSize = input.readUint32$0();
    return info;
    },
    _decodePvr2Header$1(bytes) {
    var info, t1,
        input = A.InputBuffer$(bytes, false, null, 0);
    if (input.readUint32$0() !== 52)
        return null;
    info = new A.Pvr2Info();
    info.height = input.readUint32$0();
    info.width = input.readUint32$0();
    input.readUint32$0();
    info.flags = input.readUint32$0();
    input.readUint32$0();
    info.bitsPerPixel = input.readUint32$0();
    input.readUint32$0();
    input.readUint32$0();
    input.readUint32$0();
    info.alphaMask = input.readUint32$0();
    t1 = input.readUint32$0();
    info.magic = t1;
    info.numTex = input.readUint32$0();
    if (t1 !== 559044176)
        return null;
    return info;
    },
    _decodeApplePvrtcHeader$1(bytes) {
    var info, t1, mode, res, shift, s2, _null = null,
        fileSize = bytes.length,
        input = A.InputBuffer$(bytes, false, _null, 0);
    if (input.readUint32$0() !== 0)
        return _null;
    info = new A.PvrAppleInfo();
    info.height = input.readUint32$0();
    info.width = input.readUint32$0();
    input.readUint32$0();
    input.readUint32$0();
    input.readUint32$0();
    input.readUint32$0();
    input.readUint32$0();
    input.readUint32$0();
    input.readUint32$0();
    t1 = input.readUint32$0();
    info.magic = t1;
    if (t1 === 559044176)
        return _null;
    if (fileSize === 32) {
        mode = 0;
        res = 8;
    } else {
        shift = 0;
        while (true) {
        if (!(shift < 10)) {
            mode = 1;
            res = 8;
            break;
        }
        s2 = shift << 1 >>> 0;
        if ((B.JSInt_methods._shlPositive$1(64, s2) & fileSize) >>> 0 !== 0) {
            res = B.JSInt_methods._shlPositive$1(16, shift);
            mode = 1;
            break;
        }
        if ((B.JSInt_methods._shlPositive$1(128, s2) & fileSize) >>> 0 !== 0) {
            res = B.JSInt_methods._shlPositive$1(16, shift);
            mode = 0;
            break;
        }
        ++shift;
        }
        if (shift === 10)
        return _null;
    }
    if ((mode + 1) * 2 === 4)
        return _null;
    info.height = info.width = res;
    return info;
    },
    decodeFrame$1(frame) {
    var t2, t3, _this = this,
        t1 = _this._info;
    if (t1 == null || _this._data == null)
        return null;
    if (t1 instanceof A.PvrAppleInfo) {
        t1 = t1.width;
        t2 = _this._info.get$height();
        t3 = _this._data;
        t3.toString;
        return _this._decodeRgba4bpp$3(t1, t2, t3);
    } else if (t1 instanceof A.Pvr2Info) {
        t1 = _this._data;
        t1.toString;
        return _this._decodePvr2$1(t1);
    } else if (t1 instanceof A.Pvr3Info) {
        t1 = _this._data;
        t1.toString;
        return _this._decodePvr3$1(t1);
    }
    return null;
    },
    decode$2$frame(bytes, frame) {
    if (this.startDecode$1(bytes) == null)
        return null;
    return this.decodeFrame$1(0);
    },
    _decodePvr2$1(data) {
    var t1, input, numTex, t2, t3, image, p, t4, t5, v, a, _this = this, _null = null,
        $length = data.length;
    if ($length < 52 || _this._info == null)
        return _null;
    t1 = _this._info;
    t1.toString;
    type$.Pvr2Info._as(t1);
    input = A.InputBuffer$(data, false, _null, 0);
    input.offset += 52;
    numTex = t1.numTex;
    if (numTex < 1)
        numTex = (t1.flags & 4096) !== 0 ? 6 : 1;
    if (numTex !== 1)
        return _null;
    t2 = t1.width;
    t3 = t1.height;
    if (t2 * t3 * t1.bitsPerPixel / 8 > $length - 52)
        return _null;
    switch (t1.flags & 255) {
        case 16:
        image = A.Image$(_null, _null, B.Format_3, 0, B.FrameType_2, t3, _null, 0, 4, _null, t2, false);
        for (t1 = image.data, t1 = t1.get$iterator(t1); t1.moveNext$0();) {
            p = t1.get$current();
            t2 = input.buffer;
            t3 = input.offset;
            t4 = input.offset = t3 + 1;
            t5 = t2.length;
            if (!(t3 >= 0 && t3 < t5))
            return A.ioore(t2, t3);
            t3 = t2[t3];
            input.offset = t4 + 1;
            if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t2, t4);
            t4 = t2[t4];
            p.set$r(t4 & 240);
            p.set$g((t4 & 15) << 4);
            p.set$b(t3 & 240);
            p.set$a((t3 & 15) << 4);
        }
        return image;
        case 17:
        image = A.Image$(_null, _null, B.Format_3, 0, B.FrameType_2, t3, _null, 0, 4, _null, t2, false);
        for (t1 = image.data, t1 = t1.get$iterator(t1); t1.moveNext$0();) {
            p = t1.get$current();
            v = input.readUint16$0();
            a = (v & 1) !== 0 ? 255 : 0;
            p.set$r(v >>> 8 & 248);
            p.set$g(v >>> 3 & 248);
            p.set$b((v & 62) << 2);
            p.set$a(a);
        }
        return image;
        case 18:
        image = A.Image$(_null, _null, B.Format_3, 0, B.FrameType_2, t3, _null, 0, 4, _null, t2, false);
        for (t1 = image.data, t1 = t1.get$iterator(t1); t1.moveNext$0();) {
            p = t1.get$current();
            t2 = input.buffer;
            t3 = input.offset++;
            if (!(t3 >= 0 && t3 < t2.length))
            return A.ioore(t2, t3);
            p.set$r(t2[t3]);
            t3 = input.buffer;
            t2 = input.offset++;
            if (!(t2 >= 0 && t2 < t3.length))
            return A.ioore(t3, t2);
            p.set$g(t3[t2]);
            t2 = input.buffer;
            t3 = input.offset++;
            if (!(t3 >= 0 && t3 < t2.length))
            return A.ioore(t2, t3);
            p.set$b(t2[t3]);
            t3 = input.buffer;
            t2 = input.offset++;
            if (!(t2 >= 0 && t2 < t3.length))
            return A.ioore(t3, t2);
            p.set$a(t3[t2]);
        }
        return image;
        case 19:
        image = A.Image$(_null, _null, B.Format_3, 0, B.FrameType_2, t3, _null, 0, 3, _null, t2, false);
        for (t1 = image.data, t1 = t1.get$iterator(t1); t1.moveNext$0();) {
            p = t1.get$current();
            v = input.readUint16$0();
            p.set$r(v >>> 8 & 248);
            p.set$g(v >>> 3 & 252);
            p.set$b((v & 31) << 3);
        }
        return image;
        case 20:
        image = A.Image$(_null, _null, B.Format_3, 0, B.FrameType_2, t3, _null, 0, 3, _null, t2, false);
        for (t1 = image.data, t1 = t1.get$iterator(t1); t1.moveNext$0();) {
            p = t1.get$current();
            v = input.readUint16$0();
            p.set$r((v & 31) << 3);
            p.set$g(v >>> 2 & 248);
            p.set$b(v >>> 7 & 248);
        }
        return image;
        case 21:
        image = A.Image$(_null, _null, B.Format_3, 0, B.FrameType_2, t3, _null, 0, 3, _null, t2, false);
        for (t1 = image.data, t1 = t1.get$iterator(t1); t1.moveNext$0();) {
            p = t1.get$current();
            t2 = input.buffer;
            t3 = input.offset++;
            if (!(t3 >= 0 && t3 < t2.length))
            return A.ioore(t2, t3);
            p.set$r(t2[t3]);
            t3 = input.buffer;
            t2 = input.offset++;
            if (!(t2 >= 0 && t2 < t3.length))
            return A.ioore(t3, t2);
            p.set$g(t3[t2]);
            t2 = input.buffer;
            t3 = input.offset++;
            if (!(t3 >= 0 && t3 < t2.length))
            return A.ioore(t2, t3);
            p.set$b(t2[t3]);
        }
        return image;
        case 22:
        image = A.Image$(_null, _null, B.Format_3, 0, B.FrameType_2, t3, _null, 0, 1, _null, t2, false);
        for (t1 = image.data, t1 = t1.get$iterator(t1); t1.moveNext$0();) {
            p = t1.get$current();
            t2 = input.buffer;
            t3 = input.offset++;
            if (!(t3 >= 0 && t3 < t2.length))
            return A.ioore(t2, t3);
            p.set$r(t2[t3]);
        }
        return image;
        case 23:
        image = A.Image$(_null, _null, B.Format_3, 0, B.FrameType_2, t3, _null, 0, 4, _null, t2, false);
        for (t1 = image.data, t1 = t1.get$iterator(t1); t1.moveNext$0();) {
            p = t1.get$current();
            t2 = input.buffer;
            t3 = input.offset;
            t4 = input.offset = t3 + 1;
            t5 = t2.length;
            if (!(t3 >= 0 && t3 < t5))
            return A.ioore(t2, t3);
            t3 = t2[t3];
            input.offset = t4 + 1;
            if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t2, t4);
            t4 = t2[t4];
            p.set$r(t4);
            p.set$g(t4);
            p.set$b(t4);
            p.set$a(t3);
        }
        return image;
        case 24:
        return _null;
        case 25:
        return t1.alphaMask === 0 ? _this._decodeRgb4bpp$3(t2, t3, input.toUint8List$0()) : _this._decodeRgba4bpp$3(t2, t3, input.toUint8List$0());
    }
    return _null;
    },
    _decodePvr3$1(data) {
    var input, t2,
        t1 = this._info;
    if (!(t1 instanceof A.Pvr3Info))
        return null;
    input = A.InputBuffer$(data, false, null, 0);
    t2 = input.offset += 52;
    input.offset = t2 + t1.metadataSize;
    if (t1.order[0] === 0)
        switch (t1.format) {
        case 2:
            return this._decodeRgb4bpp$3(t1.width, t1.height, input.toUint8List$0());
        case 3:
            return this._decodeRgba4bpp$3(t1.width, t1.height, input.toUint8List$0());
        }
    return null;
    },
    _decodeRgb4bpp$3(width, height, data) {
    var t2, y, y4, x, x4, t3, mod, weightIndex, factorIndex, py, y0, y1, px, x0, x1, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, w, t20, t21, t22, _null = null,
        result = A.Image$(_null, _null, B.Format_3, 0, B.FrameType_2, height, _null, 0, 3, _null, width, false),
        blocks = width / 4 | 0,
        blockMask = blocks - 1,
        t1 = A.NativeUint32List_NativeUint32List$view(data.buffer, 0, _null),
        packet = new A.PvrPacket(t1),
        p0 = new A.PvrPacket(A.NativeUint32List_NativeUint32List$view(data.buffer, 0, _null)),
        p1 = new A.PvrPacket(A.NativeUint32List_NativeUint32List$view(data.buffer, 0, _null)),
        p2 = new A.PvrPacket(A.NativeUint32List_NativeUint32List$view(data.buffer, 0, _null)),
        p3 = new A.PvrPacket(A.NativeUint32List_NativeUint32List$view(data.buffer, 0, _null));
    for (t2 = t1.length, y = 0, y4 = 0; y < blocks; ++y, y4 += 4)
        for (x = 0, x4 = 0; x < blocks; ++x, x4 += 4) {
        packet.index = A.PvrPacket__getMortonNumber(x, y) << 1 >>> 0;
        packet._update$0();
        t3 = packet.index;
        if (!(t3 < t2))
            return A.ioore(t1, t3);
        mod = t1[t3];
        weightIndex = packet._usePunchthroughAlpha ? 4 : 0;
        for (factorIndex = 0, py = 0; py < 4; ++py) {
            y0 = (y + (py < 2 ? -1 : 0) & blockMask) >>> 0;
            y1 = (y0 + 1 & blockMask) >>> 0;
            for (t3 = py + y4, px = 0; px < 4; ++px) {
            x0 = (x + (px < 2 ? -1 : 0) & blockMask) >>> 0;
            x1 = (x0 + 1 & blockMask) >>> 0;
            p0.index = A.PvrPacket__getMortonNumber(x0, y0) << 1 >>> 0;
            p0._update$0();
            p1.index = A.PvrPacket__getMortonNumber(x1, y0) << 1 >>> 0;
            p1._update$0();
            p2.index = A.PvrPacket__getMortonNumber(x0, y1) << 1 >>> 0;
            p2._update$0();
            p3.index = A.PvrPacket__getMortonNumber(x1, y1) << 1 >>> 0;
            p3._update$0();
            t4 = p0.getColorRgbA$0();
            if (!(factorIndex >= 0 && factorIndex < 16))
                return A.ioore(B.List_Avl, factorIndex);
            t5 = B.List_Avl[factorIndex][0];
            t6 = p1.getColorRgbA$0();
            t7 = B.List_Avl[factorIndex][1];
            t8 = p2.getColorRgbA$0();
            t9 = B.List_Avl[factorIndex][2];
            t10 = p3.getColorRgbA$0();
            t11 = B.List_Avl[factorIndex][3];
            t12 = p0.getColorRgbB$0();
            t13 = B.List_Avl[factorIndex][0];
            t14 = p1.getColorRgbB$0();
            t15 = B.List_Avl[factorIndex][1];
            t16 = p2.getColorRgbB$0();
            t17 = B.List_Avl[factorIndex][2];
            t18 = p3.getColorRgbB$0();
            t19 = B.List_Avl[factorIndex][3];
            w = B.List_9yJ[weightIndex + mod & 3];
            t20 = w[0];
            t21 = w[1];
            t22 = result.data;
            if (t22 != null)
                t22.setPixelRgb$5(px + x4, t3, (t4.r * t5 + t6.r * t7 + t8.r * t9 + t10.r * t11) * t20 + (t12.r * t13 + t14.r * t15 + t16.r * t17 + t18.r * t19) * t21 >>> 7, (t4.g * t5 + t6.g * t7 + t8.g * t9 + t10.g * t11) * t20 + (t12.g * t13 + t14.g * t15 + t16.g * t17 + t18.g * t19) * t21 >>> 7, (t4.b * t5 + t6.b * t7 + t8.b * t9 + t10.b * t11) * t20 + (t12.b * t13 + t14.b * t15 + t16.b * t17 + t18.b * t19) * t21 >>> 7);
            mod = mod >>> 2;
            ++factorIndex;
            }
        }
        }
    return result;
    },
    _decodeRgba4bpp$3(width, height, data) {
    var t2, y, y4, x, x4, t3, mod, weightIndex, factorIndex, py, y0, y1, px, x0, x1, t4, t5, t6, t7, ca, cb, w, t8, _null = null,
        result = A.Image$(_null, _null, B.Format_3, 0, B.FrameType_2, height, _null, 0, 4, _null, width, false),
        blocks = width / 4 | 0,
        blockMask = blocks - 1,
        t1 = A.NativeUint32List_NativeUint32List$view(data.buffer, 0, _null),
        packet = new A.PvrPacket(t1),
        p0 = new A.PvrPacket(A.NativeUint32List_NativeUint32List$view(data.buffer, 0, _null)),
        p1 = new A.PvrPacket(A.NativeUint32List_NativeUint32List$view(data.buffer, 0, _null)),
        p2 = new A.PvrPacket(A.NativeUint32List_NativeUint32List$view(data.buffer, 0, _null)),
        p3 = new A.PvrPacket(A.NativeUint32List_NativeUint32List$view(data.buffer, 0, _null));
    for (t2 = t1.length, y = 0, y4 = 0; y < blocks; ++y, y4 += 4)
        for (x = 0, x4 = 0; x < blocks; ++x, x4 += 4) {
        packet.index = A.PvrPacket__getMortonNumber(x, y) << 1 >>> 0;
        packet._update$0();
        t3 = packet.index;
        if (!(t3 < t2))
            return A.ioore(t1, t3);
        mod = t1[t3];
        weightIndex = packet._usePunchthroughAlpha ? 4 : 0;
        for (factorIndex = 0, py = 0; py < 4; ++py) {
            y0 = (y + (py < 2 ? -1 : 0) & blockMask) >>> 0;
            y1 = (y0 + 1 & blockMask) >>> 0;
            for (t3 = py + y4, px = 0; px < 4; ++px) {
            x0 = (x + (px < 2 ? -1 : 0) & blockMask) >>> 0;
            x1 = (x0 + 1 & blockMask) >>> 0;
            p0.index = A.PvrPacket__getMortonNumber(x0, y0) << 1 >>> 0;
            p0._update$0();
            p1.index = A.PvrPacket__getMortonNumber(x1, y0) << 1 >>> 0;
            p1._update$0();
            p2.index = A.PvrPacket__getMortonNumber(x0, y1) << 1 >>> 0;
            p2._update$0();
            p3.index = A.PvrPacket__getMortonNumber(x1, y1) << 1 >>> 0;
            p3._update$0();
            t4 = p0.getColorRgbaA$0();
            if (!(factorIndex >= 0 && factorIndex < 16))
                return A.ioore(B.List_Avl, factorIndex);
            t5 = B.List_Avl[factorIndex][0];
            t6 = p1.getColorRgbaA$0();
            t7 = B.List_Avl[factorIndex][1];
            t7 = new A.PvrColorRgba(t4.r * t5, t4.g * t5, t4.b * t5, t4.a * t5).$add(0, new A.PvrColorRgba(t6.r * t7, t6.g * t7, t6.b * t7, t6.a * t7));
            t6 = p2.getColorRgbaA$0();
            t5 = B.List_Avl[factorIndex][2];
            t5 = t7.$add(0, new A.PvrColorRgba(t6.r * t5, t6.g * t5, t6.b * t5, t6.a * t5));
            t6 = p3.getColorRgbaA$0();
            t7 = B.List_Avl[factorIndex][3];
            ca = t5.$add(0, new A.PvrColorRgba(t6.r * t7, t6.g * t7, t6.b * t7, t6.a * t7));
            t7 = p0.getColorRgbaB$0();
            t6 = B.List_Avl[factorIndex][0];
            t5 = p1.getColorRgbaB$0();
            t4 = B.List_Avl[factorIndex][1];
            t4 = new A.PvrColorRgba(t7.r * t6, t7.g * t6, t7.b * t6, t7.a * t6).$add(0, new A.PvrColorRgba(t5.r * t4, t5.g * t4, t5.b * t4, t5.a * t4));
            t5 = p2.getColorRgbaB$0();
            t6 = B.List_Avl[factorIndex][2];
            t6 = t4.$add(0, new A.PvrColorRgba(t5.r * t6, t5.g * t6, t5.b * t6, t5.a * t6));
            t5 = p3.getColorRgbaB$0();
            t4 = B.List_Avl[factorIndex][3];
            cb = t6.$add(0, new A.PvrColorRgba(t5.r * t4, t5.g * t4, t5.b * t4, t5.a * t4));
            w = B.List_9yJ[weightIndex + mod & 3];
            t4 = w[0];
            t5 = w[1];
            t6 = w[2];
            t7 = w[3];
            t8 = result.data;
            if (t8 != null)
                t8.setPixelRgba$6(px + x4, t3, ca.r * t4 + cb.r * t5 >>> 7, ca.g * t4 + cb.g * t5 >>> 7, ca.b * t4 + cb.b * t5 >>> 7, ca.a * t6 + cb.a * t7 >>> 7);
            mod = mod >>> 2;
            ++factorIndex;
            }
        }
        }
    return result;
    }
};
A.TgaInfo.prototype = {
    read$1(header) {
    var it, t1, _this = this;
    if (header.end - header.offset < 18)
        return;
    _this.idLength = header.readByte$0();
    _this.colorMapType = header.readByte$0();
    it = header.readByte$0();
    if (it < 12) {
        if (!(it >= 0))
        return A.ioore(B.List_YAS, it);
        t1 = B.List_YAS[it];
    } else
        t1 = B.TgaImageType_0;
    _this.imageType = t1;
    header.readUint16$0();
    _this.colorMapLength = header.readUint16$0();
    _this.colorMapDepth = header.readByte$0();
    header.readUint16$0();
    header.readUint16$0();
    _this.width = header.readUint16$0();
    _this.height = header.readUint16$0();
    _this.pixelDepth = header.readByte$0();
    _this.flags = header.readByte$0();
    },
    isValid$0() {
    var _this = this,
        t1 = _this.pixelDepth;
    if (t1 !== 8 && t1 !== 16 && t1 !== 24 && t1 !== 32)
        return false;
    t1 = _this.imageType;
    if (t1 === B.TgaImageType_1 || t1 === B.TgaImageType_9) {
        if (_this.colorMapLength > 256 || _this.colorMapType !== 1)
        return false;
        t1 = _this.colorMapDepth;
        if (t1 !== 16 && t1 !== 24 && t1 !== 32)
        return false;
    } else if (_this.colorMapType === 1)
        return false;
    return true;
    },
    $isDecodeInfo: 1
};
A.TgaImageType.prototype = {
    _enumToString$0() {
    return "TgaImageType." + this._name;
    }
};
A.TgaDecoder.prototype = {
    decode$2$frame(bytes, frame) {
    if (this.startDecode$1(bytes) == null)
        return null;
    return this.decodeFrame$1(0);
    },
    startDecode$1(bytes) {
    var t1, header, t2, t3, _this = this;
    _this.info = new A.TgaInfo(B.TgaImageType_0);
    t1 = A.InputBuffer$(bytes, false, null, 0);
    _this.__TgaDecoder_input_A = t1;
    header = t1.readBytes$1(18);
    _this.info.read$1(header);
    if (!_this.info.isValid$0())
        return null;
    t1 = _this.__TgaDecoder_input_A;
    t2 = _this.info;
    t1.offset += t2.idLength;
    t3 = t2.imageType;
    if (t3 === B.TgaImageType_1 || t3 === B.TgaImageType_9)
        t2.colorMap = t1.readBytes$1(t2.colorMapLength * B.JSInt_methods._shrOtherPositive$1(t2.colorMapDepth, 3)).toUint8List$0();
    t1 = _this.info;
    t1.imageOffset = _this.__TgaDecoder_input_A.offset;
    return t1;
    },
    decodeFrame$1(frame) {
    var _this = this,
        t1 = _this.info;
    if (t1 == null)
        return null;
    t1 = t1.imageType;
    if (t1 === B.TgaImageType_2)
        return _this._decodeRgb$0();
    else if (t1 === B.TgaImageType_10 || t1 === B.TgaImageType_9)
        return _this._decodeRle$0();
    else if (t1 === B.TgaImageType_1)
        return _this._decodeRgb$0();
    return null;
    },
    _decodeColorMap$2(colorMap, palette) {
    var color, r, g, b, a, i, hasAlpha, t2, t3, t4, t5, t6, _this = this,
        cm = A.InputBuffer$(colorMap, false, null, 0),
        t1 = _this.info.colorMapDepth;
    if (t1 === 16) {
        t1 = _this.__TgaDecoder_input_A;
        t1 === $ && A.throwLateFieldNI("input");
        color = t1.readUint16$0();
        r = color >>> 7 & 248;
        g = color >>> 2 & 248;
        b = (color & 31) << 3;
        a = (color & 32768) !== 0 ? 0 : 255;
        for (i = 0; i < _this.info.colorMapLength; ++i) {
        palette.setRed$2(i, r);
        palette.setGreen$2(i, g);
        palette.setBlue$2(i, b);
        palette.setAlpha$2(i, a);
        }
    } else {
        hasAlpha = t1 === 32;
        for (i = 0; i < _this.info.colorMapLength; ++i) {
        t1 = cm.buffer;
        t2 = cm.offset;
        t3 = cm.offset = t2 + 1;
        t4 = t1.length;
        if (!(t2 >= 0 && t2 < t4))
            return A.ioore(t1, t2);
        t2 = t1[t2];
        t5 = cm.offset = t3 + 1;
        if (!(t3 >= 0 && t3 < t4))
            return A.ioore(t1, t3);
        t3 = t1[t3];
        t6 = cm.offset = t5 + 1;
        if (!(t5 >= 0 && t5 < t4))
            return A.ioore(t1, t5);
        t5 = t1[t5];
        if (hasAlpha) {
            cm.offset = t6 + 1;
            if (!(t6 >= 0 && t6 < t4))
            return A.ioore(t1, t6);
            a = t1[t6];
        } else
            a = 255;
        palette.setRed$2(i, t5);
        palette.setGreen$2(i, t3);
        palette.setBlue$2(i, t2);
        palette.setAlpha$2(i, a);
        }
    }
    },
    _decodeRle$0() {
    var image, w, y, x, t6, t7, count, i, x0, color, r, g, b, a, t8, t9, _this = this, _null = null,
        t1 = _this.info,
        bpp = t1.pixelDepth,
        t2 = bpp === 16,
        hasAlpha = t2 || bpp === 32,
        t3 = t1.width,
        t4 = t1.height,
        t5 = hasAlpha ? 4 : 3;
    t1 = t1.imageType;
    image = A.Image$(_null, _null, B.Format_3, 0, B.FrameType_2, t4, _null, 0, t5, _null, t3, t1 === B.TgaImageType_1 || t1 === B.TgaImageType_9);
    t1 = image.data;
    if ((t1 == null ? _null : t1.get$palette()) != null) {
        t1 = _this.info.colorMap;
        t1.toString;
        t3 = image.data;
        t3 = t3 == null ? _null : t3.get$palette();
        t3.toString;
        _this._decodeColorMap$2(t1, t3);
    }
    w = image.get$width();
    y = image.get$height() - 1;
    t1 = bpp === 8;
    x = 0;
    while (true) {
        t3 = _this.__TgaDecoder_input_A;
        t3 === $ && A.throwLateFieldNI("input");
        t4 = t3.offset;
        if (!(t4 < t3.end && y >= 0))
        break;
        t5 = t3.buffer;
        t6 = t3.offset = t4 + 1;
        t7 = t5.length;
        if (!(t4 >= 0 && t4 < t7))
        return A.ioore(t5, t4);
        t4 = t5[t4];
        count = (t4 & 127) + 1;
        if ((t4 & 128) !== 0)
        if (t1) {
            t3.offset = t6 + 1;
            if (!(t6 >= 0 && t6 < t7))
            return A.ioore(t5, t6);
            t3 = t5[t6];
            for (i = 0; i < count; ++i) {
            x0 = x + 1;
            t4 = image.data;
            if (t4 != null)
                t4.setPixelR$3(x, y, t3);
            if (x0 >= w) {
                --y;
                if (y < 0) {
                x = 0;
                break;
                }
                x = 0;
            } else
                x = x0;
            }
        } else if (t2) {
            color = t3.readUint16$0();
            r = color >>> 7 & 248;
            g = color >>> 2 & 248;
            b = (color & 31) << 3;
            a = (color & 32768) !== 0 ? 0 : 255;
            for (i = 0; i < count; ++i) {
            x0 = x + 1;
            t3 = image.data;
            if (t3 != null)
                t3.setPixelRgba$6(x, y, r, g, b, a);
            if (x0 >= w) {
                --y;
                if (y < 0) {
                x = 0;
                break;
                }
                x = 0;
            } else
                x = x0;
            }
        } else {
            t4 = t3.offset = t6 + 1;
            if (!(t6 >= 0 && t6 < t7))
            return A.ioore(t5, t6);
            t6 = t5[t6];
            t8 = t3.offset = t4 + 1;
            if (!(t4 >= 0 && t4 < t7))
            return A.ioore(t5, t4);
            t4 = t5[t4];
            t9 = t3.offset = t8 + 1;
            if (!(t8 >= 0 && t8 < t7))
            return A.ioore(t5, t8);
            t8 = t5[t8];
            if (hasAlpha) {
            t3.offset = t9 + 1;
            if (!(t9 >= 0 && t9 < t7))
                return A.ioore(t5, t9);
            a = t5[t9];
            } else
            a = 255;
            for (i = 0; i < count; ++i) {
            x0 = x + 1;
            t3 = image.data;
            if (t3 != null)
                t3.setPixelRgba$6(x, y, t8, t4, t6, a);
            if (x0 >= w) {
                --y;
                if (y < 0) {
                x = 0;
                break;
                }
                x = 0;
            } else
                x = x0;
            }
        }
        else if (t1)
        for (i = 0; i < count; ++i) {
            t3 = _this.__TgaDecoder_input_A;
            t4 = t3.buffer;
            t3 = t3.offset++;
            if (!(t3 >= 0 && t3 < t4.length))
            return A.ioore(t4, t3);
            t3 = t4[t3];
            x0 = x + 1;
            t4 = image.data;
            if (t4 != null)
            t4.setPixelR$3(x, y, t3);
            if (x0 >= w) {
            --y;
            if (y < 0) {
                x = 0;
                break;
            }
            x = 0;
            } else
            x = x0;
        }
        else if (t2)
        for (i = 0; i < count; ++i) {
            color = t3.readUint16$0();
            a = (color & 32768) !== 0 ? 0 : 255;
            x0 = x + 1;
            t3 = image.data;
            if (t3 != null)
            t3.setPixelRgba$6(x, y, color >>> 7 & 248, color >>> 2 & 248, (color & 31) << 3, a);
            t3 = _this.__TgaDecoder_input_A;
            if (t3.offset >= t3.end) {
            x = x0;
            break;
            }
            if (x0 >= w) {
            --y;
            if (y < 0) {
                x = 0;
                break;
            }
            x = 0;
            } else
            x = x0;
        }
        else
        for (i = 0; i < count; ++i) {
            t3 = _this.__TgaDecoder_input_A;
            t4 = t3.buffer;
            t5 = t3.offset;
            t6 = t3.offset = t5 + 1;
            t7 = t4.length;
            if (!(t5 >= 0 && t5 < t7))
            return A.ioore(t4, t5);
            t5 = t4[t5];
            t8 = t3.offset = t6 + 1;
            if (!(t6 >= 0 && t6 < t7))
            return A.ioore(t4, t6);
            t6 = t4[t6];
            t9 = t3.offset = t8 + 1;
            if (!(t8 >= 0 && t8 < t7))
            return A.ioore(t4, t8);
            t8 = t4[t8];
            if (hasAlpha) {
            t3.offset = t9 + 1;
            if (!(t9 >= 0 && t9 < t7))
                return A.ioore(t4, t9);
            a = t4[t9];
            } else
            a = 255;
            x0 = x + 1;
            t3 = image.data;
            if (t3 != null)
            t3.setPixelRgba$6(x, y, t8, t6, t5, a);
            if (x0 >= w) {
            --y;
            if (y < 0) {
                x = 0;
                break;
            }
            x = 0;
            } else
            x = x0;
        }
        if (x >= w) {
        --y;
        if (y < 0)
            break;
        x = 0;
        }
    }
    return image;
    },
    _decodeRgb$0() {
    var t2, bpp, t3, hasAlpha, t4, t5, image, y, x, color, a, t6, t7, t8, t9, _this = this, _null = null,
        t1 = _this.__TgaDecoder_input_A;
    t1 === $ && A.throwLateFieldNI("input");
    t2 = _this.info;
    t1.offset = t2.imageOffset;
    bpp = t2.pixelDepth;
    t1 = bpp === 16;
    if (!t1)
        if (bpp !== 32) {
        t3 = t2.imageType;
        if (t3 === B.TgaImageType_1 || t3 === B.TgaImageType_9) {
            t3 = t2.colorMapDepth;
            t3 = t3 === 16 || t3 === 32;
        } else
            t3 = false;
        hasAlpha = t3;
        } else
        hasAlpha = true;
    else
        hasAlpha = true;
    t3 = t2.width;
    t4 = t2.height;
    t5 = hasAlpha ? 4 : 3;
    t2 = t2.imageType;
    image = A.Image$(_null, _null, B.Format_3, 0, B.FrameType_2, t4, _null, 0, t5, _null, t3, t2 === B.TgaImageType_1 || t2 === B.TgaImageType_9);
    t2 = _this.info;
    t3 = t2.imageType;
    if (t3 === B.TgaImageType_1 || t3 === B.TgaImageType_9) {
        t2 = t2.colorMap;
        t2.toString;
        t3 = image.data;
        t3 = t3 == null ? _null : t3.get$palette();
        t3.toString;
        _this._decodeColorMap$2(t2, t3);
    }
    if (bpp === 8)
        for (y = image.get$height() - 1; y >= 0; --y) {
        x = 0;
        while (true) {
            t1 = image.data;
            t2 = t1 == null;
            t3 = t2 ? _null : t1.width;
            if (!(x < (t3 == null ? 0 : t3)))
            break;
            t3 = _this.__TgaDecoder_input_A;
            t4 = t3.buffer;
            t3 = t3.offset++;
            if (!(t3 >= 0 && t3 < t4.length))
            return A.ioore(t4, t3);
            t3 = t4[t3];
            if (!t2)
            t1.setPixelR$3(x, y, t3);
            ++x;
        }
        }
    else if (t1)
        for (y = image.get$height() - 1; y >= 0; --y) {
        x = 0;
        while (true) {
            t1 = image.data;
            t1 = t1 == null ? _null : t1.width;
            if (!(x < (t1 == null ? 0 : t1)))
            break;
            color = _this.__TgaDecoder_input_A.readUint16$0();
            a = (color & 32768) !== 0 ? 0 : 255;
            t1 = image.data;
            if (t1 != null)
            t1.setPixelRgba$6(x, y, color >>> 7 & 248, color >>> 2 & 248, (color & 31) << 3, a);
            ++x;
        }
        }
    else
        for (y = image.get$height() - 1; y >= 0; --y) {
        x = 0;
        while (true) {
            t1 = image.data;
            t2 = t1 == null;
            t3 = t2 ? _null : t1.width;
            if (!(x < (t3 == null ? 0 : t3)))
            break;
            t3 = _this.__TgaDecoder_input_A;
            t4 = t3.buffer;
            t5 = t3.offset;
            t6 = t3.offset = t5 + 1;
            t7 = t4.length;
            if (!(t5 >= 0 && t5 < t7))
            return A.ioore(t4, t5);
            t5 = t4[t5];
            t8 = t3.offset = t6 + 1;
            if (!(t6 >= 0 && t6 < t7))
            return A.ioore(t4, t6);
            t6 = t4[t6];
            t9 = t3.offset = t8 + 1;
            if (!(t8 >= 0 && t8 < t7))
            return A.ioore(t4, t8);
            t8 = t4[t8];
            if (hasAlpha) {
            t3.offset = t9 + 1;
            if (!(t9 >= 0 && t9 < t7))
                return A.ioore(t4, t9);
            a = t4[t9];
            } else
            a = 255;
            if (!t2)
            t1.setPixelRgba$6(x, y, t8, t6, t5, a);
            ++x;
        }
        }
    return image;
    }
};
A.TiffBitReader.prototype = {
    readBits$1(numBits) {
    var t1, value, t2, t3, t4, _this = this;
    if (numBits === 0)
        return 0;
    if (_this._bitPos === 0) {
        _this._bitPos = 8;
        _this._tiff_bit_reader$_bitBuffer = _this.input.readByte$0();
    }
    for (t1 = _this.input, value = 0; t2 = _this._bitPos, numBits > t2;) {
        t3 = B.JSInt_methods.$shl(value, t2);
        t4 = _this._tiff_bit_reader$_bitBuffer;
        if (!(t2 >= 0 && t2 < 9))
        return A.ioore(B.List_knt, t2);
        value = t3 + (t4 & B.List_knt[t2]);
        numBits -= t2;
        _this._bitPos = 8;
        t2 = t1.buffer;
        t4 = t1.offset++;
        if (!(t4 >= 0 && t4 < t2.length))
        return A.ioore(t2, t4);
        _this._tiff_bit_reader$_bitBuffer = t2[t4];
    }
    if (numBits > 0) {
        if (t2 === 0) {
        _this._bitPos = 8;
        _this._tiff_bit_reader$_bitBuffer = t1.readByte$0();
        }
        t1 = B.JSInt_methods.$shl(value, numBits);
        t2 = _this._tiff_bit_reader$_bitBuffer;
        t3 = _this._bitPos - numBits;
        t2 = B.JSInt_methods.$shr(t2, t3);
        if (!(numBits < 9))
        return A.ioore(B.List_knt, numBits);
        value = t1 + (t2 & B.List_knt[numBits]);
        _this._bitPos = t3;
    }
    return value;
    }
};
A.TiffEntry.prototype = {
    toString$0(_) {
    var _this = this,
        t1 = _this.tag,
        exifTag = $.$get$exifImageTags().$index(0, t1);
    if (exifTag != null)
        return exifTag.name + ": " + _this.type.toString$0(0) + " " + _this.count;
    return "<" + t1 + ">: " + _this.type.toString$0(0) + " " + _this.count;
    },
    read$0() {
    var t2, t3, t4, data, _this = this,
        t1 = _this.value;
    if (t1 != null)
        return t1;
    t1 = _this.p;
    t1.offset = _this.valueOffset;
    t2 = _this.count;
    t3 = _this.type;
    if (t3 !== B.IfdValueType_0) {
        t4 = t3.index;
        if (!(t4 < 13))
        return A.ioore(B.List_mC8, t4);
        t4 = B.List_mC8[t4];
    } else
        t4 = 0;
    data = t1.readBytes$1(t2 * t4);
    switch (t3.index) {
        case 1:
        return _this.value = new A.IfdByteValue(new Uint8Array(A._ensureNativeList(data.readBytes$1(t2).toUint8List$0())));
        case 2:
        return _this.value = new A.IfdValueAscii(t2 === 0 ? "" : data.readString$1(t2 - 1));
        case 7:
        return _this.value = new A.IfdByteValue(new Uint8Array(A._ensureNativeList(data.readBytes$1(t2).toUint8List$0())));
        case 3:
        return _this.value = A.IfdValueShort$data(data, t2);
        case 4:
        return _this.value = A.IfdValueLong$data(data, t2);
        case 5:
        return _this.value = A.IfdValueRational$data(data, t2);
        case 11:
        return _this.value = A.IfdValueSingle$data(data, t2);
        case 12:
        return _this.value = A.IfdValueDouble$data(data, t2);
        case 6:
        return _this.value = new A.IfdValueSByte(new Int8Array(A._ensureNativeList(A.NativeInt8List_NativeInt8List$view(data.toUint8List$0().buffer, 0, t2))));
        case 8:
        return _this.value = A.IfdValueSShort$data(data, t2);
        case 9:
        return _this.value = A.IfdValueSLong$data(data, t2);
        case 10:
        return _this.value = A.IfdValueSRational$data(data, t2);
        case 0:
        return null;
    }
    }
};
A.TiffFaxDecoder.prototype = {
    decode1D$4(out, compData, startX, height) {
    var scanlineStride, lineOffset, i, _this = this;
    _this.__TiffFaxDecoder_data_A = compData;
    _this.bytePointer = _this.bitPointer = 0;
    scanlineStride = B.JSInt_methods._tdivFast$1(_this.width + 7, 8);
    for (lineOffset = 0, i = 0; i < height; ++i) {
        _this._decodeNextScanline$3(out, lineOffset, startX);
        lineOffset += scanlineStride;
    }
    },
    _decodeNextScanline$3(buffer, lineOffset, bitOffset) {
    var t1, isWhite, current, entry, bits, t2, code, _this = this;
    _this.changingElemSize = 0;
    for (t1 = _this.width, isWhite = true; bitOffset < t1;) {
        for (; isWhite;) {
        current = _this._nextNBits$1(10);
        if (!(current < 1024))
            return A.ioore(B.List_VSP, current);
        entry = B.List_VSP[current];
        bits = B.JSInt_methods._shrOtherPositive$1(entry, 1) & 15;
        if (bits === 12) {
            current = (current << 2 & 12 | _this._nextLesserThan8Bits$1(2)) >>> 0;
            if (!(current < 16))
            return A.ioore(B.List_MEg, current);
            entry = B.List_MEg[current];
            t2 = B.JSInt_methods._shrOtherPositive$1(entry, 1);
            bitOffset += B.JSInt_methods._shrOtherPositive$1(entry, 4) & 4095;
            _this._updatePointer$1(4 - (t2 & 7));
        } else if (bits === 0)
            throw A.wrapException(A.ImageException$("TIFFFaxDecoder0"));
        else if (bits === 15)
            throw A.wrapException(A.ImageException$("TIFFFaxDecoder1"));
        else {
            bitOffset += B.JSInt_methods._shrOtherPositive$1(entry, 5) & 2047;
            _this._updatePointer$1(10 - bits);
            if ((entry & 1) === 0) {
            B.JSArray_methods.$indexSet(_this.currChangingElements, _this.changingElemSize++, bitOffset);
            isWhite = false;
            }
        }
        }
        if (bitOffset === t1) {
        if (_this.compression === 2)
            if (_this.bitPointer !== 0) {
            t1 = _this.bytePointer;
            t1.toString;
            _this.bytePointer = t1 + 1;
            _this.bitPointer = 0;
            }
        break;
        }
        for (; !isWhite;) {
        current = _this._nextLesserThan8Bits$1(4);
        if (!(current < 16))
            return A.ioore(B.List_89P, current);
        entry = B.List_89P[current];
        code = entry >>> 5 & 2047;
        if (code === 100) {
            current = _this._nextNBits$1(9);
            if (!(current < 512))
            return A.ioore(B.List_nLG, current);
            entry = B.List_nLG[current];
            bits = B.JSInt_methods._shrOtherPositive$1(entry, 1) & 15;
            code = B.JSInt_methods._shrOtherPositive$1(entry, 5) & 2047;
            if (bits === 12) {
            _this._updatePointer$1(5);
            current = _this._nextLesserThan8Bits$1(4);
            if (!(current < 16))
                return A.ioore(B.List_MEg, current);
            entry = B.List_MEg[current];
            t2 = B.JSInt_methods._shrOtherPositive$1(entry, 1);
            code = B.JSInt_methods._shrOtherPositive$1(entry, 4) & 4095;
            _this._setToBlack$4(buffer, lineOffset, bitOffset, code);
            bitOffset += code;
            _this._updatePointer$1(4 - (t2 & 7));
            } else if (bits === 15)
            throw A.wrapException(A.ImageException$("TIFFFaxDecoder2"));
            else {
            _this._setToBlack$4(buffer, lineOffset, bitOffset, code);
            bitOffset += code;
            _this._updatePointer$1(9 - bits);
            if ((entry & 1) === 0) {
                B.JSArray_methods.$indexSet(_this.currChangingElements, _this.changingElemSize++, bitOffset);
                isWhite = true;
            }
            }
        } else {
            if (code === 200) {
            current = _this._nextLesserThan8Bits$1(2);
            if (!(current < 4))
                return A.ioore(B.List_292_260_226_226, current);
            entry = B.List_292_260_226_226[current];
            code = entry >>> 5 & 2047;
            _this._setToBlack$4(buffer, lineOffset, bitOffset, code);
            bitOffset += code;
            _this._updatePointer$1(2 - (entry >>> 1 & 15));
            B.JSArray_methods.$indexSet(_this.currChangingElements, _this.changingElemSize++, bitOffset);
            } else {
            _this._setToBlack$4(buffer, lineOffset, bitOffset, code);
            bitOffset += code;
            _this._updatePointer$1(4 - (entry >>> 1 & 15));
            B.JSArray_methods.$indexSet(_this.currChangingElements, _this.changingElemSize++, bitOffset);
            }
            isWhite = true;
        }
        }
        if (bitOffset === t1) {
        if (_this.compression === 2)
            if (_this.bitPointer !== 0) {
            t1 = _this.bytePointer;
            t1.toString;
            _this.bytePointer = t1 + 1;
            _this.bitPointer = 0;
            }
        break;
        }
    }
    B.JSArray_methods.$indexSet(_this.currChangingElements, _this.changingElemSize++, bitOffset);
    },
    decode2D$5(out, compData, startX, height, tiffT4Options) {
    var t1, scanlineStride, b, lineOffset, lines, temp, bitOffset, a0, isWhite, currIndex, b1, b2, entry, code, bits, currIndex0, currIndex1, number, a1, _this = this;
    _this.__TiffFaxDecoder_data_A = compData;
    _this.compression = 3;
    _this.bytePointer = _this.bitPointer = 0;
    t1 = _this.width;
    scanlineStride = B.JSInt_methods._tdivFast$1(t1 + 7, 8);
    b = A.List_List$filled(2, null, false, type$.nullable_int);
    _this.oneD = tiffT4Options & 1;
    _this.fillBits = tiffT4Options >>> 2 & 1;
    if (_this._readEOL$0() !== 1)
        throw A.wrapException(A.ImageException$("TIFFFaxDecoder3"));
    _this._decodeNextScanline$3(out, 0, startX);
    for (lineOffset = scanlineStride, lines = 1; lines < height; ++lines) {
        if (_this._readEOL$0() === 0) {
        temp = _this.prevChangingElements;
        _this.set$prevChangingElements(_this.currChangingElements);
        _this.set$currChangingElements(temp);
        _this.lastChangingElement = 0;
        bitOffset = startX;
        a0 = -1;
        isWhite = true;
        currIndex = 0;
        while (true) {
            bitOffset.toString;
            if (!(bitOffset < t1))
            break;
            _this._getNextChangingElement$3(a0, isWhite, b);
            b1 = b[0];
            b2 = b[1];
            entry = _this._nextLesserThan8Bits$1(7);
            if (!(entry < 128))
            return A.ioore(B.List_8co, entry);
            entry = B.List_8co[entry] & 255;
            code = entry >>> 3 & 15;
            bits = entry & 7;
            if (code === 0) {
            if (!isWhite) {
                b2.toString;
                _this._setToBlack$4(out, lineOffset, bitOffset, b2 - bitOffset);
            }
            _this._updatePointer$1(7 - bits);
            bitOffset = b2;
            a0 = bitOffset;
            } else if (code === 1) {
            _this._updatePointer$1(7 - bits);
            currIndex0 = currIndex + 1;
            currIndex1 = currIndex0 + 1;
            if (isWhite) {
                bitOffset += _this._decodeWhiteCodeWord$0();
                B.JSArray_methods.$indexSet(_this.currChangingElements, currIndex, bitOffset);
                number = _this._decodeBlackCodeWord$0();
                _this._setToBlack$4(out, lineOffset, bitOffset, number);
                bitOffset += number;
                B.JSArray_methods.$indexSet(_this.currChangingElements, currIndex0, bitOffset);
            } else {
                number = _this._decodeBlackCodeWord$0();
                _this._setToBlack$4(out, lineOffset, bitOffset, number);
                bitOffset += number;
                B.JSArray_methods.$indexSet(_this.currChangingElements, currIndex, bitOffset);
                bitOffset += _this._decodeWhiteCodeWord$0();
                B.JSArray_methods.$indexSet(_this.currChangingElements, currIndex0, bitOffset);
            }
            currIndex = currIndex1;
            a0 = bitOffset;
            } else {
            if (code <= 8) {
                b1.toString;
                a1 = b1 + (code - 5);
                currIndex0 = currIndex + 1;
                B.JSArray_methods.$indexSet(_this.currChangingElements, currIndex, a1);
                isWhite = !isWhite;
                if (isWhite)
                _this._setToBlack$4(out, lineOffset, bitOffset, a1 - bitOffset);
                _this._updatePointer$1(7 - bits);
            } else
                throw A.wrapException(A.ImageException$("TIFFFaxDecoder4"));
            bitOffset = a1;
            currIndex = currIndex0;
            a0 = bitOffset;
            }
        }
        B.JSArray_methods.$indexSet(_this.currChangingElements, currIndex, bitOffset);
        _this.changingElemSize = currIndex + 1;
        } else
        _this._decodeNextScanline$3(out, lineOffset, startX);
        lineOffset += scanlineStride;
    }
    },
    decodeT6$5(out, compData, startX, height, tiffT6Options) {
    var t1, scanlineStride, b, cce, lineOffset, lines, temp, bitOffset, a0, isWhite, currIndex, b1, b2, entry, code, bits, currIndex0, currIndex1, number, a1, zeros, exit, _this = this;
    _this.__TiffFaxDecoder_data_A = compData;
    _this.compression = 4;
    _this.bytePointer = _this.bitPointer = 0;
    t1 = _this.width;
    scanlineStride = B.JSInt_methods._tdivFast$1(t1 + 7, 8);
    b = A.List_List$filled(2, null, false, type$.nullable_int);
    cce = _this.currChangingElements;
    _this.changingElemSize = 0;
    _this.changingElemSize = 1;
    B.JSArray_methods.$indexSet(cce, 0, t1);
    B.JSArray_methods.$indexSet(cce, _this.changingElemSize++, t1);
    for (lineOffset = 0, lines = 0; lines < height; ++lines) {
        temp = _this.prevChangingElements;
        _this.set$prevChangingElements(_this.currChangingElements);
        _this.set$currChangingElements(temp);
        _this.lastChangingElement = 0;
        bitOffset = startX;
        a0 = -1;
        isWhite = true;
        currIndex = 0;
        while (true) {
        bitOffset.toString;
        if (!(bitOffset < t1))
            break;
        _this._getNextChangingElement$3(a0, isWhite, b);
        b1 = b[0];
        b2 = b[1];
        entry = _this._nextLesserThan8Bits$1(7);
        if (!(entry < 128))
            return A.ioore(B.List_8co, entry);
        entry = B.List_8co[entry] & 255;
        code = entry >>> 3 & 15;
        bits = entry & 7;
        if (code === 0) {
            if (!isWhite) {
            b2.toString;
            _this._setToBlack$4(out, lineOffset, bitOffset, b2 - bitOffset);
            }
            _this._updatePointer$1(7 - bits);
            bitOffset = b2;
            a0 = bitOffset;
        } else if (code === 1) {
            _this._updatePointer$1(7 - bits);
            currIndex0 = currIndex + 1;
            currIndex1 = currIndex0 + 1;
            if (isWhite) {
            bitOffset += _this._decodeWhiteCodeWord$0();
            B.JSArray_methods.$indexSet(temp, currIndex, bitOffset);
            number = _this._decodeBlackCodeWord$0();
            _this._setToBlack$4(out, lineOffset, bitOffset, number);
            bitOffset += number;
            B.JSArray_methods.$indexSet(temp, currIndex0, bitOffset);
            } else {
            number = _this._decodeBlackCodeWord$0();
            _this._setToBlack$4(out, lineOffset, bitOffset, number);
            bitOffset += number;
            B.JSArray_methods.$indexSet(temp, currIndex, bitOffset);
            bitOffset += _this._decodeWhiteCodeWord$0();
            B.JSArray_methods.$indexSet(temp, currIndex0, bitOffset);
            }
            currIndex = currIndex1;
            a0 = bitOffset;
        } else if (code <= 8) {
            b1.toString;
            a1 = b1 + (code - 5);
            currIndex0 = currIndex + 1;
            B.JSArray_methods.$indexSet(temp, currIndex, a1);
            isWhite = !isWhite;
            if (isWhite)
            _this._setToBlack$4(out, lineOffset, bitOffset, a1 - bitOffset);
            _this._updatePointer$1(7 - bits);
            bitOffset = a1;
            currIndex = currIndex0;
            a0 = bitOffset;
        } else if (code === 11) {
            if (_this._nextLesserThan8Bits$1(3) !== 7)
            throw A.wrapException(A.ImageException$("TIFFFaxDecoder5"));
            for (zeros = 0, exit = false; !exit;) {
            for (; _this._nextLesserThan8Bits$1(1) !== 1;)
                ++zeros;
            if (zeros > 5) {
                zeros -= 6;
                if (!isWhite && zeros > 0) {
                currIndex0 = currIndex + 1;
                B.JSArray_methods.$indexSet(temp, currIndex, bitOffset);
                currIndex = currIndex0;
                }
                bitOffset += zeros;
                if (zeros > 0)
                isWhite = true;
                if (_this._nextLesserThan8Bits$1(1) === 0) {
                if (!isWhite) {
                    currIndex0 = currIndex + 1;
                    B.JSArray_methods.$indexSet(temp, currIndex, bitOffset);
                    currIndex = currIndex0;
                }
                isWhite = true;
                } else {
                if (isWhite) {
                    currIndex0 = currIndex + 1;
                    B.JSArray_methods.$indexSet(temp, currIndex, bitOffset);
                    currIndex = currIndex0;
                }
                isWhite = false;
                }
                exit = true;
            }
            if (zeros === 5) {
                if (!isWhite) {
                currIndex0 = currIndex + 1;
                B.JSArray_methods.$indexSet(temp, currIndex, bitOffset);
                currIndex = currIndex0;
                }
                bitOffset += zeros;
                isWhite = true;
            } else {
                bitOffset += zeros;
                currIndex0 = currIndex + 1;
                B.JSArray_methods.$indexSet(temp, currIndex, bitOffset);
                _this._setToBlack$4(out, lineOffset, bitOffset, 1);
                ++bitOffset;
                currIndex = currIndex0;
                isWhite = false;
            }
            }
        } else
            throw A.wrapException(A.ImageException$("TIFFFaxDecoder5 " + code));
        }
        B.JSArray_methods.$indexSet(temp, currIndex, bitOffset);
        _this.changingElemSize = currIndex + 1;
        lineOffset += scanlineStride;
    }
    },
    _decodeWhiteCodeWord$0() {
    var runLength, isWhite, current, entry, bits, t1, _this = this;
    for (runLength = 0, isWhite = true; isWhite;) {
        current = _this._nextNBits$1(10);
        if (!(current < 1024))
        return A.ioore(B.List_VSP, current);
        entry = B.List_VSP[current];
        bits = B.JSInt_methods._shrOtherPositive$1(entry, 1) & 15;
        if (bits === 12) {
        current = (current << 2 & 12 | _this._nextLesserThan8Bits$1(2)) >>> 0;
        if (!(current < 16))
            return A.ioore(B.List_MEg, current);
        entry = B.List_MEg[current];
        t1 = B.JSInt_methods._shrOtherPositive$1(entry, 1);
        runLength += B.JSInt_methods._shrOtherPositive$1(entry, 4) & 4095;
        _this._updatePointer$1(4 - (t1 & 7));
        } else if (bits === 0)
        throw A.wrapException(A.ImageException$("TIFFFaxDecoder0"));
        else if (bits === 15)
        throw A.wrapException(A.ImageException$("TIFFFaxDecoder1"));
        else {
        runLength += B.JSInt_methods._shrOtherPositive$1(entry, 5) & 2047;
        _this._updatePointer$1(10 - bits);
        if ((entry & 1) === 0)
            isWhite = false;
        }
    }
    return runLength;
    },
    _decodeBlackCodeWord$0() {
    var runLength, isWhite, current, entry, code, bits, t1, _this = this;
    for (runLength = 0, isWhite = false; !isWhite;) {
        current = _this._nextLesserThan8Bits$1(4);
        if (!(current < 16))
        return A.ioore(B.List_89P, current);
        entry = B.List_89P[current];
        code = entry >>> 5 & 2047;
        if (code === 100) {
        current = _this._nextNBits$1(9);
        if (!(current < 512))
            return A.ioore(B.List_nLG, current);
        entry = B.List_nLG[current];
        bits = B.JSInt_methods._shrOtherPositive$1(entry, 1) & 15;
        t1 = B.JSInt_methods._shrOtherPositive$1(entry, 5);
        if (bits === 12) {
            _this._updatePointer$1(5);
            current = _this._nextLesserThan8Bits$1(4);
            if (!(current < 16))
            return A.ioore(B.List_MEg, current);
            entry = B.List_MEg[current];
            t1 = B.JSInt_methods._shrOtherPositive$1(entry, 1);
            runLength += B.JSInt_methods._shrOtherPositive$1(entry, 4) & 4095;
            _this._updatePointer$1(4 - (t1 & 7));
        } else if (bits === 15)
            throw A.wrapException(A.ImageException$("TIFFFaxDecoder2"));
        else {
            runLength += t1 & 2047;
            _this._updatePointer$1(9 - bits);
            if ((entry & 1) === 0)
            isWhite = true;
        }
        } else {
        if (code === 200) {
            current = _this._nextLesserThan8Bits$1(2);
            if (!(current < 4))
            return A.ioore(B.List_292_260_226_226, current);
            entry = B.List_292_260_226_226[current];
            runLength += entry >>> 5 & 2047;
            _this._updatePointer$1(2 - (entry >>> 1 & 15));
        } else {
            runLength += code;
            _this._updatePointer$1(4 - (entry >>> 1 & 15));
        }
        isWhite = true;
        }
    }
    return runLength;
    },
    _readEOL$0() {
    var bitsLeft, n, _this = this,
        _s15_ = "TIFFFaxDecoder8",
        t1 = _this.fillBits;
    if (t1 === 0) {
        if (_this._nextNBits$1(12) !== 1)
        throw A.wrapException(A.ImageException$("TIFFFaxDecoder6"));
    } else if (t1 === 1) {
        t1 = _this.bitPointer;
        t1.toString;
        bitsLeft = 8 - t1;
        if (_this._nextNBits$1(bitsLeft) !== 0)
        throw A.wrapException(A.ImageException$(_s15_));
        if (bitsLeft < 4)
        if (_this._nextNBits$1(8) !== 0)
            throw A.wrapException(A.ImageException$(_s15_));
        for (; n = _this._nextNBits$1(8), n !== 1;)
        if (n !== 0)
            throw A.wrapException(A.ImageException$(_s15_));
    }
    if (_this.oneD === 0)
        return 1;
    else
        return _this._nextLesserThan8Bits$1(1);
    },
    _getNextChangingElement$3(a0, isWhite, ret) {
    var pce, ces, t1, start, i, t2, _this = this;
    type$.List_nullable_int._as(ret);
    pce = _this.prevChangingElements;
    ces = _this.changingElemSize;
    t1 = _this.lastChangingElement;
    start = t1 > 0 ? t1 - 1 : 0;
    start = isWhite ? (start & 4294967294) >>> 0 : (start | 1) >>> 0;
    for (t1 = pce.length, i = start; i < ces; i += 2) {
        if (!(i < t1))
        return A.ioore(pce, i);
        t2 = pce[i];
        t2.toString;
        a0.toString;
        if (t2 > a0) {
        _this.lastChangingElement = i;
        B.JSArray_methods.$indexSet(ret, 0, t2);
        break;
        }
    }
    t2 = i + 1;
    if (t2 < ces) {
        if (!(t2 < t1))
        return A.ioore(pce, t2);
        B.JSArray_methods.$indexSet(ret, 1, pce[t2]);
    }
    },
    _setToBlack$4(buffer, lineOffset, bitOffset, numBits) {
    var maskVal, t1, t2, val, byteNum0,
        bitNum = 8 * lineOffset + A._asInt(bitOffset),
        lastBit = bitNum + numBits,
        byteNum = B.JSInt_methods._shrOtherPositive$1(bitNum, 3),
        shift = bitNum & 7;
    if (shift > 0) {
        maskVal = B.JSInt_methods.$shl(1, 7 - shift);
        t1 = buffer.buffer;
        t2 = buffer.offset + byteNum;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        val = t1[t2];
        while (true) {
        if (!(maskVal > 0 && bitNum < lastBit))
            break;
        val = (val | maskVal) >>> 0;
        maskVal = maskVal >>> 1;
        ++bitNum;
        }
        buffer.$indexSet(0, byteNum, val);
    }
    byteNum = B.JSInt_methods._shrOtherPositive$1(bitNum, 3);
    for (t1 = lastBit - 7; bitNum < t1; byteNum = byteNum0) {
        byteNum0 = byteNum + 1;
        J.$indexSet$ax(buffer.buffer, buffer.offset + byteNum, 255);
        bitNum += 8;
    }
    for (; bitNum < lastBit;) {
        byteNum = B.JSInt_methods._shrOtherPositive$1(bitNum, 3);
        t1 = buffer.buffer;
        t2 = buffer.offset + byteNum;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        J.$indexSet$ax(t1, t2, (t1[t2] | B.JSInt_methods.$shl(1, 7 - (bitNum & 7))) >>> 0);
        ++bitNum;
    }
    },
    _nextNBits$1(bitsToGet) {
    var t2, l, bp, t3, t4, b, next, next2next, t5, bitsLeft, bitsFromNextByte, bitsFromNext2NextByte, bitsFromNextByte0, i1, i2, _this = this,
        t1 = _this.__TiffFaxDecoder_data_A;
    t1 === $ && A.throwLateFieldNI("data");
    t2 = t1.offset;
    l = t1.end - t2 - 1;
    bp = _this.bytePointer;
    t3 = _this.fillOrder;
    if (t3 === 1) {
        bp.toString;
        t1 = t1.buffer;
        t3 = t2 + bp;
        t4 = t1.length;
        if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
        b = t1[t3];
        if (bp === l) {
        next = 0;
        next2next = 0;
        } else {
        t3 = bp + 1;
        t5 = t2 + t3;
        if (t3 === l) {
            if (!(t5 >= 0 && t5 < t4))
            return A.ioore(t1, t5);
            next = t1[t5];
            next2next = 0;
        } else {
            if (!(t5 >= 0 && t5 < t4))
            return A.ioore(t1, t5);
            next = t1[t5];
            t2 += bp + 2;
            if (!(t2 >= 0 && t2 < t4))
            return A.ioore(t1, t2);
            next2next = t1[t2];
        }
        }
    } else if (t3 === 2) {
        bp.toString;
        t1 = t1.buffer;
        t3 = t2 + bp;
        t4 = t1.length;
        if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
        b = B.List_VvJ[t1[t3] & 255];
        if (bp === l) {
        next = 0;
        next2next = 0;
        } else {
        t3 = bp + 1;
        t5 = t2 + t3;
        if (t3 === l) {
            if (!(t5 >= 0 && t5 < t4))
            return A.ioore(t1, t5);
            next = B.List_VvJ[t1[t5] & 255];
            next2next = 0;
        } else {
            if (!(t5 >= 0 && t5 < t4))
            return A.ioore(t1, t5);
            next = B.List_VvJ[t1[t5] & 255];
            t2 += bp + 2;
            if (!(t2 >= 0 && t2 < t4))
            return A.ioore(t1, t2);
            next2next = B.List_VvJ[t1[t2] & 255];
        }
        }
    } else
        throw A.wrapException(A.ImageException$("TIFFFaxDecoder7"));
    t1 = _this.bitPointer;
    t1.toString;
    bitsLeft = 8 - t1;
    bitsFromNextByte = bitsToGet - bitsLeft;
    if (bitsFromNextByte > 8) {
        bitsFromNext2NextByte = bitsFromNextByte - 8;
        bitsFromNextByte0 = 8;
    } else {
        bitsFromNextByte0 = bitsFromNextByte;
        bitsFromNext2NextByte = 0;
    }
    bp.toString;
    t1 = _this.bytePointer = bp + 1;
    if (!(bitsLeft >= 0 && bitsLeft < 9))
        return A.ioore(B.List_knt, bitsLeft);
    i1 = B.JSInt_methods.$shl(b & B.List_knt[bitsLeft], bitsFromNextByte);
    if (!(bitsFromNextByte0 >= 0))
        return A.ioore(B.List_knt0, bitsFromNextByte0);
    i2 = B.JSInt_methods._shrReceiverPositive$1(next & B.List_knt0[bitsFromNextByte0], 8 - bitsFromNextByte0);
    if (bitsFromNext2NextByte !== 0) {
        i2 = B.JSInt_methods.$shl(i2, bitsFromNext2NextByte);
        if (!(bitsFromNext2NextByte < 9))
        return A.ioore(B.List_knt0, bitsFromNext2NextByte);
        i2 |= B.JSInt_methods._shrReceiverPositive$1(next2next & B.List_knt0[bitsFromNext2NextByte], 8 - bitsFromNext2NextByte);
        _this.bytePointer = t1 + 1;
        _this.bitPointer = bitsFromNext2NextByte;
    } else if (bitsFromNextByte0 === 8) {
        _this.bitPointer = 0;
        _this.bytePointer = t1 + 1;
    } else
        _this.bitPointer = bitsFromNextByte0;
    return (i1 | i2) >>> 0;
    },
    _nextLesserThan8Bits$1(bitsToGet) {
    var t2, l, bp, t3, t4, b, next, bitsLeft, bitsFromNextByte, shift, i1, _this = this,
        t1 = _this.__TiffFaxDecoder_data_A;
    t1 === $ && A.throwLateFieldNI("data");
    t2 = t1.offset;
    l = t1.end - t2 - 1;
    bp = _this.bytePointer;
    t3 = _this.fillOrder;
    if (t3 === 1) {
        bp.toString;
        t1 = t1.buffer;
        t3 = t2 + bp;
        t4 = t1.length;
        if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
        b = t1[t3];
        if (bp === l)
        next = 0;
        else {
        t2 += bp + 1;
        if (!(t2 >= 0 && t2 < t4))
            return A.ioore(t1, t2);
        next = t1[t2];
        }
    } else if (t3 === 2) {
        bp.toString;
        t1 = t1.buffer;
        t3 = t2 + bp;
        t4 = t1.length;
        if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
        b = B.List_VvJ[t1[t3] & 255];
        if (bp === l)
        next = 0;
        else {
        t2 += bp + 1;
        if (!(t2 >= 0 && t2 < t4))
            return A.ioore(t1, t2);
        next = B.List_VvJ[t1[t2] & 255];
        }
    } else
        throw A.wrapException(A.ImageException$("TIFFFaxDecoder7"));
    t1 = _this.bitPointer;
    t1.toString;
    bitsLeft = 8 - t1;
    bitsFromNextByte = bitsToGet - bitsLeft;
    shift = bitsLeft - bitsToGet;
    if (shift >= 0) {
        if (!(bitsLeft >= 0 && bitsLeft < 9))
        return A.ioore(B.List_knt, bitsLeft);
        i1 = B.JSInt_methods._shrReceiverPositive$1(b & B.List_knt[bitsLeft], shift);
        t1 += bitsToGet;
        _this.bitPointer = t1;
        if (t1 === 8) {
        _this.bitPointer = 0;
        bp.toString;
        _this.bytePointer = bp + 1;
        }
    } else {
        if (!(bitsLeft >= 0 && bitsLeft < 9))
        return A.ioore(B.List_knt, bitsLeft);
        i1 = B.JSInt_methods.$shl(b & B.List_knt[bitsLeft], -shift);
        if (!(bitsFromNextByte >= 0 && bitsFromNextByte < 9))
        return A.ioore(B.List_knt0, bitsFromNextByte);
        i1 = (i1 | B.JSInt_methods._shrReceiverPositive$1(next & B.List_knt0[bitsFromNextByte], 8 - bitsFromNextByte)) >>> 0;
        bp.toString;
        _this.bytePointer = bp + 1;
        _this.bitPointer = bitsFromNextByte;
    }
    return i1;
    },
    _updatePointer$1(bitsToMoveBack) {
    var i, _this = this,
        t1 = _this.bitPointer;
    t1.toString;
    i = t1 - bitsToMoveBack;
    if (i < 0) {
        t1 = _this.bytePointer;
        t1.toString;
        _this.bytePointer = t1 - 1;
        _this.bitPointer = 8 + i;
    } else
        _this.bitPointer = i;
    },
    set$prevChangingElements(prevChangingElements) {
    this.prevChangingElements = type$.nullable_List_nullable_int._as(prevChangingElements);
    },
    set$currChangingElements(currChangingElements) {
    this.currChangingElements = type$.nullable_List_nullable_int._as(currChangingElements);
    }
};
A.TiffImage.prototype = {
    TiffImage$1(p) {
    var t1, i, tag, ti, type, typeSize, count, valueOffset, entry, t2, v, pt, $length, cm, len, l, t3, _this = this, _null = null,
        p3 = A.InputBuffer$from(p, _null, 0),
        numDirEntries = p.readUint16$0();
    for (t1 = _this.tags, i = 0; i < numDirEntries; ++i) {
        tag = p.readUint16$0();
        ti = p.readUint16$0();
        if (!(ti < 13))
        return A.ioore(B.List_XtE, ti);
        type = B.List_XtE[ti];
        typeSize = B.List_mC8[ti];
        count = p.readUint32$0();
        if (count * typeSize > 4)
        valueOffset = p.readUint32$0();
        else {
        valueOffset = p.offset;
        p.offset = valueOffset + 4;
        }
        entry = new A.TiffEntry(tag, type, count, valueOffset, p3);
        t1.$indexSet(0, tag, entry);
        if (tag === 256) {
        t2 = entry.read$0();
        t2 = t2 == null ? _null : t2.toInt$0(0);
        _this.width = t2 == null ? 0 : t2;
        } else if (tag === 257) {
        t2 = entry.read$0();
        t2 = t2 == null ? _null : t2.toInt$0(0);
        _this.height = t2 == null ? 0 : t2;
        } else if (tag === 262) {
        v = entry.read$0();
        pt = v == null ? _null : v.toInt$0(0);
        if (pt == null)
            pt = 17;
        if (pt < 17) {
            if (!(pt >= 0))
            return A.ioore(B.List_46y, pt);
            _this.photometricType = B.List_46y[pt];
        } else
            _this.photometricType = B.TiffPhotometricType_16;
        } else if (tag === 259) {
        t2 = entry.read$0();
        t2 = t2 == null ? _null : t2.toInt$0(0);
        _this.compression = t2 == null ? 0 : t2;
        } else if (tag === 258) {
        t2 = entry.read$0();
        t2 = t2 == null ? _null : t2.toInt$0(0);
        _this.bitsPerSample = t2 == null ? 0 : t2;
        } else if (tag === 277) {
        t2 = entry.read$0();
        t2 = t2 == null ? _null : t2.toInt$0(0);
        _this.samplesPerPixel = t2 == null ? 0 : t2;
        } else if (tag === 317) {
        t2 = entry.read$0();
        t2 = t2 == null ? _null : t2.toInt$0(0);
        _this.predictor = t2 == null ? 0 : t2;
        } else if (tag === 339) {
        t2 = entry.read$0();
        v = t2 == null ? _null : t2.toInt$0(0);
        if (v == null)
            v = 0;
        if (!(v >= 0 && v < 4))
            return A.ioore(B.List_3Fq, v);
        _this.sampleFormat = B.List_3Fq[v];
        } else if (tag === 320) {
        v = entry.read$0();
        if (v != null) {
            t2 = v.toData$0().buffer;
            $length = B.JSInt_methods._tdivFast$1(t2.byteLength - 0, 2);
            _this.set$colorMap(new Uint16Array(t2, 0, $length));
            _this.__TiffImage_colorMapRed_A = 0;
            t2 = _this.colorMap.length / 3 | 0;
            _this.__TiffImage_colorMapGreen_A = t2;
            _this.__TiffImage_colorMapBlue_A = t2 * 2;
        }
        }
    }
    cm = _this.colorMap;
    t2 = cm != null;
    if (t2 && _this.photometricType === B.TiffPhotometricType_3)
        _this.samplesPerPixel = 1;
    if (_this.width === 0 || _this.height === 0)
        return;
    if (t2 && _this.bitsPerSample === 8) {
        len = cm.length;
        for (i = 0; i < len; ++i)
        cm[i] = cm[i] >>> 8;
    }
    if (_this.photometricType === B.TiffPhotometricType_0)
        _this.isWhiteZero = true;
    if (t1.containsKey$1(324)) {
        _this.tileWidth = _this._readTag$1(322);
        _this.tileHeight = _this._readTag$1(323);
        _this.set$tileOffsets(_this._readTagList$1(324));
        _this.set$tileByteCounts(_this._readTagList$1(325));
    } else {
        _this.tileWidth = _this._readTag$2(322, _this.width);
        if (!t1.containsKey$1(278))
        _this.tileHeight = _this._readTag$2(323, _this.height);
        else {
        l = _this._readTag$1(278);
        if (l === -1)
            _this.tileHeight = _this.height;
        else
            _this.tileHeight = l;
        }
        _this.set$tileOffsets(_this._readTagList$1(273));
        _this.set$tileByteCounts(_this._readTagList$1(279));
    }
    t2 = _this.width;
    t3 = _this.tileWidth;
    _this.__TiffImage_tilesX_A = B.JSInt_methods.$tdiv(t2 + t3 - 1, t3);
    t3 = _this.height;
    t2 = _this.tileHeight;
    _this.__TiffImage_tilesY_A = B.JSInt_methods.$tdiv(t3 + t2 - 1, t2);
    _this.fillOrder = _this._readTag$2(266, 1);
    _this.t4Options = _this._readTag$1(292);
    _this.t6Options = _this._readTag$1(293);
    _this._readTag$1(338);
    switch (_this.photometricType.index) {
        case 0:
        case 1:
        t1 = _this.bitsPerSample;
        if (t1 === 1 && _this.samplesPerPixel === 1)
            _this.imageType = B.TiffImageType_0;
        else if (t1 === 4 && _this.samplesPerPixel === 1)
            _this.imageType = B.TiffImageType_1;
        else if (B.JSInt_methods.$mod(t1, 8) === 0) {
            t1 = _this.samplesPerPixel;
            if (t1 === 1)
            _this.imageType = B.TiffImageType_2;
            else if (t1 === 2)
            _this.imageType = B.TiffImageType_3;
            else
            _this.imageType = B.TiffImageType_8;
        }
        break;
        case 2:
        if (B.JSInt_methods.$mod(_this.bitsPerSample, 8) === 0) {
            t1 = _this.samplesPerPixel;
            if (t1 === 3)
            _this.imageType = B.TiffImageType_5;
            else if (t1 === 4)
            _this.imageType = B.TiffImageType_6;
            else
            _this.imageType = B.TiffImageType_8;
        }
        break;
        case 3:
        if (_this.samplesPerPixel === 1)
            if (_this.colorMap != null) {
            t1 = _this.bitsPerSample;
            t1 = t1 === 4 || t1 === 8 || t1 === 16;
            } else
            t1 = false;
        else
            t1 = false;
        if (t1)
            _this.imageType = B.TiffImageType_4;
        break;
        case 4:
        if (_this.bitsPerSample === 1 && _this.samplesPerPixel === 1)
            _this.imageType = B.TiffImageType_0;
        break;
        case 6:
        if (_this.compression === 7 && _this.bitsPerSample === 8 && _this.samplesPerPixel === 3)
            _this.imageType = B.TiffImageType_5;
        else {
            if (t1.containsKey$1(530)) {
            v = t1.$index(0, 530).read$0();
            _this.__TiffImage_chromaSubH_A = v.toInt$0(0);
            t1 = _this.__TiffImage_chromaSubV_A = v.toInt$1(0, 1);
            } else
            t1 = _this.__TiffImage_chromaSubV_A = _this.__TiffImage_chromaSubH_A = 2;
            t2 = _this.__TiffImage_chromaSubH_A;
            t2 === $ && A.throwLateFieldNI("chromaSubH");
            if (t2 * t1 === 1)
            _this.imageType = B.TiffImageType_8;
            else if (_this.bitsPerSample === 8 && _this.samplesPerPixel === 3)
            _this.imageType = B.TiffImageType_7;
        }
        break;
        default:
        if (B.JSInt_methods.$mod(_this.bitsPerSample, 8) === 0)
            _this.imageType = B.TiffImageType_8;
        break;
    }
    },
    decode$1(p) {
    var format, hasPalette, numChannels, image, cm, t2, numColors, i, t3, t4, t5, tileY, ti, tileX, _this = this, _null = null,
        t1 = _this.sampleFormat,
        isFloat = t1 === B.TiffFormat_3,
        isInt = t1 === B.TiffFormat_2;
    t1 = _this.bitsPerSample;
    if (t1 === 1)
        format = B.Format_0;
    else if (t1 === 2)
        format = B.Format_1;
    else {
        if (t1 === 4)
        t1 = B.Format_2;
        else if (isFloat && t1 === 16)
        t1 = B.Format_9;
        else if (isFloat && t1 === 32)
        t1 = B.Format_10;
        else if (isFloat && t1 === 64)
        t1 = B.Format_11;
        else if (isInt && t1 === 8)
        t1 = B.Format_6;
        else if (isInt && t1 === 16)
        t1 = B.Format_7;
        else if (isInt && t1 === 32)
        t1 = B.Format_8;
        else if (t1 === 16)
        t1 = B.Format_4;
        else
        t1 = t1 === 32 ? B.Format_5 : B.Format_3;
        format = t1;
    }
    hasPalette = _this.colorMap != null && _this.photometricType === B.TiffPhotometricType_3;
    numChannels = hasPalette ? 3 : _this.samplesPerPixel;
    t1 = _this.width;
    image = A.Image$(_null, _null, format, 0, B.FrameType_2, _this.height, _null, 0, numChannels, _null, t1, hasPalette);
    if (hasPalette) {
        t1 = image.data;
        t1 = t1 == null ? _null : t1.get$palette();
        t1.toString;
        cm = _this.colorMap;
        t2 = cm.length;
        numColors = t2 / 3 | 0;
        for (i = 0; i < numColors; ++i) {
        t3 = _this.__TiffImage_colorMapRed_A;
        t3 === $ && A.throwLateFieldNI("colorMapRed");
        t3 += i;
        if (!(t3 < t2))
            return A.ioore(cm, t3);
        t3 = cm[t3];
        t4 = _this.__TiffImage_colorMapGreen_A;
        t4 === $ && A.throwLateFieldNI("colorMapGreen");
        t4 += i;
        if (!(t4 < t2))
            return A.ioore(cm, t4);
        t4 = cm[t4];
        t5 = _this.__TiffImage_colorMapBlue_A;
        t5 === $ && A.throwLateFieldNI("colorMapBlue");
        t5 += i;
        if (!(t5 < t2))
            return A.ioore(cm, t5);
        t1.setRgb$4(i, t3, t4, cm[t5]);
        }
    }
    tileY = 0;
    ti = 0;
    while (true) {
        t1 = _this.__TiffImage_tilesY_A;
        t1 === $ && A.throwLateFieldNI("tilesY");
        if (!(tileY < t1))
        break;
        tileX = 0;
        while (true) {
        t1 = _this.__TiffImage_tilesX_A;
        t1 === $ && A.throwLateFieldNI("tilesX");
        if (!(tileX < t1))
            break;
        _this._decodeTile$4(p, image, tileX, tileY);
        ++tileX;
        ++ti;
        }
        ++tileY;
    }
    return image;
    },
    _decodeTile$4(p, image, tileX, tileY) {
    var byteCount, byteData, decoder, t1, tileIndex, outX, t2, outY, t3, bytesInThisTile, exception, j, i, count, len, t4, t5, t6, py, y, px, x, sample, mx, gray, alpha, r, g, b, a, rgba, _this = this, _null = null;
    if (_this.imageType === B.TiffImageType_0) {
        _this._decodeBilevelTile$4(p, image, tileX, tileY);
        return;
    }
    t1 = _this.__TiffImage_tilesX_A;
    t1 === $ && A.throwLateFieldNI("tilesX");
    tileIndex = tileY * t1 + tileX;
    t1 = _this.tileOffsets;
    if (!(tileIndex >= 0 && tileIndex < t1.length))
        return A.ioore(t1, tileIndex);
    p.set$offset(t1[tileIndex]);
    t1 = _this.tileWidth;
    outX = tileX * t1;
    t2 = _this.tileHeight;
    outY = tileY * t2;
    t3 = _this.tileByteCounts;
    if (!(tileIndex < t3.length))
        return A.ioore(t3, tileIndex);
    byteCount = t3[tileIndex];
    bytesInThisTile = t1 * t2 * _this.samplesPerPixel;
    t1 = _this.bitsPerSample;
    t2 = t1 === 16;
    if (t2)
        bytesInThisTile *= 2;
    else if (t1 === 32)
        bytesInThisTile *= 4;
    byteData = null;
    if (t1 === 8 || t2 || t1 === 32 || t1 === 64) {
        t1 = _this.compression;
        if (t1 === 1)
        byteData = p;
        else if (t1 === 5) {
        byteData = A.InputBuffer$(new Uint8Array(bytesInThisTile), false, _null, 0);
        decoder = A.LzwDecoder$();
        try {
            decoder.decode$2(A.InputBuffer$from(p, byteCount, 0), byteData.buffer);
        } catch (exception) {
        }
        if (_this.predictor === 2)
            for (j = 0; j < _this.tileHeight; ++j) {
            i = _this.samplesPerPixel;
            t1 = _this.tileWidth;
            count = i * (j * t1 + 1);
            len = t1 * i;
            for (; i < len; ++i) {
                t1 = byteData;
                t2 = t1.buffer;
                t1 = t1.offset + count;
                if (!(t1 >= 0 && t1 < t2.length))
                return A.ioore(t2, t1);
                t3 = t2[t1];
                t4 = byteData;
                t5 = _this.samplesPerPixel;
                t6 = t4.buffer;
                t5 = t4.offset + (count - t5);
                if (!(t5 >= 0 && t5 < t6.length))
                return A.ioore(t6, t5);
                J.$indexSet$ax(t2, t1, t3 + t6[t5]);
                ++count;
            }
            }
        } else if (t1 === 32773) {
        byteData = A.InputBuffer$(new Uint8Array(bytesInThisTile), false, _null, 0);
        _this._decodePackBits$3(p, bytesInThisTile, byteData.buffer);
        } else if (t1 === 32946) {
        t1 = A.Inflate$(p.toList$2(0, 0, byteCount)).output;
        byteData = A.InputBuffer$(type$.List_int._as(A.NativeUint8List_NativeUint8List$view(t1._output_stream$_buffer.buffer, 0, t1.length)), false, _null, 0);
        } else if (t1 === 8)
        byteData = A.InputBuffer$(B.C__ZLibDecoder.decodeBuffer$2$verify(A.InputStream$(type$.List_int._as(p.toList$2(0, 0, byteCount)), 1, _null, 0), false), false, _null, 0);
        else if (t1 === 6) {
        _this._jpegToImage$6(new A.JpegDecoder().decode$1(type$.Uint8List._as(p.toList$2(0, 0, byteCount))), image, outX, outY, _this.tileWidth, _this.tileHeight);
        return;
        } else
        throw A.wrapException(A.ImageException$("Unsupported Compression Type: " + t1));
        py = outY;
        y = 0;
        while (true) {
        if (!(y < _this.tileHeight && py < _this.height))
            break;
        px = outX;
        x = 0;
        while (true) {
            if (!(x < _this.tileWidth && px < _this.width))
            break;
            t1 = _this.samplesPerPixel;
            if (t1 === 1) {
            t1 = _this.sampleFormat;
            if (t1 === B.TiffFormat_3) {
                t1 = _this.bitsPerSample;
                if (t1 === 32) {
                t1 = byteData.readUint32$0();
                $.$get$__uint32()[0] = t1;
                t1 = $.$get$__uint32ToFloat32();
                if (0 >= t1.length)
                    return A.ioore(t1, 0);
                sample = t1[0];
                } else if (t1 === 64)
                sample = byteData.readFloat64$0();
                else if (t1 === 16) {
                t1 = byteData.readUint16$0();
                t2 = $.Float16__toFloatFloat32Data;
                t2 = t2 != null ? t2 : A.Float16__initialize();
                if (!(t1 < t2.length))
                    return A.ioore(t2, t1);
                sample = t2[t1];
                } else
                sample = 0;
                t1 = image.data;
                if (t1 != null)
                t1.setPixelR$3(px, py, sample);
            } else {
                t2 = _this.bitsPerSample;
                if (t2 === 8)
                if (t1 === B.TiffFormat_2) {
                    t1 = byteData;
                    t2 = t1.buffer;
                    t1 = t1.offset++;
                    if (!(t1 >= 0 && t1 < t2.length))
                    return A.ioore(t2, t1);
                    t1 = t2[t1];
                    $.$get$__uint8()[0] = t1;
                    t1 = $.$get$__uint8ToInt8();
                    if (0 >= t1.length)
                    return A.ioore(t1, 0);
                    sample = t1[0];
                } else {
                    t1 = byteData;
                    t2 = t1.buffer;
                    t1 = t1.offset++;
                    if (!(t1 >= 0 && t1 < t2.length))
                    return A.ioore(t2, t1);
                    sample = t2[t1];
                }
                else if (t2 === 16)
                if (t1 === B.TiffFormat_2) {
                    t1 = byteData.readUint16$0();
                    $.$get$__uint16()[0] = t1;
                    t1 = $.$get$__uint16ToInt16();
                    if (0 >= t1.length)
                    return A.ioore(t1, 0);
                    sample = t1[0];
                } else
                    sample = byteData.readUint16$0();
                else if (t2 === 32)
                if (t1 === B.TiffFormat_2) {
                    t1 = byteData.readUint32$0();
                    $.$get$__uint32()[0] = t1;
                    t1 = $.$get$__uint32ToInt32();
                    if (0 >= t1.length)
                    return A.ioore(t1, 0);
                    sample = t1[0];
                } else
                    sample = byteData.readUint32$0();
                else
                sample = 0;
                if (_this.photometricType === B.TiffPhotometricType_0) {
                t1 = image.data;
                mx = t1 == null ? _null : t1.get$maxChannelValue();
                sample = (mx == null ? 0 : mx) - sample;
                }
                t1 = image.data;
                if (t1 != null)
                t1.setPixelR$3(px, py, sample);
            }
            } else if (t1 === 2) {
            t1 = _this.bitsPerSample;
            if (t1 === 8) {
                t1 = _this.sampleFormat === B.TiffFormat_2;
                if (t1) {
                t2 = byteData;
                t3 = t2.buffer;
                t2 = t2.offset++;
                if (!(t2 >= 0 && t2 < t3.length))
                    return A.ioore(t3, t2);
                t2 = t3[t2];
                $.$get$__uint8()[0] = t2;
                t2 = $.$get$__uint8ToInt8();
                if (0 >= t2.length)
                    return A.ioore(t2, 0);
                gray = t2[0];
                } else {
                t2 = byteData;
                t3 = t2.buffer;
                t2 = t2.offset++;
                if (!(t2 >= 0 && t2 < t3.length))
                    return A.ioore(t3, t2);
                gray = t3[t2];
                }
                if (t1) {
                t1 = byteData;
                t2 = t1.buffer;
                t1 = t1.offset++;
                if (!(t1 >= 0 && t1 < t2.length))
                    return A.ioore(t2, t1);
                t1 = t2[t1];
                $.$get$__uint8()[0] = t1;
                t1 = $.$get$__uint8ToInt8();
                if (0 >= t1.length)
                    return A.ioore(t1, 0);
                alpha = t1[0];
                } else {
                t1 = byteData;
                t2 = t1.buffer;
                t1 = t1.offset++;
                if (!(t1 >= 0 && t1 < t2.length))
                    return A.ioore(t2, t1);
                alpha = t2[t1];
                }
            } else if (t1 === 16) {
                if (_this.sampleFormat === B.TiffFormat_2) {
                t1 = byteData.readUint16$0();
                $.$get$__uint16()[0] = t1;
                t1 = $.$get$__uint16ToInt16();
                if (0 >= t1.length)
                    return A.ioore(t1, 0);
                gray = t1[0];
                } else
                gray = byteData.readUint16$0();
                if (_this.sampleFormat === B.TiffFormat_2) {
                t1 = byteData.readUint16$0();
                $.$get$__uint16()[0] = t1;
                t1 = $.$get$__uint16ToInt16();
                if (0 >= t1.length)
                    return A.ioore(t1, 0);
                alpha = t1[0];
                } else
                alpha = byteData.readUint16$0();
            } else if (t1 === 32) {
                if (_this.sampleFormat === B.TiffFormat_2) {
                t1 = byteData.readUint32$0();
                $.$get$__uint32()[0] = t1;
                t1 = $.$get$__uint32ToInt32();
                if (0 >= t1.length)
                    return A.ioore(t1, 0);
                gray = t1[0];
                } else
                gray = byteData.readUint32$0();
                if (_this.sampleFormat === B.TiffFormat_2) {
                t1 = byteData.readUint32$0();
                $.$get$__uint32()[0] = t1;
                t1 = $.$get$__uint32ToInt32();
                if (0 >= t1.length)
                    return A.ioore(t1, 0);
                alpha = t1[0];
                } else
                alpha = byteData.readUint32$0();
            } else {
                gray = 0;
                alpha = 0;
            }
            t1 = image.data;
            if (t1 != null)
                t1.setPixelRgb$5(px, py, gray, alpha, 0);
            } else if (t1 === 3) {
            t1 = _this.sampleFormat;
            if (t1 === B.TiffFormat_3) {
                t1 = _this.bitsPerSample;
                if (t1 === 32) {
                t1 = byteData.readUint32$0();
                t2 = $.$get$__uint32();
                t2[0] = t1;
                t1 = $.$get$__uint32ToFloat32();
                if (0 >= t1.length)
                    return A.ioore(t1, 0);
                r = t1[0];
                t2[0] = byteData.readUint32$0();
                g = t1[0];
                t2[0] = byteData.readUint32$0();
                b = t1[0];
                } else if (t1 === 64) {
                r = byteData.readFloat64$0();
                g = 0;
                b = 0;
                } else if (t1 === 16) {
                t1 = byteData.readUint16$0();
                t2 = $.Float16__toFloatFloat32Data;
                t2 = t2 != null ? t2 : A.Float16__initialize();
                if (!(t1 < t2.length))
                    return A.ioore(t2, t1);
                r = t2[t1];
                t1 = byteData.readUint16$0();
                t2 = $.Float16__toFloatFloat32Data;
                t2 = t2 != null ? t2 : A.Float16__initialize();
                if (!(t1 < t2.length))
                    return A.ioore(t2, t1);
                g = t2[t1];
                t1 = byteData.readUint16$0();
                t2 = $.Float16__toFloatFloat32Data;
                t2 = t2 != null ? t2 : A.Float16__initialize();
                if (!(t1 < t2.length))
                    return A.ioore(t2, t1);
                b = t2[t1];
                } else {
                r = 0;
                g = 0;
                b = 0;
                }
                t1 = image.data;
                if (t1 != null)
                t1.setPixelRgb$5(px, py, r, g, b);
            } else {
                t2 = _this.bitsPerSample;
                if (t2 === 8) {
                t1 = t1 === B.TiffFormat_2;
                if (t1) {
                    t2 = byteData;
                    t3 = t2.buffer;
                    t2 = t2.offset++;
                    if (!(t2 >= 0 && t2 < t3.length))
                    return A.ioore(t3, t2);
                    t2 = t3[t2];
                    $.$get$__uint8()[0] = t2;
                    t2 = $.$get$__uint8ToInt8();
                    if (0 >= t2.length)
                    return A.ioore(t2, 0);
                    r = t2[0];
                } else {
                    t2 = byteData;
                    t3 = t2.buffer;
                    t2 = t2.offset++;
                    if (!(t2 >= 0 && t2 < t3.length))
                    return A.ioore(t3, t2);
                    r = t3[t2];
                }
                if (t1) {
                    t2 = byteData;
                    t3 = t2.buffer;
                    t2 = t2.offset++;
                    if (!(t2 >= 0 && t2 < t3.length))
                    return A.ioore(t3, t2);
                    t2 = t3[t2];
                    $.$get$__uint8()[0] = t2;
                    t2 = $.$get$__uint8ToInt8();
                    if (0 >= t2.length)
                    return A.ioore(t2, 0);
                    g = t2[0];
                } else {
                    t2 = byteData;
                    t3 = t2.buffer;
                    t2 = t2.offset++;
                    if (!(t2 >= 0 && t2 < t3.length))
                    return A.ioore(t3, t2);
                    g = t3[t2];
                }
                if (t1) {
                    t1 = byteData;
                    t2 = t1.buffer;
                    t1 = t1.offset++;
                    if (!(t1 >= 0 && t1 < t2.length))
                    return A.ioore(t2, t1);
                    t1 = t2[t1];
                    $.$get$__uint8()[0] = t1;
                    t1 = $.$get$__uint8ToInt8();
                    if (0 >= t1.length)
                    return A.ioore(t1, 0);
                    b = t1[0];
                } else {
                    t1 = byteData;
                    t2 = t1.buffer;
                    t1 = t1.offset++;
                    if (!(t1 >= 0 && t1 < t2.length))
                    return A.ioore(t2, t1);
                    b = t2[t1];
                }
                } else if (t2 === 16) {
                if (t1 === B.TiffFormat_2) {
                    t1 = byteData.readUint16$0();
                    $.$get$__uint16()[0] = t1;
                    t1 = $.$get$__uint16ToInt16();
                    if (0 >= t1.length)
                    return A.ioore(t1, 0);
                    r = t1[0];
                } else
                    r = byteData.readUint16$0();
                if (_this.sampleFormat === B.TiffFormat_2) {
                    t1 = byteData.readUint16$0();
                    $.$get$__uint16()[0] = t1;
                    t1 = $.$get$__uint16ToInt16();
                    if (0 >= t1.length)
                    return A.ioore(t1, 0);
                    g = t1[0];
                } else
                    g = byteData.readUint16$0();
                if (_this.sampleFormat === B.TiffFormat_2) {
                    t1 = byteData.readUint16$0();
                    $.$get$__uint16()[0] = t1;
                    t1 = $.$get$__uint16ToInt16();
                    if (0 >= t1.length)
                    return A.ioore(t1, 0);
                    b = t1[0];
                } else
                    b = byteData.readUint16$0();
                } else if (t2 === 32) {
                if (t1 === B.TiffFormat_2) {
                    t1 = byteData.readUint32$0();
                    $.$get$__uint32()[0] = t1;
                    t1 = $.$get$__uint32ToInt32();
                    if (0 >= t1.length)
                    return A.ioore(t1, 0);
                    r = t1[0];
                } else
                    r = byteData.readUint32$0();
                if (_this.sampleFormat === B.TiffFormat_2) {
                    t1 = byteData.readUint32$0();
                    $.$get$__uint32()[0] = t1;
                    t1 = $.$get$__uint32ToInt32();
                    if (0 >= t1.length)
                    return A.ioore(t1, 0);
                    g = t1[0];
                } else
                    g = byteData.readUint32$0();
                if (_this.sampleFormat === B.TiffFormat_2) {
                    t1 = byteData.readUint32$0();
                    $.$get$__uint32()[0] = t1;
                    t1 = $.$get$__uint32ToInt32();
                    if (0 >= t1.length)
                    return A.ioore(t1, 0);
                    b = t1[0];
                } else
                    b = byteData.readUint32$0();
                } else {
                r = 0;
                g = 0;
                b = 0;
                }
                t1 = image.data;
                if (t1 != null)
                t1.setPixelRgb$5(px, py, r, g, b);
            }
            } else if (t1 >= 4) {
            t1 = _this.sampleFormat;
            if (t1 === B.TiffFormat_3) {
                t1 = _this.bitsPerSample;
                if (t1 === 32) {
                t1 = byteData.readUint32$0();
                t2 = $.$get$__uint32();
                t2[0] = t1;
                t1 = $.$get$__uint32ToFloat32();
                if (0 >= t1.length)
                    return A.ioore(t1, 0);
                r = t1[0];
                t2[0] = byteData.readUint32$0();
                g = t1[0];
                t2[0] = byteData.readUint32$0();
                b = t1[0];
                t2[0] = byteData.readUint32$0();
                a = t1[0];
                } else if (t1 === 64) {
                r = byteData.readFloat64$0();
                g = 0;
                b = 0;
                a = 0;
                } else if (t1 === 16) {
                t1 = byteData.readUint16$0();
                t2 = $.Float16__toFloatFloat32Data;
                t2 = t2 != null ? t2 : A.Float16__initialize();
                if (!(t1 < t2.length))
                    return A.ioore(t2, t1);
                r = t2[t1];
                t1 = byteData.readUint16$0();
                t2 = $.Float16__toFloatFloat32Data;
                t2 = t2 != null ? t2 : A.Float16__initialize();
                if (!(t1 < t2.length))
                    return A.ioore(t2, t1);
                g = t2[t1];
                t1 = byteData.readUint16$0();
                t2 = $.Float16__toFloatFloat32Data;
                t2 = t2 != null ? t2 : A.Float16__initialize();
                if (!(t1 < t2.length))
                    return A.ioore(t2, t1);
                b = t2[t1];
                t1 = byteData.readUint16$0();
                t2 = $.Float16__toFloatFloat32Data;
                t2 = t2 != null ? t2 : A.Float16__initialize();
                if (!(t1 < t2.length))
                    return A.ioore(t2, t1);
                a = t2[t1];
                } else {
                r = 0;
                g = 0;
                b = 0;
                a = 0;
                }
                t1 = image.data;
                if (t1 != null)
                t1.setPixelRgba$6(px, py, r, g, b, a);
            } else {
                t2 = _this.bitsPerSample;
                if (t2 === 8) {
                t1 = t1 === B.TiffFormat_2;
                if (t1) {
                    t2 = byteData;
                    t3 = t2.buffer;
                    t2 = t2.offset++;
                    if (!(t2 >= 0 && t2 < t3.length))
                    return A.ioore(t3, t2);
                    t2 = t3[t2];
                    $.$get$__uint8()[0] = t2;
                    t2 = $.$get$__uint8ToInt8();
                    if (0 >= t2.length)
                    return A.ioore(t2, 0);
                    r = t2[0];
                } else {
                    t2 = byteData;
                    t3 = t2.buffer;
                    t2 = t2.offset++;
                    if (!(t2 >= 0 && t2 < t3.length))
                    return A.ioore(t3, t2);
                    r = t3[t2];
                }
                if (t1) {
                    t2 = byteData;
                    t3 = t2.buffer;
                    t2 = t2.offset++;
                    if (!(t2 >= 0 && t2 < t3.length))
                    return A.ioore(t3, t2);
                    t2 = t3[t2];
                    $.$get$__uint8()[0] = t2;
                    t2 = $.$get$__uint8ToInt8();
                    if (0 >= t2.length)
                    return A.ioore(t2, 0);
                    g = t2[0];
                } else {
                    t2 = byteData;
                    t3 = t2.buffer;
                    t2 = t2.offset++;
                    if (!(t2 >= 0 && t2 < t3.length))
                    return A.ioore(t3, t2);
                    g = t3[t2];
                }
                if (t1) {
                    t2 = byteData;
                    t3 = t2.buffer;
                    t2 = t2.offset++;
                    if (!(t2 >= 0 && t2 < t3.length))
                    return A.ioore(t3, t2);
                    t2 = t3[t2];
                    $.$get$__uint8()[0] = t2;
                    t2 = $.$get$__uint8ToInt8();
                    if (0 >= t2.length)
                    return A.ioore(t2, 0);
                    b = t2[0];
                } else {
                    t2 = byteData;
                    t3 = t2.buffer;
                    t2 = t2.offset++;
                    if (!(t2 >= 0 && t2 < t3.length))
                    return A.ioore(t3, t2);
                    b = t3[t2];
                }
                if (t1) {
                    t1 = byteData;
                    t2 = t1.buffer;
                    t1 = t1.offset++;
                    if (!(t1 >= 0 && t1 < t2.length))
                    return A.ioore(t2, t1);
                    t1 = t2[t1];
                    $.$get$__uint8()[0] = t1;
                    t1 = $.$get$__uint8ToInt8();
                    if (0 >= t1.length)
                    return A.ioore(t1, 0);
                    a = t1[0];
                } else {
                    t1 = byteData;
                    t2 = t1.buffer;
                    t1 = t1.offset++;
                    if (!(t1 >= 0 && t1 < t2.length))
                    return A.ioore(t2, t1);
                    a = t2[t1];
                }
                } else if (t2 === 16) {
                if (t1 === B.TiffFormat_2) {
                    t1 = byteData.readUint16$0();
                    $.$get$__uint16()[0] = t1;
                    t1 = $.$get$__uint16ToInt16();
                    if (0 >= t1.length)
                    return A.ioore(t1, 0);
                    r = t1[0];
                } else
                    r = byteData.readUint16$0();
                if (_this.sampleFormat === B.TiffFormat_2) {
                    t1 = byteData.readUint16$0();
                    $.$get$__uint16()[0] = t1;
                    t1 = $.$get$__uint16ToInt16();
                    if (0 >= t1.length)
                    return A.ioore(t1, 0);
                    g = t1[0];
                } else
                    g = byteData.readUint16$0();
                if (_this.sampleFormat === B.TiffFormat_2) {
                    t1 = byteData.readUint16$0();
                    $.$get$__uint16()[0] = t1;
                    t1 = $.$get$__uint16ToInt16();
                    if (0 >= t1.length)
                    return A.ioore(t1, 0);
                    b = t1[0];
                } else
                    b = byteData.readUint16$0();
                if (_this.sampleFormat === B.TiffFormat_2) {
                    t1 = byteData.readUint16$0();
                    $.$get$__uint16()[0] = t1;
                    t1 = $.$get$__uint16ToInt16();
                    if (0 >= t1.length)
                    return A.ioore(t1, 0);
                    a = t1[0];
                } else
                    a = byteData.readUint16$0();
                } else if (t2 === 32) {
                if (t1 === B.TiffFormat_2) {
                    t1 = byteData.readUint32$0();
                    $.$get$__uint32()[0] = t1;
                    t1 = $.$get$__uint32ToInt32();
                    if (0 >= t1.length)
                    return A.ioore(t1, 0);
                    r = t1[0];
                } else
                    r = byteData.readUint32$0();
                if (_this.sampleFormat === B.TiffFormat_2) {
                    t1 = byteData.readUint32$0();
                    $.$get$__uint32()[0] = t1;
                    t1 = $.$get$__uint32ToInt32();
                    if (0 >= t1.length)
                    return A.ioore(t1, 0);
                    g = t1[0];
                } else
                    g = byteData.readUint32$0();
                if (_this.sampleFormat === B.TiffFormat_2) {
                    t1 = byteData.readUint32$0();
                    $.$get$__uint32()[0] = t1;
                    t1 = $.$get$__uint32ToInt32();
                    if (0 >= t1.length)
                    return A.ioore(t1, 0);
                    b = t1[0];
                } else
                    b = byteData.readUint32$0();
                if (_this.sampleFormat === B.TiffFormat_2) {
                    t1 = byteData.readUint32$0();
                    $.$get$__uint32()[0] = t1;
                    t1 = $.$get$__uint32ToInt32();
                    if (0 >= t1.length)
                    return A.ioore(t1, 0);
                    a = t1[0];
                } else
                    a = byteData.readUint32$0();
                } else {
                r = 0;
                g = 0;
                b = 0;
                a = 0;
                }
                if (_this.photometricType === B.TiffPhotometricType_5) {
                rgba = A.cmykToRgb(r, g, b, a);
                r = rgba[0];
                g = rgba[1];
                b = rgba[2];
                t1 = image.data;
                a = t1 == null ? _null : t1.get$maxChannelValue();
                if (a == null)
                    a = 0;
                }
                t1 = image.data;
                if (t1 != null)
                t1.setPixelRgba$6(px, py, r, g, b, a);
            }
            }
            ++x;
            ++px;
        }
        ++y;
        ++py;
        }
    } else
        throw A.wrapException(A.ImageException$("Unsupported bitsPerSample: " + t1));
    },
    _jpegToImage$6(tile, image, outX, outY, tileWidth, tileHeight) {
    var y, t1, x, t2;
    for (y = 0; y < tileHeight; ++y)
        for (t1 = y + outY, x = 0; x < tileWidth; ++x) {
        t2 = tile.data;
        t2 = t2 == null ? null : t2.getPixel$3(x, y, null);
        if (t2 == null)
            t2 = new A.PixelUndefined();
        image.setPixel$3(x + outX, t1, t2);
        }
    },
    _decodeBilevelTile$4(p, image, tileX, tileY) {
    var byteData, tileIndex, outX, t2, outY, t3, byteCount, bytesInThisTile, j, i, count, t4, t5, t6, exception, br, mx, black, white, py, y, px, x, _this = this, _null = null,
        t1 = _this.__TiffImage_tilesX_A;
    t1 === $ && A.throwLateFieldNI("tilesX");
    tileIndex = tileY * t1 + tileX;
    t1 = _this.tileOffsets;
    if (!(tileIndex >= 0 && tileIndex < t1.length))
        return A.ioore(t1, tileIndex);
    p.set$offset(t1[tileIndex]);
    t1 = _this.tileWidth;
    outX = tileX * t1;
    t2 = _this.tileHeight;
    outY = tileY * t2;
    t3 = _this.tileByteCounts;
    if (!(tileIndex < t3.length))
        return A.ioore(t3, tileIndex);
    byteCount = t3[tileIndex];
    byteData = null;
    t3 = _this.compression;
    if (t3 === 32773) {
        bytesInThisTile = B.JSInt_methods.$mod(t1, 8) === 0 ? B.JSInt_methods._tdivFast$1(t1, 8) * t2 : (B.JSInt_methods._tdivFast$1(t1, 8) + 1) * t2;
        byteData = A.InputBuffer$(new Uint8Array(t1 * t2), false, _null, 0);
        _this._decodePackBits$3(p, bytesInThisTile, byteData.buffer);
    } else if (t3 === 5) {
        byteData = A.InputBuffer$(new Uint8Array(t1 * t2), false, _null, 0);
        A.LzwDecoder$().decode$2(A.InputBuffer$from(p, byteCount, 0), byteData.buffer);
        if (_this.predictor === 2)
        for (j = 0; j < _this.height; ++j) {
            i = _this.samplesPerPixel;
            count = i * (j * _this.width + 1);
            for (; t1 = _this.width, t2 = _this.samplesPerPixel, i < t1 * t2; ++i) {
            t1 = byteData;
            t3 = t1.buffer;
            t1 = t1.offset + count;
            if (!(t1 >= 0 && t1 < t3.length))
                return A.ioore(t3, t1);
            t4 = t3[t1];
            t5 = byteData;
            t6 = t5.buffer;
            t2 = t5.offset + (count - t2);
            if (!(t2 >= 0 && t2 < t6.length))
                return A.ioore(t6, t2);
            J.$indexSet$ax(t3, t1, t4 + t6[t2]);
            ++count;
            }
        }
    } else if (t3 === 2) {
        byteData = A.InputBuffer$(new Uint8Array(t1 * t2), false, _null, 0);
        try {
        A.TiffFaxDecoder$(_this.fillOrder, t1, t2).decode1D$4(byteData, p, 0, _this.tileHeight);
        } catch (exception) {
        }
    } else if (t3 === 3) {
        byteData = A.InputBuffer$(new Uint8Array(t1 * t2), false, _null, 0);
        try {
        A.TiffFaxDecoder$(_this.fillOrder, t1, t2).decode2D$5(byteData, p, 0, _this.tileHeight, _this.t4Options);
        } catch (exception) {
        }
    } else if (t3 === 4) {
        byteData = A.InputBuffer$(new Uint8Array(t1 * t2), false, _null, 0);
        try {
        A.TiffFaxDecoder$(_this.fillOrder, t1, t2).decodeT6$5(byteData, p, 0, _this.tileHeight, _this.t6Options);
        } catch (exception) {
        }
    } else if (t3 === 8)
        byteData = A.InputBuffer$(B.C__ZLibDecoder.decodeBuffer$2$verify(A.InputStream$(type$.List_int._as(p.toList$2(0, 0, byteCount)), 1, _null, 0), false), false, _null, 0);
    else if (t3 === 32946) {
        t1 = A.Inflate$(p.toList$2(0, 0, byteCount)).output;
        byteData = A.InputBuffer$(type$.List_int._as(A.NativeUint8List_NativeUint8List$view(t1._output_stream$_buffer.buffer, 0, t1.length)), false, _null, 0);
    } else if (t3 === 1)
        byteData = p;
    else
        throw A.wrapException(A.ImageException$("Unsupported Compression Type: " + t3));
    br = new A.TiffBitReader(byteData);
    mx = image.get$maxChannelValue();
    t1 = _this.isWhiteZero;
    black = t1 ? mx : 0;
    white = t1 ? 0 : mx;
    for (py = outY, y = 0; y < _this.tileHeight; ++y, ++py) {
        for (px = outX, x = 0; x < _this.tileWidth; ++x, ++px) {
        t1 = image.data;
        t2 = t1 == null;
        t3 = t2 ? _null : t1.height;
        if (py < (t3 == null ? 0 : t3)) {
            t1 = t2 ? _null : t1.width;
            t1 = px >= (t1 == null ? 0 : t1);
        } else
            t1 = true;
        if (t1)
            break;
        t1 = br.readBits$1(1);
        t2 = image.data;
        if (t1 === 0) {
            if (t2 != null)
            t2.setPixelRgb$5(px, py, black, 0, 0);
        } else if (t2 != null)
            t2.setPixelRgb$5(px, py, white, 0, 0);
        }
        br._bitPos = 0;
    }
    },
    _decodePackBits$3(data, arraySize, dst) {
    var t1, srcCount, dstCount, srcCount0, t2, t3, t4, t5, b, i, dstCount0;
    type$.List_int._as(dst);
    for (t1 = J.getInterceptor$ax(dst), srcCount = 0, dstCount = 0; dstCount < arraySize;) {
        srcCount0 = srcCount + 1;
        t2 = data.buffer;
        t3 = data.offset;
        t4 = t3 + srcCount;
        t5 = t2.length;
        if (!(t4 >= 0 && t4 < t5))
        return A.ioore(t2, t4);
        t4 = t2[t4];
        $.$get$__uint8()[0] = t4;
        t4 = $.$get$__uint8ToInt8();
        if (0 >= t4.length)
        return A.ioore(t4, 0);
        b = t4[0];
        if (b >= 0 && b <= 127)
        for (t2 = b + 1, srcCount = srcCount0, i = 0; i < t2; ++i, dstCount = dstCount0, srcCount = srcCount0) {
            dstCount0 = dstCount + 1;
            srcCount0 = srcCount + 1;
            t3 = data.buffer;
            t4 = data.offset + srcCount;
            if (!(t4 >= 0 && t4 < t3.length))
            return A.ioore(t3, t4);
            t1.$indexSet(dst, dstCount, t3[t4]);
        }
        else {
        t4 = b <= -1 && b >= -127;
        srcCount = srcCount0 + 1;
        if (t4) {
            t3 += srcCount0;
            if (!(t3 >= 0 && t3 < t5))
            return A.ioore(t2, t3);
            t3 = t2[t3];
            for (t2 = -b + 1, i = 0; i < t2; ++i, dstCount = dstCount0) {
            dstCount0 = dstCount + 1;
            t1.$indexSet(dst, dstCount, t3);
            }
        }
        }
    }
    },
    _readTag$2(type, defaultValue) {
    var t1 = this.tags;
    if (!t1.containsKey$1(type))
        return defaultValue;
    t1 = t1.$index(0, type).read$0();
    t1 = t1 == null ? null : t1.toInt$0(0);
    return t1 == null ? 0 : t1;
    },
    _readTag$1(type) {
    return this._readTag$2(type, 0);
    },
    _readTagList$1(type) {
    var tag,
        t1 = this.tags;
    if (!t1.containsKey$1(type))
        return null;
    tag = t1.$index(0, type);
    t1 = tag.read$0();
    t1.toString;
    return A.List_List$generate(tag.count, t1.get$toInt(t1), type$.int);
    },
    set$tileOffsets(tileOffsets) {
    this.tileOffsets = type$.nullable_List_int._as(tileOffsets);
    },
    set$tileByteCounts(tileByteCounts) {
    this.tileByteCounts = type$.nullable_List_int._as(tileByteCounts);
    },
    set$colorMap(colorMap) {
    this.colorMap = type$.nullable_List_int._as(colorMap);
    }
};
A.TiffFormat.prototype = {
    _enumToString$0() {
    return "TiffFormat." + this._name;
    }
};
A.TiffPhotometricType.prototype = {
    _enumToString$0() {
    return "TiffPhotometricType." + this._name;
    }
};
A.TiffImageType.prototype = {
    _enumToString$0() {
    return "TiffImageType." + this._name;
    }
};
A.TiffInfo.prototype = {$isDecodeInfo: 1};
A.LzwDecoder.prototype = {
    decode$2(p, out) {
    var outLen, t1, t2, code, oldCode, i, t3, t4, _this = this, _s4_ = "_out",
        _s13_ = "_bufferLength";
    type$.List_int._as(out);
    _this.set$__LzwDecoder__out_A(out);
    outLen = out.length;
    _this.__LzwDecoder__outPointer_A = 0;
    t1 = type$.Uint8List._as(p.buffer);
    _this.__LzwDecoder__data_A = t1;
    t2 = _this.__LzwDecoder__dataLength_A = t1.length;
    _this._bytePointer = p.offset;
    if (0 >= t2)
        return A.ioore(t1, 0);
    if (t1[0] === 0) {
        if (1 >= t2)
        return A.ioore(t1, 1);
        t1 = t1[1] === 1;
    } else
        t1 = false;
    if (t1)
        throw A.wrapException(A.ImageException$("Invalid LZW Data"));
    _this._initializeStringTable$0();
    _this._nextBits = _this._nextData = 0;
    code = _this._getNextCode$0();
    t1 = _this._tiff_lzw_decoder$_buffer;
    oldCode = 0;
    while (true) {
        if (!(code !== 257 && _this.__LzwDecoder__outPointer_A < outLen))
        break;
        if (code === 256) {
        _this._initializeStringTable$0();
        code = _this._getNextCode$0();
        _this.__LzwDecoder__bufferLength_A = 0;
        if (code === 257)
            break;
        t2 = _this.__LzwDecoder__out_A;
        t2 === $ && A.throwLateFieldNI(_s4_);
        J.$indexSet$ax(t2, _this.__LzwDecoder__outPointer_A++, code);
        oldCode = code;
        } else {
        t2 = _this._tableIndex;
        t2.toString;
        if (code < t2) {
            _this._getString$1(code);
            t2 = _this.__LzwDecoder__bufferLength_A;
            t2 === $ && A.throwLateFieldNI(_s13_);
            i = t2 - 1;
            for (; i >= 0; --i) {
            t2 = _this.__LzwDecoder__out_A;
            t2 === $ && A.throwLateFieldNI(_s4_);
            t3 = _this.__LzwDecoder__outPointer_A++;
            if (!(i < 4096))
                return A.ioore(t1, i);
            J.$indexSet$ax(t2, t3, t1[i]);
            }
            t2 = _this.__LzwDecoder__bufferLength_A - 1;
            if (!(t2 >= 0 && t2 < 4096))
            return A.ioore(t1, t2);
            _this._addString$2(oldCode, t1[t2]);
        } else {
            _this._getString$1(oldCode);
            t2 = _this.__LzwDecoder__bufferLength_A;
            t2 === $ && A.throwLateFieldNI(_s13_);
            i = t2 - 1;
            for (; i >= 0; --i) {
            t2 = _this.__LzwDecoder__out_A;
            t2 === $ && A.throwLateFieldNI(_s4_);
            t3 = _this.__LzwDecoder__outPointer_A++;
            if (!(i < 4096))
                return A.ioore(t1, i);
            J.$indexSet$ax(t2, t3, t1[i]);
            }
            t2 = _this.__LzwDecoder__out_A;
            t2 === $ && A.throwLateFieldNI(_s4_);
            t3 = _this.__LzwDecoder__outPointer_A++;
            t4 = _this.__LzwDecoder__bufferLength_A - 1;
            if (!(t4 >= 0 && t4 < 4096))
            return A.ioore(t1, t4);
            J.$indexSet$ax(t2, t3, t1[t4]);
            t4 = _this.__LzwDecoder__bufferLength_A - 1;
            if (!(t4 >= 0 && t4 < 4096))
            return A.ioore(t1, t4);
            _this._addString$2(oldCode, t1[t4]);
        }
        oldCode = code;
        }
        code = _this._getNextCode$0();
    }
    },
    _addString$2(string, newString) {
    var t2, _this = this,
        t1 = _this.__LzwDecoder__table_A;
    t1 === $ && A.throwLateFieldNI("_table");
    t2 = _this._tableIndex;
    t2.toString;
    if (!(t2 < 4096))
        return A.ioore(t1, t2);
    t1[t2] = newString;
    t1 = _this.__LzwDecoder__prefix_A;
    t1 === $ && A.throwLateFieldNI("_prefix");
    t1[t2] = string;
    t2 = _this._tableIndex = t2 + 1;
    if (t2 === 511)
        _this._bitsToGet = 10;
    else if (t2 === 1023)
        _this._bitsToGet = 11;
    else if (t2 === 2047)
        _this._bitsToGet = 12;
    },
    _getString$1(code) {
    var t1, t2, t3, c, t4, t5, t6, _this = this;
    _this.__LzwDecoder__bufferLength_A = 0;
    t1 = _this._tiff_lzw_decoder$_buffer;
    _this.__LzwDecoder__bufferLength_A = 1;
    t2 = _this.__LzwDecoder__table_A;
    t2 === $ && A.throwLateFieldNI("_table");
    if (!(code < 4096))
        return A.ioore(t2, code);
    t1[0] = t2[code];
    t3 = _this.__LzwDecoder__prefix_A;
    t3 === $ && A.throwLateFieldNI("_prefix");
    c = t3[code];
    for (t4 = 1; c !== 4098; t4 = t5) {
        t5 = t4 + 1;
        _this.__LzwDecoder__bufferLength_A = t5;
        if (!(c >= 0 && c < 4096))
        return A.ioore(t2, c);
        t6 = t2[c];
        if (!(t4 < 4096))
        return A.ioore(t1, t4);
        t1[t4] = t6;
        c = t3[c];
    }
    },
    _getNextCode$0() {
    var t3, t4, t5, t6, _this = this,
        t1 = _this._bytePointer,
        t2 = _this.__LzwDecoder__dataLength_A;
    t2 === $ && A.throwLateFieldNI("_dataLength");
    if (t1 >= t2)
        return 257;
    for (; t3 = _this._nextBits, t4 = _this._bitsToGet, t3 < t4; t1 = t6) {
        if (t1 >= t2)
        return 257;
        t4 = _this._nextData;
        t5 = _this.__LzwDecoder__data_A;
        t5 === $ && A.throwLateFieldNI("_data");
        t6 = t1 + 1;
        _this._bytePointer = t6;
        if (!(t1 >= 0 && t1 < t5.length))
        return A.ioore(t5, t1);
        _this._nextData = (t4 << 8 >>> 0) + t5[t1] >>> 0;
        _this._nextBits = t3 + 8;
    }
    t1 = t3 - t4;
    _this._nextBits = t1;
    t1 = B.JSInt_methods._shrReceiverPositive$1(_this._nextData, t1);
    t4 -= 9;
    if (!(t4 >= 0 && t4 < 4))
        return A.ioore(B.List_511_1023_2047_4095, t4);
    return t1 & B.List_511_1023_2047_4095[t4];
    },
    _initializeStringTable$0() {
    var t1, i, _this = this;
    _this.__LzwDecoder__table_A = new Uint8Array(4096);
    t1 = new Uint32Array(4096);
    _this.__LzwDecoder__prefix_A = t1;
    B.NativeUint32List_methods.fillRange$3(t1, 0, 4096, 4098);
    for (t1 = _this.__LzwDecoder__table_A, i = 0; i < 256; ++i)
        t1[i] = i;
    _this._bitsToGet = 9;
    _this._tableIndex = 258;
    },
    set$__LzwDecoder__out_A(__LzwDecoder__out_A) {
    this.__LzwDecoder__out_A = type$.List_int._as(__LzwDecoder__out_A);
    }
};
A.TiffDecoder.prototype = {
    decodeFrame$1(frame) {
    var t2, image,
        t1 = this.info;
    if (t1 == null)
        return null;
    t1 = t1.images;
    if (!(frame < t1.length))
        return A.ioore(t1, frame);
    t1 = t1[frame];
    t2 = this.__TiffDecoder__input_A;
    t2 === $ && A.throwLateFieldNI("_input");
    image = t1.decode$1(t2);
    return image;
    },
    decode$2$frame(bytes, frame) {
    var _this = this,
        t1 = A.InputBuffer$(bytes, false, null, 0);
    _this.__TiffDecoder__input_A = t1;
    t1 = _this._readHeader$1(t1);
    _this.info = t1;
    if (t1 == null)
        return null;
    return _this.decodeFrame$1(0);
    },
    _readHeader$1(p) {
    var p2, img, t2, offset, p20, t3, img0, t4, exception, t5, _null = null,
        t1 = A._setArrayType([], type$.JSArray_TiffImage),
        info = new A.TiffInfo(t1),
        byteOrder = p.readUint16$0();
    if (byteOrder !== 18761 && byteOrder !== 19789)
        return _null;
    if (byteOrder === 19789)
        p.bigEndian = true;
    else
        p.bigEndian = false;
    t2 = p.readUint16$0();
    info.signature = t2;
    if (t2 !== 42)
        return _null;
    offset = p.readUint32$0();
    p20 = A.InputBuffer$from(p, _null, 0);
    p20.offset = offset;
    p2 = p20;
    for (t2 = type$.int, t3 = type$.TiffEntry; offset !== 0;) {
        img = null;
        try {
        img0 = new A.TiffImage(A.LinkedHashMap_LinkedHashMap$_empty(t2, t3), B.TiffPhotometricType_16, B.TiffFormat_1, B.TiffImageType_9);
        img0.TiffImage$1(p2);
        img = img0;
        t4 = img;
        if (!(t4.width !== 0 && t4.height !== 0))
            break;
        } catch (exception) {
        break;
        }
        B.JSArray_methods.add$1(t1, img);
        t4 = t1.length;
        if (t4 === 1) {
        if (0 >= t4)
            return A.ioore(t1, 0);
        t5 = t1[0];
        info.width = t5.width;
        if (0 >= t4)
            return A.ioore(t1, 0);
        info.height = t5.height;
        }
        offset = p2.readUint32$0();
        if (offset !== 0)
        p2.offset = offset;
    }
    return t1.length !== 0 ? info : _null;
    }
};
A.VP8.prototype = {
    decodeHeader$0() {
    var t2,
        t1 = this.input,
        bits = t1.readUint24$0();
    if ((bits & 1) !== 0)
        return false;
    if ((bits >>> 1 & 7) > 3)
        return false;
    if ((bits >>> 4 & 1) === 0)
        return false;
    this._frameHeader.__VP8FrameHeader_partitionLength_A = bits >>> 5;
    if (t1.readUint24$0() !== 2752925)
        return false;
    t2 = this._webp;
    t2.width = t1.readUint16$0();
    t2.height = t1.readUint16$0();
    return true;
    },
    decode$0() {
    var t1, t2, _this = this, _null = null;
    if (!_this._getHeaders$0())
        return _null;
    t1 = _this._webp;
    t2 = t1.width;
    _this.output = A.Image$(_null, _null, B.Format_3, 0, B.FrameType_2, t1.height, _null, 0, 4, _null, t2, false);
    _this._initFrame$0();
    if (!_this._parseFrame$0())
        return _null;
    return _this.output;
    },
    _getHeaders$0() {
    var t1, i, t2, t3, _this = this;
    if (!_this.decodeHeader$0())
        return false;
    _this._proba = A.VP8Proba$();
    for (t1 = _this._dqm, i = 0; i < 4; ++i) {
        t2 = new Int32Array(2);
        t3 = new Int32Array(2);
        B.JSArray_methods.$indexSet(t1, i, new A.VP8QuantMatrix(t2, t3, new Int32Array(2)));
    }
    _this.__VP8__cropLeft_A = _this._cropTop = 0;
    t1 = _this._webp;
    t2 = t1.width;
    _this.__VP8__cropRight_A = t2;
    t1 = t1.height;
    _this._cropBottom = t1;
    _this._mbWidth = t2 + 15 >>> 4;
    _this._mbHeight = t1 + 15 >>> 4;
    _this.__VP8__segment_A = 0;
    t1 = _this.input;
    t2 = _this._frameHeader;
    t3 = t2.__VP8FrameHeader_partitionLength_A;
    t3 === $ && A.throwLateFieldNI("partitionLength");
    t3 = A.VP8BitReader$(t1.subset$1(t3));
    _this.__VP8_br_A = t3;
    t1.offset += t2.__VP8FrameHeader_partitionLength_A;
    t3.getValue$1(1);
    _this.__VP8_br_A.getValue$1(1);
    _this._parseSegmentHeader$2(_this._segmentHeader, _this._proba);
    _this._parseFilterHeader$0();
    if (!_this._parsePartitions$1(t1))
        return false;
    _this._parseQuant$0();
    _this.__VP8_br_A.getValue$1(1);
    _this._parseProba$0();
    return true;
    },
    _parseSegmentHeader$2(hdr, proba) {
    var s, t2, value, _this = this,
        t1 = _this.__VP8_br_A;
    t1 === $ && A.throwLateFieldNI("br");
    t1 = t1.getValue$1(1) !== 0;
    hdr.useSegment = t1;
    if (t1) {
        hdr.updateMap = _this.__VP8_br_A.getValue$1(1) !== 0;
        if (_this.__VP8_br_A.getValue$1(1) !== 0) {
        hdr.absoluteDelta = _this.__VP8_br_A.getValue$1(1) !== 0;
        for (t1 = hdr.quantizer, s = 0; s < 4; ++s) {
            if (_this.__VP8_br_A.getValue$1(1) !== 0) {
            t2 = _this.__VP8_br_A;
            value = t2.getValue$1(7);
            t2 = t2.getValue$1(1) === 1 ? -value : value;
            } else
            t2 = 0;
            t1[s] = t2;
        }
        for (t1 = hdr.filterStrength, s = 0; s < 4; ++s) {
            if (_this.__VP8_br_A.getValue$1(1) !== 0) {
            t2 = _this.__VP8_br_A;
            value = t2.getValue$1(6);
            t2 = t2.getValue$1(1) === 1 ? -value : value;
            } else
            t2 = 0;
            t1[s] = t2;
        }
        }
        if (hdr.updateMap)
        for (s = 0; s < 3; ++s) {
            t1 = proba.segments;
            t1[s] = _this.__VP8_br_A.getValue$1(1) !== 0 ? _this.__VP8_br_A.getValue$1(8) : 255;
        }
    } else
        hdr.updateMap = false;
    return true;
    },
    _parseFilterHeader$0() {
    var i, t2, value, _this = this,
        hdr = _this._filterHeader,
        t1 = _this.__VP8_br_A;
    t1 === $ && A.throwLateFieldNI("br");
    hdr.__VP8FilterHeader_simple_A = t1.getValue$1(1) !== 0;
    hdr.level = _this.__VP8_br_A.getValue$1(6);
    hdr.__VP8FilterHeader_sharpness_A = _this.__VP8_br_A.getValue$1(3);
    t1 = _this.__VP8_br_A.getValue$1(1) !== 0;
    hdr.__VP8FilterHeader_useLfDelta_A = t1;
    if (t1)
        if (_this.__VP8_br_A.getValue$1(1) !== 0) {
        for (t1 = hdr.refLfDelta, i = 0; i < 4; ++i)
            if (_this.__VP8_br_A.getValue$1(1) !== 0) {
            t2 = _this.__VP8_br_A;
            value = t2.getValue$1(6);
            t1[i] = t2.getValue$1(1) === 1 ? -value : value;
            }
        for (t1 = hdr.modeLfDelta, i = 0; i < 4; ++i)
            if (_this.__VP8_br_A.getValue$1(1) !== 0) {
            t2 = _this.__VP8_br_A;
            value = t2.getValue$1(6);
            t1[i] = t2.getValue$1(1) === 1 ? -value : value;
            }
        }
    if (hdr.level === 0)
        t1 = 0;
    else
        t1 = hdr.__VP8FilterHeader_simple_A ? 1 : 2;
    _this._filterType = t1;
    return true;
    },
    _parsePartitions$1(input) {
    var lastPart, partStart, sz, p, szb, t2, t3, t4, t5, t6, partEnd,
        bufEnd = input.end - input.offset,
        t1 = this.__VP8_br_A;
    t1 === $ && A.throwLateFieldNI("br");
    t1 = B.JSInt_methods._shlPositive$1(1, t1.getValue$1(2));
    this.__VP8__numPartitions_A = t1;
    lastPart = t1 - 1;
    partStart = lastPart * 3;
    if (bufEnd < partStart)
        return false;
    for (t1 = this._partitions, sz = 0, p = 0; p < lastPart; ++p, partStart = partEnd) {
        szb = input.subset$2$offset(3, sz);
        t2 = szb.buffer;
        t3 = szb.offset;
        t4 = t2.length;
        if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t2, t3);
        t5 = t2[t3];
        t6 = t3 + 1;
        if (!(t6 < t4))
        return A.ioore(t2, t6);
        t6 = t2[t6];
        t3 += 2;
        if (!(t3 < t4))
        return A.ioore(t2, t3);
        partEnd = partStart + ((t5 | t6 << 8 | t2[t3] << 16) >>> 0);
        if (partEnd > bufEnd)
        partEnd = bufEnd;
        t2 = new A.VP8BitReader(input.subset$2$position(partEnd - partStart, partStart));
        t2.__VP8BitReader__range_A = 254;
        t2.__VP8BitReader__value_A = 0;
        t2.__VP8BitReader__bits_A = -8;
        B.JSArray_methods.$indexSet(t1, p, t2);
        sz += 3;
    }
    B.JSArray_methods.$indexSet(t1, lastPart, A.VP8BitReader$(input.subset$2$position(bufEnd - partStart, input.offset - input.start + partStart)));
    return partStart < bufEnd;
    },
    _parseQuant$0() {
    var baseQ0, dqy1Dc, dqy2Dc, dqy2Ac, dquvDc, dquvAc, hdr, t2, i, q, t3, m, t4, _this = this,
        t1 = _this.__VP8_br_A;
    t1 === $ && A.throwLateFieldNI("br");
    baseQ0 = t1.getValue$1(7);
    dqy1Dc = _this.__VP8_br_A.getValue$1(1) !== 0 ? _this.__VP8_br_A.getSignedValue$1(4) : 0;
    dqy2Dc = _this.__VP8_br_A.getValue$1(1) !== 0 ? _this.__VP8_br_A.getSignedValue$1(4) : 0;
    dqy2Ac = _this.__VP8_br_A.getValue$1(1) !== 0 ? _this.__VP8_br_A.getSignedValue$1(4) : 0;
    dquvDc = _this.__VP8_br_A.getValue$1(1) !== 0 ? _this.__VP8_br_A.getSignedValue$1(4) : 0;
    dquvAc = _this.__VP8_br_A.getValue$1(1) !== 0 ? _this.__VP8_br_A.getSignedValue$1(4) : 0;
    hdr = _this._segmentHeader;
    for (t1 = _this._dqm, t2 = hdr.quantizer, i = 0; i < 4; ++i) {
        if (hdr.useSegment) {
        q = t2[i];
        if (!hdr.absoluteDelta)
            q += baseQ0;
        } else {
        if (i > 0) {
            t3 = t1[0];
            if (!(i >= 0 && i < 4))
            return A.ioore(t1, i);
            t1[i] = t3;
            continue;
        }
        q = baseQ0;
        }
        m = t1[i];
        t3 = m.y1Mat;
        t4 = q + dqy1Dc;
        if (t4 < 0)
        t4 = 0;
        else if (t4 > 127)
        t4 = 127;
        t3[0] = B.List_8co1[t4];
        if (q < 0)
        t4 = 0;
        else
        t4 = q > 127 ? 127 : q;
        t3[1] = B.List_AiM[t4];
        t4 = m.y2Mat;
        t3 = q + dqy2Dc;
        if (t3 < 0)
        t3 = 0;
        else if (t3 > 127)
        t3 = 127;
        t4[0] = B.List_8co1[t3] * 2;
        t3 = q + dqy2Ac;
        if (t3 < 0)
        t3 = 0;
        else if (t3 > 127)
        t3 = 127;
        t4[1] = B.List_AiM[t3] * 101581 >>> 16;
        if (t4[1] < 8)
        t4[1] = 8;
        t3 = m.uvMat;
        t4 = q + dquvDc;
        if (t4 < 0)
        t4 = 0;
        else if (t4 > 117)
        t4 = 117;
        t3[0] = B.List_8co1[t4];
        t4 = q + dquvAc;
        if (t4 < 0)
        t4 = 0;
        else if (t4 > 127)
        t4 = 127;
        t3[1] = B.List_AiM[t4];
    }
    },
    _parseProba$0() {
    var t, b, c, p, t1, v, _this = this,
        proba = _this._proba;
    for (t = 0; t < 4; ++t)
        for (b = 0; b < 8; ++b)
        for (c = 0; c < 3; ++c)
            for (p = 0; p < 11; ++p) {
            t1 = _this.__VP8_br_A;
            t1 === $ && A.throwLateFieldNI("br");
            v = t1.getBit$1(B.List_MIe[t][b][c][p]) !== 0 ? _this.__VP8_br_A.getValue$1(8) : B.List_S8N[t][b][c][p];
            t1 = proba.bands;
            if (!(t < t1.length))
                return A.ioore(t1, t);
            t1 = t1[t];
            if (!(b < t1.length))
                return A.ioore(t1, b);
            t1 = t1[b].probas;
            if (!(c < t1.length))
                return A.ioore(t1, c);
            t1[c][p] = v;
            }
    t1 = _this.__VP8_br_A;
    t1 === $ && A.throwLateFieldNI("br");
    t1 = t1.getValue$1(1) !== 0;
    _this.__VP8__useSkipProba_A = t1;
    if (t1)
        _this.__VP8__skipP_A = _this.__VP8_br_A.getValue$1(8);
    },
    _precomputeFilterStrengths$0() {
    var hdr, t2, t3, t4, s, baseLevel, t5, i4x4, info, level, iLevel, iLevel0, _this = this,
        t1 = _this._filterType;
    t1.toString;
    if (t1 > 0) {
        hdr = _this._filterHeader;
        for (t1 = hdr.refLfDelta, t2 = hdr.modeLfDelta, t3 = _this._segmentHeader, t4 = t3.filterStrength, s = 0; s < 4; ++s) {
        if (t3.useSegment) {
            baseLevel = t4[s];
            if (!t3.absoluteDelta) {
            t5 = hdr.level;
            t5.toString;
            baseLevel += t5;
            }
        } else
            baseLevel = hdr.level;
        for (i4x4 = 0; i4x4 <= 1; ++i4x4) {
            t5 = _this.__VP8__fStrengths_A;
            t5 === $ && A.throwLateFieldNI("_fStrengths");
            if (!(s < t5.length))
            return A.ioore(t5, s);
            info = t5[s][i4x4];
            t5 = hdr.__VP8FilterHeader_useLfDelta_A;
            t5 === $ && A.throwLateFieldNI("useLfDelta");
            if (t5) {
            baseLevel.toString;
            level = baseLevel + t1[0];
            if (i4x4 !== 0)
                level += t2[0];
            } else
            level = baseLevel;
            level.toString;
            if (level < 0)
            level = 0;
            else if (level > 63)
            level = 63;
            if (level > 0) {
            t5 = hdr.__VP8FilterHeader_sharpness_A;
            t5 === $ && A.throwLateFieldNI("sharpness");
            if (t5 > 0) {
                iLevel = t5 > 4 ? B.JSInt_methods._shrOtherPositive$1(level, 2) : B.JSInt_methods._shrOtherPositive$1(level, 1);
                iLevel0 = 9 - t5;
                if (iLevel > iLevel0)
                iLevel = iLevel0;
            } else
                iLevel = level;
            if (iLevel < 1)
                iLevel = 1;
            info.fInnerLevel = iLevel;
            info.fLimit = 2 * level + iLevel;
            if (level >= 40)
                t5 = 2;
            else
                t5 = level >= 15 ? 1 : 0;
            info.hevThresh = t5;
            } else
            info.fLimit = 0;
            info.fInner = i4x4 !== 0;
        }
        }
    }
    },
    _initFrame$0() {
    var _list, i, _i, t3, t4, t5, extraRows, extraY, extraUv, uvWidth, _length, _this = this, _null = null,
        t1 = _this._webp,
        t2 = t1._webp_info$_alphaData;
    if (t2 != null)
        _this._alphaData = t2;
    _list = J.JSArray_JSArray$allocateFixed(4, type$.List_VP8FInfo);
    for (t2 = type$.JSArray_VP8FInfo, i = 0; i < 4; ++i)
        _list[i] = A._setArrayType([new A.VP8FInfo(), new A.VP8FInfo()], t2);
    _this.set$__VP8__fStrengths_A(type$.List_List_VP8FInfo._as(_list));
    t2 = _this._mbWidth;
    t2.toString;
    _list = J.JSArray_JSArray$allocateFixed(t2, type$.VP8TopSamples);
    for (_i = 0; _i < t2; ++_i) {
        t3 = new Uint8Array(16);
        t4 = new Uint8Array(8);
        _list[_i] = new A.VP8TopSamples(t3, t4, new Uint8Array(8));
    }
    _this.set$__VP8__yuvT_A(type$.List_VP8TopSamples._as(_list));
    _this.__VP8__yuvBlock_A = new Uint8Array(832);
    t2 = _this._mbWidth;
    t2.toString;
    _this._intraT = new Uint8Array(4 * t2);
    t3 = _this._cacheYStride = 16 * t2;
    t4 = _this._cacheUVStride = 8 * t2;
    t5 = _this._filterType;
    t5.toString;
    if (!(t5 < 3))
        return A.ioore(B.List_0_2_8, t5);
    extraRows = B.List_0_2_8[t5];
    extraY = extraRows * t3;
    extraUv = (extraRows / 2 | 0) * t4;
    _this.__VP8__cacheY_A = A.InputBuffer$(new Uint8Array(16 * t3 + extraY), false, _null, extraY);
    t3 = 8 * t4 + extraUv;
    _this.__VP8__cacheU_A = A.InputBuffer$(new Uint8Array(t3), false, _null, extraUv);
    _this.__VP8__cacheV_A = A.InputBuffer$(new Uint8Array(t3), false, _null, extraUv);
    t1 = t1.width;
    _this.__VP8__tmpY_A = A.InputBuffer$(new Uint8Array(t1), false, _null, 0);
    uvWidth = t1 + 1 >>> 1;
    _this.__VP8__tmpU_A = A.InputBuffer$(new Uint8Array(uvWidth), false, _null, 0);
    _this.__VP8__tmpV_A = A.InputBuffer$(new Uint8Array(uvWidth), false, _null, 0);
    if (t5 === 2)
        _this.__VP8__tlMbY_A = _this.__VP8__tlMbX_A = 0;
    else {
        t1 = _this.__VP8__cropLeft_A;
        t1 === $ && A.throwLateFieldNI("_cropLeft");
        t1 = B.JSInt_methods._tdivFast$1(t1 - extraRows, 16);
        _this.__VP8__tlMbX_A = t1;
        t3 = _this._cropTop;
        t3.toString;
        t3 = B.JSInt_methods._tdivFast$1(t3 - extraRows, 16);
        _this.__VP8__tlMbY_A = t3;
        if (t1 < 0)
        _this.__VP8__tlMbX_A = 0;
        if (t3 < 0)
        _this.__VP8__tlMbY_A = 0;
    }
    t1 = _this._cropBottom;
    t1.toString;
    t1 = B.JSInt_methods._tdivFast$1(t1 + 15 + extraRows, 16);
    _this._brMbY = t1;
    t3 = _this.__VP8__cropRight_A;
    t3 === $ && A.throwLateFieldNI("_cropRight");
    t3 = B.JSInt_methods._tdivFast$1(t3 + 15 + extraRows, 16);
    _this._brMbX = t3;
    if (t3 > t2)
        _this._brMbX = t2;
    t3 = _this._mbHeight;
    t3.toString;
    if (t1 > t3)
        _this._brMbY = t3;
    _length = t2 + 1;
    _list = J.JSArray_JSArray$allocateFixed(_length, type$.VP8MB);
    for (_i = 0; _i < _length; ++_i)
        _list[_i] = new A.VP8MB();
    _this.set$__VP8__mbInfo_A(type$.List_VP8MB._as(_list));
    t1 = _this._mbWidth;
    t1.toString;
    _list = J.JSArray_JSArray$allocateFixed(t1, type$.VP8MBData);
    for (_i = 0; _i < t1; ++_i) {
        t2 = new Int16Array(384);
        _list[_i] = new A.VP8MBData(t2, new Uint8Array(16));
    }
    _this.set$__VP8__mbData_A(type$.List_VP8MBData._as(_list));
    t1 = _this._mbWidth;
    t1.toString;
    _this.set$__VP8__fInfo_A(type$.List_nullable_VP8FInfo._as(A.List_List$filled(t1, _null, false, type$.nullable_VP8FInfo)));
    _this._precomputeFilterStrengths$0();
    A.VP8Filter__initTables();
    _this.__VP8__dsp_A = new A.VP8Filter();
    return true;
    },
    _parseFrame$0() {
    var t1, t2, t3, t4, t5, tokenBr, t6, left, t7, mb, block, skip, finfo, useFilter, _this = this,
        _s10_ = "isIntra4x4";
    _this._mbY = 0;
    t1 = _this._intraL;
    t2 = _this._segmentHeader;
    t3 = _this._partitions;
    t4 = 0;
    while (true) {
        t5 = _this._brMbY;
        t5.toString;
        if (!(t4 < t5))
        break;
        t5 = _this.__VP8__numPartitions_A;
        t5 === $ && A.throwLateFieldNI("_numPartitions");
        t5 = (t4 & t5 - 1) >>> 0;
        if (!(t5 >= 0 && t5 < 8))
        return A.ioore(t3, t5);
        tokenBr = t3[t5];
        while (true) {
        t4 = _this._mbX;
        t5 = _this._mbWidth;
        t5.toString;
        if (!(t4 < t5))
            break;
        t5 = _this.__VP8__mbInfo_A;
        t5 === $ && A.throwLateFieldNI("_mbInfo");
        t6 = t5.length;
        if (0 >= t6)
            return A.ioore(t5, 0);
        left = t5[0];
        t7 = 1 + t4;
        if (!(t7 < t6))
            return A.ioore(t5, t7);
        mb = t5[t7];
        t7 = _this.__VP8__mbData_A;
        t7 === $ && A.throwLateFieldNI("_mbData");
        if (!(t4 < t7.length))
            return A.ioore(t7, t4);
        block = t7[t4];
        if (t2.updateMap) {
            t4 = _this.__VP8_br_A;
            t4 === $ && A.throwLateFieldNI("br");
            t4 = t4.getBit$1(_this._proba.segments[0]);
            t5 = _this.__VP8_br_A;
            t6 = _this._proba;
            _this.__VP8__segment_A = t4 === 0 ? t5.getBit$1(t6.segments[1]) : 2 + t5.getBit$1(t6.segments[2]);
        }
        t4 = _this.__VP8__useSkipProba_A;
        t4 === $ && A.throwLateFieldNI("_useSkipProba");
        if (t4) {
            t4 = _this.__VP8_br_A;
            t4 === $ && A.throwLateFieldNI("br");
            t5 = _this.__VP8__skipP_A;
            t5 === $ && A.throwLateFieldNI("_skipP");
            skip = t4.getBit$1(t5) !== 0;
        } else
            skip = false;
        _this._parseIntraMode$0();
        if (!skip)
            skip = _this._parseResiduals$2(mb, tokenBr);
        else {
            left.nz = mb.nz = 0;
            t4 = block.__VP8MBData_isIntra4x4_A;
            t4 === $ && A.throwLateFieldNI(_s10_);
            if (!t4)
            left.nzDc = mb.nzDc = 0;
            block.__VP8MBData_nonZeroUV_A = block.nonZeroY = 0;
        }
        t4 = _this._filterType;
        t4.toString;
        if (t4 > 0) {
            t4 = _this.__VP8__fInfo_A;
            t4 === $ && A.throwLateFieldNI("_fInfo");
            t5 = _this._mbX;
            t6 = _this.__VP8__fStrengths_A;
            t6 === $ && A.throwLateFieldNI("_fStrengths");
            t7 = _this.__VP8__segment_A;
            t7 === $ && A.throwLateFieldNI("_segment");
            if (!(t7 < t6.length))
            return A.ioore(t6, t7);
            t7 = t6[t7];
            t6 = block.__VP8MBData_isIntra4x4_A;
            t6 === $ && A.throwLateFieldNI(_s10_);
            B.JSArray_methods.$indexSet(t4, t5, t7[t6 ? 1 : 0]);
            t4 = _this.__VP8__fInfo_A;
            t5 = _this._mbX;
            if (!(t5 < t4.length))
            return A.ioore(t4, t5);
            finfo = t4[t5];
            finfo.fInner = finfo.fInner || !skip;
        }
        ++_this._mbX;
        }
        t4 = _this.__VP8__mbInfo_A;
        t4 === $ && A.throwLateFieldNI("_mbInfo");
        if (0 >= t4.length)
        return A.ioore(t4, 0);
        t4 = t4[0];
        t4.nzDc = t4.nz = 0;
        B.NativeUint8List_methods.fillRange$3(t1, 0, 4, 0);
        _this._mbX = 0;
        _this._reconstructRow$0();
        t4 = _this._filterType;
        t4.toString;
        if (t4 > 0) {
        t4 = _this._mbY;
        t5 = _this.__VP8__tlMbY_A;
        t5 === $ && A.throwLateFieldNI("_tlMbY");
        if (t4 >= t5) {
            t5 = _this._brMbY;
            t5.toString;
            t5 = t4 <= t5;
            useFilter = t5;
        } else
            useFilter = false;
        } else
        useFilter = false;
        if (!_this._finishRow$1(useFilter))
        return false;
        t4 = ++_this._mbY;
    }
    return true;
    },
    _reconstructRow$0() {
    var yDst, uDst, vDst, mbX, t2, block, j, t3, topYuv, coeffs, bits, topRight, topRight32, t4, p, n, dst, c1, t5, c2, yOut, uOut, _this = this, _null = null, _s4_ = "_dsp",
        mbY = _this._mbY,
        t1 = _this.__VP8__yuvBlock_A;
    t1 === $ && A.throwLateFieldNI("_yuvBlock");
    yDst = A.InputBuffer$(t1, false, _null, 40);
    uDst = A.InputBuffer$(t1, false, _null, 584);
    vDst = A.InputBuffer$(t1, false, _null, 600);
    t1 = mbY > 0;
    mbX = 0;
    while (true) {
        t2 = _this._mbWidth;
        t2.toString;
        if (!(mbX < t2))
        break;
        t2 = _this.__VP8__mbData_A;
        t2 === $ && A.throwLateFieldNI("_mbData");
        if (!(mbX < t2.length))
        return A.ioore(t2, mbX);
        block = t2[mbX];
        if (mbX > 0) {
        for (j = -1; j < 16; ++j) {
            t2 = j * 32;
            yDst.memcpy$4(t2 - 4, 4, yDst, t2 + 12);
        }
        for (j = -1; j < 8; ++j) {
            t2 = j * 32;
            t3 = t2 - 4;
            t2 += 4;
            uDst.memcpy$4(t3, 4, uDst, t2);
            vDst.memcpy$4(t3, 4, vDst, t2);
        }
        } else {
        for (j = 0; j < 16; ++j)
            J.$indexSet$ax(yDst.buffer, yDst.offset + (j * 32 - 1), 129);
        for (j = 0; j < 8; ++j) {
            t2 = j * 32 - 1;
            J.$indexSet$ax(uDst.buffer, uDst.offset + t2, 129);
            J.$indexSet$ax(vDst.buffer, vDst.offset + t2, 129);
        }
        if (t1) {
            J.$indexSet$ax(vDst.buffer, vDst.offset + -33, 129);
            J.$indexSet$ax(uDst.buffer, uDst.offset + -33, 129);
            J.$indexSet$ax(yDst.buffer, yDst.offset + -33, 129);
        }
        }
        t2 = _this.__VP8__yuvT_A;
        t2 === $ && A.throwLateFieldNI("_yuvT");
        if (!(mbX < t2.length))
        return A.ioore(t2, mbX);
        topYuv = t2[mbX];
        coeffs = block.coeffs;
        bits = block.nonZeroY;
        if (t1) {
        yDst.memcpy$3(-32, 16, topYuv.y);
        uDst.memcpy$3(-32, 8, topYuv.u);
        vDst.memcpy$3(-32, 8, topYuv.v);
        } else if (mbX === 0) {
        t2 = yDst.buffer;
        t3 = yDst.offset + -33;
        J.fillRange$3$ax(t2, t3, t3 + 21, 127);
        t3 = uDst.buffer;
        t2 = uDst.offset + -33;
        J.fillRange$3$ax(t3, t2, t2 + 9, 127);
        t2 = vDst.buffer;
        t3 = vDst.offset + -33;
        J.fillRange$3$ax(t2, t3, t3 + 9, 127);
        }
        t2 = block.__VP8MBData_isIntra4x4_A;
        t2 === $ && A.throwLateFieldNI("isIntra4x4");
        if (t2) {
        topRight = A.InputBuffer$from(yDst, _null, -16);
        topRight32 = topRight.toUint32List$0();
        if (t1) {
            t2 = _this._mbWidth;
            t2.toString;
            if (mbX >= t2 - 1) {
            t2 = topYuv.y[15];
            t3 = topRight.buffer;
            t4 = topRight.offset;
            J.fillRange$3$ax(t3, t4, t4 + 4, t2);
            } else {
            t2 = _this.__VP8__yuvT_A;
            t3 = mbX + 1;
            if (!(t3 < t2.length))
                return A.ioore(t2, t3);
            topRight.memcpy$3(0, 4, t2[t3].y);
            }
        }
        t2 = topRight32.length;
        if (0 >= t2)
            return A.ioore(topRight32, 0);
        p = topRight32[0];
        if (96 >= t2)
            return A.ioore(topRight32, 96);
        topRight32[96] = p;
        topRight32[64] = p;
        topRight32[32] = p;
        for (t2 = block.imodes, n = 0; n < 16; ++n, bits = bits << 2 >>> 0) {
            dst = A.InputBuffer$from(yDst, _null, B.List_cGl0[n]);
            t3 = t2[n];
            if (!(t3 < 10))
            return A.ioore(B.List_sj6, t3);
            B.List_sj6[t3].call$1(dst);
            bits.toString;
            t3 = n * 16;
            _this._doTransform$3(bits, new A.InputBuffer(coeffs, t3, 384, t3, false), dst);
        }
        } else {
        t2 = A.VP8__checkMode(mbX, mbY, block.imodes[0]);
        t2.toString;
        if (!(t2 < 7))
            return A.ioore(B.List_0, t2);
        B.List_0[t2].call$1(yDst);
        if (bits !== 0)
            for (n = 0; n < 16; ++n, bits = bits << 2 >>> 0) {
            dst = A.InputBuffer$from(yDst, _null, B.List_cGl0[n]);
            bits.toString;
            t2 = n * 16;
            _this._doTransform$3(bits, new A.InputBuffer(coeffs, t2, 384, t2, false), dst);
            }
        }
        t2 = block.__VP8MBData_nonZeroUV_A;
        t2 === $ && A.throwLateFieldNI("nonZeroUV");
        t3 = A.VP8__checkMode(mbX, mbY, block.uvmode);
        t3.toString;
        if (!(t3 < 7))
        return A.ioore(B.List_Yo9, t3);
        B.List_Yo9[t3].call$1(uDst);
        B.List_Yo9[t3].call$1(vDst);
        c1 = new A.InputBuffer(coeffs, 256, 384, 256, false);
        if ((t2 & 255) !== 0) {
        t3 = _this.__VP8__dsp_A;
        if ((t2 & 170) !== 0) {
            t3 === $ && A.throwLateFieldNI(_s4_);
            t3.transformOne$2(c1, uDst);
            t3.transformOne$2(A.InputBuffer$from(c1, _null, 16), A.InputBuffer$from(uDst, _null, 4));
            t4 = A.InputBuffer$from(c1, _null, 32);
            t5 = A.InputBuffer$from(uDst, _null, 128);
            t3.transformOne$2(t4, t5);
            t3.transformOne$2(A.InputBuffer$from(t4, _null, 16), A.InputBuffer$from(t5, _null, 4));
        } else {
            t3 === $ && A.throwLateFieldNI(_s4_);
            t3.transformDCUV$2(c1, uDst);
        }
        }
        c2 = new A.InputBuffer(coeffs, 320, 384, 320, false);
        t2 = t2 >>> 8;
        if ((t2 & 255) !== 0) {
        t3 = _this.__VP8__dsp_A;
        if ((t2 & 170) !== 0) {
            t3 === $ && A.throwLateFieldNI(_s4_);
            t3.transformOne$2(c2, vDst);
            t3.transformOne$2(A.InputBuffer$from(c2, _null, 16), A.InputBuffer$from(vDst, _null, 4));
            t2 = A.InputBuffer$from(c2, _null, 32);
            t4 = A.InputBuffer$from(vDst, _null, 128);
            t3.transformOne$2(t2, t4);
            t3.transformOne$2(A.InputBuffer$from(t2, _null, 16), A.InputBuffer$from(t4, _null, 4));
        } else {
            t3 === $ && A.throwLateFieldNI(_s4_);
            t3.transformDCUV$2(c2, vDst);
        }
        }
        t2 = _this._mbHeight;
        t2.toString;
        if (mbY < t2 - 1) {
        B.NativeUint8List_methods.setRange$4(topYuv.y, 0, 16, yDst.toUint8List$0(), 480);
        B.NativeUint8List_methods.setRange$4(topYuv.u, 0, 8, uDst.toUint8List$0(), 224);
        B.NativeUint8List_methods.setRange$4(topYuv.v, 0, 8, vDst.toUint8List$0(), 224);
        }
        yOut = mbX * 16;
        uOut = mbX * 8;
        for (j = 0; j < 16; ++j) {
        t2 = _this._cacheYStride;
        t2.toString;
        t3 = _this.__VP8__cacheY_A;
        t3 === $ && A.throwLateFieldNI("_cacheY");
        t3.memcpy$4(yOut + j * t2, 16, yDst, j * 32);
        }
        for (j = 0; j < 8; ++j) {
        t2 = _this._cacheUVStride;
        t2.toString;
        t3 = _this.__VP8__cacheU_A;
        t3 === $ && A.throwLateFieldNI("_cacheU");
        t4 = j * 32;
        t3.memcpy$4(uOut + j * t2, 8, uDst, t4);
        t2 = _this._cacheUVStride;
        t2.toString;
        t3 = _this.__VP8__cacheV_A;
        t3 === $ && A.throwLateFieldNI("_cacheV");
        t3.memcpy$4(uOut + j * t2, 8, vDst, t4);
        }
        ++mbX;
    }
    },
    _doTransform$3(bits, src, dst) {
    var t1, t2, t3, a, c4, d4, c1, d1, _s4_ = "_dsp";
    switch (bits >>> 30) {
        case 3:
        t1 = this.__VP8__dsp_A;
        t1 === $ && A.throwLateFieldNI(_s4_);
        t1.transform$3(src, dst, false);
        break;
        case 2:
        this.__VP8__dsp_A === $ && A.throwLateFieldNI(_s4_);
        t1 = src.buffer;
        t2 = src.offset;
        t3 = t1.length;
        if (!(t2 >= 0 && t2 < t3))
            return A.ioore(t1, t2);
        a = t1[t2] + 4;
        t2 += 4;
        if (!(t2 < t3))
            return A.ioore(t1, t2);
        c4 = B.JSInt_methods.toSigned$1(B.JSInt_methods._shrOtherPositive$1(t1[t2] * 35468, 16), 32);
        t2 = src.buffer;
        t1 = src.offset + 4;
        if (!(t1 >= 0 && t1 < t2.length))
            return A.ioore(t2, t1);
        d4 = B.JSInt_methods.toSigned$1(B.JSInt_methods._shrOtherPositive$1(t2[t1] * 85627, 16), 32);
        t1 = src.buffer;
        t2 = src.offset + 1;
        if (!(t2 >= 0 && t2 < t1.length))
            return A.ioore(t1, t2);
        c1 = B.JSInt_methods.toSigned$1(B.JSInt_methods._shrOtherPositive$1(t1[t2] * 35468, 16), 32);
        t2 = src.buffer;
        t1 = src.offset + 1;
        if (!(t1 >= 0 && t1 < t2.length))
            return A.ioore(t2, t1);
        d1 = B.JSInt_methods.toSigned$1(B.JSInt_methods._shrOtherPositive$1(t2[t1] * 85627, 16), 32);
        A.VP8Filter__store2(dst, 0, a + d4, d1, c1);
        A.VP8Filter__store2(dst, 1, a + c4, d1, c1);
        A.VP8Filter__store2(dst, 2, a - c4, d1, c1);
        A.VP8Filter__store2(dst, 3, a - d4, d1, c1);
        break;
        case 1:
        t1 = this.__VP8__dsp_A;
        t1 === $ && A.throwLateFieldNI(_s4_);
        t1.transformDC$2(src, dst);
        break;
        default:
        break;
    }
    },
    _doFilter$2(mbX, mbY) {
    var t2, yDst, iLevel, limit, uvBps, t3, uDst, vDst, hevThresh, u2, v2, _this = this, _null = null, _s4_ = "_dsp",
        yBps = _this._cacheYStride,
        t1 = _this.__VP8__fInfo_A;
    t1 === $ && A.throwLateFieldNI("_fInfo");
    if (!(mbX >= 0 && mbX < t1.length))
        return A.ioore(t1, mbX);
    t1 = t1[mbX];
    t1.toString;
    t2 = _this.__VP8__cacheY_A;
    t2 === $ && A.throwLateFieldNI("_cacheY");
    yDst = A.InputBuffer$from(t2, _null, mbX * 16);
    iLevel = t1.fInnerLevel;
    limit = t1.fLimit;
    if (limit === 0)
        return;
    if (_this._filterType === 1) {
        if (mbX > 0) {
        t2 = _this.__VP8__dsp_A;
        t2 === $ && A.throwLateFieldNI(_s4_);
        yBps.toString;
        t2.simpleHFilter16$3(yDst, yBps, limit + 4);
        }
        if (t1.fInner) {
        t2 = _this.__VP8__dsp_A;
        t2 === $ && A.throwLateFieldNI(_s4_);
        yBps.toString;
        t2.simpleHFilter16i$3(yDst, yBps, limit);
        }
        if (mbY > 0) {
        t2 = _this.__VP8__dsp_A;
        t2 === $ && A.throwLateFieldNI(_s4_);
        yBps.toString;
        t2.simpleVFilter16$3(yDst, yBps, limit + 4);
        }
        if (t1.fInner) {
        t1 = _this.__VP8__dsp_A;
        t1 === $ && A.throwLateFieldNI(_s4_);
        yBps.toString;
        t1.simpleVFilter16i$3(yDst, yBps, limit);
        }
    } else {
        uvBps = _this._cacheUVStride;
        t2 = _this.__VP8__cacheU_A;
        t2 === $ && A.throwLateFieldNI("_cacheU");
        t3 = mbX * 8;
        uDst = A.InputBuffer$from(t2, _null, t3);
        t2 = _this.__VP8__cacheV_A;
        t2 === $ && A.throwLateFieldNI("_cacheV");
        vDst = A.InputBuffer$from(t2, _null, t3);
        hevThresh = t1.hevThresh;
        if (mbX > 0) {
        t2 = _this.__VP8__dsp_A;
        t2 === $ && A.throwLateFieldNI(_s4_);
        yBps.toString;
        t3 = limit + 4;
        t2._filterLoop26$7(yDst, 1, yBps, 16, t3, iLevel, hevThresh);
        uvBps.toString;
        t2._filterLoop26$7(uDst, 1, uvBps, 8, t3, iLevel, hevThresh);
        t2._filterLoop26$7(vDst, 1, uvBps, 8, t3, iLevel, hevThresh);
        }
        if (t1.fInner) {
        t2 = _this.__VP8__dsp_A;
        t2 === $ && A.throwLateFieldNI(_s4_);
        yBps.toString;
        t2.hFilter16i$5(yDst, yBps, limit, iLevel, hevThresh);
        uvBps.toString;
        u2 = A.InputBuffer$from(uDst, _null, 4);
        v2 = A.InputBuffer$from(vDst, _null, 4);
        t2._filterLoop24$7(u2, 1, uvBps, 8, limit, iLevel, hevThresh);
        t2._filterLoop24$7(v2, 1, uvBps, 8, limit, iLevel, hevThresh);
        }
        if (mbY > 0) {
        t2 = _this.__VP8__dsp_A;
        t2 === $ && A.throwLateFieldNI(_s4_);
        yBps.toString;
        t3 = limit + 4;
        t2._filterLoop26$7(yDst, yBps, 1, 16, t3, iLevel, hevThresh);
        uvBps.toString;
        t2._filterLoop26$7(uDst, uvBps, 1, 8, t3, iLevel, hevThresh);
        t2._filterLoop26$7(vDst, uvBps, 1, 8, t3, iLevel, hevThresh);
        }
        if (t1.fInner) {
        t1 = _this.__VP8__dsp_A;
        t1 === $ && A.throwLateFieldNI(_s4_);
        yBps.toString;
        t1.vFilter16i$5(yDst, yBps, limit, iLevel, hevThresh);
        uvBps.toString;
        t2 = 4 * uvBps;
        u2 = A.InputBuffer$from(uDst, _null, t2);
        v2 = A.InputBuffer$from(vDst, _null, t2);
        t1._filterLoop24$7(u2, uvBps, 1, 8, limit, iLevel, hevThresh);
        t1._filterLoop24$7(v2, uvBps, 1, 8, limit, iLevel, hevThresh);
        }
    }
    },
    _filterRow$0() {
    var mbX, _this = this,
        t1 = _this.__VP8__tlMbX_A;
    t1 === $ && A.throwLateFieldNI("_tlMbX");
    mbX = t1;
    while (true) {
        t1 = _this._brMbX;
        t1.toString;
        if (!(mbX < t1))
        break;
        _this._doFilter$2(mbX, _this._mbY);
        ++mbX;
    }
    },
    _finishRow$1(useFilter) {
    var extraYRows, ySize, uvSize, t2, yDst, t3, uDst, vDst, mbY, yStart, yEnd, t4, t5, deltaY, t6, t7, t8, _this = this, _null = null,
        t1 = _this._filterType;
    t1.toString;
    if (!(t1 < 3))
        return A.ioore(B.List_0_2_8, t1);
    extraYRows = B.List_0_2_8[t1];
    t1 = _this._cacheYStride;
    t1.toString;
    ySize = extraYRows * t1;
    t1 = _this._cacheUVStride;
    t1.toString;
    uvSize = (extraYRows / 2 | 0) * t1;
    t1 = _this.__VP8__cacheY_A;
    t1 === $ && A.throwLateFieldNI("_cacheY");
    t2 = -ySize;
    yDst = A.InputBuffer$from(t1, _null, t2);
    t1 = _this.__VP8__cacheU_A;
    t1 === $ && A.throwLateFieldNI("_cacheU");
    t3 = -uvSize;
    uDst = A.InputBuffer$from(t1, _null, t3);
    t1 = _this.__VP8__cacheV_A;
    t1 === $ && A.throwLateFieldNI("_cacheV");
    vDst = A.InputBuffer$from(t1, _null, t3);
    mbY = _this._mbY;
    t1 = _this._brMbY;
    t1.toString;
    yStart = mbY * 16;
    yEnd = (mbY + 1) * 16;
    if (useFilter)
        _this._filterRow$0();
    if (mbY !== 0) {
        yStart -= extraYRows;
        _this.__VP8__y_A = A.InputBuffer$from(yDst, _null, 0);
        _this.__VP8__u_A = A.InputBuffer$from(uDst, _null, 0);
        _this.__VP8__v_A = A.InputBuffer$from(vDst, _null, 0);
    } else {
        _this.__VP8__y_A = A.InputBuffer$from(_this.__VP8__cacheY_A, _null, 0);
        _this.__VP8__u_A = A.InputBuffer$from(_this.__VP8__cacheU_A, _null, 0);
        _this.__VP8__v_A = A.InputBuffer$from(_this.__VP8__cacheV_A, _null, 0);
    }
    t1 = mbY < t1 - 1;
    if (t1)
        yEnd -= extraYRows;
    t4 = _this._cropBottom;
    t4.toString;
    if (yEnd > t4)
        yEnd = t4;
    _this._a = null;
    if (_this._alphaData != null && yStart < yEnd) {
        t4 = _this._a = _this._decompressAlphaRows$2(yStart, yEnd - yStart);
        if (t4 == null)
        return false;
    } else
        t4 = _null;
    t5 = _this._cropTop;
    t5.toString;
    if (yStart < t5) {
        deltaY = t5 - yStart;
        t6 = _this.__VP8__y_A;
        t6 === $ && A.throwLateFieldNI("_y");
        t7 = t6.offset;
        t8 = _this._cacheYStride;
        t8.toString;
        t6.offset = t7 + t8 * deltaY;
        t8 = _this.__VP8__u_A;
        t8 === $ && A.throwLateFieldNI("_u");
        t7 = t8.offset;
        t6 = _this._cacheUVStride;
        t6.toString;
        t6 *= B.JSInt_methods._shrOtherPositive$1(deltaY, 1);
        t8.offset = t7 + t6;
        t7 = _this.__VP8__v_A;
        t7 === $ && A.throwLateFieldNI("_v");
        t7.offset += t6;
        if (t4 != null)
        t4.offset = t4.offset + _this._webp.width * deltaY;
        yStart = t5;
    }
    if (yStart < yEnd) {
        t6 = _this.__VP8__y_A;
        t6 === $ && A.throwLateFieldNI("_y");
        t7 = t6.offset;
        t8 = _this.__VP8__cropLeft_A;
        t8 === $ && A.throwLateFieldNI("_cropLeft");
        t6.offset = t7 + t8;
        t7 = _this.__VP8__u_A;
        t7 === $ && A.throwLateFieldNI("_u");
        t6 = t8 >>> 1;
        t7.offset = t7.offset + t6;
        t7 = _this.__VP8__v_A;
        t7 === $ && A.throwLateFieldNI("_v");
        t7.offset += t6;
        if (t4 != null)
        t4.offset += t8;
        t4 = _this.__VP8__cropRight_A;
        t4 === $ && A.throwLateFieldNI("_cropRight");
        _this._put$3(yStart - t5, t4 - t8, yEnd - yStart);
    }
    if (t1) {
        t1 = _this.__VP8__cacheY_A;
        t4 = _this._cacheYStride;
        t4.toString;
        t1.memcpy$4(t2, ySize, yDst, 16 * t4);
        t4 = _this.__VP8__cacheU_A;
        t2 = _this._cacheUVStride;
        t2.toString;
        t4.memcpy$4(t3, uvSize, uDst, 8 * t2);
        t2 = _this.__VP8__cacheV_A;
        t4 = _this._cacheUVStride;
        t4.toString;
        t2.memcpy$4(t3, uvSize, vDst, 8 * t4);
    }
    return true;
    },
    _put$3(mbY, mbW, mbH) {
    if (mbW <= 0 || mbH <= 0)
        return false;
    this._emitFancyRGB$3(mbY, mbW, mbH);
    this._emitAlphaRGB$3(mbY, mbW, mbH);
    return true;
    },
    _clip8$1(v) {
    var d;
    if ((v & -4194304) >>> 0 === 0)
        d = B.JSInt_methods._shrOtherPositive$1(v, 14);
    else
        d = v < 0 ? 0 : 255;
    return d;
    },
    _yuvToRgb$4(y, u, v, rgb) {
    var t1 = 19077 * y;
    rgb.$indexSet(0, 0, this._clip8$1(t1 + 26149 * v + -3644112));
    rgb.$indexSet(0, 1, this._clip8$1(t1 - 6419 * u - 13320 * v + 2229552));
    rgb.$indexSet(0, 2, this._clip8$1(t1 + 33050 * u + -4527440));
    },
    _upSample$9(topY, bottomY, topU, topV, curU, curV, topDst, bottomDst, len) {
    var t4, tlUv, lUv, uv0, x, t5, tUv, uv, avg, diag12, diag03, uv1, t6, t7, t8, t9, t10, d, _this = this, _null = null,
        loadUv = new A.VP8__upSample_loadUv(),
        t1 = len - 1,
        lastPixelPair = B.JSInt_methods._shrOtherPositive$1(t1, 1),
        t2 = topU.buffer,
        t3 = topU.offset;
    if (!(t3 >= 0 && t3 < t2.length))
        return A.ioore(t2, t3);
    t3 = t2[t3];
    t2 = topV.buffer;
    t4 = topV.offset;
    if (!(t4 >= 0 && t4 < t2.length))
        return A.ioore(t2, t4);
    tlUv = loadUv.call$2(t3, t2[t4]);
    t4 = curU.buffer;
    t2 = curU.offset;
    if (!(t2 >= 0 && t2 < t4.length))
        return A.ioore(t4, t2);
    t2 = t4[t2];
    t4 = curV.buffer;
    t3 = curV.offset;
    if (!(t3 >= 0 && t3 < t4.length))
        return A.ioore(t4, t3);
    lUv = loadUv.call$2(t2, t4[t3]);
    uv0 = B.JSInt_methods._shrOtherPositive$1(3 * tlUv + lUv + 131074, 2);
    t3 = topY.buffer;
    t4 = topY.offset;
    if (!(t4 >= 0 && t4 < t3.length))
        return A.ioore(t3, t4);
    _this._yuvToRgb$4(t3[t4], uv0 & 255, uv0 >>> 16, topDst);
    topDst.$indexSet(0, 3, 255);
    t2 = bottomY != null;
    if (t2) {
        uv0 = B.JSInt_methods._shrOtherPositive$1(3 * lUv + tlUv + 131074, 2);
        t3 = bottomY.buffer;
        t4 = bottomY.offset;
        if (!(t4 >= 0 && t4 < t3.length))
        return A.ioore(t3, t4);
        t4 = t3[t4];
        bottomDst.toString;
        _this._yuvToRgb$4(t4, uv0 & 255, uv0 >>> 16, bottomDst);
        bottomDst.$indexSet(0, 3, 255);
    }
    for (x = 1; x <= lastPixelPair; ++x, lUv = uv, tlUv = tUv) {
        t3 = topU.buffer;
        t4 = topU.offset + x;
        if (!(t4 >= 0 && t4 < t3.length))
        return A.ioore(t3, t4);
        t4 = t3[t4];
        t3 = topV.buffer;
        t5 = topV.offset + x;
        if (!(t5 >= 0 && t5 < t3.length))
        return A.ioore(t3, t5);
        tUv = loadUv.call$2(t4, t3[t5]);
        t5 = curU.buffer;
        t3 = curU.offset + x;
        if (!(t3 >= 0 && t3 < t5.length))
        return A.ioore(t5, t3);
        t3 = t5[t3];
        t5 = curV.buffer;
        t4 = curV.offset + x;
        if (!(t4 >= 0 && t4 < t5.length))
        return A.ioore(t5, t4);
        uv = loadUv.call$2(t3, t5[t4]);
        avg = tlUv + tUv + lUv + uv + 524296;
        diag12 = B.JSInt_methods._shrOtherPositive$1(avg + 2 * (tUv + lUv), 3);
        diag03 = B.JSInt_methods._shrOtherPositive$1(avg + 2 * (tlUv + uv), 3);
        uv0 = B.JSInt_methods._shrOtherPositive$1(diag12 + tlUv, 1);
        uv1 = B.JSInt_methods._shrOtherPositive$1(diag03 + tUv, 1);
        t4 = 2 * x;
        t5 = t4 - 1;
        t3 = topY.buffer;
        t6 = topY.offset + t5;
        if (!(t6 >= 0 && t6 < t3.length))
        return A.ioore(t3, t6);
        t6 = t3[t6];
        t3 = uv0 & 255;
        t7 = uv0 >>> 16;
        t8 = t5 * 4;
        t9 = A.InputBuffer$from(topDst, _null, t8);
        t6 = 19077 * t6;
        t10 = t6 + 26149 * t7 + -3644112;
        if ((t10 & -4194304) >>> 0 === 0)
        d = B.JSInt_methods._shrOtherPositive$1(t10, 14);
        else
        d = t10 < 0 ? 0 : 255;
        J.$indexSet$ax(t9.buffer, t9.offset, d);
        t7 = t6 - 6419 * t3 - 13320 * t7 + 2229552;
        if ((t7 & -4194304) >>> 0 === 0)
        d = B.JSInt_methods._shrOtherPositive$1(t7, 14);
        else
        d = t7 < 0 ? 0 : 255;
        J.$indexSet$ax(t9.buffer, t9.offset + 1, d);
        t3 = t6 + 33050 * t3 + -4527440;
        if ((t3 & -4194304) >>> 0 === 0)
        d = B.JSInt_methods._shrOtherPositive$1(t3, 14);
        else
        d = t3 < 0 ? 0 : 255;
        J.$indexSet$ax(t9.buffer, t9.offset + 2, d);
        J.$indexSet$ax(t9.buffer, t9.offset + 3, 255);
        t3 = t4 - 0;
        t6 = topY.buffer;
        t7 = topY.offset + t3;
        if (!(t7 >= 0 && t7 < t6.length))
        return A.ioore(t6, t7);
        t7 = t6[t7];
        t6 = uv1 & 255;
        t9 = uv1 >>> 16;
        t3 = A.InputBuffer$from(topDst, _null, t3 * 4);
        t7 = 19077 * t7;
        t10 = t7 + 26149 * t9 + -3644112;
        if ((t10 & -4194304) >>> 0 === 0)
        d = B.JSInt_methods._shrOtherPositive$1(t10, 14);
        else
        d = t10 < 0 ? 0 : 255;
        J.$indexSet$ax(t3.buffer, t3.offset, d);
        t9 = t7 - 6419 * t6 - 13320 * t9 + 2229552;
        if ((t9 & -4194304) >>> 0 === 0)
        d = B.JSInt_methods._shrOtherPositive$1(t9, 14);
        else
        d = t9 < 0 ? 0 : 255;
        J.$indexSet$ax(t3.buffer, t3.offset + 1, d);
        t6 = t7 + 33050 * t6 + -4527440;
        if ((t6 & -4194304) >>> 0 === 0)
        d = B.JSInt_methods._shrOtherPositive$1(t6, 14);
        else
        d = t6 < 0 ? 0 : 255;
        J.$indexSet$ax(t3.buffer, t3.offset + 2, d);
        J.$indexSet$ax(t3.buffer, t3.offset + 3, 255);
        if (t2) {
        uv0 = B.JSInt_methods._shrOtherPositive$1(diag03 + lUv, 1);
        uv1 = B.JSInt_methods._shrOtherPositive$1(diag12 + uv, 1);
        t3 = bottomY.buffer;
        t5 = bottomY.offset + t5;
        if (!(t5 >= 0 && t5 < t3.length))
            return A.ioore(t3, t5);
        t5 = t3[t5];
        t3 = uv0 & 255;
        t6 = uv0 >>> 16;
        bottomDst.toString;
        t8 = A.InputBuffer$from(bottomDst, _null, t8);
        t5 = 19077 * t5;
        t7 = t5 + 26149 * t6 + -3644112;
        if ((t7 & -4194304) >>> 0 === 0)
            d = B.JSInt_methods._shrOtherPositive$1(t7, 14);
        else
            d = t7 < 0 ? 0 : 255;
        J.$indexSet$ax(t8.buffer, t8.offset, d);
        t6 = t5 - 6419 * t3 - 13320 * t6 + 2229552;
        if ((t6 & -4194304) >>> 0 === 0)
            d = B.JSInt_methods._shrOtherPositive$1(t6, 14);
        else
            d = t6 < 0 ? 0 : 255;
        J.$indexSet$ax(t8.buffer, t8.offset + 1, d);
        t3 = t5 + 33050 * t3 + -4527440;
        if ((t3 & -4194304) >>> 0 === 0)
            d = B.JSInt_methods._shrOtherPositive$1(t3, 14);
        else
            d = t3 < 0 ? 0 : 255;
        J.$indexSet$ax(t8.buffer, t8.offset + 2, d);
        J.$indexSet$ax(t8.buffer, t8.offset + 3, 255);
        t3 = bottomY.buffer;
        t5 = bottomY.offset + t4;
        if (!(t5 >= 0 && t5 < t3.length))
            return A.ioore(t3, t5);
        t5 = t3[t5];
        t3 = uv1 & 255;
        t6 = uv1 >>> 16;
        t4 = A.InputBuffer$from(bottomDst, _null, t4 * 4);
        t5 = 19077 * t5;
        t7 = t5 + 26149 * t6 + -3644112;
        if ((t7 & -4194304) >>> 0 === 0)
            d = B.JSInt_methods._shrOtherPositive$1(t7, 14);
        else
            d = t7 < 0 ? 0 : 255;
        J.$indexSet$ax(t4.buffer, t4.offset, d);
        t6 = t5 - 6419 * t3 - 13320 * t6 + 2229552;
        if ((t6 & -4194304) >>> 0 === 0)
            d = B.JSInt_methods._shrOtherPositive$1(t6, 14);
        else
            d = t6 < 0 ? 0 : 255;
        J.$indexSet$ax(t4.buffer, t4.offset + 1, d);
        t3 = t5 + 33050 * t3 + -4527440;
        if ((t3 & -4194304) >>> 0 === 0)
            d = B.JSInt_methods._shrOtherPositive$1(t3, 14);
        else
            d = t3 < 0 ? 0 : 255;
        J.$indexSet$ax(t4.buffer, t4.offset + 2, d);
        J.$indexSet$ax(t4.buffer, t4.offset + 3, 255);
        }
    }
    if ((len & 1) === 0) {
        uv0 = B.JSInt_methods._shrOtherPositive$1(3 * tlUv + lUv + 131074, 2);
        t3 = topY.buffer;
        t4 = topY.offset + t1;
        if (!(t4 >= 0 && t4 < t3.length))
        return A.ioore(t3, t4);
        t4 = t3[t4];
        t3 = t1 * 4;
        t5 = A.InputBuffer$from(topDst, _null, t3);
        _this._yuvToRgb$4(t4, uv0 & 255, uv0 >>> 16, t5);
        t5.$indexSet(0, 3, 255);
        if (t2) {
        uv0 = B.JSInt_methods._shrOtherPositive$1(3 * lUv + tlUv + 131074, 2);
        t2 = bottomY.buffer;
        t1 = bottomY.offset + t1;
        if (!(t1 >= 0 && t1 < t2.length))
            return A.ioore(t2, t1);
        t1 = t2[t1];
        bottomDst.toString;
        t3 = A.InputBuffer$from(bottomDst, _null, t3);
        _this._yuvToRgb$4(t1, uv0 & 255, uv0 >>> 16, t3);
        t3.$indexSet(0, 3, 255);
        }
    }
    },
    _emitAlphaRGB$3(mbY, mbW, mbH) {
    var alpha, numRows, startY, t2, y, x, t3, t4, _this = this,
        t1 = _this._a;
    if (t1 == null)
        return;
    alpha = A.InputBuffer$from(t1, null, 0);
    if (mbY === 0) {
        numRows = mbH - 1;
        startY = mbY;
    } else {
        startY = mbY - 1;
        alpha.offset = alpha.offset - _this._webp.width;
        numRows = mbH;
    }
    t1 = _this._cropTop;
    t1.toString;
    t2 = _this._cropBottom;
    if (t1 + mbY + mbH === t2) {
        t2.toString;
        numRows = t2 - t1 - startY;
    }
    for (t1 = _this._webp, y = 0; y < numRows; ++y) {
        for (t2 = y + startY, x = 0; x < mbW; ++x) {
        t3 = alpha.buffer;
        t4 = alpha.offset + x;
        if (!(t4 >= 0 && t4 < t3.length))
            return A.ioore(t3, t4);
        t4 = t3[t4];
        t3 = _this.output.data;
        t3 = t3 == null ? null : t3.getPixel$3(x, t2, null);
        (t3 == null ? new A.PixelUndefined() : t3).set$a(t4);
        }
        alpha.offset = alpha.offset + t1.width;
    }
    },
    _emitFancyRGB$3(mbY, mbW, mbH) {
    var dst, t2, curY, curU, curV, yEnd, uvW, stride, topU, topV, numLinesOut, y, t3, t4, _this = this, _null = null,
        t1 = _this.output,
        outputBytes = A.NativeUint8List_NativeUint8List$view(t1.get$buffer(t1), 0, _null);
    t1 = _this._webp.width;
    dst = A.InputBuffer$(outputBytes, false, _null, mbY * t1 * 4);
    t2 = _this.__VP8__y_A;
    t2 === $ && A.throwLateFieldNI("_y");
    curY = A.InputBuffer$from(t2, _null, 0);
    t2 = _this.__VP8__u_A;
    t2 === $ && A.throwLateFieldNI("_u");
    curU = A.InputBuffer$from(t2, _null, 0);
    t2 = _this.__VP8__v_A;
    t2 === $ && A.throwLateFieldNI("_v");
    curV = A.InputBuffer$from(t2, _null, 0);
    yEnd = mbY + mbH;
    uvW = B.JSInt_methods._shrOtherPositive$1(mbW + 1, 1);
    stride = t1 * 4;
    t1 = _this.__VP8__tmpU_A;
    t1 === $ && A.throwLateFieldNI("_tmpU");
    topU = A.InputBuffer$from(t1, _null, 0);
    t1 = _this.__VP8__tmpV_A;
    t1 === $ && A.throwLateFieldNI("_tmpV");
    topV = A.InputBuffer$from(t1, _null, 0);
    if (mbY === 0) {
        _this._upSample$9(curY, _null, curU, curV, curU, curV, dst, _null, mbW);
        numLinesOut = mbH;
    } else {
        t1 = _this.__VP8__tmpY_A;
        t1 === $ && A.throwLateFieldNI("_tmpY");
        _this._upSample$9(t1, curY, topU, topV, curU, curV, A.InputBuffer$from(dst, _null, -stride), dst, mbW);
        numLinesOut = mbH + 1;
    }
    topU.set$buffer(0, curU.buffer);
    topV.set$buffer(0, curV.buffer);
    for (t1 = 2 * stride, t2 = -stride, y = mbY; y += 2, y < yEnd;) {
        topU.offset = curU.offset;
        topV.offset = curV.offset;
        t3 = curU.offset;
        t4 = _this._cacheUVStride;
        t4.toString;
        curU.offset = t3 + t4;
        curV.offset += t4;
        dst.offset += t1;
        t4 = curY.offset;
        t3 = _this._cacheYStride;
        t3.toString;
        curY.offset = t4 + 2 * t3;
        _this._upSample$9(A.InputBuffer$from(curY, _null, -t3), curY, topU, topV, curU, curV, A.InputBuffer$from(dst, _null, t2), dst, mbW);
    }
    t1 = curY.offset;
    t2 = _this._cacheYStride;
    t2.toString;
    curY.offset = t1 + t2;
    t1 = _this._cropTop;
    t1.toString;
    t2 = _this._cropBottom;
    t2.toString;
    if (t1 + yEnd < t2) {
        t1 = _this.__VP8__tmpY_A;
        t1 === $ && A.throwLateFieldNI("_tmpY");
        t1.memcpy$3(0, mbW, curY);
        _this.__VP8__tmpU_A.memcpy$3(0, uvW, curU);
        _this.__VP8__tmpV_A.memcpy$3(0, uvW, curV);
        --numLinesOut;
    } else if ((yEnd & 1) === 0)
        _this._upSample$9(curY, _null, curU, curV, curU, curV, A.InputBuffer$from(dst, _null, stride), _null, mbW);
    return numLinesOut;
    },
    _decompressAlphaRows$2(row, numRows) {
    var t2, t3, b, t4, webp, t5, t6, t7, t8, totalNumPixels, _this = this, _null = null,
        _s11_ = "_alphaPlane",
        t1 = _this._webp,
        width = t1.width,
        height = t1.height;
    if (row < 0 || numRows <= 0 || row + numRows > height)
        return _null;
    if (row === 0) {
        t1 = width * height;
        _this.__VP8__alphaPlane_A = new Uint8Array(t1);
        t2 = _this._alphaData;
        t3 = new A.WebPAlpha(t2, width, height);
        b = t2.readByte$0();
        t3.method = b & 3;
        t3.filter = B.JSInt_methods._shrOtherPositive$1(b, 2) & 3;
        t3.preProcessing = B.JSInt_methods._shrOtherPositive$1(b, 4) & 3;
        t3.rsrv = B.JSInt_methods._shrOtherPositive$1(b, 6) & 3;
        if (t3.get$isValid()) {
        t4 = t3.method;
        if (t4 === 0) {
            if (t2.end - t2.offset < t1)
            t3.rsrv = 1;
        } else if (t4 === 1) {
            webp = new A.WebPInfo(B.WebPFormat_0, A._setArrayType([], type$.JSArray_WebPFrame));
            webp.width = width;
            webp.height = height;
            t1 = A._setArrayType([], type$.JSArray_HTreeGroup);
            t4 = A._setArrayType([], type$.JSArray_VP8LTransform);
            t5 = new Uint32Array(2);
            t6 = new A.VP8LBitReader(t2, t5);
            t5 = t6.__VP8LBitReader__buffer8_A = A.NativeUint8List_NativeUint8List$view(t5.buffer, 0, _null);
            t7 = t2.readByte$0();
            t8 = t5.length;
            if (0 >= t8)
            return A.ioore(t5, 0);
            t5[0] = t7;
            t7 = t2.readByte$0();
            if (1 >= t8)
            return A.ioore(t5, 1);
            t5[1] = t7;
            t7 = t2.readByte$0();
            if (2 >= t8)
            return A.ioore(t5, 2);
            t5[2] = t7;
            t7 = t2.readByte$0();
            if (3 >= t8)
            return A.ioore(t5, 3);
            t5[3] = t7;
            t7 = t2.readByte$0();
            if (4 >= t8)
            return A.ioore(t5, 4);
            t5[4] = t7;
            t7 = t2.readByte$0();
            if (5 >= t8)
            return A.ioore(t5, 5);
            t5[5] = t7;
            t7 = t2.readByte$0();
            if (6 >= t8)
            return A.ioore(t5, 6);
            t5[6] = t7;
            t2 = t2.readByte$0();
            if (7 >= t8)
            return A.ioore(t5, 7);
            t5[7] = t2;
            t4 = new A.InternalVP8L(t6, webp, t1, t4);
            t4._ioWidth = width;
            t3.__WebPAlpha__vp8l_A = t4;
            t4._decodeImageStream$3(width, height, true);
            t1 = t3.__WebPAlpha__vp8l_A;
            t2 = t1._transforms;
            t4 = t2.length;
            if (t4 === 1) {
            if (0 >= t4)
                return A.ioore(t2, 0);
            t1 = t2[0].type === B.VP8LImageTransformType_3 && t1._is8bOptimizable$0();
            } else
            t1 = false;
            if (t1) {
            t3._use8bDecode = true;
            t1 = t3.__WebPAlpha__vp8l_A;
            t2 = t1.webp;
            totalNumPixels = t2.width * t2.height;
            t1._argbCache = 0;
            t2 = B.JSInt_methods.$mod(totalNumPixels, 4);
            t2 = new Uint8Array(totalNumPixels + (4 - t2));
            t1.__VP8L__pixels8_A = t2;
            t1._pixels = A.NativeUint32List_NativeUint32List$view(t2.buffer, 0, _null);
            } else {
            t3._use8bDecode = false;
            t3.__WebPAlpha__vp8l_A._allocateInternalBuffers32b$0();
            }
        } else
            t3.rsrv = 1;
        }
        _this.__VP8__alpha_A = t3;
    }
    t1 = _this.__VP8__alpha_A;
    t1 === $ && A.throwLateFieldNI("_alpha");
    if (!t1.isAlphaDecoded) {
        t2 = _this.__VP8__alphaPlane_A;
        t2 === $ && A.throwLateFieldNI(_s11_);
        if (!t1.decode$3(row, numRows, t2))
        return _null;
    }
    t1 = _this.__VP8__alphaPlane_A;
    t1 === $ && A.throwLateFieldNI(_s11_);
    return A.InputBuffer$(t1, false, _null, row * width);
    },
    _parseResiduals$2(mb, tokenBr) {
    var q, block, dst, leftMb, dc, nz, dc0, i, acProba, first, tnz, lnz, nonZeroY, y, l, nzCoeffs, x, outLeftNz, outTopNz, nonZeroUV, ch, t3, _this = this,
        bands = _this._proba.bands,
        t1 = _this._dqm,
        t2 = _this.__VP8__segment_A;
    t2 === $ && A.throwLateFieldNI("_segment");
    if (!(t2 < 4))
        return A.ioore(t1, t2);
    q = t1[t2];
    t2 = _this.__VP8__mbData_A;
    t2 === $ && A.throwLateFieldNI("_mbData");
    t1 = _this._mbX;
    if (!(t1 < t2.length))
        return A.ioore(t2, t1);
    block = t2[t1];
    dst = A.InputBuffer$(block.coeffs, false, null, 0);
    t1 = _this.__VP8__mbInfo_A;
    t1 === $ && A.throwLateFieldNI("_mbInfo");
    if (0 >= t1.length)
        return A.ioore(t1, 0);
    leftMb = t1[0];
    dst.memset$3(0, dst.end - dst.offset, 0);
    t1 = block.__VP8MBData_isIntra4x4_A;
    t1 === $ && A.throwLateFieldNI("isIntra4x4");
    if (!t1) {
        dc = A.InputBuffer$(new Int16Array(16), false, null, 0);
        t1 = mb.nzDc;
        t2 = leftMb.nzDc;
        if (1 >= bands.length)
        return A.ioore(bands, 1);
        nz = _this._getCoeffs$6(tokenBr, bands[1], t1 + t2, q.y2Mat, 0, dc);
        mb.nzDc = leftMb.nzDc = nz > 0 ? 1 : 0;
        if (nz > 1)
        _this._transformWHT$2(dc, dst);
        else {
        t1 = dc.buffer;
        t2 = dc.offset;
        if (!(t2 >= 0 && t2 < t1.length))
            return A.ioore(t1, t2);
        dc0 = B.JSInt_methods._shrOtherPositive$1(t1[t2] + 3, 3);
        for (i = 0; i < 256; i += 16)
            J.$indexSet$ax(dst.buffer, dst.offset + i, dc0);
        }
        acProba = bands[0];
        first = 1;
    } else {
        if (3 >= bands.length)
        return A.ioore(bands, 3);
        acProba = bands[3];
        first = 0;
    }
    tnz = mb.nz & 15;
    lnz = leftMb.nz & 15;
    for (nonZeroY = 0, y = 0; y < 4; ++y) {
        l = lnz & 1;
        for (nzCoeffs = 0, x = 0; x < 4; ++x) {
        nz = _this._getCoeffs$6(tokenBr, acProba, l + (tnz & 1), q.y1Mat, first, dst);
        l = nz > first ? 1 : 0;
        tnz = tnz >>> 1 | l << 7;
        t1 = dst.buffer;
        t2 = dst.offset;
        if (!(t2 >= 0 && t2 < t1.length))
            return A.ioore(t1, t2);
        t1 = t1[t2] !== 0 ? 1 : 0;
        if (nz > 3)
            t1 = 3;
        else if (nz > 1)
            t1 = 2;
        nzCoeffs = nzCoeffs << 2 | t1;
        dst.offset = t2 + 16;
        }
        tnz = tnz >>> 4;
        lnz = lnz >>> 1 | l << 7;
        nonZeroY = (nonZeroY << 8 | nzCoeffs) >>> 0;
    }
    outLeftNz = lnz >>> 4;
    for (t1 = bands.length, outTopNz = tnz, nonZeroUV = 0, ch = 0; ch < 4; ch += 2) {
        t2 = 4 + ch;
        tnz = B.JSInt_methods._shrBothPositive$1(mb.nz, t2);
        lnz = B.JSInt_methods._shrBothPositive$1(leftMb.nz, t2);
        for (nzCoeffs = 0, y = 0; y < 2; ++y) {
        l = lnz & 1;
        for (x = 0; x < 2; ++x) {
            if (2 >= t1)
            return A.ioore(bands, 2);
            nz = _this._getCoeffs$6(tokenBr, bands[2], l + (tnz & 1), q.uvMat, 0, dst);
            l = nz > 0 ? 1 : 0;
            tnz = tnz >>> 1 | l << 3;
            t2 = dst.buffer;
            t3 = dst.offset;
            if (!(t3 >= 0 && t3 < t2.length))
            return A.ioore(t2, t3);
            t2 = t2[t3] !== 0 ? 1 : 0;
            if (nz > 3)
            t2 = 3;
            else if (nz > 1)
            t2 = 2;
            nzCoeffs = (nzCoeffs << 2 | t2) >>> 0;
            dst.offset = t3 + 16;
        }
        tnz = tnz >>> 2;
        lnz = lnz >>> 1 | l << 5;
        }
        nonZeroUV = (nonZeroUV | B.JSInt_methods._shlPositive$1(nzCoeffs, 4 * ch)) >>> 0;
        outTopNz = (outTopNz | B.JSInt_methods._shlPositive$1(tnz << 4 >>> 0, ch)) >>> 0;
        outLeftNz = (outLeftNz | B.JSInt_methods._shlPositive$1(lnz & 240, ch)) >>> 0;
    }
    mb.nz = outTopNz;
    leftMb.nz = outLeftNz;
    block.nonZeroY = nonZeroY;
    block.__VP8MBData_nonZeroUV_A = nonZeroUV;
    if ((nonZeroUV & 43690) === 0)
        q.toString;
    return (nonZeroY | nonZeroUV) >>> 0 === 0;
    },
    _transformWHT$2(src, out) {
    var t1, t2, t3, i, t4, t5, t6, a0, t7, t8, t9, t10, a1, a2, a3, oi, dc,
        tmp = new Int32Array(16);
    for (t1 = src.buffer, t2 = src.offset, t3 = t1.length, i = 0; i < 4; ++i) {
        t4 = t2 + i;
        if (!(t4 >= 0 && t4 < t3))
        return A.ioore(t1, t4);
        t4 = t1[t4];
        t5 = 12 + i;
        t6 = t2 + t5;
        if (!(t6 >= 0 && t6 < t3))
        return A.ioore(t1, t6);
        t6 = t1[t6];
        a0 = t4 + t6;
        t7 = 4 + i;
        t8 = t2 + t7;
        if (!(t8 >= 0 && t8 < t3))
        return A.ioore(t1, t8);
        t8 = t1[t8];
        t9 = 8 + i;
        t10 = t2 + t9;
        if (!(t10 >= 0 && t10 < t3))
        return A.ioore(t1, t10);
        t10 = t1[t10];
        a1 = t8 + t10;
        a2 = t8 - t10;
        a3 = t4 - t6;
        if (!(i < 16))
        return A.ioore(tmp, i);
        tmp[i] = a0 + a1;
        if (!(t9 < 16))
        return A.ioore(tmp, t9);
        tmp[t9] = a0 - a1;
        tmp[t7] = a3 + a2;
        if (!(t5 < 16))
        return A.ioore(tmp, t5);
        tmp[t5] = a3 - a2;
    }
    for (oi = 0, i = 0; i < 4; ++i) {
        t1 = i * 4;
        if (!(t1 < 16))
        return A.ioore(tmp, t1);
        dc = tmp[t1] + 3;
        t2 = 3 + t1;
        if (!(t2 < 16))
        return A.ioore(tmp, t2);
        t2 = tmp[t2];
        a0 = dc + t2;
        t3 = 1 + t1;
        if (!(t3 < 16))
        return A.ioore(tmp, t3);
        t3 = tmp[t3];
        t1 = 2 + t1;
        if (!(t1 < 16))
        return A.ioore(tmp, t1);
        t1 = tmp[t1];
        a1 = t3 + t1;
        a2 = t3 - t1;
        a3 = dc - t2;
        t2 = B.JSInt_methods._shrOtherPositive$1(a0 + a1, 3);
        J.$indexSet$ax(out.buffer, out.offset + oi, t2);
        t2 = B.JSInt_methods._shrOtherPositive$1(a3 + a2, 3);
        J.$indexSet$ax(out.buffer, out.offset + (oi + 16), t2);
        t2 = B.JSInt_methods._shrOtherPositive$1(a0 - a1, 3);
        J.$indexSet$ax(out.buffer, out.offset + (oi + 32), t2);
        t2 = B.JSInt_methods._shrOtherPositive$1(a3 - a2, 3);
        J.$indexSet$ax(out.buffer, out.offset + (oi + 48), t2);
        oi += 64;
    }
    },
    _getLargeValue$2(br, p) {
    var v, bit1, t1, cat, tab, len, i;
    type$.List_int._as(p);
    if (br.getBit$1(p[3]) === 0)
        v = br.getBit$1(p[4]) === 0 ? 2 : 3 + br.getBit$1(p[5]);
    else if (br.getBit$1(p[6]) === 0)
        v = br.getBit$1(p[7]) === 0 ? 5 + br.getBit$1(159) : 7 + 2 * br.getBit$1(165) + br.getBit$1(145);
    else {
        bit1 = br.getBit$1(p[8]);
        t1 = 9 + bit1;
        if (!(t1 < 11))
        return A.ioore(p, t1);
        cat = 2 * bit1 + br.getBit$1(p[t1]);
        if (!(cat < 4))
        return A.ioore(B.List_sao, cat);
        tab = B.List_sao[cat];
        len = tab.length;
        for (v = 0, i = 0; i < len; ++i)
        v += v + br.getBit$1(tab[i]);
        v += 3 + B.JSInt_methods._shlPositive$1(8, cat);
    }
    return v;
    },
    _getCoeffs$6(br, prob, ctx, dq, n, out) {
    var t1, t2, p, n0, pCtx, v, t3, bit, shift, t4;
    type$.List_VP8BandProbas._as(prob);
    type$.List_int._as(dq);
    t1 = prob.length;
    if (!(n < t1))
        return A.ioore(prob, n);
    t2 = prob[n].probas;
    if (!(ctx < t2.length))
        return A.ioore(t2, ctx);
    p = t2[ctx];
    for (; n < 16; n = n0) {
        if (br.getBit$1(p[0]) === 0)
        return n;
        for (; br.getBit$1(p[1]) === 0;) {
        ++n;
        if (!(n >= 0 && n < 17))
            return A.ioore(B.List_F1L, n);
        t2 = B.List_F1L[n];
        if (!(t2 < t1))
            return A.ioore(prob, t2);
        t2 = prob[t2].probas;
        if (0 >= t2.length)
            return A.ioore(t2, 0);
        p = t2[0];
        if (n === 16)
            return 16;
        }
        n0 = n + 1;
        if (!(n0 >= 0 && n0 < 17))
        return A.ioore(B.List_F1L, n0);
        t2 = B.List_F1L[n0];
        if (!(t2 < t1))
        return A.ioore(prob, t2);
        pCtx = prob[t2].probas;
        t2 = pCtx.length;
        if (br.getBit$1(p[2]) === 0) {
        if (1 >= t2)
            return A.ioore(pCtx, 1);
        p = pCtx[1];
        v = 1;
        } else {
        v = this._getLargeValue$2(br, p);
        if (2 >= t2)
            return A.ioore(pCtx, 2);
        p = pCtx[2];
        }
        if (!(n >= 0 && n < 16))
        return A.ioore(B.List_cGl1, n);
        t2 = B.List_cGl1[n];
        t3 = br.__VP8BitReader__range_A;
        t3 === $ && A.throwLateFieldNI("_range");
        bit = br._bitUpdate$1(B.JSInt_methods._shrOtherPositive$1(t3, 1));
        t3 = br.__VP8BitReader__range_A;
        if (t3 >>> 0 !== t3 || t3 >= 128)
        return A.ioore(B.List_8co0, t3);
        shift = B.List_8co0[t3];
        br.__VP8BitReader__range_A = B.List_wmc[t3];
        t3 = br.__VP8BitReader__bits_A;
        t3 === $ && A.throwLateFieldNI("_bits");
        br.__VP8BitReader__bits_A = t3 - shift;
        t3 = bit !== 0 ? -v : v;
        t4 = dq[n > 0 ? 1 : 0];
        J.$indexSet$ax(out.buffer, out.offset + t2, t3 * t4);
    }
    return 16;
    },
    _parseIntraMode$0() {
    var block, ymode, modes, mi, y, x, prob, b, i, mi0, _this = this,
        t1 = _this._mbX,
        ti = 4 * t1,
        $top = _this._intraT,
        left = _this._intraL,
        t2 = _this.__VP8__mbData_A;
    t2 === $ && A.throwLateFieldNI("_mbData");
    if (!(t1 < t2.length))
        return A.ioore(t2, t1);
    block = t2[t1];
    t1 = _this.__VP8_br_A;
    t1 === $ && A.throwLateFieldNI("br");
    t1 = t1.getBit$1(145) === 0;
    block.__VP8MBData_isIntra4x4_A = t1;
    if (!t1) {
        if (_this.__VP8_br_A.getBit$1(156) !== 0)
        ymode = _this.__VP8_br_A.getBit$1(128) !== 0 ? 1 : 3;
        else
        ymode = _this.__VP8_br_A.getBit$1(163) !== 0 ? 2 : 0;
        block.imodes[0] = ymode;
        $top.toString;
        B.NativeUint8List_methods.fillRange$3($top, ti, ti + 4, ymode);
        B.NativeUint8List_methods.fillRange$3(left, 0, 4, ymode);
    } else {
        modes = block.imodes;
        for (mi = 0, y = 0; y < 4; ++y, mi = mi0) {
        ymode = left[y];
        for (x = 0; x < 4; ++x) {
            t1 = ti + x;
            if (!(t1 < $top.length))
            return A.ioore($top, t1);
            t2 = $top[t1];
            if (!(t2 < 10))
            return A.ioore(B.List_799, t2);
            t2 = B.List_799[t2];
            if (!(ymode >= 0 && ymode < 10))
            return A.ioore(t2, ymode);
            prob = t2[ymode];
            b = _this.__VP8_br_A.getBit$1(prob[0]);
            if (!(b < 18))
            return A.ioore(B.List_Y3m, b);
            i = B.List_Y3m[b];
            for (; i > 0;) {
            t2 = _this.__VP8_br_A;
            if (!(i < 9))
                return A.ioore(prob, i);
            t2 = 2 * i + t2.getBit$1(prob[i]);
            if (!(t2 >= 0 && t2 < 18))
                return A.ioore(B.List_Y3m, t2);
            i = B.List_Y3m[t2];
            }
            ymode = -i;
            $top[t1] = ymode;
        }
        mi0 = mi + 4;
        $top.toString;
        B.NativeUint8List_methods.setRange$4(modes, mi, mi0, $top, ti);
        if (!(y < 4))
            return A.ioore(left, y);
        left[y] = ymode;
        }
    }
    if (_this.__VP8_br_A.getBit$1(142) === 0)
        t1 = 0;
    else if (_this.__VP8_br_A.getBit$1(114) === 0)
        t1 = 2;
    else
        t1 = _this.__VP8_br_A.getBit$1(183) !== 0 ? 1 : 3;
    block.uvmode = t1;
    },
    set$__VP8__yuvT_A(__VP8__yuvT_A) {
    this.__VP8__yuvT_A = type$.List_VP8TopSamples._as(__VP8__yuvT_A);
    },
    set$__VP8__mbInfo_A(__VP8__mbInfo_A) {
    this.__VP8__mbInfo_A = type$.List_VP8MB._as(__VP8__mbInfo_A);
    },
    set$__VP8__fInfo_A(__VP8__fInfo_A) {
    this.__VP8__fInfo_A = type$.List_nullable_VP8FInfo._as(__VP8__fInfo_A);
    },
    set$__VP8__mbData_A(__VP8__mbData_A) {
    this.__VP8__mbData_A = type$.List_VP8MBData._as(__VP8__mbData_A);
    },
    set$__VP8__fStrengths_A(__VP8__fStrengths_A) {
    this.__VP8__fStrengths_A = type$.List_List_VP8FInfo._as(__VP8__fStrengths_A);
    }
};
A.VP8__upSample_loadUv.prototype = {
    call$2(u, v) {
    return (u | v << 16) >>> 0;
    },
    $signature: 32
};
A.VP8BitReader.prototype = {
    getValue$1(bits) {
    var v, bits0;
    for (v = 0; bits0 = bits - 1, bits > 0; bits = bits0)
        v = (v | B.JSInt_methods.$shl(this.getBit$1(128), bits0)) >>> 0;
    return v;
    },
    getSignedValue$1(bits) {
    var value = this.getValue$1(bits);
    return this.getValue$1(1) === 1 ? -value : value;
    },
    getBit$1(prob) {
    var bit, _this = this,
        t1 = _this.__VP8BitReader__range_A;
    t1 === $ && A.throwLateFieldNI("_range");
    bit = _this._bitUpdate$1(B.JSInt_methods._shrOtherPositive$1(t1 * prob, 8));
    if (_this.__VP8BitReader__range_A <= 126)
        _this._shift$0();
    return bit;
    },
    _bitUpdate$1(split) {
    var t2, t3, t4, bits, pos, _this = this, _s6_ = "_value",
        t1 = _this.__VP8BitReader__bits_A;
    t1 === $ && A.throwLateFieldNI("_bits");
    if (t1 < 0) {
        t2 = _this.input;
        t3 = t2.end;
        t4 = t2.offset;
        if (t3 - t4 >= 1) {
        bits = t2.readByte$0();
        t1 = _this.__VP8BitReader__value_A;
        t1 === $ && A.throwLateFieldNI(_s6_);
        _this.__VP8BitReader__value_A = (bits | t1 << 8) >>> 0;
        t1 = _this.__VP8BitReader__bits_A + 8;
        _this.__VP8BitReader__bits_A = t1;
        pos = t1;
        } else {
        if (t4 < t3) {
            t1 = t2.readByte$0();
            t2 = _this.__VP8BitReader__value_A;
            t2 === $ && A.throwLateFieldNI(_s6_);
            _this.__VP8BitReader__value_A = (t1 | t2 << 8) >>> 0;
            t2 = _this.__VP8BitReader__bits_A + 8;
            _this.__VP8BitReader__bits_A = t2;
            t1 = t2;
        } else if (!_this._eof) {
            t2 = _this.__VP8BitReader__value_A;
            t2 === $ && A.throwLateFieldNI(_s6_);
            _this.__VP8BitReader__value_A = t2 << 8 >>> 0;
            t1 += 8;
            _this.__VP8BitReader__bits_A = t1;
            _this._eof = true;
        }
        pos = t1;
        }
    } else
        pos = t1;
    t1 = _this.__VP8BitReader__value_A;
    t1 === $ && A.throwLateFieldNI(_s6_);
    if (B.JSInt_methods.$shr(t1, pos) > split) {
        t2 = _this.__VP8BitReader__range_A;
        t2 === $ && A.throwLateFieldNI("_range");
        t3 = split + 1;
        _this.__VP8BitReader__range_A = t2 - t3;
        _this.__VP8BitReader__value_A = t1 - B.JSInt_methods.$shl(t3, pos);
        return 1;
    } else {
        _this.__VP8BitReader__range_A = split;
        return 0;
    }
    },
    _shift$0() {
    var shift, _this = this,
        t1 = _this.__VP8BitReader__range_A;
    t1 === $ && A.throwLateFieldNI("_range");
    if (!(t1 >= 0 && t1 < 128))
        return A.ioore(B.List_8co0, t1);
    shift = B.List_8co0[t1];
    _this.__VP8BitReader__range_A = B.List_wmc[t1];
    t1 = _this.__VP8BitReader__bits_A;
    t1 === $ && A.throwLateFieldNI("_bits");
    _this.__VP8BitReader__bits_A = t1 - shift;
    }
};
A.VP8Filter.prototype = {
    simpleVFilter16$3(p, stride, threshold) {
    var i,
        p2 = A.InputBuffer$from(p, null, 0);
    for (i = 0; i < 16; ++i) {
        p2.offset = p.offset + i;
        if (this._needsFilter$3(p2, stride, threshold))
        this._doFilter2$2(p2, stride);
    }
    },
    simpleHFilter16$3(p, stride, threshold) {
    var i,
        p2 = A.InputBuffer$from(p, null, 0);
    for (i = 0; i < 16; ++i) {
        p2.offset = p.offset + i * stride;
        if (this._needsFilter$3(p2, 1, threshold))
        this._doFilter2$2(p2, 1);
    }
    },
    simpleVFilter16i$3(p, stride, threshold) {
    var t1, k,
        p2 = A.InputBuffer$from(p, null, 0);
    for (t1 = 4 * stride, k = 3; k > 0; --k) {
        p2.offset += t1;
        this.simpleVFilter16$3(p2, stride, threshold);
    }
    },
    simpleHFilter16i$3(p, stride, thresh) {
    var k,
        p2 = A.InputBuffer$from(p, null, 0);
    for (k = 3; k > 0; --k) {
        p2.offset += 4;
        this.simpleHFilter16$3(p2, stride, thresh);
    }
    },
    vFilter16i$5(p, stride, thresh, iThreshold, hevThreshold) {
    var t1, k,
        p2 = A.InputBuffer$from(p, null, 0);
    for (t1 = 4 * stride, k = 3; k > 0; --k) {
        p2.offset += t1;
        this._filterLoop24$7(p2, stride, 1, 16, thresh, iThreshold, hevThreshold);
    }
    },
    hFilter16i$5(p, stride, thresh, iThreshold, hevThreshold) {
    var k,
        p2 = A.InputBuffer$from(p, null, 0);
    for (k = 3; k > 0; --k) {
        p2.offset += 4;
        this._filterLoop24$7(p2, 1, stride, 16, thresh, iThreshold, hevThreshold);
    }
    },
    _filterLoop26$7(p, hstride, vstride, size, thresh, ithresh, hevThresh) {
    var t1, t2, t3, t4, size0, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, a, a1, a2, a3,
        p2 = A.InputBuffer$from(p, null, 0);
    for (t1 = -3 * hstride, t2 = -2 * hstride, t3 = -hstride, t4 = 2 * hstride; size0 = size - 1, size > 0; size = size0) {
        if (this._needsFilter2$4(p2, hstride, thresh, ithresh))
        if (this._hev$3(p2, hstride, hevThresh))
            this._doFilter2$2(p2, hstride);
        else {
            t5 = p2.buffer;
            t6 = p2.offset;
            t7 = t6 + t1;
            t8 = t5.length;
            if (!(t7 >= 0 && t7 < t8))
            return A.ioore(t5, t7);
            t9 = t5[t7];
            t10 = t6 + t2;
            if (!(t10 >= 0 && t10 < t8))
            return A.ioore(t5, t10);
            t10 = t5[t10];
            t11 = t6 + t3;
            if (!(t11 >= 0 && t11 < t8))
            return A.ioore(t5, t11);
            t11 = t5[t11];
            if (!(t6 >= 0 && t6 < t8))
            return A.ioore(t5, t6);
            t12 = t5[t6];
            t13 = t6 + hstride;
            if (!(t13 < t8))
            return A.ioore(t5, t13);
            t13 = t5[t13];
            t6 += t4;
            if (!(t6 < t8))
            return A.ioore(t5, t6);
            t6 = t5[t6];
            t8 = $.$get$VP8Filter_sclip1();
            t14 = 1020 + t10 - t13;
            t8.toString;
            if (!(t14 >= 0 && t14 < 2041))
            return A.ioore(t8, t14);
            t14 = 1020 + 3 * (t12 - t11) + t8[t14];
            if (!(t14 >= 0 && t14 < 2041))
            return A.ioore(t8, t14);
            a = t8[t14];
            t14 = B.JSInt_methods._shrOtherPositive$1(27 * a + 63, 7);
            a1 = (t14 & 2147483647) - ((t14 & 2147483648) >>> 0);
            t14 = B.JSInt_methods._shrOtherPositive$1(18 * a + 63, 7);
            a2 = (t14 & 2147483647) - ((t14 & 2147483648) >>> 0);
            t14 = B.JSInt_methods._shrOtherPositive$1(9 * a + 63, 7);
            a3 = (t14 & 2147483647) - ((t14 & 2147483648) >>> 0);
            t14 = $.$get$VP8Filter_clip1();
            t9 = 255 + t9 + a3;
            t14.toString;
            if (!(t9 >= 0 && t9 < 766))
            return A.ioore(t14, t9);
            J.$indexSet$ax(t5, t7, t14[t9]);
            t9 = $.$get$VP8Filter_clip1();
            t10 = 255 + t10 + a2;
            t9.toString;
            if (!(t10 >= 0 && t10 < 766))
            return A.ioore(t9, t10);
            t10 = t9[t10];
            J.$indexSet$ax(p2.buffer, p2.offset + t2, t10);
            t10 = $.$get$VP8Filter_clip1();
            t11 = 255 + t11 + a1;
            t10.toString;
            if (!(t11 >= 0 && t11 < 766))
            return A.ioore(t10, t11);
            t11 = t10[t11];
            J.$indexSet$ax(p2.buffer, p2.offset + t3, t11);
            t11 = $.$get$VP8Filter_clip1();
            t12 = 255 + t12 - a1;
            t11.toString;
            if (!(t12 >= 0 && t12 < 766))
            return A.ioore(t11, t12);
            t12 = t11[t12];
            J.$indexSet$ax(p2.buffer, p2.offset, t12);
            t12 = $.$get$VP8Filter_clip1();
            t13 = 255 + t13 - a2;
            t12.toString;
            if (!(t13 >= 0 && t13 < 766))
            return A.ioore(t12, t13);
            t13 = t12[t13];
            J.$indexSet$ax(p2.buffer, p2.offset + hstride, t13);
            t13 = $.$get$VP8Filter_clip1();
            t6 = 255 + t6 - a3;
            t13.toString;
            if (!(t6 >= 0 && t6 < 766))
            return A.ioore(t13, t6);
            t6 = t13[t6];
            J.$indexSet$ax(p2.buffer, p2.offset + t4, t6);
        }
        p2.offset += vstride;
    }
    },
    _filterLoop24$7(p, hstride, vstride, size, thresh, ithresh, hevThresh) {
    var t1, t2, size0, t3, t4, t5, t6, t7, t8, t9, a, t10, a1, a2, a3,
        p2 = A.InputBuffer$from(p, null, 0);
    for (t1 = -2 * hstride, t2 = -hstride; size0 = size - 1, size > 0; size = size0) {
        if (this._needsFilter2$4(p2, hstride, thresh, ithresh))
        if (this._hev$3(p2, hstride, hevThresh))
            this._doFilter2$2(p2, hstride);
        else {
            t3 = p2.buffer;
            t4 = p2.offset;
            t5 = t4 + t1;
            t6 = t3.length;
            if (!(t5 >= 0 && t5 < t6))
            return A.ioore(t3, t5);
            t7 = t3[t5];
            t8 = t4 + t2;
            if (!(t8 >= 0 && t8 < t6))
            return A.ioore(t3, t8);
            t8 = t3[t8];
            if (!(t4 >= 0 && t4 < t6))
            return A.ioore(t3, t4);
            t9 = t3[t4];
            t4 += hstride;
            if (!(t4 < t6))
            return A.ioore(t3, t4);
            t4 = t3[t4];
            a = 3 * (t9 - t8);
            t6 = $.$get$VP8Filter_sclip2();
            t10 = B.JSInt_methods._shrOtherPositive$1(a + 4, 3);
            t10 = 112 + ((t10 & 2147483647) - ((t10 & 2147483648) >>> 0));
            t6.toString;
            if (!(t10 >= 0 && t10 < 225))
            return A.ioore(t6, t10);
            a1 = t6[t10];
            t10 = B.JSInt_methods._shrOtherPositive$1(a + 3, 3);
            t10 = 112 + ((t10 & 2147483647) - ((t10 & 2147483648) >>> 0));
            if (!(t10 >= 0 && t10 < 225))
            return A.ioore(t6, t10);
            a2 = t6[t10];
            t10 = B.JSInt_methods._shrOtherPositive$1(a1 + 1, 1);
            a3 = (t10 & 2147483647) - ((t10 & 2147483648) >>> 0);
            t10 = $.$get$VP8Filter_clip1();
            t7 = 255 + t7 + a3;
            t10.toString;
            if (!(t7 >= 0 && t7 < 766))
            return A.ioore(t10, t7);
            J.$indexSet$ax(t3, t5, t10[t7]);
            t7 = $.$get$VP8Filter_clip1();
            t8 = 255 + t8 + a2;
            t7.toString;
            if (!(t8 >= 0 && t8 < 766))
            return A.ioore(t7, t8);
            t8 = t7[t8];
            J.$indexSet$ax(p2.buffer, p2.offset + t2, t8);
            t8 = $.$get$VP8Filter_clip1();
            t9 = 255 + t9 - a1;
            t8.toString;
            if (!(t9 >= 0 && t9 < 766))
            return A.ioore(t8, t9);
            t9 = t8[t9];
            J.$indexSet$ax(p2.buffer, p2.offset, t9);
            t9 = $.$get$VP8Filter_clip1();
            t4 = 255 + t4 - a3;
            t9.toString;
            if (!(t4 >= 0 && t4 < 766))
            return A.ioore(t9, t4);
            t4 = t9[t4];
            J.$indexSet$ax(p2.buffer, p2.offset + hstride, t4);
        }
        p2.offset += vstride;
    }
    },
    _doFilter2$2(p, step) {
    var t5, t6, t7, a, a1, a2,
        t1 = p.buffer,
        t2 = p.offset,
        t3 = t2 + -2 * step,
        t4 = t1.length;
    if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
    t3 = t1[t3];
    t5 = -step;
    t6 = t2 + t5;
    if (!(t6 >= 0 && t6 < t4))
        return A.ioore(t1, t6);
    t6 = t1[t6];
    if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
    t7 = t1[t2];
    t2 += step;
    if (!(t2 < t4))
        return A.ioore(t1, t2);
    t2 = t1[t2];
    t1 = $.$get$VP8Filter_sclip1();
    t2 = 1020 + t3 - t2;
    t1.toString;
    if (!(t2 >= 0 && t2 < 2041))
        return A.ioore(t1, t2);
    a = 3 * (t7 - t6) + t1[t2];
    t2 = $.$get$VP8Filter_sclip2();
    t1 = 112 + B.JSInt_methods.toSigned$1(B.JSInt_methods._shrOtherPositive$1(a + 4, 3), 32);
    t2.toString;
    if (!(t1 >= 0 && t1 < 225))
        return A.ioore(t2, t1);
    a1 = t2[t1];
    t1 = $.$get$VP8Filter_sclip2();
    t2 = 112 + B.JSInt_methods.toSigned$1(B.JSInt_methods._shrOtherPositive$1(a + 3, 3), 32);
    t1.toString;
    if (!(t2 >= 0 && t2 < 225))
        return A.ioore(t1, t2);
    a2 = t1[t2];
    t2 = $.$get$VP8Filter_clip1();
    t6 = 255 + t6 + a2;
    t2.toString;
    if (!(t6 >= 0 && t6 < 766))
        return A.ioore(t2, t6);
    p.$indexSet(0, t5, t2[t6]);
    t6 = $.$get$VP8Filter_clip1();
    t7 = 255 + t7 - a1;
    t6.toString;
    if (!(t7 >= 0 && t7 < 766))
        return A.ioore(t6, t7);
    p.$indexSet(0, 0, t6[t7]);
    },
    _hev$3(p, step, thresh) {
    var t5, t6,
        t1 = p.buffer,
        t2 = p.offset,
        t3 = t2 + -2 * step,
        t4 = t1.length;
    if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
    t3 = t1[t3];
    t5 = t2 + -step;
    if (!(t5 >= 0 && t5 < t4))
        return A.ioore(t1, t5);
    t5 = t1[t5];
    if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
    t6 = t1[t2];
    t2 += step;
    if (!(t2 < t4))
        return A.ioore(t1, t2);
    t2 = t1[t2];
    t1 = $.$get$VP8Filter_abs0();
    t5 = 255 + t3 - t5;
    t1.toString;
    if (!(t5 >= 0 && t5 < 511))
        return A.ioore(t1, t5);
    if (t1[t5] <= thresh) {
        t2 = 255 + t2 - t6;
        if (!(t2 >= 0 && t2 < 511))
        return A.ioore(t1, t2);
        t2 = t1[t2] > thresh;
        t1 = t2;
    } else
        t1 = true;
    return t1;
    },
    _needsFilter$3(p, step, thresh) {
    var t5, t6,
        t1 = p.buffer,
        t2 = p.offset,
        t3 = t2 + -2 * step,
        t4 = t1.length;
    if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
    t3 = t1[t3];
    t5 = t2 + -step;
    if (!(t5 >= 0 && t5 < t4))
        return A.ioore(t1, t5);
    t5 = t1[t5];
    if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
    t6 = t1[t2];
    t2 += step;
    if (!(t2 < t4))
        return A.ioore(t1, t2);
    t2 = t1[t2];
    t1 = $.$get$VP8Filter_abs0();
    t6 = 255 + t5 - t6;
    t1.toString;
    if (!(t6 >= 0 && t6 < 511))
        return A.ioore(t1, t6);
    t6 = t1[t6];
    t1 = $.$get$VP8Filter_abs1();
    t2 = 255 + t3 - t2;
    t1.toString;
    if (!(t2 >= 0 && t2 < 511))
        return A.ioore(t1, t2);
    return 2 * t6 + t1[t2] <= thresh;
    },
    _needsFilter2$4(p, step, t, it) {
    var t5, t6, t7, t8, t9, t10, t11, t12, t13,
        t1 = p.buffer,
        t2 = p.offset,
        t3 = t2 + -4 * step,
        t4 = t1.length;
    if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
    t3 = t1[t3];
    t5 = t2 + -3 * step;
    if (!(t5 >= 0 && t5 < t4))
        return A.ioore(t1, t5);
    t5 = t1[t5];
    t6 = t2 + -2 * step;
    if (!(t6 >= 0 && t6 < t4))
        return A.ioore(t1, t6);
    t6 = t1[t6];
    t7 = t2 + -step;
    if (!(t7 >= 0 && t7 < t4))
        return A.ioore(t1, t7);
    t7 = t1[t7];
    if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
    t8 = t1[t2];
    t9 = t2 + step;
    if (!(t9 < t4))
        return A.ioore(t1, t9);
    t9 = t1[t9];
    t10 = t2 + 2 * step;
    if (!(t10 < t4))
        return A.ioore(t1, t10);
    t10 = t1[t10];
    t2 += 3 * step;
    if (!(t2 < t4))
        return A.ioore(t1, t2);
    t2 = t1[t2];
    t1 = $.$get$VP8Filter_abs0();
    t4 = 255 + t7 - t8;
    t1.toString;
    if (!(t4 >= 0 && t4 < 511))
        return A.ioore(t1, t4);
    t4 = t1[t4];
    t11 = $.$get$VP8Filter_abs1();
    t12 = 255 + t6;
    t13 = t12 - t9;
    t11.toString;
    if (!(t13 >= 0 && t13 < 511))
        return A.ioore(t11, t13);
    if (2 * t4 + t11[t13] > t)
        return false;
    t3 = 255 + t3 - t5;
    if (!(t3 >= 0 && t3 < 511))
        return A.ioore(t1, t3);
    if (t1[t3] <= it) {
        t3 = 255 + t5 - t6;
        if (!(t3 >= 0 && t3 < 511))
        return A.ioore(t1, t3);
        if (t1[t3] <= it) {
        t3 = t12 - t7;
        if (!(t3 >= 0 && t3 < 511))
            return A.ioore(t1, t3);
        if (t1[t3] <= it) {
            t2 = 255 + t2 - t10;
            if (!(t2 >= 0 && t2 < 511))
            return A.ioore(t1, t2);
            if (t1[t2] <= it) {
            t2 = 255 + t10 - t9;
            if (!(t2 >= 0 && t2 < 511))
                return A.ioore(t1, t2);
            if (t1[t2] <= it) {
                t2 = 255 + t9 - t8;
                if (!(t2 >= 0 && t2 < 511))
                return A.ioore(t1, t2);
                t2 = t1[t2] <= it;
                t1 = t2;
            } else
                t1 = false;
            } else
            t1 = false;
        } else
            t1 = false;
        } else
        t1 = false;
    } else
        t1 = false;
    return t1;
    },
    transformOne$2(src, dst) {
    var t1, t2, t3, si, tmp, i, t4, t5, a, b, t6, t7, c, d, tmp0, di, dc,
        t = new Int32Array(16);
    for (t1 = src.buffer, t2 = src.offset, t3 = t1.length, si = 0, tmp = 0, i = 0; i < 4; ++i) {
        t4 = t2 + si;
        if (!(t4 >= 0 && t4 < t3))
        return A.ioore(t1, t4);
        t4 = t1[t4];
        t5 = t2 + (si + 8);
        if (!(t5 >= 0 && t5 < t3))
        return A.ioore(t1, t5);
        t5 = t1[t5];
        a = t4 + t5;
        b = t4 - t5;
        t5 = t2 + (si + 4);
        if (!(t5 >= 0 && t5 < t3))
        return A.ioore(t1, t5);
        t5 = t1[t5];
        t4 = B.JSInt_methods._shrOtherPositive$1(t5 * 35468, 16);
        t6 = t2 + (si + 12);
        if (!(t6 >= 0 && t6 < t3))
        return A.ioore(t1, t6);
        t6 = t1[t6];
        t7 = B.JSInt_methods._shrOtherPositive$1(t6 * 85627, 16);
        c = (t4 & 2147483647) - ((t4 & 2147483648) >>> 0) - ((t7 & 2147483647) - ((t7 & 2147483648) >>> 0));
        t5 = B.JSInt_methods._shrOtherPositive$1(t5 * 85627, 16);
        t6 = B.JSInt_methods._shrOtherPositive$1(t6 * 35468, 16);
        d = (t5 & 2147483647) - ((t5 & 2147483648) >>> 0) + ((t6 & 2147483647) - ((t6 & 2147483648) >>> 0));
        tmp0 = tmp + 1;
        if (!(tmp < 16))
        return A.ioore(t, tmp);
        t[tmp] = a + d;
        tmp = tmp0 + 1;
        if (!(tmp0 < 16))
        return A.ioore(t, tmp0);
        t[tmp0] = b + c;
        tmp0 = tmp + 1;
        if (!(tmp < 16))
        return A.ioore(t, tmp);
        t[tmp] = b - c;
        tmp = tmp0 + 1;
        if (!(tmp0 < 16))
        return A.ioore(t, tmp0);
        t[tmp0] = a - d;
        ++si;
    }
    for (di = 0, tmp = 0, i = 0; i < 4; ++i) {
        if (!(tmp < 16))
        return A.ioore(t, tmp);
        dc = t[tmp] + 4;
        t1 = tmp + 8;
        if (!(t1 < 16))
        return A.ioore(t, t1);
        t1 = t[t1];
        a = dc + t1;
        b = dc - t1;
        t1 = tmp + 4;
        if (!(t1 < 16))
        return A.ioore(t, t1);
        t1 = t[t1];
        t2 = B.JSInt_methods._shrOtherPositive$1(t1 * 35468, 16);
        t3 = tmp + 12;
        if (!(t3 < 16))
        return A.ioore(t, t3);
        t3 = t[t3];
        t4 = B.JSInt_methods._shrOtherPositive$1(t3 * 85627, 16);
        c = (t2 & 2147483647) - ((t2 & 2147483648) >>> 0) - ((t4 & 2147483647) - ((t4 & 2147483648) >>> 0));
        t1 = B.JSInt_methods._shrOtherPositive$1(t1 * 85627, 16);
        t3 = B.JSInt_methods._shrOtherPositive$1(t3 * 35468, 16);
        d = (t1 & 2147483647) - ((t1 & 2147483648) >>> 0) + ((t3 & 2147483647) - ((t3 & 2147483648) >>> 0));
        A.VP8Filter__store(dst, di, 0, 0, a + d);
        A.VP8Filter__store(dst, di, 1, 0, b + c);
        A.VP8Filter__store(dst, di, 2, 0, b - c);
        A.VP8Filter__store(dst, di, 3, 0, a - d);
        ++tmp;
        di += 32;
    }
    },
    transform$3(src, dst, doTwo) {
    this.transformOne$2(src, dst);
    if (doTwo)
        this.transformOne$2(A.InputBuffer$from(src, null, 16), A.InputBuffer$from(dst, null, 4));
    },
    transformDC$2(src, dst) {
    var dc, j, i,
        t1 = src.buffer,
        t2 = src.offset;
    if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
    dc = t1[t2] + 4;
    for (j = 0; j < 4; ++j)
        for (i = 0; i < 4; ++i)
        A.VP8Filter__store(dst, 0, i, j, dc);
    },
    transformDCUV$2(src, dst) {
    var _this = this, _null = null,
        t1 = src.buffer,
        t2 = src.offset;
    if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
    if (t1[t2] !== 0)
        _this.transformDC$2(src, dst);
    t1 = src.buffer;
    t2 = src.offset + 16;
    if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
    if (t1[t2] !== 0)
        _this.transformDC$2(A.InputBuffer$from(src, _null, 16), A.InputBuffer$from(dst, _null, 4));
    t1 = src.buffer;
    t2 = src.offset + 32;
    if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
    if (t1[t2] !== 0)
        _this.transformDC$2(A.InputBuffer$from(src, _null, 32), A.InputBuffer$from(dst, _null, 128));
    t1 = src.buffer;
    t2 = src.offset + 48;
    if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
    if (t1[t2] !== 0)
        _this.transformDC$2(A.InputBuffer$from(src, _null, 48), A.InputBuffer$from(dst, _null, 132));
    }
};
A.VP8FrameHeader.prototype = {};
A.VP8PictureHeader.prototype = {};
A.VP8SegmentHeader.prototype = {};
A.VP8BandProbas.prototype = {};
A.VP8Proba.prototype = {};
A.VP8FilterHeader.prototype = {};
A.VP8FInfo.prototype = {};
A.VP8MB.prototype = {};
A.VP8QuantMatrix.prototype = {};
A.VP8MBData.prototype = {};
A.VP8TopSamples.prototype = {};
A.VP8L.prototype = {
    decodeHeader$0() {
    var t2,
        t1 = this.br;
    if (t1.readBits$1(8) !== 47)
        return false;
    t2 = this.webp;
    t2.format = B.WebPFormat_2;
    t2.width = t1.readBits$1(14) + 1;
    t2.height = t1.readBits$1(14) + 1;
    t2.hasAlpha = t1.readBits$1(1) !== 0;
    if (t1.readBits$1(3) !== 0)
        return false;
    return true;
    },
    decode$0() {
    var t1, t2, t3, _this = this, _null = null;
    _this._lastPixel = 0;
    if (!_this.decodeHeader$0())
        return _null;
    t1 = _this.webp;
    _this._decodeImageStream$3(t1.width, t1.height, true);
    _this._allocateInternalBuffers32b$0();
    t2 = t1.width;
    _this.image = A.Image$(_null, _null, B.Format_3, 0, B.FrameType_2, t1.height, _null, 0, 4, _null, t2, false);
    t2 = _this._pixels;
    t2.toString;
    t3 = t1.width;
    t1 = t1.height;
    if (!_this._decodeImageData$5(t2, t3, t1, t1, _this.get$_processRows()))
        return _null;
    return _this.image;
    },
    _allocateInternalBuffers32b$0() {
    var pixels32, _this = this,
        t1 = _this.webp,
        t2 = t1.width;
    t1 = t2 * t1.height + t2;
    pixels32 = new Uint32Array(t1 + t2 * 16);
    _this._pixels = pixels32;
    _this.__VP8L__pixels8_A = A.NativeUint8List_NativeUint8List$view(pixels32.buffer, 0, null);
    _this._argbCache = t1;
    return true;
    },
    _readTransform$1(transformSize) {
    var t1, type, t2, t3, transform, numColors, bits, _this = this;
    type$.List_int._as(transformSize);
    t1 = _this.br;
    type = t1.readBits$1(2);
    t2 = _this._transformsSeen;
    t3 = B.JSInt_methods._shlPositive$1(1, type);
    if ((t2 & t3) >>> 0 !== 0)
        return false;
    _this._transformsSeen = (t2 | t3) >>> 0;
    transform = new A.VP8LTransform(B.VP8LImageTransformType_0);
    B.JSArray_methods.add$1(_this._transforms, transform);
    if (!(type < 4))
        return A.ioore(B.List_ato, type);
    t2 = B.List_ato[type];
    transform.type = t2;
    transform.xsize = transformSize[0];
    transform.ysize = transformSize[1];
    switch (t2.index) {
        case 0:
        case 1:
        t1 = transform.bits = t1.readBits$1(3) + 2;
        transform.data = _this._decodeImageStream$3(A.VP8L__subSampleSize(transform.xsize, t1), A.VP8L__subSampleSize(transform.ysize, t1), false);
        break;
        case 3:
        numColors = t1.readBits$1(8) + 1;
        if (numColors > 16)
            bits = 0;
        else if (numColors > 4)
            bits = 1;
        else {
            t1 = numColors > 2 ? 2 : 3;
            bits = t1;
        }
        B.JSArray_methods.$indexSet(transformSize, 0, A.VP8L__subSampleSize(transform.xsize, bits));
        transform.bits = bits;
        transform.data = _this._decodeImageStream$3(numColors, 1, false);
        _this._expandColorMap$2(numColors, transform);
        break;
        case 2:
        break;
        default:
        throw A.wrapException(A.ImageException$("Invalid WebP transform type: " + type));
    }
    return true;
    },
    _decodeImageStream$3(xsize, ysize, isLevel0) {
    var t1, t2, transformYsize, transformXsize, sizes, colorCacheBits, numBits, data, _this = this;
    if (isLevel0) {
        for (t1 = _this.br, t2 = type$.JSArray_int, transformYsize = ysize, transformXsize = xsize; t1.readBits$1(1) !== 0;) {
        sizes = A._setArrayType([transformXsize, transformYsize], t2);
        if (!_this._readTransform$1(sizes))
            throw A.wrapException(A.ImageException$("Invalid Transform"));
        transformXsize = sizes[0];
        transformYsize = sizes[1];
        }
        isLevel0 = true;
    } else {
        transformYsize = ysize;
        transformXsize = xsize;
    }
    t1 = _this.br;
    if (t1.readBits$1(1) !== 0) {
        colorCacheBits = t1.readBits$1(4);
        if (!(colorCacheBits >= 1 && colorCacheBits <= 11))
        throw A.wrapException(A.ImageException$("Invalid Color Cache"));
    } else
        colorCacheBits = 0;
    if (!_this._readHuffmanCodes$4(transformXsize, transformYsize, colorCacheBits, isLevel0))
        throw A.wrapException(A.ImageException$("Invalid Huffman Codes"));
    if (colorCacheBits > 0) {
        t1 = B.JSInt_methods._shlPositive$1(1, colorCacheBits);
        _this._colorCacheSize = t1;
        _this._colorCache = new A.VP8LColorCache(new Uint32Array(t1), 32 - colorCacheBits);
    } else
        _this._colorCacheSize = 0;
    t1 = _this.webp;
    t1.width = transformXsize;
    t1.height = transformYsize;
    numBits = _this._huffmanSubsampleBits;
    _this._huffmanXsize = A.VP8L__subSampleSize(transformXsize, numBits);
    _this._huffmanMask = numBits === 0 ? 4294967295 : B.JSInt_methods._shlPositive$1(1, numBits) - 1;
    if (isLevel0) {
        _this._lastPixel = 0;
        return null;
    }
    data = new Uint32Array(transformXsize * transformYsize);
    if (!_this._decodeImageData$5(data, transformXsize, transformYsize, transformYsize, null))
        throw A.wrapException(A.ImageException$("Failed to decode image data."));
    _this._lastPixel = 0;
    return data;
    },
    _decodeImageData$5(data, width, height, lastRow, processFunc) {
    var t1, row, col, htreeGroup, src, srcEnd, srcLast, colorCacheLimit, colorCache, mask, t2, t3, lastCached, t4, t5, metaIndex, code, red, blue, c, t6, t7, key, $length, distSymbol, dist, dst, i, key0, _this = this;
    type$.nullable_void_Function_int._as(processFunc);
    t1 = _this._lastPixel;
    row = B.JSInt_methods.$tdiv(t1, width);
    col = B.JSInt_methods.$mod(t1, width);
    htreeGroup = _this._getHtreeGroupForPos$2(col, row);
    src = _this._lastPixel;
    srcEnd = width * height;
    srcLast = width * lastRow;
    t1 = _this._colorCacheSize;
    colorCacheLimit = 280 + t1;
    colorCache = t1 > 0 ? _this._colorCache : null;
    mask = _this._huffmanMask;
    t1 = data.length;
    t2 = _this.br;
    t3 = processFunc != null;
    lastCached = src;
    while (true) {
        t4 = t2._vp8l_bit_reader$_input;
        t5 = t4.end;
        if (!(!(t4.offset >= t5 && t2.bitPos >= 64) && src < srcLast))
        break;
        if ((col & mask) >>> 0 === 0) {
        metaIndex = _this._getMetaIndex$5(_this._huffmanImage, _this._huffmanXsize, _this._huffmanSubsampleBits, col, row);
        t4 = _this._htreeGroups;
        if (!(metaIndex < t4.length))
            return A.ioore(t4, metaIndex);
        htreeGroup = t4[metaIndex];
        }
        if (t2.bitPos >= 32)
        t2._shiftBytes$0();
        t4 = htreeGroup.htrees;
        t5 = t4.length;
        if (0 >= t5)
        return A.ioore(t4, 0);
        code = t4[0].readSymbol$1(t2);
        if (code < 256) {
        if (1 >= t5)
            return A.ioore(t4, 1);
        red = t4[1].readSymbol$1(t2);
        if (t2.bitPos >= 32)
            t2._shiftBytes$0();
        if (2 >= t5)
            return A.ioore(t4, 2);
        blue = t4[2].readSymbol$1(t2);
        if (3 >= t5)
            return A.ioore(t4, 3);
        c = A.rgbaToUint32(blue, code, red, t4[3].readSymbol$1(t2));
        if (!(src >= 0 && src < t1))
            return A.ioore(data, src);
        data[src] = c;
        ++src;
        ++col;
        if (col >= width) {
            ++row;
            if (B.JSInt_methods.$mod(row, 16) === 0 && t3)
            processFunc.call$1(row);
            if (colorCache != null)
            for (t4 = colorCache.hashShift, t5 = colorCache.colors, t6 = t5.length; lastCached < src;) {
                if (!(lastCached >= 0))
                return A.ioore(data, lastCached);
                t7 = data[lastCached];
                key = B.JSInt_methods._shrReceiverPositive$1(t7 * 506832829 >>> 0, t4);
                if (!(key < t6))
                return A.ioore(t5, key);
                t5[key] = t7;
                ++lastCached;
            }
            col = 0;
        }
        } else if (code < 280) {
        $length = _this._getCopyDistance$1(code - 256);
        if (4 >= t5)
            return A.ioore(t4, 4);
        distSymbol = t4[4].readSymbol$1(t2);
        if (t2.bitPos >= 32)
            t2._shiftBytes$0();
        dist = _this._planeCodeToDistance$2(width, _this._getCopyDistance$1(distSymbol));
        if (src < dist || srcEnd - src < $length)
            return false;
        else {
            dst = src - dist;
            for (i = 0; i < $length; ++i) {
            t4 = src + i;
            t5 = dst + i;
            if (!(t5 >= 0 && t5 < t1))
                return A.ioore(data, t5);
            t5 = data[t5];
            if (!(t4 >= 0 && t4 < t1))
                return A.ioore(data, t4);
            data[t4] = t5;
            }
            src += $length;
        }
        col += $length;
        for (; col >= width;) {
            col -= width;
            ++row;
            if (B.JSInt_methods.$mod(row, 16) === 0 && t3)
            processFunc.call$1(row);
        }
        if (src < srcLast) {
            if ((col & mask) >>> 0 !== 0) {
            metaIndex = _this._getMetaIndex$5(_this._huffmanImage, _this._huffmanXsize, _this._huffmanSubsampleBits, col, row);
            t4 = _this._htreeGroups;
            if (!(metaIndex < t4.length))
                return A.ioore(t4, metaIndex);
            htreeGroup = t4[metaIndex];
            }
            if (colorCache != null)
            for (t4 = colorCache.hashShift, t5 = colorCache.colors, t6 = t5.length; lastCached < src;) {
                if (!(lastCached >= 0 && lastCached < t1))
                return A.ioore(data, lastCached);
                t7 = data[lastCached];
                key = B.JSInt_methods._shrReceiverPositive$1(t7 * 506832829 >>> 0, t4);
                if (!(key < t6))
                return A.ioore(t5, key);
                t5[key] = t7;
                ++lastCached;
            }
        }
        } else if (code < colorCacheLimit) {
        key = code - 280;
        for (; lastCached < src;) {
            colorCache.toString;
            if (!(lastCached >= 0 && lastCached < t1))
            return A.ioore(data, lastCached);
            t4 = data[lastCached];
            key0 = B.JSInt_methods._shrReceiverPositive$1(t4 * 506832829 >>> 0, colorCache.hashShift);
            t5 = colorCache.colors;
            if (!(key0 < t5.length))
            return A.ioore(t5, key0);
            t5[key0] = t4;
            ++lastCached;
        }
        t4 = colorCache.colors;
        t5 = t4.length;
        if (!(key < t5))
            return A.ioore(t4, key);
        t6 = t4[key];
        if (!(src >= 0 && src < t1))
            return A.ioore(data, src);
        data[src] = t6;
        ++src;
        ++col;
        if (col >= width) {
            ++row;
            if (B.JSInt_methods.$mod(row, 16) === 0 && t3)
            processFunc.call$1(row);
            for (t6 = colorCache.hashShift; lastCached < src;) {
            if (!(lastCached >= 0))
                return A.ioore(data, lastCached);
            t7 = data[lastCached];
            key = B.JSInt_methods._shrReceiverPositive$1(t7 * 506832829 >>> 0, t6);
            if (!(key < t5))
                return A.ioore(t4, key);
            t4[key] = t7;
            ++lastCached;
            }
            col = 0;
        }
        } else
        return false;
    }
    if (t3)
        processFunc.call$1(row);
    if (t4.offset >= t5 && t2.bitPos >= 64 && src < srcEnd)
        return false;
    _this._lastPixel = src;
    return true;
    },
    _is8bOptimizable$0() {
    var t1, t2, t3, i, htrees, t4;
    if (this._colorCacheSize > 0)
        return false;
    for (t1 = this._numHtreeGroups, t2 = this._htreeGroups, t3 = t2.length, i = 0; i < t1; ++i) {
        if (!(i < t3))
        return A.ioore(t2, i);
        htrees = t2[i].htrees;
        t4 = htrees.length;
        if (1 >= t4)
        return A.ioore(htrees, 1);
        if (htrees[1].numNodes > 1)
        return false;
        if (2 >= t4)
        return A.ioore(htrees, 2);
        if (htrees[2].numNodes > 1)
        return false;
        if (3 >= t4)
        return A.ioore(htrees, 3);
        if (htrees[3].numNodes > 1)
        return false;
    }
    return true;
    },
    _extractAlphaRows$1(row) {
    var t2, width, cachePixs, di, src, t3, t4, i, t5, t6, _this = this,
        t1 = _this._lastRow,
        numRows = row - t1;
    if (numRows <= 0)
        return;
    t2 = _this.webp;
    _this._applyInverseTransforms$2(numRows, t2.width * t1);
    width = t2.width;
    cachePixs = width * numRows;
    di = width * _this._lastRow;
    t2 = _this._pixels;
    t2.toString;
    t1 = _this._argbCache;
    t1.toString;
    src = A.InputBuffer$(t2, false, null, t1);
    for (t1 = _this._opaque, t2 = src.buffer, t3 = src.offset, t4 = t2.length, i = 0; i < cachePixs; ++i) {
        t1.toString;
        t5 = di + i;
        t6 = t3 + i;
        if (!(t6 >= 0 && t6 < t4))
        return A.ioore(t2, t6);
        t6 = B.JSInt_methods._shrOtherPositive$1(t2[t6], 8);
        if (!(t5 >= 0 && t5 < t1.length))
        return A.ioore(t1, t5);
        t1[t5] = t6 & 255;
    }
    _this._lastRow = row;
    },
    _decodeAlphaData$3(width, height, lastRow) {
    var t2, metaIndex, t3, code, $length, distSymbol, dist, i, t4, t5, _this = this,
        _s8_ = "_pixels8",
        t1 = _this._lastPixel,
        row = B.JSInt_methods.$tdiv(t1, width),
        col = B.JSInt_methods.$mod(t1, width),
        htreeGroup = _this._getHtreeGroupForPos$2(col, row),
        pos = _this._lastPixel,
        end = width * height,
        last = width * lastRow,
        mask = _this._huffmanMask;
    t1 = _this.br;
    while (true) {
        t2 = t1._vp8l_bit_reader$_input;
        if (!(!(t2.offset >= t2.end && t1.bitPos >= 64) && pos < last))
        break;
        if ((col & mask) >>> 0 === 0) {
        metaIndex = _this._getMetaIndex$5(_this._huffmanImage, _this._huffmanXsize, _this._huffmanSubsampleBits, col, row);
        t2 = _this._htreeGroups;
        if (!(metaIndex < t2.length))
            return A.ioore(t2, metaIndex);
        htreeGroup = t2[metaIndex];
        }
        if (t1.bitPos >= 32)
        t1._shiftBytes$0();
        t2 = htreeGroup.htrees;
        t3 = t2.length;
        if (0 >= t3)
        return A.ioore(t2, 0);
        code = t2[0].readSymbol$1(t1);
        if (code < 256) {
        t2 = _this.__VP8L__pixels8_A;
        t2 === $ && A.throwLateFieldNI(_s8_);
        if (!(pos >= 0 && pos < t2.length))
            return A.ioore(t2, pos);
        t2[pos] = code;
        ++pos;
        ++col;
        if (col >= width) {
            ++row;
            if (B.JSInt_methods.$mod(row, 16) === 0)
            _this._extractPalettedAlphaRows$1(row);
            col = 0;
        }
        } else if (code < 280) {
        $length = _this._getCopyDistance$1(code - 256);
        if (4 >= t3)
            return A.ioore(t2, 4);
        distSymbol = t2[4].readSymbol$1(t1);
        if (t1.bitPos >= 32)
            t1._shiftBytes$0();
        dist = _this._planeCodeToDistance$2(width, _this._getCopyDistance$1(distSymbol));
        if (pos >= dist && end - pos >= $length)
            for (t2 = _this.__VP8L__pixels8_A, i = 0; i < $length; ++i) {
            t2 === $ && A.throwLateFieldNI(_s8_);
            t3 = pos + i;
            t4 = t3 - dist;
            t5 = t2.length;
            if (!(t4 >= 0 && t4 < t5))
                return A.ioore(t2, t4);
            t4 = t2[t4];
            if (!(t3 >= 0 && t3 < t5))
                return A.ioore(t2, t3);
            t2[t3] = t4;
            }
        else {
            _this._lastPixel = pos;
            return true;
        }
        pos += $length;
        col += $length;
        for (; col >= width;) {
            col -= width;
            ++row;
            if (B.JSInt_methods.$mod(row, 16) === 0)
            _this._extractPalettedAlphaRows$1(row);
        }
        if (pos < last && (col & mask) >>> 0 !== 0) {
            metaIndex = _this._getMetaIndex$5(_this._huffmanImage, _this._huffmanXsize, _this._huffmanSubsampleBits, col, row);
            t2 = _this._htreeGroups;
            if (!(metaIndex < t2.length))
            return A.ioore(t2, metaIndex);
            htreeGroup = t2[metaIndex];
        }
        } else
        return false;
    }
    _this._extractPalettedAlphaRows$1(row);
    _this._lastPixel = pos;
    return true;
    },
    _extractPalettedAlphaRows$1(row) {
    var pIn, t3, rowsOut, _this = this,
        t1 = _this._lastRow,
        numRows = row - t1,
        t2 = _this.__VP8L__pixels8_A;
    t2 === $ && A.throwLateFieldNI("_pixels8");
    pIn = A.InputBuffer$(t2, false, null, _this.webp.width * t1);
    if (numRows > 0) {
        t2 = _this._opaque;
        t2.toString;
        t3 = _this._ioWidth;
        t3.toString;
        rowsOut = A.InputBuffer$(t2, false, null, t3 * t1);
        t3 = _this._transforms;
        if (0 >= t3.length)
        return A.ioore(t3, 0);
        t3[0].colorIndexInverseTransformAlpha$4(t1, t1 + numRows, pIn, rowsOut);
    }
    _this._lastRow = row;
    },
    _processRows$1(row) {
    var dy, pi, y, x, c, _this = this,
        t1 = _this.webp,
        t2 = t1.width,
        t3 = _this._lastRow,
        numRows = row - t3;
    if (numRows <= 0)
        return;
    _this._applyInverseTransforms$2(numRows, t2 * t3);
    t2 = _this._argbCache;
    t2.toString;
    dy = _this._lastRow;
    pi = t2;
    y = 0;
    for (; y < numRows; ++y, ++dy)
        for (x = 0; x < t1.width; ++x, ++pi) {
        t2 = _this._pixels;
        if (!(pi >= 0 && pi < t2.length))
            return A.ioore(t2, pi);
        c = t2[pi];
        t2 = _this.image.data;
        if (t2 != null)
            t2.setPixelRgba$6(x, dy, c >>> 16 & 255, c >>> 8 & 255, c & 255, c >>> 24 & 255);
        }
    _this._lastRow = row;
    },
    _applyInverseTransforms$2(numRows, rows) {
    var t4, rowsIn, n0, t5, t6, width, start, t7, inStride, src, _this = this,
        t1 = _this._transforms,
        n = t1.length,
        t2 = _this.webp.width,
        startRow = _this._lastRow,
        endRow = startRow + numRows,
        t3 = _this._argbCache;
    t3.toString;
    t4 = _this._pixels;
    t4.toString;
    B.NativeUint32List_methods.setRange$4(t4, t3, t3 + t2 * numRows, t4, rows);
    for (t2 = endRow - startRow, t4 = t2 - 1, rowsIn = rows; n0 = n - 1, n > 0; rowsIn = t3, n = n0) {
        if (!(n0 >= 0 && n0 < t1.length))
        return A.ioore(t1, n0);
        t5 = t1[n0];
        t6 = _this._pixels;
        t6.toString;
        width = t5.xsize;
        switch (t5.type.index) {
        case 2:
            t5.addGreenToBlueAndRed$3(t6, t3, t3 + t2 * width);
            break;
        case 0:
            t5.predictorInverseTransform$4(startRow, endRow, t6, t3);
            if (endRow !== t5.ysize) {
            start = t3 - width;
            B.NativeUint32List_methods.setRange$4(t6, start, start + width, t6, t3 + t4 * width);
            }
            break;
        case 1:
            t5.colorSpaceInverseTransform$4(startRow, endRow, t6, t3);
            break;
        case 3:
            if (rowsIn === t3 && t5.bits > 0) {
            t7 = t5.bits;
            inStride = t2 * B.JSInt_methods._shrOtherPositive$1(width + B.JSInt_methods._shlPositive$1(1, t7) - 1, t7);
            src = t3 + t2 * width - inStride;
            B.NativeUint32List_methods.setRange$4(t6, src, src + inStride, t6, t3);
            t5.colorIndexInverseTransform$6(startRow, endRow, t6, src, t6, t3);
            } else
            t5.colorIndexInverseTransform$6(startRow, endRow, t6, rowsIn, t6, t3);
            break;
        }
    }
    },
    _readHuffmanCodes$4(xSize, ySize, colorCacheBits, allowRecursion) {
    var huffmanPrecision, huffmanXsize, huffmanYsize, huffmanPixs, huffmanImage, numHtreeGroups, i, group, htreeGroups, _i, t1, j, alphabetSize, t2, _this = this;
    if (allowRecursion && _this.br.readBits$1(1) !== 0) {
        huffmanPrecision = _this.br.readBits$1(3) + 2;
        huffmanXsize = A.VP8L__subSampleSize(xSize, huffmanPrecision);
        huffmanYsize = A.VP8L__subSampleSize(ySize, huffmanPrecision);
        huffmanPixs = huffmanXsize * huffmanYsize;
        huffmanImage = _this._decodeImageStream$3(huffmanXsize, huffmanYsize, false);
        _this._huffmanSubsampleBits = huffmanPrecision;
        for (numHtreeGroups = 1, i = 0; i < huffmanPixs; ++i) {
        if (!(i < huffmanImage.length))
            return A.ioore(huffmanImage, i);
        group = huffmanImage[i] >>> 8 & 65535;
        huffmanImage[i] = group;
        if (group >= numHtreeGroups)
            numHtreeGroups = group + 1;
        }
    } else {
        huffmanImage = null;
        numHtreeGroups = 1;
    }
    htreeGroups = J.JSArray_JSArray$allocateFixed(numHtreeGroups, type$.HTreeGroup);
    for (_i = 0; _i < numHtreeGroups; ++_i)
        htreeGroups[_i] = A.HTreeGroup$();
    for (t1 = colorCacheBits > 0, i = 0; i < numHtreeGroups; ++i)
        for (j = 0; j < 5; ++j) {
        alphabetSize = B.List_yTu[j];
        if (j === 0 && t1)
            alphabetSize += B.JSInt_methods._shlPositive$1(1, colorCacheBits);
        if (!(i < numHtreeGroups))
            return A.ioore(htreeGroups, i);
        t2 = htreeGroups[i].htrees;
        if (!(j < t2.length))
            return A.ioore(t2, j);
        if (!_this._readHuffmanCode$2(alphabetSize, t2[j]))
            return false;
        }
    _this._huffmanImage = huffmanImage;
    _this._numHtreeGroups = numHtreeGroups;
    _this.set$_htreeGroups(htreeGroups);
    return true;
    },
    _readHuffmanCode$2(alphabetSize, tree) {
    var t2, symbols, codes, codeLengths, numSymbols, ok, codeLengthCodeLengths, numCodes, i, t3,
        t1 = this.br;
    if (t1.readBits$1(1) !== 0) {
        t2 = type$.JSArray_int;
        symbols = A._setArrayType([0, 0], t2);
        codes = A._setArrayType([0, 0], t2);
        codeLengths = A._setArrayType([0, 0], t2);
        numSymbols = t1.readBits$1(1) + 1;
        B.JSArray_methods.$indexSet(symbols, 0, t1.readBits$1(t1.readBits$1(1) === 0 ? 1 : 8));
        B.JSArray_methods.$indexSet(codes, 0, 0);
        t2 = numSymbols - 1;
        B.JSArray_methods.$indexSet(codeLengths, 0, t2);
        if (numSymbols === 2) {
        B.JSArray_methods.$indexSet(symbols, 1, t1.readBits$1(8));
        B.JSArray_methods.$indexSet(codes, 1, 1);
        B.JSArray_methods.$indexSet(codeLengths, 1, t2);
        }
        ok = tree.buildExplicit$5(codeLengths, codes, symbols, alphabetSize, numSymbols);
    } else {
        codeLengthCodeLengths = new Int32Array(19);
        numCodes = t1.readBits$1(4) + 4;
        if (numCodes > 19)
        return false;
        codeLengths = new Int32Array(alphabetSize);
        for (i = 0; i < numCodes; ++i) {
        t2 = B.List_uSC0[i];
        t3 = t1.readBits$1(3);
        if (!(t2 < 19))
            return A.ioore(codeLengthCodeLengths, t2);
        codeLengthCodeLengths[t2] = t3;
        }
        ok = this._readHuffmanCodeLengths$3(codeLengthCodeLengths, alphabetSize, codeLengths);
        if (ok)
        ok = tree.buildImplicit$2(codeLengths, alphabetSize);
    }
    return ok;
    },
    _readHuffmanCodeLengths$3(codeLengthCodeLengths, numSymbols, codeLengths) {
    var tree, maxSymbol, t2, symbol, prevCodeLen, maxSymbol0, codeLen, symbol0, slot, extraBits, repeatOffset, repeat, $length, repeat0,
        t1 = type$.List_int;
    t1._as(codeLengthCodeLengths);
    t1._as(codeLengths);
    tree = A.HuffmanTree$();
    if (!tree.buildImplicit$2(codeLengthCodeLengths, 19))
        return false;
    t1 = this.br;
    if (t1.readBits$1(1) !== 0) {
        maxSymbol = 2 + t1.readBits$1(2 + 2 * t1.readBits$1(3));
        if (maxSymbol > numSymbols)
        return false;
    } else
        maxSymbol = numSymbols;
    for (t2 = codeLengths.length, symbol = 0, prevCodeLen = 8; symbol < numSymbols; maxSymbol = maxSymbol0) {
        maxSymbol0 = maxSymbol - 1;
        if (maxSymbol === 0)
        break;
        if (t1.bitPos >= 32)
        t1._shiftBytes$0();
        codeLen = tree.readSymbol$1(t1);
        if (codeLen < 16) {
        symbol0 = symbol + 1;
        if (!(symbol >= 0 && symbol < t2))
            return A.ioore(codeLengths, symbol);
        codeLengths[symbol] = codeLen;
        if (codeLen !== 0)
            prevCodeLen = codeLen;
        symbol = symbol0;
        } else {
        slot = codeLen - 16;
        if (!(slot < 3))
            return A.ioore(B.List_2_3_7, slot);
        extraBits = B.List_2_3_7[slot];
        repeatOffset = B.List_3_3_11[slot];
        repeat = t1.readBits$1(extraBits) + repeatOffset;
        if (symbol + repeat > numSymbols)
            return false;
        else {
            $length = codeLen === 16 ? prevCodeLen : 0;
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, symbol = symbol0) {
            symbol0 = symbol + 1;
            if (!(symbol >= 0 && symbol < t2))
                return A.ioore(codeLengths, symbol);
            codeLengths[symbol] = $length;
            }
        }
        }
    }
    return true;
    },
    _getCopyDistance$1(distanceSymbol) {
    var extraBits;
    if (distanceSymbol < 4)
        return distanceSymbol + 1;
    extraBits = B.JSInt_methods._shrOtherPositive$1(distanceSymbol - 2, 1);
    return B.JSInt_methods._shlPositive$1(2 + (distanceSymbol & 1), extraBits) + this.br.readBits$1(extraBits) + 1;
    },
    _planeCodeToDistance$2(xsize, planeCode) {
    var t1, distCode, dist;
    if (planeCode > 120)
        return planeCode - 120;
    else {
        t1 = planeCode - 1;
        if (!(t1 >= 0))
        return A.ioore(B.List_AYZ, t1);
        distCode = B.List_AYZ[t1];
        dist = (distCode >>> 4) * xsize + (8 - (distCode & 15));
        return dist >= 1 ? dist : 1;
    }
    },
    _expandColorMap$2(numColors, transform) {
    var len, t2, i, t3, t4,
        finalNumColors = B.JSInt_methods._shlPositive$1(1, B.JSInt_methods._shrBothPositive$1(8, transform.bits)),
        newColorMap = new Uint32Array(finalNumColors),
        data = A.NativeUint8List_NativeUint8List$view(transform.data.buffer, 0, null),
        newData = A.NativeUint8List_NativeUint8List$view(newColorMap.buffer, 0, null),
        t1 = transform.data;
    if (0 >= t1.length)
        return A.ioore(t1, 0);
    t1 = t1[0];
    if (0 >= finalNumColors)
        return A.ioore(newColorMap, 0);
    newColorMap[0] = t1;
    len = 4 * numColors;
    for (t1 = data.length, t2 = newData.length, i = 4; i < len; ++i) {
        if (!(i < t1))
        return A.ioore(data, i);
        t3 = data[i];
        t4 = i - 4;
        if (!(t4 < t2))
        return A.ioore(newData, t4);
        t4 = newData[t4];
        if (!(i < t2))
        return A.ioore(newData, i);
        newData[i] = t3 + t4 & 255;
    }
    for (len = 4 * finalNumColors; i < len; ++i) {
        if (!(i < t2))
        return A.ioore(newData, i);
        newData[i] = 0;
    }
    transform.data = newColorMap;
    return true;
    },
    _getMetaIndex$5(image, xsize, bits, x, y) {
    var t1;
    if (bits === 0)
        return 0;
    image.toString;
    t1 = xsize * B.JSInt_methods._shrOtherPositive$1(y, bits) + B.JSInt_methods._shrOtherPositive$1(x, bits);
    if (!(t1 < image.length))
        return A.ioore(image, t1);
    return image[t1];
    },
    _getHtreeGroupForPos$2(x, y) {
    var _this = this,
        metaIndex = _this._getMetaIndex$5(_this._huffmanImage, _this._huffmanXsize, _this._huffmanSubsampleBits, x, y),
        t1 = _this._htreeGroups;
    if (!(metaIndex < t1.length))
        return A.ioore(t1, metaIndex);
    return t1[metaIndex];
    },
    set$_htreeGroups(_htreeGroups) {
    this._htreeGroups = type$.List_HTreeGroup._as(_htreeGroups);
    }
};
A.InternalVP8L.prototype = {
    extractAlphaRows$1(row) {
    return this._extractAlphaRows$1(row);
    }
};
A.VP8LBitReader.prototype = {
    prefetchBits$0() {
    var t2, t3, b2,
        t1 = this.bitPos;
    if (t1 < 32) {
        t2 = this._vp8l_bit_reader$_buffer;
        t3 = B.JSInt_methods._shrReceiverPositive$1(t2[0], t1);
        t2 = t2[1];
        if (!(t1 >= 0))
        return A.ioore(B.List_DKo, t1);
        b2 = t3 + ((t2 & B.List_DKo[t1]) >>> 0) * (B.List_DKo[32 - t1] + 1);
    } else {
        t2 = this._vp8l_bit_reader$_buffer;
        b2 = t1 === 32 ? t2[1] : B.JSInt_methods._shrReceiverPositive$1(t2[1], t1 - 32);
    }
    return b2;
    },
    readBits$1(numBits) {
    var t2, _this = this,
        t1 = _this._vp8l_bit_reader$_input;
    if (!(t1.offset >= t1.end && _this.bitPos >= 64) && numBits < 25) {
        t1 = _this.prefetchBits$0();
        if (!(numBits < 33))
        return A.ioore(B.List_DKo, numBits);
        t2 = B.List_DKo[numBits];
        _this.bitPos += numBits;
        _this._shiftBytes$0();
        return (t1 & t2) >>> 0;
    } else
        throw A.wrapException(A.ImageException$("Not enough data in input."));
    },
    _shiftBytes$0() {
    var t4, t5, t6, t7, _this = this,
        t1 = _this._vp8l_bit_reader$_input,
        t2 = _this._vp8l_bit_reader$_buffer,
        t3 = t1.end;
    while (true) {
        t4 = _this.bitPos;
        if (!(t4 >= 8 && t1.offset < t3))
        break;
        t5 = t1.buffer;
        t6 = t1.offset++;
        if (!(t6 >= 0 && t6 < t5.length))
        return A.ioore(t5, t6);
        t6 = t5[t6];
        t5 = t2[0];
        t7 = t2[1];
        t2[0] = (t5 >>> 8) + (t7 & 255) * 16777216;
        t2[1] = t7 >>> 8;
        t2[1] = (t2[1] | t6 * 16777216) >>> 0;
        _this.bitPos = t4 - 8;
    }
    }
};
A.VP8LColorCache.prototype = {};
A.VP8LImageTransformType.prototype = {
    _enumToString$0() {
    return "VP8LImageTransformType." + this._name;
    }
};
A.VP8LTransform.prototype = {
    colorIndexInverseTransformAlpha$4(yStart, yEnd, src, dst) {
    var countMask, bitMask, y, packedPixels, x, t2,
        t1 = this.bits,
        bitsPerPixel = B.JSInt_methods._shrBothPositive$1(8, t1),
        width = this.xsize,
        colorMap = this.data;
    if (bitsPerPixel < 8) {
        countMask = B.JSInt_methods._shlPositive$1(1, t1) - 1;
        bitMask = B.JSInt_methods._shlPositive$1(1, bitsPerPixel) - 1;
        for (y = yStart; y < yEnd; ++y)
        for (packedPixels = 0, x = 0; x < width; ++x) {
            if ((x & countMask) >>> 0 === 0) {
            t1 = src.buffer;
            t2 = src.offset;
            if (!(t2 >= 0 && t2 < t1.length))
                return A.ioore(t1, t2);
            packedPixels = t1[t2];
            src.offset = t2 + 1;
            }
            t1 = (packedPixels & bitMask) >>> 0;
            if (!(t1 >= 0 && t1 < colorMap.length))
            return A.ioore(colorMap, t1);
            t1 = colorMap[t1];
            J.$indexSet$ax(dst.buffer, dst.offset, t1 >>> 8 & 255);
            ++dst.offset;
            packedPixels = B.JSInt_methods._shrOtherPositive$1(packedPixels, bitsPerPixel);
        }
    } else
        for (y = yStart; y < yEnd; ++y)
        for (x = 0; x < width; ++x) {
            t1 = src.buffer;
            t2 = src.offset;
            if (!(t2 >= 0 && t2 < t1.length))
            return A.ioore(t1, t2);
            t1 = t1[t2];
            src.offset = t2 + 1;
            if (t1 >>> 0 !== t1 || t1 >= colorMap.length)
            return A.ioore(colorMap, t1);
            t1 = colorMap[t1];
            J.$indexSet$ax(dst.buffer, dst.offset, t1 >>> 8 & 255);
            ++dst.offset;
        }
    },
    colorIndexInverseTransform$6(yStart, yEnd, inData, src, outData, dst) {
    var countMask, bitMask, t2, y, packedPixels, x, src0, dst0, t3,
        t1 = this.bits,
        bitsPerPixel = B.JSInt_methods._shrBothPositive$1(8, t1),
        width = this.xsize,
        colorMap = this.data;
    if (bitsPerPixel < 8) {
        countMask = B.JSInt_methods._shlPositive$1(1, t1) - 1;
        bitMask = B.JSInt_methods._shlPositive$1(1, bitsPerPixel) - 1;
        for (t1 = outData.length, t2 = inData.length, y = yStart; y < yEnd; ++y)
        for (packedPixels = 0, x = 0; x < width; ++x, dst = dst0) {
            if ((x & countMask) >>> 0 === 0) {
            src0 = src + 1;
            if (!(src >= 0 && src < t2))
                return A.ioore(inData, src);
            packedPixels = inData[src] >>> 8 & 255;
            src = src0;
            }
            dst0 = dst + 1;
            t3 = packedPixels & bitMask;
            if (!(t3 >= 0 && t3 < colorMap.length))
            return A.ioore(colorMap, t3);
            t3 = colorMap[t3];
            if (!(dst >= 0 && dst < t1))
            return A.ioore(outData, dst);
            outData[dst] = t3;
            packedPixels = B.JSInt_methods._shrBothPositive$1(packedPixels, bitsPerPixel);
        }
    } else
        for (t1 = inData.length, t2 = outData.length, y = yStart; y < yEnd; ++y)
        for (x = 0; x < width; ++x, dst = dst0, src = src0) {
            dst0 = dst + 1;
            colorMap.toString;
            src0 = src + 1;
            if (!(src >= 0 && src < t1))
            return A.ioore(inData, src);
            t3 = inData[src] >>> 8 & 255;
            if (!(t3 < colorMap.length))
            return A.ioore(colorMap, t3);
            t3 = colorMap[t3];
            if (!(dst >= 0 && dst < t2))
            return A.ioore(outData, dst);
            outData[dst] = t3;
        }
    },
    colorSpaceInverseTransform$4(yStart, yEnd, outData, data) {
    var y, t2, pred, x, t3, pred0, t4, green, t5, t6, t7, a, b, t8, t9, t10, newRed, d, d0,
        width = this.xsize,
        t1 = this.bits,
        mask = B.JSInt_methods._shlPositive$1(1, t1) - 1,
        tilesPerRow = A.VP8L__subSampleSize(width, t1),
        predRow = B.JSInt_methods._shrOtherPositive$1(yStart, t1) * tilesPerRow;
    for (t1 = outData.length, y = yStart; y < yEnd;) {
        t2 = new Uint8Array(3);
        for (pred = predRow, x = 0; x < width; ++x) {
        if ((x & mask) >>> 0 === 0) {
            t3 = this.data;
            pred0 = pred + 1;
            if (!(pred < t3.length))
            return A.ioore(t3, pred);
            t3 = t3[pred];
            t2[0] = t3 & 255;
            t2[1] = t3 >>> 8 & 255;
            t2[2] = t3 >>> 16 & 255;
            pred = pred0;
        }
        t3 = data + x;
        if (!(t3 < t1))
            return A.ioore(outData, t3);
        t4 = outData[t3];
        green = t4 >>> 8 & 255;
        t5 = t2[0];
        t6 = $.$get$__uint8();
        t6[0] = t5;
        t5 = $.$get$__uint8ToInt8();
        t7 = t5.length;
        if (0 >= t7)
            return A.ioore(t5, 0);
        a = t5[0];
        t6[0] = green;
        if (0 >= t7)
            return A.ioore(t5, 0);
        b = t5[0];
        t8 = $.$get$__int32();
        t8[0] = a * b;
        t9 = $.$get$__int32ToUint32();
        t10 = t9.length;
        if (0 >= t10)
            return A.ioore(t9, 0);
        newRed = (t4 >>> 16 & 255) + (t9[0] >>> 5) >>> 0 & 255;
        t6[0] = t2[1];
        if (0 >= t7)
            return A.ioore(t5, 0);
        a = t5[0];
        t6[0] = green;
        if (0 >= t7)
            return A.ioore(t5, 0);
        t8[0] = a * t5[0];
        if (0 >= t10)
            return A.ioore(t9, 0);
        d = t9[0];
        t6[0] = t2[2];
        if (0 >= t7)
            return A.ioore(t5, 0);
        a = t5[0];
        t6[0] = newRed;
        if (0 >= t7)
            return A.ioore(t5, 0);
        t8[0] = a * t5[0];
        if (0 >= t10)
            return A.ioore(t9, 0);
        d0 = t9[0];
        outData[t3] = (t4 & 4278255360 | newRed << 16 | ((t4 & 255) + (d >>> 5) >>> 0) + (d0 >>> 5) >>> 0 & 255) >>> 0;
        }
        data += width;
        ++y;
        if ((y & mask) >>> 0 === 0)
        predRow += tilesPerRow;
    }
    },
    predictorInverseTransform$4(yStart, yEnd, outData, data) {
    var t1, t2, x, t3, mask, tilesPerRow, predModeBase, y, predModeSrc, predFunc, predModeSrc0, _this = this,
        width = _this.xsize;
    if (yStart === 0) {
        t1 = data - 1;
        t2 = outData.length;
        if (!(t1 >= 0 && t1 < t2))
        return A.ioore(outData, t1);
        A.VP8LTransform__addPixelsEq(outData, data, 4278190080);
        for (x = 1; x < width; ++x) {
        t1 = data + x;
        t3 = t1 - 1;
        if (!(t3 < t2))
            return A.ioore(outData, t3);
        A.VP8LTransform__addPixelsEq(outData, t1, outData[t3]);
        }
        data += width;
        ++yStart;
    }
    t1 = _this.bits;
    mask = B.JSInt_methods._shlPositive$1(1, t1) - 1;
    tilesPerRow = A.VP8L__subSampleSize(width, t1);
    predModeBase = B.JSInt_methods._shrOtherPositive$1(yStart, t1) * tilesPerRow;
    for (t1 = outData.length, y = yStart; y < yEnd;) {
        t2 = data - 1;
        if (!(t2 >= 0 && t2 < t1))
        return A.ioore(outData, t2);
        t2 = data - width;
        if (!(t2 >= 0 && t2 < t1))
        return A.ioore(outData, t2);
        A.VP8LTransform__addPixelsEq(outData, data, outData[t2]);
        t2 = _this.data;
        predModeSrc = predModeBase + 1;
        if (!(predModeBase < t2.length))
        return A.ioore(t2, predModeBase);
        predFunc = $.VP8LTransform__predictors[t2[predModeBase] >>> 8 & 15];
        for (x = 1; x < width; ++x) {
        if ((x & mask) >>> 0 === 0) {
            t2 = _this.data;
            predModeSrc0 = predModeSrc + 1;
            if (!(predModeSrc < t2.length))
            return A.ioore(t2, predModeSrc);
            predFunc = $.VP8LTransform__predictors[t2[predModeSrc] >>> 8 & 15];
            predModeSrc = predModeSrc0;
        }
        t2 = data + x;
        t3 = t2 - 1;
        if (!(t3 < t1))
            return A.ioore(outData, t3);
        A.VP8LTransform__addPixelsEq(outData, t2, predFunc.call$3(outData, outData[t3], t2 - width));
        }
        data += width;
        ++y;
        if ((y & mask) >>> 0 === 0)
        predModeBase += tilesPerRow;
    }
    },
    addGreenToBlueAndRed$3(pixels, data, dataEnd) {
    var t1, argb, green, data0;
    for (t1 = pixels.length; data < dataEnd; data = data0) {
        if (!(data < t1))
        return A.ioore(pixels, data);
        argb = pixels[data];
        green = argb >>> 8 & 255;
        data0 = data + 1;
        pixels[data] = (argb & 4278255360 | (argb & 16711935) + (green << 16 | green) & 16711935) >>> 0;
    }
    }
};
A.WebPAlpha.prototype = {
    get$isValid() {
    var _this = this,
        t1 = _this.method;
    if (t1 > 1 || _this.filter >= 4 || _this.preProcessing > 1 || _this.rsrv !== 0)
        return false;
    return true;
    },
    decode$3(row, numRows, output) {
    var t1, unfilterFunc, offset, t2, t3, t4, _this = this;
    if (!_this.get$isValid())
        return false;
    t1 = _this.filter;
    if (!(t1 < 4))
        return A.ioore(B.List_HHa, t1);
    unfilterFunc = B.List_HHa[t1];
    if (_this.method === 0) {
        t1 = _this.width;
        offset = row * t1;
        t2 = _this.input;
        B.NativeUint8List_methods.setRange$4(output, offset, numRows * t1, t2.buffer, t2.offset - t2.start + offset);
    } else {
        t1 = row + numRows;
        t2 = _this.__WebPAlpha__vp8l_A;
        t2 === $ && A.throwLateFieldNI("_vp8l");
        t2._opaque = output;
        t3 = t2.webp;
        if (_this._use8bDecode)
        t1 = t2._decodeAlphaData$3(t3.width, t3.height, t1);
        else {
        t4 = t2._pixels;
        t4.toString;
        t2 = t2._decodeImageData$5(t4, t3.width, t3.height, t1, type$.void_Function_int._as(t2.get$extractAlphaRows()));
        t1 = t2;
        }
        if (!t1)
        return false;
    }
    if (unfilterFunc != null) {
        t1 = _this.width;
        unfilterFunc.call$6(t1, _this.height, t1, row, numRows, output);
    }
    if (_this.preProcessing === 1)
        if (!_this._dequantizeLevels$5(output, _this.width, _this.height, row, numRows))
        return false;
    if (row + numRows === _this.height)
        _this.isAlphaDecoded = true;
    return true;
    },
    _dequantizeLevels$5(data, width, height, row, numRows) {
    if (width <= 0 || height <= 0 || row < 0 || numRows < 0 || row + numRows > height)
        return false;
    return true;
    }
};
A.WebPFrame.prototype = {
    WebPFrame$2(input, size) {
    var _this = this,
        b = input.readByte$0();
    _this._reserved = 0;
    _this.__WebPFrame_clearFrame_A = (b & 1) !== 0;
    _this.__WebPFrame__framePosition_A = input.offset - input.start;
    _this.__WebPFrame__frameSize_A = size - 16;
    }
};
A.InternalWebPFrame.prototype = {};
A.HuffmanTree.prototype = {
    _init$1(numLeaves) {
    var t1, t2, _this = this;
    if (numLeaves === 0)
        return false;
    t1 = (numLeaves << 1 >>> 0) - 1;
    _this.maxNodes = t1;
    t1 = t1 << 1 >>> 0;
    t2 = _this.__HuffmanTree_tree_A = new Int32Array(t1);
    if (1 >= t1)
        return A.ioore(t2, 1);
    t2[1] = -1;
    _this.numNodes = 1;
    B.NativeUint8List_methods.fillRange$3(_this._lutBits, 0, 128, 255);
    return true;
    },
    buildImplicit$2(codeLengths, codeLengthsSize) {
    var t1, numSymbols, rootSymbol, symbol, codes, t2, _this = this;
    type$.List_int._as(codeLengths);
    for (t1 = codeLengths.length, numSymbols = 0, rootSymbol = 0, symbol = 0; symbol < codeLengthsSize; ++symbol) {
        if (!(symbol < t1))
        return A.ioore(codeLengths, symbol);
        if (codeLengths[symbol] > 0) {
        ++numSymbols;
        rootSymbol = symbol;
        }
    }
    if (!_this._init$1(numSymbols))
        return false;
    if (numSymbols === 1) {
        if (rootSymbol < 0 || rootSymbol >= codeLengthsSize)
        return false;
        return _this._addSymbol$3(rootSymbol, 0, 0);
    }
    codes = new Int32Array(codeLengthsSize);
    if (!_this._huffmanCodeLengthsToCodes$3(codeLengths, codeLengthsSize, codes))
        return false;
    for (symbol = 0; symbol < codeLengthsSize; ++symbol) {
        if (!(symbol < t1))
        return A.ioore(codeLengths, symbol);
        t2 = codeLengths[symbol];
        if (t2 > 0)
        if (!_this._addSymbol$3(symbol, codes[symbol], t2))
            return false;
    }
    return _this.numNodes === _this.maxNodes;
    },
    buildExplicit$5(codeLengths, codes, symbols, maxSymbol, numSymbols) {
    var i, t2, _this = this,
        t1 = type$.List_int;
    t1._as(codeLengths);
    t1._as(codes);
    t1._as(symbols);
    if (!_this._init$1(numSymbols))
        return false;
    for (i = 0; i < numSymbols; ++i) {
        if (!(i < 2))
        return A.ioore(codes, i);
        t1 = codes[i];
        if (t1 !== -1) {
        t2 = symbols[i];
        if (t2 >= maxSymbol)
            return _this.numNodes === _this.maxNodes;
        if (!_this._addSymbol$3(t2, t1, codeLengths[i]))
            return _this.numNodes === _this.maxNodes;
        }
    }
    return _this.numNodes === _this.maxNodes;
    },
    readSymbol$1(br) {
    var node, t1, t2, _this = this,
        bits = br.prefetchBits$0(),
        newBitPos = br.bitPos,
        lutIx = bits & 127,
        lutBits = _this._lutBits[lutIx];
    if (lutBits <= 7) {
        br.bitPos = newBitPos + lutBits;
        return _this._lutSymbol[lutIx];
    }
    node = _this._lutJump[lutIx];
    newBitPos += 7;
    bits = bits >>> 7;
    do {
        t1 = _this.__HuffmanTree_tree_A;
        t1 === $ && A.throwLateFieldNI("tree");
        t2 = (node << 1 >>> 0) + 1;
        if (!(t2 < t1.length))
        return A.ioore(t1, t2);
        node = node + t1[t2] + (bits & 1);
        bits = bits >>> 1;
        ++newBitPos;
    } while (_this._nodeIsNotLeaf$1(node));
    br.bitPos = newBitPos;
    t1 = _this.__HuffmanTree_tree_A;
    t2 = node << 1 >>> 0;
    if (!(t2 < t1.length))
        return A.ioore(t1, t2);
    return t1[t2];
    },
    _addSymbol$3(symbol, code, codeLength) {
    var baseCode, t1, t2, t3, i, idx, step, node, codeLength0, t4, t5, t6, _this = this;
    if (codeLength <= 7) {
        baseCode = _this._reverseBitsShort$2(code, codeLength);
        for (t1 = B.JSInt_methods.$shl(1, 7 - codeLength), t2 = _this._lutSymbol, t3 = _this._lutBits, i = 0; i < t1; ++i) {
        idx = (baseCode | B.JSInt_methods.$shl(i, codeLength)) >>> 0;
        if (!(idx < 128))
            return A.ioore(t2, idx);
        t2[idx] = symbol;
        t3[idx] = codeLength;
        }
    } else
        baseCode = _this._reverseBitsShort$2(B.JSInt_methods.$shr(code, codeLength - 7), 7);
    for (t1 = _this._lutJump, step = 7, node = 0; codeLength0 = codeLength - 1, codeLength > 0; codeLength = codeLength0) {
        t2 = _this.maxNodes;
        if (node >= t2)
        return false;
        t3 = _this.__HuffmanTree_tree_A;
        t3 === $ && A.throwLateFieldNI("tree");
        t4 = (node << 1 >>> 0) + 1;
        t5 = t3.length;
        if (!(t4 < t5))
        return A.ioore(t3, t4);
        t6 = t3[t4];
        if (t6 < 0) {
        t6 = _this.numNodes;
        if (t6 === t2)
            return false;
        t3[t4] = t6 - node;
        _this.numNodes = t6 + 2;
        t2 = (t6 << 1 >>> 0) + 1;
        if (!(t2 < t5))
            return A.ioore(t3, t2);
        t3[t2] = -1;
        t6 = (t6 + 1 << 1 >>> 0) + 1;
        if (!(t6 < t5))
            return A.ioore(t3, t6);
        t3[t6] = -1;
        } else if (t6 === 0)
        return false;
        node += t3[t4] + (B.JSInt_methods.$shr(code, codeLength0) & 1);
        --step;
        if (step === 0) {
        if (!(baseCode < 128))
            return A.ioore(t1, baseCode);
        t1[baseCode] = node;
        }
    }
    if (_this._nodeIsEmpty$1(node))
        _this._nodeSetChildren$2(node, 0);
    else if (_this._nodeIsNotLeaf$1(node))
        return false;
    t1 = _this.__HuffmanTree_tree_A;
    t1 === $ && A.throwLateFieldNI("tree");
    t2 = node << 1 >>> 0;
    if (!(t2 < t1.length))
        return A.ioore(t1, t2);
    t1[t2] = symbol;
    return true;
    },
    _reverseBitsShort$2(bits, numBits) {
    var t1 = B.List_cGl[bits & 15],
        t2 = B.JSInt_methods._shrOtherPositive$1(bits, 4);
    if (!(t2 < 16))
        return A.ioore(B.List_cGl, t2);
    return B.JSInt_methods._shrReceiverPositive$1((t1 << 4 | B.List_cGl[t2]) >>> 0, 8 - numBits);
    },
    _nodeSetChildren$2(node, children) {
    var t2,
        t1 = this.__HuffmanTree_tree_A;
    t1 === $ && A.throwLateFieldNI("tree");
    t2 = (node << 1 >>> 0) + 1;
    if (!(t2 < t1.length))
        return A.ioore(t1, t2);
    t1[t2] = children;
    },
    _nodeIsNotLeaf$1(node) {
    var t2,
        t1 = this.__HuffmanTree_tree_A;
    t1 === $ && A.throwLateFieldNI("tree");
    t2 = (node << 1 >>> 0) + 1;
    if (!(t2 < t1.length))
        return A.ioore(t1, t2);
    return t1[t2] !== 0;
    },
    _nodeIsEmpty$1(node) {
    var t2,
        t1 = this.__HuffmanTree_tree_A;
    t1 === $ && A.throwLateFieldNI("tree");
    t2 = (node << 1 >>> 0) + 1;
    if (!(t2 < t1.length))
        return A.ioore(t1, t2);
    return t1[t2] < 0;
    },
    _huffmanCodeLengthsToCodes$3(codeLengths, codeLengthsSize, huffCodes) {
    var codeLengthHist, nextCodes, symbol, maxCodeLength, maxCodeLength0, t2, t3, codeLen, currCode, t4,
        t1 = type$.List_int;
    t1._as(codeLengths);
    t1._as(huffCodes);
    codeLengthHist = new Int32Array(16);
    nextCodes = new Int32Array(16);
    for (t1 = codeLengths.length, symbol = 0, maxCodeLength = 0; symbol < codeLengthsSize; ++symbol) {
        if (!(symbol < t1))
        return A.ioore(codeLengths, symbol);
        maxCodeLength0 = codeLengths[symbol];
        if (maxCodeLength0 > maxCodeLength)
        maxCodeLength = maxCodeLength0;
    }
    if (maxCodeLength > 15)
        return false;
    for (symbol = 0; symbol < codeLengthsSize; ++symbol) {
        if (!(symbol < t1))
        return A.ioore(codeLengths, symbol);
        t2 = codeLengths[symbol];
        if (!(t2 >= 0 && t2 < 16))
        return A.ioore(codeLengthHist, t2);
        t3 = codeLengthHist[t2];
        if (!(t2 < 16))
        return A.ioore(codeLengthHist, t2);
        codeLengthHist[t2] = t3 + 1;
    }
    if (0 >= 16)
        return A.ioore(codeLengthHist, 0);
    codeLengthHist[0] = 0;
    if (0 >= 16)
        return A.ioore(nextCodes, 0);
    nextCodes[0] = -1;
    for (codeLen = 1, currCode = 0; codeLen <= maxCodeLength; ++codeLen) {
        currCode = currCode + codeLengthHist[codeLen - 1] << 1 >>> 0;
        if (!(codeLen < 16))
        return A.ioore(nextCodes, codeLen);
        nextCodes[codeLen] = currCode;
    }
    for (t2 = huffCodes.length, symbol = 0; symbol < codeLengthsSize; ++symbol) {
        if (!(symbol < t1))
        return A.ioore(codeLengths, symbol);
        t3 = codeLengths[symbol];
        if (t3 > 0) {
        if (!(t3 < 16))
            return A.ioore(nextCodes, t3);
        t4 = nextCodes[t3];
        if (!(t3 < 16))
            return A.ioore(nextCodes, t3);
        nextCodes[t3] = t4 + 1;
        if (!(symbol < t2))
            return A.ioore(huffCodes, symbol);
        huffCodes[symbol] = t4;
        } else {
        if (!(symbol < t2))
            return A.ioore(huffCodes, symbol);
        huffCodes[symbol] = -1;
        }
    }
    return true;
    }
};
A.HTreeGroup.prototype = {};
A.WebPFormat.prototype = {
    _enumToString$0() {
    return "WebPFormat." + this._name;
    }
};
A.WebPInfo.prototype = {$isDecodeInfo: 1};
A.InternalWebPInfo.prototype = {};
A.WebPDecoder.prototype = {
    isValidFile$1(bytes) {
    var t1 = A.InputBuffer$(type$.List_int._as(bytes), false, null, 0);
    this._webp_decoder$_input = t1;
    if (!this._getHeader$1(t1))
        return false;
    return true;
    },
    startDecode$1(bytes) {
    var t2, _this = this, _null = null,
        t1 = A.InputBuffer$(type$.List_int._as(bytes), false, _null, 0);
    _this._webp_decoder$_input = t1;
    if (!_this._getHeader$1(t1))
        return _null;
    t1 = new A.InternalWebPInfo(B.WebPFormat_0, A._setArrayType([], type$.JSArray_WebPFrame));
    _this._webp_decoder$_info = t1;
    t2 = _this._webp_decoder$_input;
    t2.toString;
    if (!_this._webp_decoder$_getInfo$2(t2, t1))
        return _null;
    t1 = _this._webp_decoder$_info;
    switch (t1.format.index) {
        case 3:
        t1._numFrames = t1.frames.length;
        return t1;
        case 2:
        t2 = _this._webp_decoder$_input;
        t2.toString;
        t2.offset = t1._vp8Position;
        if (!A.VP8L$(t2, t1).decodeHeader$0())
            return _null;
        t1 = _this._webp_decoder$_info;
        t1._numFrames = t1.frames.length;
        return t1;
        case 1:
        t2 = _this._webp_decoder$_input;
        t2.toString;
        t2.offset = t1._vp8Position;
        if (!A.VP8$(t2, t1).decodeHeader$0())
            return _null;
        t1 = _this._webp_decoder$_info;
        t1._numFrames = t1.frames.length;
        return t1;
        case 0:
        throw A.wrapException(A.ImageException$("Unknown format for WebP"));
    }
    },
    decodeFrame$1(frame) {
    var t2, t3, f, data, _this = this,
        t1 = _this._webp_decoder$_input;
    if (t1 == null || _this._webp_decoder$_info == null)
        return null;
    t2 = _this._webp_decoder$_info;
    if (t2.hasAnimation) {
        t2 = t2.frames;
        t3 = t2.length;
        if (frame >= t3 || false)
        return null;
        if (!(frame < t3))
        return A.ioore(t2, frame);
        f = t2[frame];
        t1.toString;
        t2 = f.__WebPFrame__frameSize_A;
        t2 === $ && A.throwLateFieldNI("_frameSize");
        t3 = f.__WebPFrame__framePosition_A;
        t3 === $ && A.throwLateFieldNI("_framePosition");
        return _this._decodeFrame$2$frame(t1.subset$2$position(t2, t3), frame);
    }
    t3 = t2.format;
    if (t3 === B.WebPFormat_2) {
        t1.toString;
        data = t1.subset$2$position(t2._vp8Size, t2._vp8Position);
        t1 = _this._webp_decoder$_info;
        t1.toString;
        return A.VP8L$(data, t1).decode$0();
    } else if (t3 === B.WebPFormat_1) {
        t1.toString;
        data = t1.subset$2$position(t2._vp8Size, t2._vp8Position);
        t1 = _this._webp_decoder$_info;
        t1.toString;
        return A.VP8$(data, t1).decode$0();
    }
    return null;
    },
    decode$2$frame(bytes, frame) {
    var lastImage, firstImage, i, t1, image, t2, t3, t4, _this = this, _null = null;
    if (_this.startDecode$1(type$.List_int._as(bytes)) == null)
        return _null;
    if (!_this._webp_decoder$_info.hasAnimation || false)
        return _this.decodeFrame$1(0);
    for (lastImage = _null, firstImage = lastImage, i = 0; t1 = _this._webp_decoder$_info, i < t1._numFrames; ++i) {
        t1 = t1.frames;
        if (!(i < t1.length))
        return A.ioore(t1, i);
        frame = t1[i];
        image = _this.decodeFrame$1(i);
        if (image == null)
        continue;
        image.frameDuration = frame.duration;
        if (firstImage == null || lastImage == null) {
        t1 = _this._webp_decoder$_info;
        t2 = t1.width;
        t1 = t1.height;
        t3 = image.get$numChannels();
        t4 = image.data;
        t4 = t4 == null ? _null : t4.get$format();
        firstImage = A.Image$(_null, _null, t4 == null ? B.Format_3 : t4, 0, B.FrameType_2, t1, _null, 0, t3, _null, t2, false);
        lastImage = firstImage;
        } else {
        lastImage = A.Image$from(lastImage, false, false);
        t1 = frame.__WebPFrame_clearFrame_A;
        t1 === $ && A.throwLateFieldNI("clearFrame");
        if (t1) {
            t1 = lastImage.data;
            if (t1 != null)
            t1.clear$1(0, _null);
        }
        }
        A.compositeImage(lastImage, image, B.BlendMode_1, frame.x, frame.y);
        firstImage.addFrame$1(lastImage);
    }
    return firstImage;
    },
    _decodeFrame$2$frame(input, frame) {
    var t2, f, data, _null = null,
        t1 = A._setArrayType([], type$.JSArray_WebPFrame),
        webp = new A.InternalWebPInfo(B.WebPFormat_0, t1);
    if (!this._webp_decoder$_getInfo$2(input, webp))
        return _null;
    if (webp.format === B.WebPFormat_0)
        return _null;
    webp._numFrames = this._webp_decoder$_info._numFrames;
    if (webp.hasAnimation) {
        t2 = t1.length;
        if (frame >= t2 || false)
        return _null;
        if (!(frame < t2))
        return A.ioore(t1, frame);
        f = t1[frame];
        t1 = f.__WebPFrame__frameSize_A;
        t1 === $ && A.throwLateFieldNI("_frameSize");
        t2 = f.__WebPFrame__framePosition_A;
        t2 === $ && A.throwLateFieldNI("_framePosition");
        return this._decodeFrame$2$frame(input.subset$2$position(t1, t2), frame);
    } else {
        data = input.subset$2$position(webp._vp8Size, webp._vp8Position);
        t1 = webp.format;
        if (t1 === B.WebPFormat_2)
        return A.VP8L$(data, webp).decode$0();
        else if (t1 === B.WebPFormat_1)
        return A.VP8$(data, webp).decode$0();
    }
    return _null;
    },
    _getHeader$1(input) {
    if (input.readString$1(4) !== "RIFF")
        return false;
    input.readUint32$0();
    if (input.readString$1(4) !== "WEBP")
        return false;
    return true;
    },
    _webp_decoder$_getInfo$2(input, webp) {
    var tag, size, diskSize, t3, p, t4, t5, t6, c, bytes, remainder,
        t1 = input.start,
        t2 = input.end,
        found = false;
    while (true) {
        if (!(input.offset < t2 && !found))
        break;
        tag = input.readString$1(4);
        size = input.readUint32$0();
        diskSize = size + 1 >>> 1 << 1 >>> 0;
        t3 = input.offset;
        p = t3 - t1;
        switch (tag) {
        case "VP8X":
            if (!this._getVp8xInfo$2(input, webp))
            return false;
            break;
        case "VP8 ":
            webp._vp8Position = p;
            webp._vp8Size = size;
            webp.format = B.WebPFormat_1;
            found = true;
            break;
        case "VP8L":
            webp._vp8Position = p;
            webp._vp8Size = size;
            webp.format = B.WebPFormat_2;
            found = true;
            break;
        case "ALPH":
            t4 = input.buffer;
            t5 = input.bigEndian;
            t6 = t4.length;
            t4 = new A.InputBuffer(t4, 0, t6, 0, t5);
            webp._webp_info$_alphaData = t4;
            t4.offset = t3;
            input.offset += diskSize;
            break;
        case "ANIM":
            webp.format = B.WebPFormat_3;
            c = input.readUint32$0();
            t3 = new Uint8Array(4);
            if (0 >= 4)
            return A.ioore(t3, 0);
            t3[0] = c >>> 8 & 255;
            if (1 >= 4)
            return A.ioore(t3, 1);
            t3[1] = c >>> 16 & 255;
            if (2 >= 4)
            return A.ioore(t3, 2);
            t3[2] = c >>> 24 & 255;
            if (3 >= 4)
            return A.ioore(t3, 3);
            t3[3] = c & 255;
            input.readUint16$0();
            break;
        case "ANMF":
            if (!this._getAnimFrameInfo$3(input, webp, size))
            return false;
            break;
        case "ICCP":
            webp.toString;
            bytes = input.subset$1(size);
            input.offset = input.offset + (bytes.end - bytes.offset);
            bytes.toUint8List$0();
            break;
        case "EXIF":
            webp.toString;
            input.readString$1(size);
            break;
        case "XMP ":
            webp.toString;
            input.readString$1(size);
            break;
        default:
            input.offset = t3 + diskSize;
            break;
        }
        t3 = input.offset;
        remainder = diskSize - (t3 - t1 - p);
        if (remainder > 0)
        input.offset = t3 + remainder;
    }
    if (!webp.hasAlpha)
        webp.hasAlpha = webp._webp_info$_alphaData != null;
    return webp.format !== B.WebPFormat_0;
    },
    _getVp8xInfo$2(input, webp) {
    var t1, t2, t3, t4,
        b = input.readByte$0();
    if ((b & 192) !== 0)
        return false;
    t1 = B.JSInt_methods._shrOtherPositive$1(b, 4);
    t2 = B.JSInt_methods._shrOtherPositive$1(b, 1);
    if ((b & 1) !== 0)
        return false;
    if (input.readUint24$0() !== 0)
        return false;
    t3 = input.readUint24$0();
    t4 = input.readUint24$0();
    webp.width = t3 + 1;
    webp.height = t4 + 1;
    webp.hasAnimation = (t2 & 1) !== 0;
    webp.hasAlpha = (t1 & 1) !== 0;
    return true;
    },
    _getAnimFrameInfo$3(input, webp, size) {
    var frame,
        t1 = input.readUint24$0(),
        t2 = input.readUint24$0();
    input.readUint24$0();
    input.readUint24$0();
    frame = new A.InternalWebPFrame(t1 * 2, t2 * 2, input.readUint24$0());
    frame.WebPFrame$2(input, size);
    if (frame._reserved !== 0)
        return false;
    B.JSArray_methods.add$1(webp.frames, frame);
    return true;
    }
};
A.IccProfileCompression.prototype = {
    _enumToString$0() {
    return "IccProfileCompression." + this._name;
    }
};
A.IccProfile.prototype = {
    compressed$0() {
    var t1, _this = this;
    if (_this.compression === B.IccProfileCompression_1)
        return _this.data;
    t1 = type$.Uint8List._as(B.C_ZLibEncoder.encode$1(_this.data));
    _this.data = t1;
    _this.compression = B.IccProfileCompression_1;
    return t1;
    }
};
A.FrameType.prototype = {
    _enumToString$0() {
    return "FrameType." + this._name;
    }
};
A.Image.prototype = {
    get$frames() {
    var value = this.__Image_frames_AI;
    if (value === $) {
        value = A._setArrayType([], type$.JSArray_Image);
        this.set$__Image_frames_AI(value);
    }
    return value;
    },
    Image$fromResized$4$height$noAnimation$width(other, height, noAnimation, width) {
    var numFrames, fi, value, _this = this,
        t1 = other.get$format(),
        t2 = other.get$numChannels(),
        t3 = other.data;
    _this._createImageData$5(width, height, t1, t2, t3 == null ? null : t3.get$palette());
    t1 = other.extraChannels;
    if (t1 != null)
        _this.set$extraChannels(A.LinkedHashMap_LinkedHashMap$from(t1, type$.String, type$.ImageData));
    t1 = other.textData;
    if (t1 != null) {
        t2 = type$.String;
        _this.set$textData(A.LinkedHashMap_LinkedHashMap$from(t1, t2, t2));
    }
    B.JSArray_methods.add$1(_this.get$frames(), _this);
    if (!noAnimation) {
        numFrames = other.get$frames().length;
        for (t1 = type$.JSArray_Image, fi = 1; fi < numFrames; ++fi) {
        value = other.__Image_frames_AI;
        if (value === $) {
            value = A._setArrayType([], t1);
            other.set$__Image_frames_AI(value);
        }
        if (!(fi < value.length))
            return A.ioore(value, fi);
        _this.addFrame$1(A.Image$fromResized(value[fi], height, false, width));
        }
    }
    },
    Image$from$3$noAnimation$noPixels(other, noAnimation, noPixels) {
    var t2, numFrames, fi, value, _this = this,
        t1 = other.extraChannels;
    if (t1 != null)
        _this.set$extraChannels(A.LinkedHashMap_LinkedHashMap$from(t1, type$.String, type$.ImageData));
    t1 = other.textData;
    if (t1 != null) {
        t2 = type$.String;
        _this.set$textData(A.LinkedHashMap_LinkedHashMap$from(t1, t2, t2));
    }
    B.JSArray_methods.add$1(_this.get$frames(), _this);
    if (!noAnimation && other.get$frames().length > 1) {
        numFrames = other.get$frames().length;
        for (t1 = type$.JSArray_Image, fi = 1; fi < numFrames; ++fi) {
        value = other.__Image_frames_AI;
        if (value === $) {
            value = A._setArrayType([], t1);
            other.set$__Image_frames_AI(value);
        }
        if (!(fi < value.length))
            return A.ioore(value, fi);
        _this.addFrame$1(A.Image$from(value[fi], false, false));
        }
    }
    },
    addFrame$1(image) {
    var _this = this;
    if (image == null)
        image = A.Image$from(_this, true, true);
    image.frameIndex = _this.get$frames().length;
    if (B.JSArray_methods.get$last(_this.get$frames()) !== image)
        B.JSArray_methods.add$1(_this.get$frames(), image);
    return image;
    },
    addFrame$0() {
    return this.addFrame$1(null);
    },
    _createImageData$5(width, height, format, numChannels, palette) {
    var t1, t2, _this = this;
    switch (format.index) {
        case 0:
        if (palette == null) {
            t1 = B.JSNumber_methods.ceil$0(width * numChannels / 8);
            t2 = new A.ImageDataUint1($, t1, null, width, height, numChannels);
            t1 = Math.max(t1 * height, 1);
            t2.__ImageDataUint1_data_F = new Uint8Array(t1);
            _this.data = t2;
        } else {
            t1 = B.JSNumber_methods.ceil$0(width / 8);
            t2 = new A.ImageDataUint1($, t1, palette, width, height, 1);
            t1 = Math.max(t1 * height, 1);
            t2.__ImageDataUint1_data_F = new Uint8Array(t1);
            _this.data = t2;
        }
        break;
        case 1:
        if (palette == null) {
            t1 = B.JSNumber_methods.ceil$0(width * (numChannels << 1 >>> 0) / 8);
            t2 = new A.ImageDataUint2($, t1, null, width, height, numChannels);
            t1 = Math.max(t1 * height, 1);
            t2.__ImageDataUint2_data_F = new Uint8Array(t1);
            _this.data = t2;
        } else {
            t1 = B.JSNumber_methods.ceil$0(width / 4);
            t2 = new A.ImageDataUint2($, t1, palette, width, height, 1);
            t1 = Math.max(t1 * height, 1);
            t2.__ImageDataUint2_data_F = new Uint8Array(t1);
            _this.data = t2;
        }
        break;
        case 2:
        if (palette == null) {
            if (numChannels === 2)
            t1 = width;
            else if (numChannels === 4)
            t1 = width * 2;
            else
            t1 = numChannels === 3 ? B.JSNumber_methods.ceil$0(width * 1.5) : B.JSNumber_methods.ceil$0(width / 2);
            t2 = new A.ImageDataUint4($, t1, null, width, height, numChannels);
            t1 = Math.max(t1 * height, 1);
            t2.__ImageDataUint4_data_F = new Uint8Array(t1);
            _this.data = t2;
        } else {
            t1 = B.JSNumber_methods.ceil$0(width / 2);
            t2 = new A.ImageDataUint4($, t1, palette, width, height, 1);
            t1 = Math.max(t1 * height, 1);
            t2.__ImageDataUint4_data_F = new Uint8Array(t1);
            _this.data = t2;
        }
        break;
        case 3:
        if (palette == null)
            _this.data = A.ImageDataUint8$(width, height, numChannels);
        else
            _this.data = new A.ImageDataUint8(new Uint8Array(width * height), palette, width, height, 1);
        break;
        case 4:
        _this.data = new A.ImageDataUint16(new Uint16Array(width * height * numChannels), width, height, numChannels);
        break;
        case 5:
        _this.data = A.ImageDataUint32$(width, height, numChannels);
        break;
        case 6:
        _this.data = new A.ImageDataInt8(new Int8Array(width * height * numChannels), width, height, numChannels);
        break;
        case 7:
        _this.data = new A.ImageDataInt16(new Int16Array(width * height * numChannels), width, height, numChannels);
        break;
        case 8:
        _this.data = new A.ImageDataInt32(new Int32Array(width * height * numChannels), width, height, numChannels);
        break;
        case 9:
        _this.data = A.ImageDataFloat16$(width, height, numChannels);
        break;
        case 10:
        _this.data = A.ImageDataFloat32$(width, height, numChannels);
        break;
        case 11:
        _this.data = new A.ImageDataFloat64(new Float64Array(width * height * 4 * numChannels), width, height, numChannels);
        break;
    }
    },
    toString$0(_) {
    var _this = this;
    return "Image(" + _this.get$width() + ", " + _this.get$height() + ", " + _this.get$format()._name + ", " + _this.get$numChannels() + ")";
    },
    get$width() {
    var t1 = this.data;
    t1 = t1 == null ? null : t1.width;
    return t1 == null ? 0 : t1;
    },
    get$height() {
    var t1 = this.data;
    t1 = t1 == null ? null : t1.height;
    return t1 == null ? 0 : t1;
    },
    get$format() {
    var t1 = this.data;
    t1 = t1 == null ? null : t1.get$format();
    return t1 == null ? B.Format_3 : t1;
    },
    setExtraChannel$2($name, data) {
    var _this = this;
    if (_this.extraChannels == null)
        _this.set$extraChannels(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.ImageData));
    _this.extraChannels.$indexSet(0, $name, data);
    if (_this.extraChannels.__js_helper$_length === 0)
        _this.set$extraChannels(null);
    },
    get$iterator(_) {
    var t1 = this.data;
    return t1.get$iterator(t1);
    },
    get$buffer(_) {
    var t1 = this.data;
    t1 = t1 == null ? null : t1.get$buffer(t1);
    if (t1 == null)
        t1 = new Uint8Array(0).buffer;
    return t1;
    },
    get$numChannels() {
    var t1 = this.data;
    t1 = t1 == null ? null : t1.get$palette();
    t1 = t1 == null ? null : t1.numChannels;
    if (t1 == null) {
        t1 = this.data;
        t1 = t1 == null ? null : t1.numChannels;
    }
    return t1 == null ? 0 : t1;
    },
    get$hasPalette() {
    var t1 = this.data;
    return (t1 == null ? null : t1.get$palette()) != null;
    },
    get$bitsPerChannel() {
    var t1 = this.data;
    t1 = t1 == null ? null : t1.get$bitsPerChannel();
    return t1 == null ? 0 : t1;
    },
    isBoundsSafe$2(x, y) {
    return x >= 0 && y >= 0 && x < this.get$width() && y < this.get$height();
    },
    getPixel$3(x, y, pixel) {
    var t1 = this.data;
    t1 = t1 == null ? null : t1.getPixel$3(x, y, pixel);
    return t1 == null ? new A.PixelUndefined() : t1;
    },
    getPixel$2(x, y) {
    return this.getPixel$3(x, y, null);
    },
    getPixelSafe$2(x, y) {
    var t1;
    if (x < this.get$width())
        t1 = y >= this.get$height();
    else
        t1 = true;
    if (t1)
        return new A.PixelUndefined();
    return this.getPixel$3(x, y, null);
    },
    setPixel$3(x, y, c) {
    var t1;
    if (c.get$image().get$palette() != null)
        if (this.get$hasPalette()) {
        t1 = this.data;
        if (t1 != null)
            t1.setPixelRgb$5(x, y, c.get$index(), 0, 0);
        return;
        }
    t1 = this.data;
    if (t1 != null)
        t1.setPixelRgba$6(x, y, c.get$r(), c.get$g(), c.get$b(), c.get$a());
    },
    get$maxChannelValue() {
    var t1 = this.data;
    t1 = t1 == null ? null : t1.get$maxChannelValue();
    return t1 == null ? 0 : t1;
    },
    clear$1(_, color) {
    var t1 = this.data;
    return t1 == null ? null : t1.clear$1(0, color);
    },
    clear$0($receiver) {
    return this.clear$1($receiver, null);
    },
    convert$2$format$numChannels(format, numChannels) {
    var alpha, t1, t2, t3, t4, firstFrame, _i, frame, t5, t6, t7, t8, t9, t10, newImage, firstFrame0, pal, f, usedColors, op, c, numColors, np, h, _this = this, _null = null;
    if (format == null)
        format = _this.get$format();
    if (numChannels == null)
        numChannels = _this.get$numChannels();
    alpha = B.Map_jPbQQ.$index(0, format);
    if (format.index < 3)
        _this.get$format();
    if (format === _this.get$format())
        if (numChannels === _this.get$numChannels()) {
        t1 = _this.data;
        t1 = (t1 == null ? _null : t1.get$palette()) == null;
        if (!t1)
            t1 = false;
        else
            t1 = true;
        } else
        t1 = false;
    else
        t1 = false;
    if (t1)
        return A.Image$from(_this, false, false);
    for (t1 = _this.get$frames(), t2 = t1.length, t3 = type$.String, t4 = type$.int, firstFrame = _null, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i, firstFrame = firstFrame0) {
        frame = t1[_i];
        t5 = frame.data;
        t6 = t5 == null;
        t7 = t6 ? _null : t5.width;
        if (t7 == null)
        t7 = 0;
        t5 = t6 ? _null : t5.height;
        if (t5 == null)
        t5 = 0;
        t6 = frame._exif;
        t6 = t6 == null ? _null : A.ExifData$from(t6);
        t8 = frame.iccProfile;
        if (t8 == null)
        t8 = _null;
        else {
        t9 = t8.name;
        t10 = t8.compression;
        t8 = t8.data;
        t8 = new A.IccProfile(t9, t10, new Uint8Array(t8.subarray(0, A._checkValidRange(0, _null, t8.length))));
        }
        t9 = frame.frameType;
        t10 = frame.loopCount;
        newImage = A.Image$(_null, t6, format, frame.frameDuration, t9, t5, t8, t10, numChannels, _null, t7, false);
        t5 = frame.textData;
        newImage.set$textData(t5 != null ? A.LinkedHashMap_LinkedHashMap$from(t5, t3, t3) : _null);
        if (firstFrame != null) {
        firstFrame.addFrame$1(newImage);
        firstFrame0 = firstFrame;
        } else
        firstFrame0 = newImage;
        t5 = newImage.data;
        pal = t5 == null ? _null : t5.get$palette();
        t5 = newImage.data;
        t5 = t5 == null ? _null : t5.get$palette();
        f = t5 == null ? _null : t5.get$format();
        if (f == null)
        f = format;
        t5 = frame.data;
        if (pal != null) {
        usedColors = A.LinkedHashMap_LinkedHashMap$_empty(t4, t4);
        op = t5 == null ? _null : t5.getPixel$3(0, 0, _null);
        if (op == null)
            op = new A.PixelUndefined();
        for (t5 = newImage.data, t5 = t5.get$iterator(t5), c = _null, numColors = 0; t5.moveNext$0();) {
            np = t5.get$current();
            h = A.rgbaToUint32(B.JSNumber_methods.floor$0(op.get$rNormalized() * 255), B.JSNumber_methods.floor$0(op.get$gNormalized() * 255), B.JSNumber_methods.floor$0(op.get$bNormalized() * 255), 0);
            if (usedColors.containsKey$1(h)) {
            t6 = usedColors.$index(0, h);
            t6.toString;
            np.set$index(t6);
            } else {
            usedColors.$indexSet(0, h, numColors);
            np.set$index(numColors);
            c = A.convertColor(op, alpha, f, numChannels, c);
            pal.setRgb$4(numColors, c.get$r(), c.get$g(), c.get$b());
            ++numColors;
            }
            op.moveNext$0();
        }
        } else {
        op = t5 == null ? _null : t5.getPixel$3(0, 0, _null);
        if (op == null)
            op = new A.PixelUndefined();
        for (t5 = newImage.data, t5 = t5.get$iterator(t5); t5.moveNext$0();) {
            A.convertColor(op, alpha, _null, _null, t5.get$current());
            op.moveNext$0();
        }
        }
    }
    firstFrame.toString;
    return firstFrame;
    },
    convert$1$numChannels(numChannels) {
    return this.convert$2$format$numChannels(null, numChannels);
    },
    convert$1$format(format) {
    return this.convert$2$format$numChannels(format, null);
    },
    addTextData$1(data) {
    var t1, t2, t3, t4;
    type$.Map_String_String._as(data);
    if (this.textData == null) {
        t1 = type$.String;
        this.set$textData(A.LinkedHashMap_LinkedHashMap$_empty(t1, t1));
    }
    for (t1 = A.LinkedHashMapKeyIterator$(data, data._modifications, A._instanceType(data)._precomputed1); t1.moveNext$0();) {
        t2 = t1.__js_helper$_current;
        t3 = this.textData;
        t3.toString;
        t4 = data.$index(0, t2);
        t4.toString;
        t3.$indexSet(0, t2, t4);
    }
    },
    get$_numPixelColors() {
    var t1, _this = this;
    if (_this.get$format() === B.Format_0)
        t1 = 2;
    else if (_this.get$format() === B.Format_1)
        t1 = 4;
    else if (_this.get$format() === B.Format_2)
        t1 = 16;
    else
        t1 = _this.get$format() === B.Format_3 ? 256 : 0;
    return t1;
    },
    _createPalette$2(paletteFormat, numChannels) {
    var t1, _this = this;
    switch (paletteFormat.index) {
        case 0:
        return null;
        case 1:
        return null;
        case 2:
        return null;
        case 3:
        t1 = _this.get$_numPixelColors();
        return new A.PaletteUint8(new Uint8Array(t1 * numChannels), t1, numChannels);
        case 4:
        t1 = _this.get$_numPixelColors();
        return new A.PaletteUint16(new Uint16Array(t1 * numChannels), t1, numChannels);
        case 5:
        t1 = _this.get$_numPixelColors();
        return new A.PaletteUint32(new Uint32Array(t1 * numChannels), t1, numChannels);
        case 6:
        t1 = _this.get$_numPixelColors();
        return new A.PaletteInt8(new Int8Array(t1 * numChannels), t1, numChannels);
        case 7:
        t1 = _this.get$_numPixelColors();
        return new A.PaletteInt16(new Int16Array(t1 * numChannels), t1, numChannels);
        case 8:
        t1 = _this.get$_numPixelColors();
        return new A.PaletteInt32(new Int32Array(t1 * numChannels), t1, numChannels);
        case 9:
        t1 = _this.get$_numPixelColors();
        return new A.PaletteFloat16(new Uint16Array(t1 * numChannels), t1, numChannels);
        case 10:
        t1 = _this.get$_numPixelColors();
        return new A.PaletteFloat32(new Float32Array(t1 * numChannels), t1, numChannels);
        case 11:
        t1 = _this.get$_numPixelColors();
        return new A.PaletteFloat64(new Float64Array(t1 * numChannels), t1, numChannels);
    }
    },
    set$extraChannels(extraChannels) {
    this.extraChannels = type$.nullable_Map_String_ImageData._as(extraChannels);
    },
    set$textData(textData) {
    this.textData = type$.nullable_Map_String_String._as(textData);
    },
    set$__Image_frames_AI(__Image_frames_AI) {
    this.__Image_frames_AI = type$.List_Image._as(__Image_frames_AI);
    }
};
A.ImageData.prototype = {
    get$palette() {
    return null;
    }
};
A.ImageDataFloat16.prototype = {
    clone$1$noPixels(noPixels) {
    var _this = this,
        t1 = _this.data;
    if (noPixels)
        t1 = new Uint16Array(t1.length);
    else
        t1 = new Uint16Array(A._ensureNativeList(t1));
    return new A.ImageDataFloat16(t1, _this.width, _this.height, _this.numChannels);
    },
    get$format() {
    return B.Format_9;
    },
    get$buffer(_) {
    return this.data.buffer;
    },
    get$bitsPerChannel() {
    return 16;
    },
    get$rowStride() {
    return this.width * this.numChannels * 2;
    },
    get$iterator(_) {
    return A.PixelFloat16$imageData(this);
    },
    get$length(_) {
    return this.data.byteLength;
    },
    get$maxChannelValue() {
    return 1;
    },
    get$isHdrFormat() {
    return true;
    },
    getPixel$3(x, y, pixel) {
    if (pixel == null || !(pixel instanceof A.PixelFloat16) || pixel.image !== this)
        pixel = A.PixelFloat16$imageData(this);
    pixel.setPosition$2(x, y);
    return pixel;
    },
    setPixelR$3(x, y, i) {
    var t2,
        t1 = this.numChannels,
        index = y * this.width * t1 + x * t1;
    t1 = this.data;
    t2 = A.Float16_doubleToFloat16(i);
    if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
    t1[index] = t2;
    },
    setPixelRgb$5(x, y, r, g, b) {
    var t5,
        t1 = this.numChannels,
        index = y * this.width * t1 + x * t1,
        t2 = this.data,
        t3 = A.Float16_doubleToFloat16(r),
        t4 = t2.length;
    if (!(index >= 0 && index < t4))
        return A.ioore(t2, index);
    t2[index] = t3;
    if (t1 > 1) {
        t3 = index + 1;
        t5 = A.Float16_doubleToFloat16(g);
        if (!(t3 < t4))
        return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 2) {
        t1 = index + 2;
        t3 = A.Float16_doubleToFloat16(b);
        if (!(t1 < t4))
            return A.ioore(t2, t1);
        t2[t1] = t3;
        }
    }
    },
    setPixelRgba$6(x, y, r, g, b, a) {
    var t5,
        t1 = this.numChannels,
        index = y * this.width * t1 + x * t1,
        t2 = this.data,
        t3 = A.Float16_doubleToFloat16(r),
        t4 = t2.length;
    if (!(index >= 0 && index < t4))
        return A.ioore(t2, index);
    t2[index] = t3;
    if (t1 > 1) {
        t3 = index + 1;
        t5 = A.Float16_doubleToFloat16(g);
        if (!(t3 < t4))
        return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 2) {
        t3 = index + 2;
        t5 = A.Float16_doubleToFloat16(b);
        if (!(t3 < t4))
            return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 3) {
            t1 = index + 3;
            t3 = A.Float16_doubleToFloat16(a);
            if (!(t1 < t4))
            return A.ioore(t2, t1);
            t2[t1] = t3;
        }
        }
    }
    },
    toString$0(_) {
    return "ImageDataFloat16(" + this.width + ", " + this.height + ", " + this.numChannels + ")";
    },
    clear$1(_, c) {
    }
};
A.ImageDataFloat32.prototype = {
    clone$1$noPixels(noPixels) {
    var _this = this,
        t1 = _this.data;
    if (noPixels)
        t1 = new Float32Array(t1.length);
    else
        t1 = new Float32Array(A._ensureNativeList(t1));
    return new A.ImageDataFloat32(t1, _this.width, _this.height, _this.numChannels);
    },
    get$format() {
    return B.Format_10;
    },
    get$buffer(_) {
    return this.data.buffer;
    },
    get$bitsPerChannel() {
    return 32;
    },
    get$iterator(_) {
    return A.PixelFloat32$imageData(this);
    },
    get$length(_) {
    return this.data.byteLength;
    },
    get$maxChannelValue() {
    return 1;
    },
    get$rowStride() {
    return this.width * this.numChannels * 4;
    },
    get$isHdrFormat() {
    return true;
    },
    getPixel$3(x, y, pixel) {
    if (pixel == null || !(pixel instanceof A.PixelFloat32) || pixel.image !== this)
        pixel = A.PixelFloat32$imageData(this);
    pixel.setPosition$2(x, y);
    return pixel;
    },
    setPixelR$3(x, y, i) {
    var t1 = this.numChannels,
        index = y * this.width * t1 + x * t1;
    t1 = this.data;
    if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
    t1[index] = i;
    },
    setPixelRgb$5(x, y, r, g, b) {
    var t4,
        t1 = this.numChannels,
        index = y * this.width * t1 + x * t1,
        t2 = this.data,
        t3 = t2.length;
    if (!(index >= 0 && index < t3))
        return A.ioore(t2, index);
    t2[index] = r;
    if (t1 > 1) {
        t4 = index + 1;
        if (!(t4 < t3))
        return A.ioore(t2, t4);
        t2[t4] = g;
        if (t1 > 2) {
        t1 = index + 2;
        if (!(t1 < t3))
            return A.ioore(t2, t1);
        t2[t1] = b;
        }
    }
    },
    setPixelRgba$6(x, y, r, g, b, a) {
    var t4,
        t1 = this.numChannels,
        index = y * this.width * t1 + x * t1,
        t2 = this.data,
        t3 = t2.length;
    if (!(index >= 0 && index < t3))
        return A.ioore(t2, index);
    t2[index] = r;
    if (t1 > 1) {
        t4 = index + 1;
        if (!(t4 < t3))
        return A.ioore(t2, t4);
        t2[t4] = g;
        if (t1 > 2) {
        t4 = index + 2;
        if (!(t4 < t3))
            return A.ioore(t2, t4);
        t2[t4] = b;
        if (t1 > 3) {
            t1 = index + 3;
            if (!(t1 < t3))
            return A.ioore(t2, t1);
            t2[t1] = a;
        }
        }
    }
    },
    toString$0(_) {
    return "ImageDataFloat32(" + this.width + ", " + this.height + ", " + this.numChannels + ")";
    },
    clear$1(_, c) {
    }
};
A.ImageDataFloat64.prototype = {
    clone$1$noPixels(noPixels) {
    var _this = this,
        t1 = _this.data;
    if (noPixels)
        t1 = new Float64Array(t1.length);
    else
        t1 = new Float64Array(A._ensureNativeList(t1));
    return new A.ImageDataFloat64(t1, _this.width, _this.height, _this.numChannels);
    },
    get$format() {
    return B.Format_11;
    },
    get$buffer(_) {
    return this.data.buffer;
    },
    get$length(_) {
    return this.data.byteLength;
    },
    get$bitsPerChannel() {
    return 64;
    },
    get$iterator(_) {
    return A.PixelFloat64$imageData(this);
    },
    get$maxChannelValue() {
    return 1;
    },
    get$rowStride() {
    return this.width * this.numChannels * 8;
    },
    get$isHdrFormat() {
    return true;
    },
    getPixel$3(x, y, pixel) {
    if (pixel == null || !(pixel instanceof A.PixelFloat64) || pixel.image !== this)
        pixel = A.PixelFloat64$imageData(this);
    pixel.setPosition$2(x, y);
    return pixel;
    },
    setPixelR$3(x, y, i) {
    var t1 = this.numChannels,
        index = y * this.width * t1 + x * t1;
    t1 = this.data;
    if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
    t1[index] = i;
    },
    setPixelRgb$5(x, y, r, g, b) {
    var t4,
        t1 = this.numChannels,
        index = y * this.width * t1 + x * t1,
        t2 = this.data,
        t3 = t2.length;
    if (!(index >= 0 && index < t3))
        return A.ioore(t2, index);
    t2[index] = r;
    if (t1 > 1) {
        t4 = index + 1;
        if (!(t4 < t3))
        return A.ioore(t2, t4);
        t2[t4] = g;
        if (t1 > 2) {
        t1 = index + 2;
        if (!(t1 < t3))
            return A.ioore(t2, t1);
        t2[t1] = b;
        }
    }
    },
    setPixelRgba$6(x, y, r, g, b, a) {
    var t4,
        t1 = this.numChannels,
        index = y * this.width * t1 + x * t1,
        t2 = this.data,
        t3 = t2.length;
    if (!(index >= 0 && index < t3))
        return A.ioore(t2, index);
    t2[index] = r;
    if (t1 > 1) {
        t4 = index + 1;
        if (!(t4 < t3))
        return A.ioore(t2, t4);
        t2[t4] = g;
        if (t1 > 2) {
        t4 = index + 2;
        if (!(t4 < t3))
            return A.ioore(t2, t4);
        t2[t4] = b;
        if (t1 > 3) {
            t1 = index + 3;
            if (!(t1 < t3))
            return A.ioore(t2, t1);
            t2[t1] = a;
        }
        }
    }
    },
    toString$0(_) {
    return "ImageDataFloat64(" + this.width + ", " + this.height + ", " + this.numChannels + ")";
    },
    clear$1(_, c) {
    }
};
A.ImageDataInt16.prototype = {
    clone$1$noPixels(noPixels) {
    var _this = this,
        t1 = _this.data;
    if (noPixels)
        t1 = new Int16Array(t1.length);
    else
        t1 = new Int16Array(A._ensureNativeList(t1));
    return new A.ImageDataInt16(t1, _this.width, _this.height, _this.numChannels);
    },
    get$format() {
    return B.Format_7;
    },
    get$buffer(_) {
    return this.data.buffer;
    },
    get$iterator(_) {
    return A.PixelInt16$imageData(this);
    },
    get$length(_) {
    return this.data.byteLength;
    },
    get$maxChannelValue() {
    return 32767;
    },
    get$isHdrFormat() {
    return true;
    },
    get$bitsPerChannel() {
    return 16;
    },
    get$rowStride() {
    return this.width * this.numChannels * 2;
    },
    getPixel$3(x, y, pixel) {
    if (pixel == null || !(pixel instanceof A.PixelInt16) || pixel.image !== this)
        pixel = A.PixelInt16$imageData(this);
    pixel.setPosition$2(x, y);
    return pixel;
    },
    setPixelR$3(x, y, i) {
    var t2,
        t1 = this.numChannels,
        index = y * this.width * t1 + x * t1;
    t1 = this.data;
    t2 = B.JSNumber_methods.toInt$0(i);
    if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
    t1[index] = t2;
    },
    setPixelRgb$5(x, y, r, g, b) {
    var t5,
        t1 = this.numChannels,
        index = y * this.width * t1 + x * t1,
        t2 = this.data,
        t3 = B.JSNumber_methods.toInt$0(r),
        t4 = t2.length;
    if (!(index >= 0 && index < t4))
        return A.ioore(t2, index);
    t2[index] = t3;
    if (t1 > 1) {
        t3 = index + 1;
        t5 = B.JSNumber_methods.toInt$0(g);
        if (!(t3 < t4))
        return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 2) {
        t1 = index + 2;
        t3 = B.JSNumber_methods.toInt$0(b);
        if (!(t1 < t4))
            return A.ioore(t2, t1);
        t2[t1] = t3;
        }
    }
    },
    setPixelRgba$6(x, y, r, g, b, a) {
    var t5,
        t1 = this.numChannels,
        index = y * this.width * t1 + x * t1,
        t2 = this.data,
        t3 = B.JSNumber_methods.toInt$0(r),
        t4 = t2.length;
    if (!(index >= 0 && index < t4))
        return A.ioore(t2, index);
    t2[index] = t3;
    if (t1 > 1) {
        t3 = index + 1;
        t5 = B.JSNumber_methods.toInt$0(g);
        if (!(t3 < t4))
        return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 2) {
        t3 = index + 2;
        t5 = B.JSNumber_methods.toInt$0(b);
        if (!(t3 < t4))
            return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 3) {
            t1 = index + 3;
            t3 = B.JSNumber_methods.toInt$0(a);
            if (!(t1 < t4))
            return A.ioore(t2, t1);
            t2[t1] = t3;
        }
        }
    }
    },
    toString$0(_) {
    return "ImageDataInt16(" + this.width + ", " + this.height + ", " + this.numChannels + ")";
    },
    clear$1(_, c) {
    }
};
A.ImageDataInt32.prototype = {
    clone$1$noPixels(noPixels) {
    var _this = this,
        t1 = _this.data;
    if (noPixels)
        t1 = new Int32Array(t1.length);
    else
        t1 = new Int32Array(A._ensureNativeList(t1));
    return new A.ImageDataInt32(t1, _this.width, _this.height, _this.numChannels);
    },
    get$format() {
    return B.Format_8;
    },
    get$buffer(_) {
    return this.data.buffer;
    },
    get$bitsPerChannel() {
    return 32;
    },
    get$rowStride() {
    return this.width * this.numChannels * 4;
    },
    get$iterator(_) {
    return A.PixelInt32$imageData(this);
    },
    get$length(_) {
    return this.data.byteLength;
    },
    get$maxChannelValue() {
    return 2147483647;
    },
    get$isHdrFormat() {
    return true;
    },
    getPixel$3(x, y, pixel) {
    if (pixel == null || !(pixel instanceof A.PixelInt32) || pixel.image !== this)
        pixel = A.PixelInt32$imageData(this);
    pixel.setPosition$2(x, y);
    return pixel;
    },
    setPixelR$3(x, y, i) {
    var t2,
        t1 = this.numChannels,
        index = y * this.width * t1 + x * t1;
    t1 = this.data;
    t2 = B.JSNumber_methods.toInt$0(i);
    if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
    t1[index] = t2;
    },
    setPixelRgb$5(x, y, r, g, b) {
    var t5,
        t1 = this.numChannels,
        index = y * this.width * t1 + x * t1,
        t2 = this.data,
        t3 = B.JSNumber_methods.toInt$0(r),
        t4 = t2.length;
    if (!(index >= 0 && index < t4))
        return A.ioore(t2, index);
    t2[index] = t3;
    if (t1 > 1) {
        t3 = index + 1;
        t5 = B.JSNumber_methods.toInt$0(g);
        if (!(t3 < t4))
        return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 2) {
        t1 = index + 2;
        t3 = B.JSNumber_methods.toInt$0(b);
        if (!(t1 < t4))
            return A.ioore(t2, t1);
        t2[t1] = t3;
        }
    }
    },
    setPixelRgba$6(x, y, r, g, b, a) {
    var t5,
        t1 = this.numChannels,
        index = y * this.width * t1 + x * t1,
        t2 = this.data,
        t3 = B.JSNumber_methods.toInt$0(r),
        t4 = t2.length;
    if (!(index >= 0 && index < t4))
        return A.ioore(t2, index);
    t2[index] = t3;
    if (t1 > 1) {
        t3 = index + 1;
        t5 = B.JSNumber_methods.toInt$0(g);
        if (!(t3 < t4))
        return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 2) {
        t3 = index + 2;
        t5 = B.JSNumber_methods.toInt$0(b);
        if (!(t3 < t4))
            return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 3) {
            t1 = index + 3;
            t3 = B.JSNumber_methods.toInt$0(a);
            if (!(t1 < t4))
            return A.ioore(t2, t1);
            t2[t1] = t3;
        }
        }
    }
    },
    toString$0(_) {
    return "ImageDataInt32(" + this.width + ", " + this.height + ", " + this.numChannels + ")";
    },
    clear$1(_, c) {
    }
};
A.ImageDataInt8.prototype = {
    clone$1$noPixels(noPixels) {
    var _this = this,
        t1 = _this.data;
    if (noPixels)
        t1 = new Int8Array(t1.length);
    else
        t1 = new Int8Array(A._ensureNativeList(t1));
    return new A.ImageDataInt8(t1, _this.width, _this.height, _this.numChannels);
    },
    get$format() {
    return B.Format_6;
    },
    get$buffer(_) {
    return this.data.buffer;
    },
    get$rowStride() {
    return this.width * this.numChannels;
    },
    get$iterator(_) {
    return A.PixelInt8$imageData(this);
    },
    get$length(_) {
    return this.data.byteLength;
    },
    get$maxChannelValue() {
    return 127;
    },
    get$isHdrFormat() {
    return true;
    },
    get$bitsPerChannel() {
    return 8;
    },
    getPixel$3(x, y, pixel) {
    if (pixel == null || !(pixel instanceof A.PixelInt8) || pixel.image !== this)
        pixel = A.PixelInt8$imageData(this);
    pixel.setPosition$2(x, y);
    return pixel;
    },
    setPixelR$3(x, y, i) {
    var t2,
        t1 = this.numChannels,
        index = y * (this.width * t1) + x * t1;
    t1 = this.data;
    t2 = B.JSNumber_methods.toInt$0(i);
    if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
    t1[index] = t2;
    },
    setPixelRgb$5(x, y, r, g, b) {
    var t5,
        t1 = this.numChannels,
        index = y * (this.width * t1) + x * t1,
        t2 = this.data,
        t3 = B.JSNumber_methods.toInt$0(r),
        t4 = t2.length;
    if (!(index >= 0 && index < t4))
        return A.ioore(t2, index);
    t2[index] = t3;
    if (t1 > 1) {
        t3 = index + 1;
        t5 = B.JSNumber_methods.toInt$0(g);
        if (!(t3 < t4))
        return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 2) {
        t1 = index + 2;
        t3 = B.JSNumber_methods.toInt$0(b);
        if (!(t1 < t4))
            return A.ioore(t2, t1);
        t2[t1] = t3;
        }
    }
    },
    setPixelRgba$6(x, y, r, g, b, a) {
    var t5,
        t1 = this.numChannels,
        index = y * (this.width * t1) + x * t1,
        t2 = this.data,
        t3 = B.JSNumber_methods.toInt$0(r),
        t4 = t2.length;
    if (!(index >= 0 && index < t4))
        return A.ioore(t2, index);
    t2[index] = t3;
    if (t1 > 1) {
        t3 = index + 1;
        t5 = B.JSNumber_methods.toInt$0(g);
        if (!(t3 < t4))
        return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 2) {
        t3 = index + 2;
        t5 = B.JSNumber_methods.toInt$0(b);
        if (!(t3 < t4))
            return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 3) {
            t1 = index + 3;
            t3 = B.JSNumber_methods.toInt$0(a);
            if (!(t1 < t4))
            return A.ioore(t2, t1);
            t2[t1] = t3;
        }
        }
    }
    },
    toString$0(_) {
    return "ImageDataInt8(" + this.width + ", " + this.height + ", " + this.numChannels + ")";
    },
    clear$1(_, c) {
    }
};
A.ImageDataUint1.prototype = {
    ImageDataUint1$palette$3(width, height, palette) {
    var t1 = Math.max(this.rowStride * height, 1);
    t1 = new Uint8Array(t1);
    this.__ImageDataUint1_data_F !== $ && A.throwLateFieldAI("data");
    this.__ImageDataUint1_data_F = t1;
    },
    clone$1$noPixels(noPixels) {
    var t2, _this = this,
        t1 = _this.__ImageDataUint1_data_F;
    if (noPixels) {
        t1 === $ && A.throwLateFieldNI("data");
        t1 = new Uint8Array(t1.length);
    } else {
        t1 === $ && A.throwLateFieldNI("data");
        t1 = new Uint8Array(A._ensureNativeList(t1));
    }
    t2 = _this.palette;
    t2 = t2 == null ? null : t2.clone$0();
    return new A.ImageDataUint1(t1, _this.rowStride, t2, _this.width, _this.height, _this.numChannels);
    },
    get$format() {
    return B.Format_0;
    },
    get$length(_) {
    var t1 = this.__ImageDataUint1_data_F;
    t1 === $ && A.throwLateFieldNI("data");
    return t1.byteLength;
    },
    get$maxChannelValue() {
    var t1 = this.palette;
    t1 = t1 == null ? null : t1.get$maxChannelValue();
    return t1 == null ? 1 : t1;
    },
    get$isHdrFormat() {
    return false;
    },
    get$buffer(_) {
    var t1 = this.__ImageDataUint1_data_F;
    t1 === $ && A.throwLateFieldNI("data");
    return t1.buffer;
    },
    get$bitsPerChannel() {
    return 1;
    },
    get$iterator(_) {
    return A.PixelUint1$imageData(this);
    },
    getPixel$3(x, y, pixel) {
    if (pixel == null || !(pixel instanceof A.PixelUint1) || pixel.image !== this)
        pixel = A.PixelUint1$imageData(this);
    pixel.setPosition$2(x, y);
    return pixel;
    },
    setPixelR$3(x, y, i) {
    var t1, _this = this;
    if (_this.numChannels < 1)
        return;
    t1 = _this._image_data_uint1$_pixel;
    (t1 == null ? _this._image_data_uint1$_pixel = A.PixelUint1$imageData(_this) : t1).setPosition$2(x, y);
    _this._image_data_uint1$_pixel._pixel_uint1$_setChannel$2(0, i);
    },
    setPixelRgb$5(x, y, r, g, b) {
    var t1, _this = this;
    if (_this.numChannels < 1)
        return;
    t1 = _this._image_data_uint1$_pixel;
    (t1 == null ? _this._image_data_uint1$_pixel = A.PixelUint1$imageData(_this) : t1).setPosition$2(x, y);
    _this._image_data_uint1$_pixel.setRgb$3(r, g, b);
    },
    setPixelRgba$6(x, y, r, g, b, a) {
    var t1, _this = this;
    if (_this.numChannels < 1)
        return;
    t1 = _this._image_data_uint1$_pixel;
    (t1 == null ? _this._image_data_uint1$_pixel = A.PixelUint1$imageData(_this) : t1).setPosition$2(x, y);
    _this._image_data_uint1$_pixel.setRgba$4(r, g, b, a);
    },
    toString$0(_) {
    return "ImageDataUint1(" + this.width + ", " + this.height + ", " + this.numChannels + ")";
    },
    clear$1(_, c) {
    },
    get$rowStride() {
    return this.rowStride;
    },
    get$palette() {
    return this.palette;
    }
};
A.ImageDataUint16.prototype = {
    clone$1$noPixels(noPixels) {
    var _this = this,
        t1 = _this.data;
    if (noPixels)
        t1 = new Uint16Array(t1.length);
    else
        t1 = new Uint16Array(A._ensureNativeList(t1));
    return new A.ImageDataUint16(t1, _this.width, _this.height, _this.numChannels);
    },
    get$format() {
    return B.Format_4;
    },
    get$buffer(_) {
    return this.data.buffer;
    },
    get$bitsPerChannel() {
    return 16;
    },
    get$maxChannelValue() {
    return 65535;
    },
    get$rowStride() {
    return this.width * this.numChannels * 2;
    },
    get$iterator(_) {
    return A.PixelUint16$imageData(this);
    },
    get$length(_) {
    return this.data.byteLength;
    },
    get$isHdrFormat() {
    return true;
    },
    getPixel$3(x, y, pixel) {
    if (pixel == null || !(pixel instanceof A.PixelUint16) || pixel.image !== this)
        pixel = A.PixelUint16$imageData(this);
    pixel.setPosition$2(x, y);
    return pixel;
    },
    setPixelR$3(x, y, i) {
    var t2,
        t1 = this.numChannels,
        index = y * this.width * t1 + x * t1;
    t1 = this.data;
    t2 = B.JSNumber_methods.toInt$0(i);
    if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
    t1[index] = t2;
    },
    setPixelRgb$5(x, y, r, g, b) {
    var t5,
        t1 = this.numChannels,
        index = y * this.width * t1 + x * t1,
        t2 = this.data,
        t3 = B.JSNumber_methods.toInt$0(r),
        t4 = t2.length;
    if (!(index >= 0 && index < t4))
        return A.ioore(t2, index);
    t2[index] = t3;
    if (t1 > 1) {
        t3 = index + 1;
        t5 = B.JSNumber_methods.toInt$0(g);
        if (!(t3 < t4))
        return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 2) {
        t1 = index + 2;
        t3 = B.JSNumber_methods.toInt$0(b);
        if (!(t1 < t4))
            return A.ioore(t2, t1);
        t2[t1] = t3;
        }
    }
    },
    setPixelRgba$6(x, y, r, g, b, a) {
    var t5,
        t1 = this.numChannels,
        index = y * this.width * t1 + x * t1,
        t2 = this.data,
        t3 = B.JSNumber_methods.toInt$0(r),
        t4 = t2.length;
    if (!(index >= 0 && index < t4))
        return A.ioore(t2, index);
    t2[index] = t3;
    if (t1 > 1) {
        t3 = index + 1;
        t5 = B.JSNumber_methods.toInt$0(g);
        if (!(t3 < t4))
        return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 2) {
        t3 = index + 2;
        t5 = B.JSNumber_methods.toInt$0(b);
        if (!(t3 < t4))
            return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 3) {
            t1 = index + 3;
            t3 = B.JSNumber_methods.toInt$0(a);
            if (!(t1 < t4))
            return A.ioore(t2, t1);
            t2[t1] = t3;
        }
        }
    }
    },
    toString$0(_) {
    return "ImageDataUint16(" + this.width + ", " + this.height + ", " + this.numChannels + ")";
    },
    clear$1(_, c) {
    }
};
A.ImageDataUint2.prototype = {
    ImageDataUint2$palette$3(width, height, palette) {
    var t1 = Math.max(this.rowStride * height, 1);
    t1 = new Uint8Array(t1);
    this.__ImageDataUint2_data_F !== $ && A.throwLateFieldAI("data");
    this.__ImageDataUint2_data_F = t1;
    },
    clone$1$noPixels(noPixels) {
    var t2, _this = this,
        t1 = _this.__ImageDataUint2_data_F;
    if (noPixels) {
        t1 === $ && A.throwLateFieldNI("data");
        t1 = new Uint8Array(t1.length);
    } else {
        t1 === $ && A.throwLateFieldNI("data");
        t1 = new Uint8Array(A._ensureNativeList(t1));
    }
    t2 = _this.palette;
    t2 = t2 == null ? null : t2.clone$0();
    return new A.ImageDataUint2(t1, _this.rowStride, t2, _this.width, _this.height, _this.numChannels);
    },
    get$format() {
    return B.Format_1;
    },
    get$bitsPerChannel() {
    return 2;
    },
    get$buffer(_) {
    var t1 = this.__ImageDataUint2_data_F;
    t1 === $ && A.throwLateFieldNI("data");
    return t1.buffer;
    },
    get$iterator(_) {
    return A.PixelUint2$imageData(this);
    },
    get$length(_) {
    var t1 = this.__ImageDataUint2_data_F;
    t1 === $ && A.throwLateFieldNI("data");
    return t1.byteLength;
    },
    get$maxChannelValue() {
    var t1 = this.palette;
    t1 = t1 == null ? null : t1.get$maxChannelValue();
    return t1 == null ? 3 : t1;
    },
    get$isHdrFormat() {
    return false;
    },
    getPixel$3(x, y, pixel) {
    if (pixel == null || !(pixel instanceof A.PixelUint2) || pixel.image !== this)
        pixel = A.PixelUint2$imageData(this);
    pixel.setPosition$2(x, y);
    return pixel;
    },
    setPixelR$3(x, y, i) {
    var t1, _this = this;
    if (_this.numChannels < 1)
        return;
    t1 = _this._image_data_uint2$_pixel;
    (t1 == null ? _this._image_data_uint2$_pixel = A.PixelUint2$imageData(_this) : t1).setPosition$2(x, y);
    _this._image_data_uint2$_pixel._pixel_uint2$_setChannel$2(0, i);
    },
    setPixelRgb$5(x, y, r, g, b) {
    var t1, _this = this;
    if (_this.numChannels < 1)
        return;
    t1 = _this._image_data_uint2$_pixel;
    (t1 == null ? _this._image_data_uint2$_pixel = A.PixelUint2$imageData(_this) : t1).setPosition$2(x, y);
    _this._image_data_uint2$_pixel.setRgb$3(r, g, b);
    },
    setPixelRgba$6(x, y, r, g, b, a) {
    var t1, _this = this;
    if (_this.numChannels < 1)
        return;
    t1 = _this._image_data_uint2$_pixel;
    (t1 == null ? _this._image_data_uint2$_pixel = A.PixelUint2$imageData(_this) : t1).setPosition$2(x, y);
    _this._image_data_uint2$_pixel.setRgba$4(r, g, b, a);
    },
    toString$0(_) {
    return "ImageDataUint2(" + this.width + ", " + this.height + ", " + this.numChannels + ")";
    },
    clear$1(_, c) {
    },
    get$rowStride() {
    return this.rowStride;
    },
    get$palette() {
    return this.palette;
    }
};
A.ImageDataUint32.prototype = {
    clone$1$noPixels(noPixels) {
    var _this = this,
        t1 = _this.data;
    if (noPixels)
        t1 = new Uint32Array(t1.length);
    else
        t1 = new Uint32Array(A._ensureNativeList(t1));
    return new A.ImageDataUint32(t1, _this.width, _this.height, _this.numChannels);
    },
    get$format() {
    return B.Format_5;
    },
    get$buffer(_) {
    return this.data.buffer;
    },
    get$rowStride() {
    return this.width * this.numChannels * 4;
    },
    get$bitsPerChannel() {
    return 32;
    },
    get$maxChannelValue() {
    return 4294967295;
    },
    get$iterator(_) {
    return A.PixelUint32$imageData(this);
    },
    get$length(_) {
    return this.data.byteLength;
    },
    get$isHdrFormat() {
    return true;
    },
    getPixel$3(x, y, pixel) {
    if (pixel == null || !(pixel instanceof A.PixelUint32) || pixel.image !== this)
        pixel = A.PixelUint32$imageData(this);
    pixel.setPosition$2(x, y);
    return pixel;
    },
    setPixelR$3(x, y, i) {
    var t2,
        t1 = this.numChannels,
        index = y * this.width * t1 + x * t1;
    t1 = this.data;
    t2 = B.JSNumber_methods.toInt$0(i);
    if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
    t1[index] = t2;
    },
    setPixelRgb$5(x, y, r, g, b) {
    var t5,
        t1 = this.numChannels,
        index = y * this.width * t1 + x * t1,
        t2 = this.data,
        t3 = B.JSNumber_methods.toInt$0(r),
        t4 = t2.length;
    if (!(index >= 0 && index < t4))
        return A.ioore(t2, index);
    t2[index] = t3;
    if (t1 > 1) {
        t3 = index + 1;
        t5 = B.JSNumber_methods.toInt$0(g);
        if (!(t3 < t4))
        return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 2) {
        t1 = index + 2;
        t3 = B.JSNumber_methods.toInt$0(b);
        if (!(t1 < t4))
            return A.ioore(t2, t1);
        t2[t1] = t3;
        }
    }
    },
    setPixelRgba$6(x, y, r, g, b, a) {
    var t5,
        t1 = this.numChannels,
        index = y * this.width * t1 + x * t1,
        t2 = this.data,
        t3 = B.JSNumber_methods.toInt$0(r),
        t4 = t2.length;
    if (!(index >= 0 && index < t4))
        return A.ioore(t2, index);
    t2[index] = t3;
    if (t1 > 1) {
        t3 = index + 1;
        t5 = B.JSNumber_methods.toInt$0(g);
        if (!(t3 < t4))
        return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 2) {
        t3 = index + 2;
        t5 = B.JSNumber_methods.toInt$0(b);
        if (!(t3 < t4))
            return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 3) {
            t1 = index + 3;
            t3 = B.JSNumber_methods.toInt$0(a);
            if (!(t1 < t4))
            return A.ioore(t2, t1);
            t2[t1] = t3;
        }
        }
    }
    },
    toString$0(_) {
    return "ImageDataUint32(" + this.width + ", " + this.height + ", " + this.numChannels + ")";
    },
    clear$1(_, c) {
    }
};
A.ImageDataUint4.prototype = {
    ImageDataUint4$palette$3(width, height, palette) {
    var t1 = Math.max(this.rowStride * height, 1);
    t1 = new Uint8Array(t1);
    this.__ImageDataUint4_data_F !== $ && A.throwLateFieldAI("data");
    this.__ImageDataUint4_data_F = t1;
    },
    clone$1$noPixels(noPixels) {
    var t2, _this = this,
        t1 = _this.__ImageDataUint4_data_F;
    if (noPixels) {
        t1 === $ && A.throwLateFieldNI("data");
        t1 = new Uint8Array(t1.length);
    } else {
        t1 === $ && A.throwLateFieldNI("data");
        t1 = new Uint8Array(A._ensureNativeList(t1));
    }
    t2 = _this.palette;
    t2 = t2 == null ? null : t2.clone$0();
    return new A.ImageDataUint4(t1, _this.rowStride, t2, _this.width, _this.height, _this.numChannels);
    },
    get$format() {
    return B.Format_2;
    },
    get$buffer(_) {
    var t1 = this.__ImageDataUint4_data_F;
    t1 === $ && A.throwLateFieldNI("data");
    return t1.buffer;
    },
    get$iterator(_) {
    return A.PixelUint4$imageData(this);
    },
    get$length(_) {
    var t1 = this.__ImageDataUint4_data_F;
    t1 === $ && A.throwLateFieldNI("data");
    return t1.byteLength;
    },
    get$maxChannelValue() {
    var t1 = this.palette;
    t1 = t1 == null ? null : t1.get$maxChannelValue();
    return t1 == null ? 15 : t1;
    },
    get$isHdrFormat() {
    return false;
    },
    get$bitsPerChannel() {
    return 4;
    },
    getPixel$3(x, y, pixel) {
    if (pixel == null || !(pixel instanceof A.PixelUint4) || pixel.image !== this)
        pixel = A.PixelUint4$imageData(this);
    pixel.setPosition$2(x, y);
    return pixel;
    },
    setPixelR$3(x, y, i) {
    var t1, _this = this;
    if (_this.numChannels < 1)
        return;
    t1 = _this._pixel;
    (t1 == null ? _this._pixel = A.PixelUint4$imageData(_this) : t1).setPosition$2(x, y);
    _this._pixel._setChannel$2(0, i);
    },
    setPixelRgb$5(x, y, r, g, b) {
    var t1, _this = this;
    if (_this.numChannels < 1)
        return;
    t1 = _this._pixel;
    (t1 == null ? _this._pixel = A.PixelUint4$imageData(_this) : t1).setPosition$2(x, y);
    _this._pixel.setRgb$3(r, g, b);
    },
    setPixelRgba$6(x, y, r, g, b, a) {
    var t1, _this = this;
    if (_this.numChannels < 1)
        return;
    t1 = _this._pixel;
    (t1 == null ? _this._pixel = A.PixelUint4$imageData(_this) : t1).setPosition$2(x, y);
    _this._pixel.setRgba$4(r, g, b, a);
    },
    toString$0(_) {
    return "ImageDataUint4(" + this.width + ", " + this.height + ", " + this.numChannels + ")";
    },
    clear$1(_, c) {
    },
    get$rowStride() {
    return this.rowStride;
    },
    get$palette() {
    return this.palette;
    }
};
A.ImageDataUint8.prototype = {
    clone$1$noPixels(noPixels) {
    var t2, _this = this,
        t1 = _this.data;
    if (noPixels)
        t1 = new Uint8Array(t1.length);
    else
        t1 = new Uint8Array(A._ensureNativeList(t1));
    t2 = _this.palette;
    t2 = t2 == null ? null : t2.clone$0();
    return new A.ImageDataUint8(t1, t2, _this.width, _this.height, _this.numChannels);
    },
    get$format() {
    return B.Format_3;
    },
    get$buffer(_) {
    return this.data.buffer;
    },
    get$rowStride() {
    return this.width * this.numChannels;
    },
    get$bitsPerChannel() {
    return 8;
    },
    get$iterator(_) {
    return A.PixelUint8$imageData(this);
    },
    get$length(_) {
    return this.data.byteLength;
    },
    get$maxChannelValue() {
    var t1 = this.palette;
    t1 = t1 == null ? null : t1.get$maxChannelValue();
    return t1 == null ? 255 : t1;
    },
    get$isHdrFormat() {
    return false;
    },
    getPixel$3(x, y, pixel) {
    if (pixel == null || !(pixel instanceof A.PixelUint8) || pixel.image !== this)
        pixel = A.PixelUint8$imageData(this);
    pixel.setPosition$2(x, y);
    return pixel;
    },
    setPixelR$3(x, y, i) {
    var t2,
        t1 = this.numChannels,
        index = y * (this.width * t1) + x * t1;
    t1 = this.data;
    t2 = B.JSNumber_methods.toInt$0(i);
    if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
    t1[index] = t2;
    },
    setPixelRgb$5(x, y, r, g, b) {
    var t5,
        t1 = this.numChannels,
        index = y * (this.width * t1) + x * t1,
        t2 = this.data,
        t3 = B.JSNumber_methods.toInt$0(r),
        t4 = t2.length;
    if (!(index >= 0 && index < t4))
        return A.ioore(t2, index);
    t2[index] = t3;
    if (t1 > 1) {
        t3 = index + 1;
        t5 = B.JSNumber_methods.toInt$0(g);
        if (!(t3 < t4))
        return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 2) {
        t1 = index + 2;
        t3 = B.JSNumber_methods.toInt$0(b);
        if (!(t1 < t4))
            return A.ioore(t2, t1);
        t2[t1] = t3;
        }
    }
    },
    setPixelRgba$6(x, y, r, g, b, a) {
    var t5,
        t1 = this.numChannels,
        index = y * (this.width * t1) + x * t1,
        t2 = this.data,
        t3 = B.JSNumber_methods.toInt$0(r),
        t4 = t2.length;
    if (!(index >= 0 && index < t4))
        return A.ioore(t2, index);
    t2[index] = t3;
    if (t1 > 1) {
        t3 = index + 1;
        t5 = B.JSNumber_methods.toInt$0(g);
        if (!(t3 < t4))
        return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 2) {
        t3 = index + 2;
        t5 = B.JSNumber_methods.toInt$0(b);
        if (!(t3 < t4))
            return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 3) {
            t1 = index + 3;
            t3 = B.JSNumber_methods.toInt$0(a);
            if (!(t1 < t4))
            return A.ioore(t2, t1);
            t2[t1] = t3;
        }
        }
    }
    },
    toString$0(_) {
    return "ImageDataUint8(" + this.width + ", " + this.height + ", " + this.numChannels + ")";
    },
    clear$1(_, c) {
    var ri, gi, u16, bi, ai, u32, p, t2, t3, t4, t5, t6, t7, _this = this, _null = null,
        c8 = c == null ? _null : A.convertColor(c, _null, B.Format_3, _null, _null),
        t1 = _this.numChannels;
    if (t1 === 1) {
        ri = c8 == null ? 0 : B.JSInt_methods.clamp$2(A._asInt(c8.get$r()), 0, 255);
        t1 = _this.data;
        B.NativeUint8List_methods.fillRange$3(t1, 0, t1.length, ri);
    } else if (t1 === 2) {
        t1 = c8 == null;
        ri = t1 ? 0 : B.JSInt_methods.clamp$2(A._asInt(c8.get$r()), 0, 255);
        gi = t1 ? 0 : B.JSInt_methods.clamp$2(A._asInt(c8.get$g()), 0, 255);
        u16 = A.NativeUint16List_NativeUint16List$view(_this.data.buffer, 0, _null);
        B.NativeUint16List_methods.fillRange$3(u16, 0, u16.length, (gi << 8 | ri) >>> 0);
    } else if (t1 === 4) {
        t1 = c8 == null;
        ri = t1 ? 0 : B.JSInt_methods.clamp$2(A._asInt(c8.get$r()), 0, 255);
        gi = t1 ? 0 : B.JSInt_methods.clamp$2(A._asInt(c8.get$g()), 0, 255);
        bi = t1 ? 0 : B.JSInt_methods.clamp$2(A._asInt(c8.get$b()), 0, 255);
        ai = t1 ? 0 : B.JSInt_methods.clamp$2(A._asInt(c8.get$a()), 0, 255);
        u32 = A.NativeUint32List_NativeUint32List$view(_this.data.buffer, 0, _null);
        B.NativeUint32List_methods.fillRange$3(u32, 0, u32.length, (ai << 24 | bi << 16 | gi << 8 | ri) >>> 0);
    } else {
        t1 = c8 == null;
        ri = t1 ? 0 : B.JSInt_methods.clamp$2(A._asInt(c8.get$r()), 0, 255);
        gi = t1 ? 0 : B.JSInt_methods.clamp$2(A._asInt(c8.get$g()), 0, 255);
        bi = t1 ? 0 : B.JSInt_methods.clamp$2(A._asInt(c8.get$b()), 0, 255);
        for (p = A.PixelUint8$imageData(_this), t1 = p.image, t2 = t1.numChannels, t3 = t2 > 2, t4 = t2 > 1, t2 = t2 > 0, t1 = t1.data, t5 = t1.length; p.moveNext$0();) {
        if (t2) {
            t6 = p._pixel_uint8$_index;
            t7 = B.JSNumber_methods.toInt$0(B.JSInt_methods.clamp$2(ri, 0, 255));
            if (!(t6 >= 0 && t6 < t5))
            return A.ioore(t1, t6);
            t1[t6] = t7;
        }
        if (t4) {
            t6 = p._pixel_uint8$_index + 1;
            t7 = B.JSNumber_methods.toInt$0(B.JSInt_methods.clamp$2(gi, 0, 255));
            if (!(t6 >= 0 && t6 < t5))
            return A.ioore(t1, t6);
            t1[t6] = t7;
        }
        if (t3) {
            t6 = p._pixel_uint8$_index + 2;
            t7 = B.JSNumber_methods.toInt$0(B.JSInt_methods.clamp$2(bi, 0, 255));
            if (!(t6 >= 0 && t6 < t5))
            return A.ioore(t1, t6);
            t1[t6] = t7;
        }
        }
    }
    },
    get$palette() {
    return this.palette;
    }
};
A.Palette.prototype = {};
A.PaletteFloat16.prototype = {
    clone$0() {
    return new A.PaletteFloat16(new Uint16Array(A._ensureNativeList(this.data)), this.numColors, this.numChannels);
    },
    get$buffer(_) {
    return this.data.buffer;
    },
    get$format() {
    return B.Format_9;
    },
    get$maxChannelValue() {
    return 1;
    },
    $set$3(index, channel, value) {
    var t2, t3,
        t1 = this.numChannels;
    if (channel < t1) {
        t2 = this.data;
        t1 = index * t1 + channel;
        t3 = A.Float16_doubleToFloat16(value);
        if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
        t2[t1] = t3;
    }
    },
    setRgb$4(index, r, g, b) {
    var t2, t3, t4, t5,
        t1 = this.numChannels;
    index *= t1;
    t2 = this.data;
    t3 = A.Float16_doubleToFloat16(r);
    t4 = t2.length;
    if (!(index >= 0 && index < t4))
        return A.ioore(t2, index);
    t2[index] = t3;
    if (t1 > 1) {
        t3 = index + 1;
        t5 = A.Float16_doubleToFloat16(g);
        if (!(t3 < t4))
        return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 2) {
        t1 = index + 2;
        t3 = A.Float16_doubleToFloat16(b);
        if (!(t1 < t4))
            return A.ioore(t2, t1);
        t2[t1] = t3;
        }
    }
    },
    $get$2(index, channel) {
    var t2,
        t1 = this.numChannels;
    if (channel < t1) {
        t2 = this.data;
        t1 = index * t1 + channel;
        if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
        t1 = t2[t1];
        t2 = $.Float16__toFloatFloat32Data;
        t2 = t2 != null ? t2 : A.Float16__initialize();
        if (!(t1 < t2.length))
        return A.ioore(t2, t1);
        t1 = t2[t1];
    } else
        t1 = 0;
    return t1;
    },
    getRed$1(index) {
    var t1, t2;
    index *= this.numChannels;
    t1 = this.data;
    if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
    t1 = t1[index];
    t2 = $.Float16__toFloatFloat32Data;
    t2 = t2 != null ? t2 : A.Float16__initialize();
    if (!(t1 < t2.length))
        return A.ioore(t2, t1);
    return t2[t1];
    },
    getGreen$1(index) {
    var t2,
        t1 = this.numChannels;
    if (t1 < 2)
        return 0;
    t2 = this.data;
    t1 = index * t1 + 1;
    if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
    t1 = t2[t1];
    t2 = $.Float16__toFloatFloat32Data;
    t2 = t2 != null ? t2 : A.Float16__initialize();
    if (!(t1 < t2.length))
        return A.ioore(t2, t1);
    return t2[t1];
    },
    getBlue$1(index) {
    var t2,
        t1 = this.numChannels;
    if (t1 < 3)
        return 0;
    t2 = this.data;
    t1 = index * t1 + 2;
    if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
    t1 = t2[t1];
    t2 = $.Float16__toFloatFloat32Data;
    t2 = t2 != null ? t2 : A.Float16__initialize();
    if (!(t1 < t2.length))
        return A.ioore(t2, t1);
    return t2[t1];
    },
    getAlpha$1(index) {
    var t2,
        t1 = this.numChannels;
    if (t1 < 4)
        return 0;
    t2 = this.data;
    t1 = index * t1 + 3;
    if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
    t1 = t2[t1];
    t2 = $.Float16__toFloatFloat32Data;
    t2 = t2 != null ? t2 : A.Float16__initialize();
    if (!(t1 < t2.length))
        return A.ioore(t2, t1);
    return t2[t1];
    },
    setRed$2(index, value) {
    return this.$set$3(index, 0, value);
    },
    setGreen$2(index, value) {
    return this.$set$3(index, 1, value);
    },
    setBlue$2(index, value) {
    return this.$set$3(index, 2, value);
    },
    setAlpha$2(index, value) {
    return this.$set$3(index, 3, value);
    }
};
A.PaletteFloat32.prototype = {
    clone$0() {
    return new A.PaletteFloat32(new Float32Array(A._ensureNativeList(this.data)), this.numColors, this.numChannels);
    },
    get$buffer(_) {
    return this.data.buffer;
    },
    get$format() {
    return B.Format_10;
    },
    get$maxChannelValue() {
    return 1;
    },
    $set$3(index, channel, value) {
    var t2,
        t1 = this.numChannels;
    if (channel < t1) {
        t2 = this.data;
        t1 = index * t1 + channel;
        if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
        t2[t1] = value;
    }
    },
    setRgb$4(index, r, g, b) {
    var t2, t3, t4,
        t1 = this.numChannels;
    index *= t1;
    t2 = this.data;
    t3 = t2.length;
    if (!(index >= 0 && index < t3))
        return A.ioore(t2, index);
    t2[index] = r;
    if (t1 > 1) {
        t4 = index + 1;
        if (!(t4 < t3))
        return A.ioore(t2, t4);
        t2[t4] = g;
        if (t1 > 2) {
        t1 = index + 2;
        if (!(t1 < t3))
            return A.ioore(t2, t1);
        t2[t1] = b;
        }
    }
    },
    $get$2(index, channel) {
    var t2,
        t1 = this.numChannels;
    if (channel < t1) {
        t2 = this.data;
        t1 = index * t1 + channel;
        if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
        t1 = t2[t1];
    } else
        t1 = 0;
    return t1;
    },
    getRed$1(index) {
    var t1;
    index *= this.numChannels;
    t1 = this.data;
    if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
    return t1[index];
    },
    getGreen$1(index) {
    var t2,
        t1 = this.numChannels;
    if (t1 < 2)
        return 0;
    t2 = this.data;
    t1 = index * t1 + 1;
    if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
    return t2[t1];
    },
    getBlue$1(index) {
    var t2,
        t1 = this.numChannels;
    if (t1 < 3)
        return 0;
    t2 = this.data;
    t1 = index * t1 + 2;
    if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
    return t2[t1];
    },
    getAlpha$1(index) {
    var t2,
        t1 = this.numChannels;
    if (t1 < 4)
        return 0;
    t2 = this.data;
    t1 = index * t1 + 3;
    if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
    return t2[t1];
    },
    setRed$2(index, value) {
    return this.$set$3(index, 0, value);
    },
    setGreen$2(index, value) {
    return this.$set$3(index, 1, value);
    },
    setBlue$2(index, value) {
    return this.$set$3(index, 2, value);
    },
    setAlpha$2(index, value) {
    return this.$set$3(index, 3, value);
    }
};
A.PaletteFloat64.prototype = {
    clone$0() {
    return new A.PaletteFloat64(new Float64Array(A._ensureNativeList(this.data)), this.numColors, this.numChannels);
    },
    get$buffer(_) {
    return this.data.buffer;
    },
    get$format() {
    return B.Format_11;
    },
    get$maxChannelValue() {
    return 1;
    },
    $set$3(index, channel, value) {
    var t2,
        t1 = this.numChannels;
    if (channel < t1) {
        t2 = this.data;
        t1 = index * t1 + channel;
        if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
        t2[t1] = value;
    }
    },
    setRgb$4(index, r, g, b) {
    var t2, t3, t4,
        t1 = this.numChannels;
    index *= t1;
    t2 = this.data;
    t3 = t2.length;
    if (!(index >= 0 && index < t3))
        return A.ioore(t2, index);
    t2[index] = r;
    if (t1 > 1) {
        t4 = index + 1;
        if (!(t4 < t3))
        return A.ioore(t2, t4);
        t2[t4] = g;
        if (t1 > 2) {
        t1 = index + 2;
        if (!(t1 < t3))
            return A.ioore(t2, t1);
        t2[t1] = b;
        }
    }
    },
    $get$2(index, channel) {
    var t2,
        t1 = this.numChannels;
    if (channel < t1) {
        t2 = this.data;
        t1 = index * t1 + channel;
        if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
        t1 = t2[t1];
    } else
        t1 = 0;
    return t1;
    },
    getRed$1(index) {
    var t1;
    index *= this.numChannels;
    t1 = this.data;
    if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
    return t1[index];
    },
    getGreen$1(index) {
    var t2,
        t1 = this.numChannels;
    if (t1 < 2)
        return 0;
    t2 = this.data;
    t1 = index * t1 + 1;
    if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
    return t2[t1];
    },
    getBlue$1(index) {
    var t2,
        t1 = this.numChannels;
    if (t1 < 3)
        return 0;
    t2 = this.data;
    t1 = index * t1 + 2;
    if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
    return t2[t1];
    },
    getAlpha$1(index) {
    var t2,
        t1 = this.numChannels;
    if (t1 < 4)
        return 0;
    t2 = this.data;
    t1 = index * t1 + 3;
    if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
    return t2[t1];
    },
    setRed$2(index, value) {
    return this.$set$3(index, 0, value);
    },
    setGreen$2(index, value) {
    return this.$set$3(index, 1, value);
    },
    setBlue$2(index, value) {
    return this.$set$3(index, 2, value);
    },
    setAlpha$2(index, value) {
    return this.$set$3(index, 3, value);
    }
};
A.PaletteInt16.prototype = {
    clone$0() {
    return new A.PaletteInt16(new Int16Array(A._ensureNativeList(this.data)), this.numColors, this.numChannels);
    },
    get$buffer(_) {
    return this.data.buffer;
    },
    get$format() {
    return B.Format_7;
    },
    get$maxChannelValue() {
    return 32767;
    },
    $set$3(index, channel, value) {
    var t2, t3,
        t1 = this.numChannels;
    if (channel < t1) {
        t2 = this.data;
        t1 = index * t1 + channel;
        t3 = B.JSInt_methods.toInt$0(value);
        if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
        t2[t1] = t3;
    }
    },
    setRgb$4(index, r, g, b) {
    var t2, t3, t4, t5,
        t1 = this.numChannels;
    index *= t1;
    t2 = this.data;
    t3 = B.JSNumber_methods.toInt$0(r);
    t4 = t2.length;
    if (!(index >= 0 && index < t4))
        return A.ioore(t2, index);
    t2[index] = t3;
    if (t1 > 1) {
        t3 = index + 1;
        t5 = B.JSNumber_methods.toInt$0(g);
        if (!(t3 < t4))
        return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 2) {
        t1 = index + 2;
        t3 = B.JSNumber_methods.toInt$0(b);
        if (!(t1 < t4))
            return A.ioore(t2, t1);
        t2[t1] = t3;
        }
    }
    },
    $get$2(index, channel) {
    var t2,
        t1 = this.numChannels;
    if (channel < t1) {
        t2 = this.data;
        t1 = index * t1 + channel;
        if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
        t1 = t2[t1];
    } else
        t1 = 0;
    return t1;
    },
    getRed$1(index) {
    var t1;
    index *= this.numChannels;
    t1 = this.data;
    if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
    return t1[index];
    },
    getGreen$1(index) {
    var t2,
        t1 = this.numChannels;
    if (t1 < 2)
        return 0;
    t2 = this.data;
    t1 = index * t1 + 1;
    if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
    return t2[t1];
    },
    getBlue$1(index) {
    var t2,
        t1 = this.numChannels;
    if (t1 < 3)
        return 0;
    t2 = this.data;
    t1 = index * t1 + 2;
    if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
    return t2[t1];
    },
    getAlpha$1(index) {
    var t2,
        t1 = this.numChannels;
    if (t1 < 4)
        return 0;
    t2 = this.data;
    t1 = index * t1 + 3;
    if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
    return t2[t1];
    },
    setRed$2(index, value) {
    return this.$set$3(index, 0, value);
    },
    setGreen$2(index, value) {
    return this.$set$3(index, 1, value);
    },
    setBlue$2(index, value) {
    return this.$set$3(index, 2, value);
    },
    setAlpha$2(index, value) {
    return this.$set$3(index, 3, value);
    }
};
A.PaletteInt32.prototype = {
    clone$0() {
    return new A.PaletteInt32(new Int32Array(A._ensureNativeList(this.data)), this.numColors, this.numChannels);
    },
    get$buffer(_) {
    return this.data.buffer;
    },
    get$format() {
    return B.Format_8;
    },
    get$maxChannelValue() {
    return 2147483647;
    },
    $set$3(index, channel, value) {
    var t2, t3,
        t1 = this.numChannels;
    if (channel < t1) {
        t2 = this.data;
        t1 = index * t1 + channel;
        t3 = B.JSInt_methods.toInt$0(value);
        if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
        t2[t1] = t3;
    }
    },
    setRgb$4(index, r, g, b) {
    var t2, t3, t4, t5,
        t1 = this.numChannels;
    index *= t1;
    t2 = this.data;
    t3 = B.JSNumber_methods.toInt$0(r);
    t4 = t2.length;
    if (!(index >= 0 && index < t4))
        return A.ioore(t2, index);
    t2[index] = t3;
    if (t1 > 1) {
        t3 = index + 1;
        t5 = B.JSNumber_methods.toInt$0(g);
        if (!(t3 < t4))
        return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 2) {
        t1 = index + 2;
        t3 = B.JSNumber_methods.toInt$0(b);
        if (!(t1 < t4))
            return A.ioore(t2, t1);
        t2[t1] = t3;
        }
    }
    },
    $get$2(index, channel) {
    var t2,
        t1 = this.numChannels;
    if (channel < t1) {
        t2 = this.data;
        t1 = index * t1 + channel;
        if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
        t1 = t2[t1];
    } else
        t1 = 0;
    return t1;
    },
    getRed$1(index) {
    var t1;
    index *= this.numChannels;
    t1 = this.data;
    if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
    return t1[index];
    },
    getGreen$1(index) {
    var t2,
        t1 = this.numChannels;
    if (t1 < 2)
        return 0;
    t2 = this.data;
    t1 = index * t1 + 1;
    if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
    return t2[t1];
    },
    getBlue$1(index) {
    var t2,
        t1 = this.numChannels;
    if (t1 < 3)
        return 0;
    t2 = this.data;
    t1 = index * t1 + 2;
    if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
    return t2[t1];
    },
    getAlpha$1(index) {
    var t2,
        t1 = this.numChannels;
    if (t1 < 4)
        return 0;
    t2 = this.data;
    t1 = index * t1 + 3;
    if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
    return t2[t1];
    },
    setRed$2(index, value) {
    return this.$set$3(index, 0, value);
    },
    setGreen$2(index, value) {
    return this.$set$3(index, 1, value);
    },
    setBlue$2(index, value) {
    return this.$set$3(index, 2, value);
    },
    setAlpha$2(index, value) {
    return this.$set$3(index, 3, value);
    }
};
A.PaletteInt8.prototype = {
    clone$0() {
    return new A.PaletteInt8(new Int8Array(A._ensureNativeList(this.data)), this.numColors, this.numChannels);
    },
    get$buffer(_) {
    return this.data.buffer;
    },
    get$format() {
    return B.Format_6;
    },
    get$maxChannelValue() {
    return 127;
    },
    $set$3(index, channel, value) {
    var t2, t3,
        t1 = this.numChannels;
    if (channel < t1) {
        t2 = this.data;
        t1 = index * t1 + channel;
        t3 = B.JSInt_methods.toInt$0(value);
        if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
        t2[t1] = t3;
    }
    },
    setRgb$4(index, r, g, b) {
    var t2, t3, t4, t5,
        t1 = this.numChannels;
    index *= t1;
    t2 = this.data;
    t3 = B.JSNumber_methods.toInt$0(r);
    t4 = t2.length;
    if (!(index >= 0 && index < t4))
        return A.ioore(t2, index);
    t2[index] = t3;
    if (t1 > 1) {
        t3 = index + 1;
        t5 = B.JSNumber_methods.toInt$0(g);
        if (!(t3 < t4))
        return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 2) {
        t1 = index + 2;
        t3 = B.JSNumber_methods.toInt$0(b);
        if (!(t1 < t4))
            return A.ioore(t2, t1);
        t2[t1] = t3;
        }
    }
    },
    $get$2(index, channel) {
    var t2,
        t1 = this.numChannels;
    if (channel < t1) {
        t2 = this.data;
        t1 = index * t1 + channel;
        if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
        t1 = t2[t1];
    } else
        t1 = 0;
    return t1;
    },
    getRed$1(index) {
    var t1;
    index *= this.numChannels;
    t1 = this.data;
    if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
    return t1[index];
    },
    getGreen$1(index) {
    var t2,
        t1 = this.numChannels;
    if (t1 < 2)
        return 0;
    t2 = this.data;
    t1 = index * t1 + 1;
    if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
    return t2[t1];
    },
    getBlue$1(index) {
    var t2,
        t1 = this.numChannels;
    if (t1 < 3)
        return 0;
    t2 = this.data;
    t1 = index * t1 + 2;
    if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
    return t2[t1];
    },
    getAlpha$1(index) {
    var t2,
        t1 = this.numChannels;
    if (t1 < 4)
        return 0;
    t2 = this.data;
    t1 = index * t1 + 3;
    if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
    return t2[t1];
    },
    setRed$2(index, value) {
    return this.$set$3(index, 0, value);
    },
    setGreen$2(index, value) {
    return this.$set$3(index, 1, value);
    },
    setBlue$2(index, value) {
    return this.$set$3(index, 2, value);
    },
    setAlpha$2(index, value) {
    return this.$set$3(index, 3, value);
    }
};
A.PaletteUint16.prototype = {
    clone$0() {
    return new A.PaletteUint16(new Uint16Array(A._ensureNativeList(this.data)), this.numColors, this.numChannels);
    },
    get$buffer(_) {
    return this.data.buffer;
    },
    get$format() {
    return B.Format_4;
    },
    get$maxChannelValue() {
    return 65535;
    },
    $set$3(index, channel, value) {
    var t2, t3,
        t1 = this.numChannels;
    if (channel < t1) {
        t2 = this.data;
        t1 = index * t1 + channel;
        t3 = B.JSInt_methods.toInt$0(value);
        if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
        t2[t1] = t3;
    }
    },
    setRgb$4(index, r, g, b) {
    var t2, t3, t4, t5,
        t1 = this.numChannels;
    index *= t1;
    t2 = this.data;
    t3 = B.JSNumber_methods.toInt$0(r);
    t4 = t2.length;
    if (!(index >= 0 && index < t4))
        return A.ioore(t2, index);
    t2[index] = t3;
    if (t1 > 1) {
        t3 = index + 1;
        t5 = B.JSNumber_methods.toInt$0(g);
        if (!(t3 < t4))
        return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 2) {
        t1 = index + 2;
        t3 = B.JSNumber_methods.toInt$0(b);
        if (!(t1 < t4))
            return A.ioore(t2, t1);
        t2[t1] = t3;
        }
    }
    },
    $get$2(index, channel) {
    var t2,
        t1 = this.numChannels;
    if (channel < t1) {
        t2 = this.data;
        t1 = index * t1 + channel;
        if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
        t1 = t2[t1];
    } else
        t1 = 0;
    return t1;
    },
    getRed$1(index) {
    var t1;
    index *= this.numChannels;
    t1 = this.data;
    if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
    return t1[index];
    },
    getGreen$1(index) {
    var t2,
        t1 = this.numChannels;
    if (t1 < 2)
        return 0;
    t2 = this.data;
    t1 = index * t1 + 1;
    if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
    return t2[t1];
    },
    getBlue$1(index) {
    var t2,
        t1 = this.numChannels;
    if (t1 < 3)
        return 0;
    t2 = this.data;
    t1 = index * t1 + 2;
    if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
    return t2[t1];
    },
    getAlpha$1(index) {
    var t2,
        t1 = this.numChannels;
    if (t1 < 4)
        return 0;
    t2 = this.data;
    t1 = index * t1 + 3;
    if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
    return t2[t1];
    },
    setRed$2(index, value) {
    return this.$set$3(index, 0, value);
    },
    setGreen$2(index, value) {
    return this.$set$3(index, 1, value);
    },
    setBlue$2(index, value) {
    return this.$set$3(index, 2, value);
    },
    setAlpha$2(index, value) {
    return this.$set$3(index, 3, value);
    }
};
A.PaletteUint32.prototype = {
    clone$0() {
    return new A.PaletteUint32(new Uint32Array(A._ensureNativeList(this.data)), this.numColors, this.numChannels);
    },
    get$buffer(_) {
    return this.data.buffer;
    },
    get$format() {
    return B.Format_5;
    },
    get$maxChannelValue() {
    return 4294967295;
    },
    $set$3(index, channel, value) {
    var t2, t3,
        t1 = this.numChannels;
    if (channel < t1) {
        t2 = this.data;
        t1 = index * t1 + channel;
        t3 = B.JSNumber_methods.toInt$0(value);
        if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
        t2[t1] = t3;
    }
    },
    setRgb$4(index, r, g, b) {
    var t2, t3, t4, t5,
        t1 = this.numChannels;
    index *= t1;
    t2 = this.data;
    t3 = B.JSNumber_methods.toInt$0(r);
    t4 = t2.length;
    if (!(index >= 0 && index < t4))
        return A.ioore(t2, index);
    t2[index] = t3;
    if (t1 > 1) {
        t3 = index + 1;
        t5 = B.JSNumber_methods.toInt$0(g);
        if (!(t3 < t4))
        return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 2) {
        t1 = index + 2;
        t3 = B.JSNumber_methods.toInt$0(b);
        if (!(t1 < t4))
            return A.ioore(t2, t1);
        t2[t1] = t3;
        }
    }
    },
    $get$2(index, channel) {
    var t2,
        t1 = this.numChannels;
    if (channel < t1) {
        t2 = this.data;
        t1 = index * t1 + channel;
        if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
        t1 = t2[t1];
    } else
        t1 = 0;
    return t1;
    },
    getRed$1(index) {
    var t1;
    index *= this.numChannels;
    t1 = this.data;
    if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
    return t1[index];
    },
    getGreen$1(index) {
    var t2,
        t1 = this.numChannels;
    if (t1 < 2)
        return 0;
    t2 = this.data;
    t1 = index * t1 + 1;
    if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
    return t2[t1];
    },
    getBlue$1(index) {
    var t2,
        t1 = this.numChannels;
    if (t1 < 3)
        return 0;
    t2 = this.data;
    t1 = index * t1 + 2;
    if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
    return t2[t1];
    },
    getAlpha$1(index) {
    var t2,
        t1 = this.numChannels;
    if (t1 < 4)
        return 0;
    t2 = this.data;
    t1 = index * t1 + 3;
    if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
    return t2[t1];
    },
    setRed$2(index, value) {
    return this.$set$3(index, 0, value);
    },
    setGreen$2(index, value) {
    return this.$set$3(index, 1, value);
    },
    setBlue$2(index, value) {
    return this.$set$3(index, 2, value);
    },
    setAlpha$2(index, value) {
    return this.$set$3(index, 3, value);
    }
};
A.PaletteUint8.prototype = {
    clone$0() {
    return A.PaletteUint8$from(this);
    },
    get$buffer(_) {
    return this.data.buffer;
    },
    get$format() {
    return B.Format_3;
    },
    get$maxChannelValue() {
    return 255;
    },
    $set$3(index, channel, value) {
    var t2, t3,
        t1 = this.numChannels;
    if (channel < t1) {
        t2 = this.data;
        t1 = index * t1 + channel;
        t3 = B.JSInt_methods.toInt$0(value);
        if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
        t2[t1] = t3;
    }
    },
    setRgb$4(index, r, g, b) {
    var t2, t3, t4, t5,
        t1 = this.numChannels;
    index *= t1;
    t2 = this.data;
    t3 = B.JSNumber_methods.toInt$0(r);
    t4 = t2.length;
    if (!(index >= 0 && index < t4))
        return A.ioore(t2, index);
    t2[index] = t3;
    if (t1 > 1) {
        t3 = index + 1;
        t5 = B.JSNumber_methods.toInt$0(g);
        if (!(t3 < t4))
        return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 2) {
        t1 = index + 2;
        t3 = B.JSNumber_methods.toInt$0(b);
        if (!(t1 < t4))
            return A.ioore(t2, t1);
        t2[t1] = t3;
        }
    }
    },
    setRgba$5(index, r, g, b, a) {
    var t2, t3, t4, t5,
        t1 = this.numChannels;
    index *= t1;
    t2 = this.data;
    t3 = B.JSInt_methods.toInt$0(r);
    t4 = t2.length;
    if (!(index >= 0 && index < t4))
        return A.ioore(t2, index);
    t2[index] = t3;
    if (t1 > 1) {
        t3 = index + 1;
        t5 = B.JSInt_methods.toInt$0(g);
        if (!(t3 < t4))
        return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 2) {
        t3 = index + 2;
        t5 = B.JSInt_methods.toInt$0(b);
        if (!(t3 < t4))
            return A.ioore(t2, t3);
        t2[t3] = t5;
        if (t1 > 3) {
            t1 = index + 3;
            t3 = B.JSInt_methods.toInt$0(a);
            if (!(t1 < t4))
            return A.ioore(t2, t1);
            t2[t1] = t3;
        }
        }
    }
    },
    $get$2(index, channel) {
    var t2,
        t1 = this.numChannels;
    if (channel < t1) {
        t2 = this.data;
        t1 = index * t1 + channel;
        if (!(t1 >= 0 && t1 < t2.length))
        return A.ioore(t2, t1);
        t1 = t2[t1];
    } else
        t1 = 0;
    return t1;
    },
    getRed$1(index) {
    var t1, t2;
    index *= this.numChannels;
    t1 = this.data;
    t2 = t1.length;
    if (index >= t2)
        return 0;
    if (!(index >= 0))
        return A.ioore(t1, index);
    return t1[index];
    },
    getGreen$1(index) {
    var t2, t3,
        t1 = this.numChannels;
    if (t1 < 2)
        return 0;
    index *= t1;
    t1 = this.data;
    t2 = t1.length;
    if (index >= t2)
        return 0;
    t3 = index + 1;
    if (!(t3 >= 0 && t3 < t2))
        return A.ioore(t1, t3);
    return t1[t3];
    },
    getBlue$1(index) {
    var t2, t3,
        t1 = this.numChannels;
    if (t1 < 3)
        return 0;
    index *= t1;
    t1 = this.data;
    t2 = t1.length;
    if (index >= t2)
        return 0;
    t3 = index + 2;
    if (!(t3 >= 0 && t3 < t2))
        return A.ioore(t1, t3);
    return t1[t3];
    },
    getAlpha$1(index) {
    var t2, t3,
        t1 = this.numChannels;
    if (t1 < 4)
        return 255;
    index *= t1;
    t1 = this.data;
    t2 = t1.length;
    if (index >= t2)
        return 0;
    t3 = index + 3;
    if (!(t3 >= 0 && t3 < t2))
        return A.ioore(t1, t3);
    return t1[t3];
    },
    setRed$2(index, value) {
    return this.$set$3(index, 0, value);
    },
    setGreen$2(index, value) {
    return this.$set$3(index, 1, value);
    },
    setBlue$2(index, value) {
    return this.$set$3(index, 2, value);
    },
    setAlpha$2(index, value) {
    return this.$set$3(index, 3, value);
    }
};
A.PixelFloat16.prototype = {
    clone$0() {
    var _this = this;
    return new A.PixelFloat16(_this._pixel_float16$_x, _this._pixel_float16$_y, _this._pixel_float16$_index, _this.image);
    },
    get$format() {
    return B.Format_9;
    },
    get$length(_) {
    return this.image.numChannels;
    },
    get$palette() {
    return null;
    },
    get$maxChannelValue() {
    return 1;
    },
    get$x() {
    return this._pixel_float16$_x;
    },
    get$y() {
    return this._pixel_float16$_y;
    },
    setPosition$2(x, y) {
    var t1, t2, _this = this;
    _this._pixel_float16$_x = x;
    _this._pixel_float16$_y = y;
    t1 = _this.image;
    t2 = t1.numChannels;
    _this._pixel_float16$_index = y * t1.width * t2 + x * t2;
    },
    get$current() {
    return this;
    },
    moveNext$0() {
    var t2, _this = this,
        t1 = _this.image;
    if (++_this._pixel_float16$_x === t1.width) {
        _this._pixel_float16$_x = 0;
        if (++_this._pixel_float16$_y === t1.height)
        return false;
    }
    t2 = _this._pixel_float16$_index + t1.numChannels;
    _this._pixel_float16$_index = t2;
    return t2 < t1.data.length;
    },
    $index(_, i) {
    var t2,
        t1 = this.image;
    if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_float16$_index + i;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = $.Float16__toFloatFloat32Data;
        t1 = t1 != null ? t1 : A.Float16__initialize();
        if (!(t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    $indexSet(_, i, value) {
    var t1, t2, t3;
    A._asNum(value);
    t1 = this.image;
    if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_float16$_index + i;
        t3 = A.Float16_doubleToFloat16(value);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$index() {
    return this.get$r();
    },
    set$index(i) {
    this.set$r(i);
    },
    get$r() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_float16$_index;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = $.Float16__toFloatFloat32Data;
        t1 = t1 != null ? t1 : A.Float16__initialize();
        if (!(t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$r(r) {
    var t2, t3,
        t1 = this.image;
    if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_float16$_index;
        t3 = A.Float16_doubleToFloat16(r);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$g() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_float16$_index + 1;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = $.Float16__toFloatFloat32Data;
        t1 = t1 != null ? t1 : A.Float16__initialize();
        if (!(t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$g(g) {
    var t2, t3,
        t1 = this.image;
    if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_float16$_index + 1;
        t3 = A.Float16_doubleToFloat16(g);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$b() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_float16$_index + 2;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = $.Float16__toFloatFloat32Data;
        t1 = t1 != null ? t1 : A.Float16__initialize();
        if (!(t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$b(b) {
    var t2, t3,
        t1 = this.image;
    if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_float16$_index + 2;
        t3 = A.Float16_doubleToFloat16(b);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$a() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_float16$_index + 3;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = $.Float16__toFloatFloat32Data;
        t1 = t1 != null ? t1 : A.Float16__initialize();
        if (!(t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$a(a) {
    var d, t2, t3,
        t1 = this.image;
    if (t1.numChannels > 3) {
        d = this.get$g();
        t1 = t1.data;
        t2 = this._pixel_float16$_index + 3;
        t3 = A.Float16_doubleToFloat16(d);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$rNormalized() {
    return this.get$r() / 1;
    },
    set$rNormalized(v) {
    this.set$r(v);
    },
    get$gNormalized() {
    return this.get$g() / 1;
    },
    set$gNormalized(v) {
    this.set$g(v);
    },
    get$bNormalized() {
    return this.get$b() / 1;
    },
    set$bNormalized(v) {
    this.set$b(v);
    },
    get$aNormalized() {
    return this.get$a() / 1;
    },
    set$aNormalized(v) {
    this.set$a(v);
    },
    get$luminance() {
    return A.getLuminance(this);
    },
    $set$1(c) {
    var _this = this;
    if (_this.image.numChannels > 0) {
        _this.set$r(c.get$r());
        _this.set$g(c.get$g());
        _this.set$b(c.get$b());
        _this.set$a(c.get$a());
    }
    },
    setRgb$3(r, g, b) {
    var t3, t4, t5, _this = this,
        t1 = _this.image,
        t2 = t1.numChannels;
    if (t2 > 0) {
        t1 = t1.data;
        t3 = _this._pixel_float16$_index;
        t4 = A.Float16_doubleToFloat16(r);
        t5 = t1.length;
        if (!(t3 >= 0 && t3 < t5))
        return A.ioore(t1, t3);
        t1[t3] = t4;
        if (t2 > 1) {
        t3 = _this._pixel_float16$_index + 1;
        t4 = A.Float16_doubleToFloat16(g);
        if (!(t3 >= 0 && t3 < t5))
            return A.ioore(t1, t3);
        t1[t3] = t4;
        if (t2 > 2) {
            t2 = _this._pixel_float16$_index + 2;
            t3 = A.Float16_doubleToFloat16(b);
            if (!(t2 >= 0 && t2 < t5))
            return A.ioore(t1, t2);
            t1[t2] = t3;
        }
        }
    }
    },
    setRgba$4(r, g, b, a) {
    var t3, t4, t5, _this = this,
        t1 = _this.image,
        t2 = t1.numChannels;
    if (t2 > 0) {
        t1 = t1.data;
        t3 = _this._pixel_float16$_index;
        t4 = A.Float16_doubleToFloat16(r);
        t5 = t1.length;
        if (!(t3 >= 0 && t3 < t5))
        return A.ioore(t1, t3);
        t1[t3] = t4;
        if (t2 > 1) {
        t3 = _this._pixel_float16$_index + 1;
        t4 = A.Float16_doubleToFloat16(g);
        if (!(t3 >= 0 && t3 < t5))
            return A.ioore(t1, t3);
        t1[t3] = t4;
        if (t2 > 2) {
            t3 = _this._pixel_float16$_index + 2;
            t4 = A.Float16_doubleToFloat16(b);
            if (!(t3 >= 0 && t3 < t5))
            return A.ioore(t1, t3);
            t1[t3] = t4;
            if (t2 > 3) {
            t2 = _this._pixel_float16$_index + 3;
            t3 = A.Float16_doubleToFloat16(a);
            if (!(t2 >= 0 && t2 < t5))
                return A.ioore(t1, t2);
            t1[t2] = t3;
            }
        }
        }
    }
    },
    get$iterator(_) {
    return new A.ChannelIterator(this);
    },
    $eq(_, other) {
    var t1, t2, t3, t4, t5, _this = this;
    if (other == null)
        return false;
    if (other instanceof A.PixelFloat16)
        return A.Object_hashAll(A.List_List$of(_this, true, A._instanceType(_this)._eval$1("Iterable.E"))) === A.Object_hashAll(A.List_List$of(other, true, A._instanceType(other)._eval$1("Iterable.E")));
    if (type$.List_int._is(other)) {
        t1 = J.getInterceptor$asx(other);
        t2 = _this.image;
        t3 = t2.numChannels;
        if (t1.get$length(other) !== t3)
        return false;
        t2 = t2.data;
        t4 = _this._pixel_float16$_index;
        t5 = t2.length;
        if (!(t4 >= 0 && t4 < t5))
        return A.ioore(t2, t4);
        if (t2[t4] !== t1.$index(other, 0))
        return false;
        if (t3 > 1) {
        t4 = _this._pixel_float16$_index + 1;
        if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t2, t4);
        if (t2[t4] !== t1.$index(other, 1))
            return false;
        if (t3 > 2) {
            t4 = _this._pixel_float16$_index + 2;
            if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t2, t4);
            if (t2[t4] !== t1.$index(other, 2))
            return false;
            if (t3 > 3) {
            t3 = _this._pixel_float16$_index + 3;
            if (!(t3 >= 0 && t3 < t5))
                return A.ioore(t2, t3);
            if (t2[t3] !== t1.$index(other, 3))
                return false;
            }
        }
        }
        return true;
    }
    return false;
    },
    get$hashCode(_) {
    return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isIterator: 1,
    $isColor: 1,
    $isPixel: 1,
    get$image() {
    return this.image;
    }
};
A.PixelFloat32.prototype = {
    clone$0() {
    var _this = this;
    return new A.PixelFloat32(_this._pixel_float32$_x, _this._pixel_float32$_y, _this._pixel_float32$_index, _this.image);
    },
    get$length(_) {
    return this.image.numChannels;
    },
    get$palette() {
    return null;
    },
    get$maxChannelValue() {
    return 1;
    },
    get$format() {
    return B.Format_10;
    },
    get$x() {
    return this._pixel_float32$_x;
    },
    get$y() {
    return this._pixel_float32$_y;
    },
    setPosition$2(x, y) {
    var t1, t2, _this = this;
    _this._pixel_float32$_x = x;
    _this._pixel_float32$_y = y;
    t1 = _this.image;
    t2 = t1.numChannels;
    _this._pixel_float32$_index = y * t1.width * t2 + x * t2;
    },
    get$current() {
    return this;
    },
    moveNext$0() {
    var t2, _this = this,
        t1 = _this.image;
    if (++_this._pixel_float32$_x === t1.width) {
        _this._pixel_float32$_x = 0;
        if (++_this._pixel_float32$_y === t1.height)
        return false;
    }
    t2 = _this._pixel_float32$_index + t1.numChannels;
    _this._pixel_float32$_index = t2;
    return t2 < t1.data.length;
    },
    $index(_, i) {
    var t2,
        t1 = this.image;
    if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_float32$_index + i;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    $indexSet(_, i, value) {
    var t1, t2;
    A._asNum(value);
    t1 = this.image;
    if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_float32$_index + i;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = value;
    }
    },
    get$index() {
    return this.get$r();
    },
    set$index(i) {
    this.set$r(i);
    },
    get$r() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_float32$_index;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$r(r) {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_float32$_index;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = r;
    }
    },
    get$g() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_float32$_index + 1;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$g(g) {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_float32$_index + 1;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = g;
    }
    },
    get$b() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_float32$_index + 2;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$b(b) {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_float32$_index + 2;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = b;
    }
    },
    get$a() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_float32$_index + 3;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 1;
    return t1;
    },
    set$a(a) {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_float32$_index + 3;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = a;
    }
    },
    get$rNormalized() {
    return this.get$r() / 1;
    },
    set$rNormalized(v) {
    this.set$r(v);
    },
    get$gNormalized() {
    return this.get$g() / 1;
    },
    set$gNormalized(v) {
    this.set$g(v);
    },
    get$bNormalized() {
    return this.get$b() / 1;
    },
    set$bNormalized(v) {
    this.set$b(v);
    },
    get$aNormalized() {
    return this.get$a() / 1;
    },
    set$aNormalized(v) {
    this.set$a(v);
    },
    get$luminance() {
    return A.getLuminance(this);
    },
    $set$1(c) {
    var _this = this;
    _this.set$r(c.get$r());
    _this.set$g(c.get$g());
    _this.set$b(c.get$b());
    _this.set$a(c.get$a());
    },
    setRgb$3(r, g, b) {
    var t5,
        t1 = this.image,
        t2 = t1.data,
        t3 = this._pixel_float32$_index,
        t4 = t2.length;
    if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t2, t3);
    t2[t3] = r;
    t1 = t1.numChannels;
    if (t1 > 1) {
        t5 = t3 + 1;
        if (!(t5 < t4))
        return A.ioore(t2, t5);
        t2[t5] = g;
        if (t1 > 2) {
        t1 = t3 + 2;
        if (!(t1 < t4))
            return A.ioore(t2, t1);
        t2[t1] = b;
        }
    }
    },
    setRgba$4(r, g, b, a) {
    var t5,
        t1 = this.image,
        t2 = t1.data,
        t3 = this._pixel_float32$_index,
        t4 = t2.length;
    if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t2, t3);
    t2[t3] = r;
    t1 = t1.numChannels;
    if (t1 > 1) {
        t5 = t3 + 1;
        if (!(t5 < t4))
        return A.ioore(t2, t5);
        t2[t5] = g;
        if (t1 > 2) {
        t5 = t3 + 2;
        if (!(t5 < t4))
            return A.ioore(t2, t5);
        t2[t5] = b;
        if (t1 > 3) {
            t1 = t3 + 3;
            if (!(t1 < t4))
            return A.ioore(t2, t1);
            t2[t1] = a;
        }
        }
    }
    },
    get$iterator(_) {
    return new A.ChannelIterator(this);
    },
    $eq(_, other) {
    var t1, t2, t3, t4, t5, _this = this;
    if (other == null)
        return false;
    if (other instanceof A.PixelFloat32)
        return A.Object_hashAll(A.List_List$of(_this, true, A._instanceType(_this)._eval$1("Iterable.E"))) === A.Object_hashAll(A.List_List$of(other, true, A._instanceType(other)._eval$1("Iterable.E")));
    if (type$.List_int._is(other)) {
        t1 = J.getInterceptor$asx(other);
        t2 = _this.image;
        t3 = t2.numChannels;
        if (t1.get$length(other) !== t3)
        return false;
        t2 = t2.data;
        t4 = _this._pixel_float32$_index;
        t5 = t2.length;
        if (!(t4 >= 0 && t4 < t5))
        return A.ioore(t2, t4);
        if (t2[t4] !== t1.$index(other, 0))
        return false;
        if (t3 > 1) {
        t4 = _this._pixel_float32$_index + 1;
        if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t2, t4);
        if (t2[t4] !== t1.$index(other, 1))
            return false;
        if (t3 > 2) {
            t4 = _this._pixel_float32$_index + 2;
            if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t2, t4);
            if (t2[t4] !== t1.$index(other, 2))
            return false;
            if (t3 > 3) {
            t3 = _this._pixel_float32$_index + 3;
            if (!(t3 >= 0 && t3 < t5))
                return A.ioore(t2, t3);
            if (t2[t3] !== t1.$index(other, 3))
                return false;
            }
        }
        }
        return true;
    }
    return false;
    },
    get$hashCode(_) {
    return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isIterator: 1,
    $isColor: 1,
    $isPixel: 1,
    get$image() {
    return this.image;
    }
};
A.PixelFloat64.prototype = {
    clone$0() {
    var _this = this;
    return new A.PixelFloat64(_this._x, _this._y, _this._pixel_float64$_index, _this.image);
    },
    get$length(_) {
    return this.image.numChannels;
    },
    get$palette() {
    return null;
    },
    get$maxChannelValue() {
    return 1;
    },
    get$format() {
    return B.Format_11;
    },
    get$x() {
    return this._x;
    },
    get$y() {
    return this._y;
    },
    setPosition$2(x, y) {
    var t1, t2, _this = this;
    _this._x = x;
    _this._y = y;
    t1 = _this.image;
    t2 = t1.numChannels;
    _this._pixel_float64$_index = y * t1.width * t2 + x * t2;
    },
    get$current() {
    return this;
    },
    moveNext$0() {
    var t2, _this = this,
        t1 = _this.image;
    if (++_this._x === t1.width) {
        _this._x = 0;
        if (++_this._y === t1.height)
        return false;
    }
    t2 = _this._pixel_float64$_index + t1.numChannels;
    _this._pixel_float64$_index = t2;
    return t2 < t1.data.length;
    },
    $index(_, i) {
    var t2,
        t1 = this.image;
    if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_float64$_index + i;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    $indexSet(_, i, value) {
    var t1, t2;
    A._asNum(value);
    t1 = this.image;
    if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_float64$_index + i;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = value;
    }
    },
    get$index() {
    return this.get$r();
    },
    set$index(i) {
    this.set$r(i);
    },
    get$r() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_float64$_index;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$r(r) {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_float64$_index;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = r;
    }
    },
    get$g() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_float64$_index + 1;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$g(g) {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_float64$_index + 1;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = g;
    }
    },
    get$b() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_float64$_index + 2;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$b(b) {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_float64$_index + 2;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = b;
    }
    },
    get$a() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_float64$_index + 3;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$a(a) {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_float64$_index + 3;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = a;
    }
    },
    get$rNormalized() {
    return this.get$r() / 1;
    },
    set$rNormalized(v) {
    this.set$r(v);
    },
    get$gNormalized() {
    return this.get$g() / 1;
    },
    set$gNormalized(v) {
    this.set$g(v);
    },
    get$bNormalized() {
    return this.get$b() / 1;
    },
    set$bNormalized(v) {
    this.set$b(v);
    },
    get$aNormalized() {
    return this.get$a() / 1;
    },
    set$aNormalized(v) {
    this.set$a(v);
    },
    get$luminance() {
    return A.getLuminance(this);
    },
    $set$1(c) {
    var _this = this;
    _this.set$r(c.get$r());
    _this.set$g(c.get$g());
    _this.set$b(c.get$b());
    _this.set$a(c.get$a());
    },
    setRgb$3(r, g, b) {
    var t5,
        t1 = this.image,
        t2 = t1.data,
        t3 = this._pixel_float64$_index,
        t4 = t2.length;
    if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t2, t3);
    t2[t3] = r;
    t1 = t1.numChannels;
    if (t1 > 1) {
        t5 = t3 + 1;
        if (!(t5 < t4))
        return A.ioore(t2, t5);
        t2[t5] = g;
        if (t1 > 2) {
        t1 = t3 + 2;
        if (!(t1 < t4))
            return A.ioore(t2, t1);
        t2[t1] = b;
        }
    }
    },
    setRgba$4(r, g, b, a) {
    var t5,
        t1 = this.image,
        t2 = t1.data,
        t3 = this._pixel_float64$_index,
        t4 = t2.length;
    if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t2, t3);
    t2[t3] = r;
    t1 = t1.numChannels;
    if (t1 > 1) {
        t5 = t3 + 1;
        if (!(t5 < t4))
        return A.ioore(t2, t5);
        t2[t5] = g;
        if (t1 > 2) {
        t5 = t3 + 2;
        if (!(t5 < t4))
            return A.ioore(t2, t5);
        t2[t5] = b;
        if (t1 > 3) {
            t1 = t3 + 3;
            if (!(t1 < t4))
            return A.ioore(t2, t1);
            t2[t1] = a;
        }
        }
    }
    },
    get$iterator(_) {
    return new A.ChannelIterator(this);
    },
    $eq(_, other) {
    var t1, t2, t3, t4, t5, _this = this;
    if (other == null)
        return false;
    if (other instanceof A.PixelFloat64)
        return A.Object_hashAll(A.List_List$of(_this, true, A._instanceType(_this)._eval$1("Iterable.E"))) === A.Object_hashAll(A.List_List$of(other, true, A._instanceType(other)._eval$1("Iterable.E")));
    if (type$.List_int._is(other)) {
        t1 = J.getInterceptor$asx(other);
        t2 = _this.image;
        t3 = t2.numChannels;
        if (t1.get$length(other) !== t3)
        return false;
        t2 = t2.data;
        t4 = _this._pixel_float64$_index;
        t5 = t2.length;
        if (!(t4 >= 0 && t4 < t5))
        return A.ioore(t2, t4);
        if (t2[t4] !== t1.$index(other, 0))
        return false;
        if (t3 > 1) {
        t4 = _this._pixel_float64$_index + 1;
        if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t2, t4);
        if (t2[t4] !== t1.$index(other, 1))
            return false;
        if (t3 > 2) {
            t4 = _this._pixel_float64$_index + 2;
            if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t2, t4);
            if (t2[t4] !== t1.$index(other, 2))
            return false;
            if (t3 > 3) {
            t3 = _this._pixel_float64$_index + 3;
            if (!(t3 >= 0 && t3 < t5))
                return A.ioore(t2, t3);
            if (t2[t3] !== t1.$index(other, 3))
                return false;
            }
        }
        }
        return true;
    }
    return false;
    },
    get$hashCode(_) {
    return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isIterator: 1,
    $isColor: 1,
    $isPixel: 1,
    get$image() {
    return this.image;
    }
};
A.PixelInt16.prototype = {
    clone$0() {
    var _this = this;
    return new A.PixelInt16(_this._pixel_int16$_x, _this._pixel_int16$_y, _this._pixel_int16$_index, _this.image);
    },
    get$length(_) {
    return this.image.numChannels;
    },
    get$palette() {
    return null;
    },
    get$maxChannelValue() {
    return 32767;
    },
    get$format() {
    return B.Format_7;
    },
    get$x() {
    return this._pixel_int16$_x;
    },
    get$y() {
    return this._pixel_int16$_y;
    },
    setPosition$2(x, y) {
    var t1, t2, _this = this;
    _this._pixel_int16$_x = x;
    _this._pixel_int16$_y = y;
    t1 = _this.image;
    t2 = t1.numChannels;
    _this._pixel_int16$_index = y * t1.width * t2 + x * t2;
    },
    get$current() {
    return this;
    },
    moveNext$0() {
    var t2, _this = this,
        t1 = _this.image;
    if (++_this._pixel_int16$_x === t1.width) {
        _this._pixel_int16$_x = 0;
        if (++_this._pixel_int16$_y === t1.height)
        return false;
    }
    t2 = _this._pixel_int16$_index + t1.numChannels;
    _this._pixel_int16$_index = t2;
    return t2 < t1.data.length;
    },
    $index(_, i) {
    var t2,
        t1 = this.image;
    if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_int16$_index + i;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    $indexSet(_, i, value) {
    var t1, t2, t3;
    A._asNum(value);
    t1 = this.image;
    if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_int16$_index + i;
        t3 = B.JSNumber_methods.toInt$0(value);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$index() {
    return this.get$r();
    },
    set$index(i) {
    this.set$r(i);
    },
    get$r() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_int16$_index;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$r(r) {
    var t2, t3,
        t1 = this.image;
    if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_int16$_index;
        t3 = B.JSNumber_methods.toInt$0(r);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$g() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_int16$_index + 1;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$g(g) {
    var t2, t3,
        t1 = this.image;
    if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_int16$_index + 1;
        t3 = B.JSNumber_methods.toInt$0(g);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$b() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_int16$_index + 2;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$b(b) {
    var t2, t3,
        t1 = this.image;
    if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_int16$_index + 2;
        t3 = B.JSNumber_methods.toInt$0(b);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$a() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_int16$_index + 3;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$a(a) {
    var t2, t3,
        t1 = this.image;
    if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_int16$_index + 3;
        t3 = B.JSNumber_methods.toInt$0(a);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$rNormalized() {
    return this.get$r() / 32767;
    },
    set$rNormalized(v) {
    this.set$r(v * 32767);
    },
    get$gNormalized() {
    return this.get$g() / 32767;
    },
    set$gNormalized(v) {
    this.set$g(v * 32767);
    },
    get$bNormalized() {
    return this.get$b() / 32767;
    },
    set$bNormalized(v) {
    this.set$b(v * 32767);
    },
    get$aNormalized() {
    return this.get$a() / 32767;
    },
    set$aNormalized(v) {
    this.set$a(v * 32767);
    },
    get$luminance() {
    return A.getLuminance(this);
    },
    $set$1(c) {
    var _this = this;
    _this.set$r(c.get$r());
    _this.set$g(c.get$g());
    _this.set$b(c.get$b());
    _this.set$a(c.get$a());
    },
    setRgb$3(r, g, b) {
    var t3, t4, t5, t6,
        t1 = this.image,
        t2 = t1.numChannels;
    if (t2 > 0) {
        t1 = t1.data;
        t3 = this._pixel_int16$_index;
        t4 = B.JSInt_methods.toInt$0(r);
        t5 = t1.length;
        if (!(t3 >= 0 && t3 < t5))
        return A.ioore(t1, t3);
        t1[t3] = t4;
        if (t2 > 1) {
        t4 = t3 + 1;
        t6 = B.JSInt_methods.toInt$0(g);
        if (!(t4 < t5))
            return A.ioore(t1, t4);
        t1[t4] = t6;
        if (t2 > 2) {
            t2 = t3 + 2;
            t3 = B.JSInt_methods.toInt$0(b);
            if (!(t2 < t5))
            return A.ioore(t1, t2);
            t1[t2] = t3;
        }
        }
    }
    },
    setRgba$4(r, g, b, a) {
    var t3, t4, t5, t6,
        t1 = this.image,
        t2 = t1.numChannels;
    if (t2 > 0) {
        t1 = t1.data;
        t3 = this._pixel_int16$_index;
        t4 = B.JSNumber_methods.toInt$0(r);
        t5 = t1.length;
        if (!(t3 >= 0 && t3 < t5))
        return A.ioore(t1, t3);
        t1[t3] = t4;
        if (t2 > 1) {
        t4 = t3 + 1;
        t6 = B.JSNumber_methods.toInt$0(g);
        if (!(t4 < t5))
            return A.ioore(t1, t4);
        t1[t4] = t6;
        if (t2 > 2) {
            t4 = t3 + 2;
            t6 = B.JSNumber_methods.toInt$0(b);
            if (!(t4 < t5))
            return A.ioore(t1, t4);
            t1[t4] = t6;
            if (t2 > 3) {
            t2 = t3 + 3;
            t3 = B.JSNumber_methods.toInt$0(a);
            if (!(t2 < t5))
                return A.ioore(t1, t2);
            t1[t2] = t3;
            }
        }
        }
    }
    },
    get$iterator(_) {
    return new A.ChannelIterator(this);
    },
    $eq(_, other) {
    var t1, t2, t3, t4, t5, _this = this;
    if (other == null)
        return false;
    if (other instanceof A.PixelInt16)
        return A.Object_hashAll(A.List_List$of(_this, true, A._instanceType(_this)._eval$1("Iterable.E"))) === A.Object_hashAll(A.List_List$of(other, true, A._instanceType(other)._eval$1("Iterable.E")));
    if (type$.List_int._is(other)) {
        t1 = J.getInterceptor$asx(other);
        t2 = _this.image;
        t3 = t2.numChannels;
        if (t1.get$length(other) !== t3)
        return false;
        t2 = t2.data;
        t4 = _this._pixel_int16$_index;
        t5 = t2.length;
        if (!(t4 >= 0 && t4 < t5))
        return A.ioore(t2, t4);
        if (t2[t4] !== t1.$index(other, 0))
        return false;
        if (t3 > 1) {
        t4 = _this._pixel_int16$_index + 1;
        if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t2, t4);
        if (t2[t4] !== t1.$index(other, 1))
            return false;
        if (t3 > 2) {
            t4 = _this._pixel_int16$_index + 2;
            if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t2, t4);
            if (t2[t4] !== t1.$index(other, 2))
            return false;
            if (t3 > 3) {
            t3 = _this._pixel_int16$_index + 3;
            if (!(t3 >= 0 && t3 < t5))
                return A.ioore(t2, t3);
            if (t2[t3] !== t1.$index(other, 3))
                return false;
            }
        }
        }
        return true;
    }
    return false;
    },
    get$hashCode(_) {
    return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isIterator: 1,
    $isColor: 1,
    $isPixel: 1,
    get$image() {
    return this.image;
    }
};
A.PixelInt32.prototype = {
    clone$0() {
    var _this = this;
    return new A.PixelInt32(_this._pixel_int32$_x, _this._pixel_int32$_y, _this._pixel_int32$_index, _this.image);
    },
    get$length(_) {
    return this.image.numChannels;
    },
    get$palette() {
    return null;
    },
    get$maxChannelValue() {
    return 2147483647;
    },
    get$format() {
    return B.Format_8;
    },
    get$x() {
    return this._pixel_int32$_x;
    },
    get$y() {
    return this._pixel_int32$_y;
    },
    setPosition$2(x, y) {
    var t1, t2, _this = this;
    _this._pixel_int32$_x = x;
    _this._pixel_int32$_y = y;
    t1 = _this.image;
    t2 = t1.numChannels;
    _this._pixel_int32$_index = y * t1.width * t2 + x * t2;
    },
    get$current() {
    return this;
    },
    moveNext$0() {
    var t2, _this = this,
        t1 = _this.image;
    if (++_this._pixel_int32$_x === t1.width) {
        _this._pixel_int32$_x = 0;
        if (++_this._pixel_int32$_y === t1.height)
        return false;
    }
    t2 = _this._pixel_int32$_index + t1.numChannels;
    _this._pixel_int32$_index = t2;
    return t2 < t1.data.length;
    },
    $index(_, i) {
    var t2,
        t1 = this.image;
    if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_int32$_index + i;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    $indexSet(_, i, value) {
    var t1, t2, t3;
    A._asNum(value);
    t1 = this.image;
    if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_int32$_index + i;
        t3 = B.JSNumber_methods.toInt$0(value);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$index() {
    return this.get$r();
    },
    set$index(i) {
    this.set$r(i);
    },
    get$r() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_int32$_index;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$r(r) {
    var t2, t3,
        t1 = this.image;
    if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_int32$_index;
        t3 = B.JSNumber_methods.toInt$0(r);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$g() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_int32$_index + 1;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$g(g) {
    var t2, t3,
        t1 = this.image;
    if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_int32$_index + 1;
        t3 = B.JSNumber_methods.toInt$0(g);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$b() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_int32$_index + 2;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$b(b) {
    var t2, t3,
        t1 = this.image;
    if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_int32$_index + 2;
        t3 = B.JSNumber_methods.toInt$0(b);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$a() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_int32$_index + 3;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$a(a) {
    var t2, t3,
        t1 = this.image;
    if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_int32$_index + 3;
        t3 = B.JSNumber_methods.toInt$0(a);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$rNormalized() {
    return this.get$r() / 2147483647;
    },
    set$rNormalized(v) {
    this.set$r(v * 2147483647);
    },
    get$gNormalized() {
    return this.get$g() / 2147483647;
    },
    set$gNormalized(v) {
    this.set$g(v * 2147483647);
    },
    get$bNormalized() {
    return this.get$b() / 2147483647;
    },
    set$bNormalized(v) {
    this.set$b(v * 2147483647);
    },
    get$aNormalized() {
    return this.get$a() / 2147483647;
    },
    set$aNormalized(v) {
    this.set$a(v * 2147483647);
    },
    get$luminance() {
    return A.getLuminance(this);
    },
    $set$1(c) {
    var _this = this;
    _this.set$r(c.get$r());
    _this.set$g(c.get$g());
    _this.set$b(c.get$b());
    _this.set$a(c.get$a());
    },
    setRgb$3(r, g, b) {
    var t3, t4, t5, t6,
        t1 = this.image,
        t2 = t1.numChannels;
    if (t2 > 0) {
        t1 = t1.data;
        t3 = this._pixel_int32$_index;
        t4 = B.JSInt_methods.toInt$0(r);
        t5 = t1.length;
        if (!(t3 >= 0 && t3 < t5))
        return A.ioore(t1, t3);
        t1[t3] = t4;
        if (t2 > 1) {
        t4 = t3 + 1;
        t6 = B.JSInt_methods.toInt$0(g);
        if (!(t4 < t5))
            return A.ioore(t1, t4);
        t1[t4] = t6;
        if (t2 > 2) {
            t2 = t3 + 2;
            t3 = B.JSInt_methods.toInt$0(b);
            if (!(t2 < t5))
            return A.ioore(t1, t2);
            t1[t2] = t3;
        }
        }
    }
    },
    setRgba$4(r, g, b, a) {
    var t3, t4, t5, t6,
        t1 = this.image,
        t2 = t1.numChannels;
    if (t2 > 0) {
        t1 = t1.data;
        t3 = this._pixel_int32$_index;
        t4 = B.JSNumber_methods.toInt$0(r);
        t5 = t1.length;
        if (!(t3 >= 0 && t3 < t5))
        return A.ioore(t1, t3);
        t1[t3] = t4;
        if (t2 > 1) {
        t4 = t3 + 1;
        t6 = B.JSNumber_methods.toInt$0(g);
        if (!(t4 < t5))
            return A.ioore(t1, t4);
        t1[t4] = t6;
        if (t2 > 2) {
            t4 = t3 + 2;
            t6 = B.JSNumber_methods.toInt$0(b);
            if (!(t4 < t5))
            return A.ioore(t1, t4);
            t1[t4] = t6;
            if (t2 > 3) {
            t2 = t3 + 3;
            t3 = B.JSNumber_methods.toInt$0(a);
            if (!(t2 < t5))
                return A.ioore(t1, t2);
            t1[t2] = t3;
            }
        }
        }
    }
    },
    get$iterator(_) {
    return new A.ChannelIterator(this);
    },
    $eq(_, other) {
    var t1, t2, t3, t4, t5, _this = this;
    if (other == null)
        return false;
    if (other instanceof A.PixelInt32)
        return A.Object_hashAll(A.List_List$of(_this, true, A._instanceType(_this)._eval$1("Iterable.E"))) === A.Object_hashAll(A.List_List$of(other, true, A._instanceType(other)._eval$1("Iterable.E")));
    if (type$.List_int._is(other)) {
        t1 = J.getInterceptor$asx(other);
        t2 = _this.image;
        t3 = t2.numChannels;
        if (t1.get$length(other) !== t3)
        return false;
        t2 = t2.data;
        t4 = _this._pixel_int32$_index;
        t5 = t2.length;
        if (!(t4 >= 0 && t4 < t5))
        return A.ioore(t2, t4);
        if (t2[t4] !== t1.$index(other, 0))
        return false;
        if (t3 > 1) {
        t4 = _this._pixel_int32$_index + 1;
        if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t2, t4);
        if (t2[t4] !== t1.$index(other, 1))
            return false;
        if (t3 > 2) {
            t4 = _this._pixel_int32$_index + 2;
            if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t2, t4);
            if (t2[t4] !== t1.$index(other, 2))
            return false;
            if (t3 > 3) {
            t3 = _this._pixel_int32$_index + 3;
            if (!(t3 >= 0 && t3 < t5))
                return A.ioore(t2, t3);
            if (t2[t3] !== t1.$index(other, 3))
                return false;
            }
        }
        }
        return true;
    }
    return false;
    },
    get$hashCode(_) {
    return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isIterator: 1,
    $isColor: 1,
    $isPixel: 1,
    get$image() {
    return this.image;
    }
};
A.PixelInt8.prototype = {
    clone$0() {
    var _this = this;
    return new A.PixelInt8(_this._pixel_int8$_x, _this._pixel_int8$_y, _this._pixel_int8$_index, _this.image);
    },
    get$length(_) {
    return this.image.numChannels;
    },
    get$palette() {
    return null;
    },
    get$maxChannelValue() {
    return 127;
    },
    get$format() {
    return B.Format_6;
    },
    get$x() {
    return this._pixel_int8$_x;
    },
    get$y() {
    return this._pixel_int8$_y;
    },
    setPosition$2(x, y) {
    var t1, t2, _this = this;
    _this._pixel_int8$_x = x;
    _this._pixel_int8$_y = y;
    t1 = _this.image;
    t2 = t1.numChannels;
    _this._pixel_int8$_index = y * t1.width * t2 + x * t2;
    },
    get$current() {
    return this;
    },
    moveNext$0() {
    var t2, _this = this,
        t1 = _this.image;
    if (++_this._pixel_int8$_x === t1.width) {
        _this._pixel_int8$_x = 0;
        if (++_this._pixel_int8$_y === t1.height)
        return false;
    }
    t2 = _this._pixel_int8$_index + t1.numChannels;
    _this._pixel_int8$_index = t2;
    return t2 < t1.data.length;
    },
    $index(_, i) {
    var t2,
        t1 = this.image;
    if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_int8$_index + i;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    $indexSet(_, i, value) {
    var t1, t2, t3;
    A._asNum(value);
    t1 = this.image;
    if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_int8$_index + i;
        t3 = B.JSNumber_methods.toInt$0(value);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$index() {
    return this.get$r();
    },
    set$index(i) {
    this.set$r(i);
    },
    get$r() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_int8$_index;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$r(r) {
    var t2, t3,
        t1 = this.image;
    if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_int8$_index;
        t3 = B.JSNumber_methods.toInt$0(r);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$g() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_int8$_index + 1;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$g(g) {
    var t2, t3,
        t1 = this.image;
    if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_int8$_index + 1;
        t3 = B.JSNumber_methods.toInt$0(g);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$b() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_int8$_index + 2;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$b(b) {
    var t2, t3,
        t1 = this.image;
    if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_int8$_index + 2;
        t3 = B.JSNumber_methods.toInt$0(b);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$a() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_int8$_index + 3;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$a(a) {
    var t2, t3,
        t1 = this.image;
    if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_int8$_index + 3;
        t3 = B.JSNumber_methods.toInt$0(a);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$rNormalized() {
    return this.get$r() / 127;
    },
    set$rNormalized(v) {
    this.set$r(v * 127);
    },
    get$gNormalized() {
    return this.get$g() / 127;
    },
    set$gNormalized(v) {
    this.set$g(v * 127);
    },
    get$bNormalized() {
    return this.get$b() / 127;
    },
    set$bNormalized(v) {
    this.set$b(v * 127);
    },
    get$aNormalized() {
    return this.get$a() / 127;
    },
    set$aNormalized(v) {
    this.set$a(v * 127);
    },
    get$luminance() {
    return A.getLuminance(this);
    },
    $set$1(c) {
    var _this = this;
    _this.set$r(c.get$r());
    _this.set$g(c.get$g());
    _this.set$b(c.get$b());
    _this.set$a(c.get$a());
    },
    setRgb$3(r, g, b) {
    var t3, t4, t5, t6,
        t1 = this.image,
        t2 = t1.numChannels;
    if (t2 > 0) {
        t1 = t1.data;
        t3 = this._pixel_int8$_index;
        t4 = B.JSInt_methods.toInt$0(r);
        t5 = t1.length;
        if (!(t3 >= 0 && t3 < t5))
        return A.ioore(t1, t3);
        t1[t3] = t4;
        if (t2 > 1) {
        t4 = t3 + 1;
        t6 = B.JSInt_methods.toInt$0(g);
        if (!(t4 < t5))
            return A.ioore(t1, t4);
        t1[t4] = t6;
        if (t2 > 2) {
            t2 = t3 + 2;
            t3 = B.JSInt_methods.toInt$0(b);
            if (!(t2 < t5))
            return A.ioore(t1, t2);
            t1[t2] = t3;
        }
        }
    }
    },
    setRgba$4(r, g, b, a) {
    var t3, t4, t5, t6,
        t1 = this.image,
        t2 = t1.numChannels;
    if (t2 > 0) {
        t1 = t1.data;
        t3 = this._pixel_int8$_index;
        t4 = B.JSNumber_methods.toInt$0(r);
        t5 = t1.length;
        if (!(t3 >= 0 && t3 < t5))
        return A.ioore(t1, t3);
        t1[t3] = t4;
        if (t2 > 1) {
        t4 = t3 + 1;
        t6 = B.JSNumber_methods.toInt$0(g);
        if (!(t4 < t5))
            return A.ioore(t1, t4);
        t1[t4] = t6;
        if (t2 > 2) {
            t4 = t3 + 2;
            t6 = B.JSNumber_methods.toInt$0(b);
            if (!(t4 < t5))
            return A.ioore(t1, t4);
            t1[t4] = t6;
            if (t2 > 3) {
            t2 = t3 + 3;
            t3 = B.JSNumber_methods.toInt$0(a);
            if (!(t2 < t5))
                return A.ioore(t1, t2);
            t1[t2] = t3;
            }
        }
        }
    }
    },
    get$iterator(_) {
    return new A.ChannelIterator(this);
    },
    $eq(_, other) {
    var t1, t2, t3, t4, t5, _this = this;
    if (other == null)
        return false;
    if (other instanceof A.PixelInt8)
        return A.Object_hashAll(A.List_List$of(_this, true, A._instanceType(_this)._eval$1("Iterable.E"))) === A.Object_hashAll(A.List_List$of(other, true, A._instanceType(other)._eval$1("Iterable.E")));
    if (type$.List_int._is(other)) {
        t1 = J.getInterceptor$asx(other);
        t2 = _this.image;
        t3 = t2.numChannels;
        if (t1.get$length(other) !== t3)
        return false;
        t2 = t2.data;
        t4 = _this._pixel_int8$_index;
        t5 = t2.length;
        if (!(t4 >= 0 && t4 < t5))
        return A.ioore(t2, t4);
        if (t2[t4] !== t1.$index(other, 0))
        return false;
        if (t3 > 1) {
        t4 = _this._pixel_int8$_index + 1;
        if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t2, t4);
        if (t2[t4] !== t1.$index(other, 1))
            return false;
        if (t3 > 2) {
            t4 = _this._pixel_int8$_index + 2;
            if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t2, t4);
            if (t2[t4] !== t1.$index(other, 2))
            return false;
            if (t3 > 3) {
            t3 = _this._pixel_int8$_index + 3;
            if (!(t3 >= 0 && t3 < t5))
                return A.ioore(t2, t3);
            if (t2[t3] !== t1.$index(other, 3))
                return false;
            }
        }
        }
        return true;
    }
    return false;
    },
    get$hashCode(_) {
    return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isIterator: 1,
    $isColor: 1,
    $isPixel: 1,
    get$image() {
    return this.image;
    }
};
A.PixelUint1.prototype = {
    clone$0() {
    var _this = this;
    return new A.PixelUint1(_this._pixel_uint1$_x, _this._pixel_uint1$_y, _this._pixel_uint1$_index, _this._pixel_uint1$_bitIndex, _this._pixel_uint1$_rowOffset, _this.image);
    },
    get$length(_) {
    var t1 = this.image,
        t2 = t1.palette;
    t2 = t2 == null ? null : t2.numChannels;
    return t2 == null ? t1.numChannels : t2;
    },
    get$palette() {
    return this.image.palette;
    },
    get$maxChannelValue() {
    return this.image.get$maxChannelValue();
    },
    get$format() {
    return B.Format_0;
    },
    get$x() {
    return this._pixel_uint1$_x;
    },
    get$y() {
    return this._pixel_uint1$_y;
    },
    setPosition$2(x, y) {
    var t1, t2, _this = this;
    _this._pixel_uint1$_x = x;
    _this._pixel_uint1$_y = y;
    t1 = _this.image;
    t2 = y * t1.rowStride;
    _this._pixel_uint1$_rowOffset = t2;
    t1 = x * t1.numChannels;
    _this._pixel_uint1$_index = t2 + B.JSInt_methods._shrOtherPositive$1(t1, 3);
    _this._pixel_uint1$_bitIndex = t1 & 7;
    },
    get$current() {
    return this;
    },
    moveNext$0() {
    var nc, _this = this,
        t1 = ++_this._pixel_uint1$_x,
        t2 = _this.image;
    if (t1 === t2.width) {
        _this._pixel_uint1$_x = 0;
        t1 = ++_this._pixel_uint1$_y;
        _this._pixel_uint1$_bitIndex = 0;
        ++_this._pixel_uint1$_index;
        _this._pixel_uint1$_rowOffset = _this._pixel_uint1$_rowOffset + t2.rowStride;
        return t1 < t2.height;
    }
    nc = t2.numChannels;
    if (t2.palette != null || nc === 1) {
        if (++_this._pixel_uint1$_bitIndex > 7) {
        _this._pixel_uint1$_bitIndex = 0;
        ++_this._pixel_uint1$_index;
        }
    } else {
        t1 *= nc;
        _this._pixel_uint1$_bitIndex = t1 & 7;
        _this._pixel_uint1$_index = _this._pixel_uint1$_rowOffset + B.JSInt_methods._shrOtherPositive$1(t1, 3);
    }
    t1 = _this._pixel_uint1$_index;
    t2 = t2.__ImageDataUint1_data_F;
    t2 === $ && A.throwLateFieldNI("data");
    return t1 < t2.byteLength;
    },
    _pixel_uint1$_get$1(ci) {
    var t1, t2,
        i = this._pixel_uint1$_index,
        bi = 7 - (this._pixel_uint1$_bitIndex + ci);
    if (bi < 0) {
        bi += 8;
        ++i;
    }
    t1 = this.image.__ImageDataUint1_data_F;
    t1 === $ && A.throwLateFieldNI("data");
    t2 = t1.length;
    if (i >= t2)
        return 0;
    if (!(i >= 0))
        return A.ioore(t1, i);
    return B.JSInt_methods._shrReceiverPositive$1(t1[i], bi) & 1;
    },
    _pixel_uint1$_getChannel$1(ci) {
    var t1 = this.image,
        t2 = t1.palette;
    if (t2 == null)
        t1 = t1.numChannels > ci ? this._pixel_uint1$_get$1(ci) : 0;
    else
        t1 = t2.$get$2(this._pixel_uint1$_get$1(0), ci);
    return t1;
    },
    _pixel_uint1$_setChannel$2(ci, value) {
    var i, bi, t2, v, vi, mask,
        t1 = this.image;
    if (ci >= t1.numChannels)
        return;
    i = this._pixel_uint1$_index;
    bi = 7 - (this._pixel_uint1$_bitIndex + ci);
    if (bi < 0) {
        ++i;
        bi += 8;
    }
    t2 = t1.__ImageDataUint1_data_F;
    t2 === $ && A.throwLateFieldNI("data");
    if (!(i >= 0 && i < t2.length))
        return A.ioore(t2, i);
    v = t2[i];
    vi = B.JSInt_methods.clamp$2(B.JSNumber_methods.toInt$0(value), 0, 1);
    if (!(bi >= 0 && bi < 8))
        return A.ioore(B.List_MMm, bi);
    mask = B.List_MMm[bi];
    t2 = B.JSNumber_methods.$shl(vi, bi);
    t1 = t1.__ImageDataUint1_data_F;
    if (!(i < t1.length))
        return A.ioore(t1, i);
    t1[i] = (v & mask | t2) >>> 0;
    },
    $index(_, ci) {
    return this._pixel_uint1$_getChannel$1(ci);
    },
    $indexSet(_, ci, value) {
    return this._pixel_uint1$_setChannel$2(ci, A._asNum(value));
    },
    get$index() {
    return this._pixel_uint1$_get$1(0);
    },
    set$index(i) {
    this._pixel_uint1$_setChannel$2(0, i);
    },
    get$r() {
    return this._pixel_uint1$_getChannel$1(0);
    },
    set$r(r) {
    this._pixel_uint1$_setChannel$2(0, r);
    },
    get$g() {
    return this._pixel_uint1$_getChannel$1(1);
    },
    set$g(g) {
    this._pixel_uint1$_setChannel$2(1, g);
    },
    get$b() {
    return this._pixel_uint1$_getChannel$1(2);
    },
    set$b(b) {
    this._pixel_uint1$_setChannel$2(2, b);
    },
    get$a() {
    return this._pixel_uint1$_getChannel$1(3);
    },
    set$a(a) {
    this._pixel_uint1$_setChannel$2(3, a);
    },
    get$rNormalized() {
    return this._pixel_uint1$_getChannel$1(0) / this.image.get$maxChannelValue();
    },
    set$rNormalized(v) {
    this._pixel_uint1$_setChannel$2(0, v * this.image.get$maxChannelValue());
    },
    get$gNormalized() {
    return this._pixel_uint1$_getChannel$1(1) / this.image.get$maxChannelValue();
    },
    set$gNormalized(v) {
    this._pixel_uint1$_setChannel$2(1, v * this.image.get$maxChannelValue());
    },
    get$bNormalized() {
    return this._pixel_uint1$_getChannel$1(2) / this.image.get$maxChannelValue();
    },
    set$bNormalized(v) {
    this._pixel_uint1$_setChannel$2(2, v * this.image.get$maxChannelValue());
    },
    get$aNormalized() {
    return this._pixel_uint1$_getChannel$1(3) / this.image.get$maxChannelValue();
    },
    set$aNormalized(v) {
    this._pixel_uint1$_setChannel$2(3, v * this.image.get$maxChannelValue());
    },
    get$luminance() {
    return A.getLuminance(this);
    },
    $set$1(c) {
    var _this = this;
    _this._pixel_uint1$_setChannel$2(0, c.get$r());
    _this._pixel_uint1$_setChannel$2(1, c.get$g());
    _this._pixel_uint1$_setChannel$2(2, c.get$b());
    _this._pixel_uint1$_setChannel$2(3, c.get$a());
    },
    setRgb$3(r, g, b) {
    var _this = this,
        nc = _this.image.numChannels;
    if (nc > 0) {
        _this._pixel_uint1$_setChannel$2(0, r);
        if (nc > 1) {
        _this._pixel_uint1$_setChannel$2(1, g);
        if (nc > 2)
            _this._pixel_uint1$_setChannel$2(2, b);
        }
    }
    },
    setRgba$4(r, g, b, a) {
    var _this = this,
        nc = _this.image.numChannels;
    if (nc > 0) {
        _this._pixel_uint1$_setChannel$2(0, r);
        if (nc > 1) {
        _this._pixel_uint1$_setChannel$2(1, g);
        if (nc > 2) {
            _this._pixel_uint1$_setChannel$2(2, b);
            if (nc > 3)
            _this._pixel_uint1$_setChannel$2(3, a);
        }
        }
    }
    },
    get$iterator(_) {
    return new A.ChannelIterator(this);
    },
    $eq(_, other) {
    var t1, t2, nc, _this = this;
    if (other == null)
        return false;
    if (other instanceof A.PixelUint1)
        return A.Object_hashAll(A.List_List$of(_this, true, A._instanceType(_this)._eval$1("Iterable.E"))) === A.Object_hashAll(A.List_List$of(other, true, A._instanceType(other)._eval$1("Iterable.E")));
    if (type$.List_int._is(other)) {
        t1 = _this.image;
        t2 = t1.palette;
        nc = t2 != null ? t2.numChannels : t1.numChannels;
        t1 = J.getInterceptor$asx(other);
        if (t1.get$length(other) !== nc)
        return false;
        if (_this._pixel_uint1$_getChannel$1(0) !== t1.$index(other, 0))
        return false;
        if (nc > 1) {
        if (_this._pixel_uint1$_getChannel$1(1) !== t1.$index(other, 1))
            return false;
        if (nc > 2) {
            if (_this._pixel_uint1$_getChannel$1(2) !== t1.$index(other, 2))
            return false;
            if (nc > 3)
            if (_this._pixel_uint1$_getChannel$1(3) !== t1.$index(other, 3))
                return false;
        }
        }
        return true;
    }
    return false;
    },
    get$hashCode(_) {
    return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isIterator: 1,
    $isColor: 1,
    $isPixel: 1,
    get$image() {
    return this.image;
    }
};
A.PixelUint16.prototype = {
    clone$0() {
    var _this = this;
    return new A.PixelUint16(_this._pixel_uint16$_x, _this._pixel_uint16$_y, _this._pixel_uint16$_index, _this.image);
    },
    get$length(_) {
    return this.image.numChannels;
    },
    get$palette() {
    return null;
    },
    get$maxChannelValue() {
    return 65535;
    },
    get$format() {
    return B.Format_4;
    },
    get$x() {
    return this._pixel_uint16$_x;
    },
    get$y() {
    return this._pixel_uint16$_y;
    },
    setPosition$2(x, y) {
    var t1, t2, _this = this;
    _this._pixel_uint16$_x = x;
    _this._pixel_uint16$_y = y;
    t1 = _this.image;
    t2 = t1.numChannels;
    _this._pixel_uint16$_index = y * t1.width * t2 + x * t2;
    },
    get$current() {
    return this;
    },
    moveNext$0() {
    var t2, _this = this,
        t1 = _this.image;
    if (++_this._pixel_uint16$_x === t1.width) {
        _this._pixel_uint16$_x = 0;
        if (++_this._pixel_uint16$_y === t1.height)
        return false;
    }
    t2 = _this._pixel_uint16$_index + t1.numChannels;
    _this._pixel_uint16$_index = t2;
    return t2 < t1.data.length;
    },
    $index(_, i) {
    var t2,
        t1 = this.image;
    if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_uint16$_index + i;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    $indexSet(_, i, value) {
    var t1, t2, t3;
    A._asNum(value);
    t1 = this.image;
    if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_uint16$_index + i;
        t3 = B.JSNumber_methods.toInt$0(value);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$index() {
    return this.get$r();
    },
    set$index(i) {
    this.set$r(i);
    },
    get$r() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_uint16$_index;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$r(r) {
    var t2, t3,
        t1 = this.image;
    if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_uint16$_index;
        t3 = B.JSNumber_methods.toInt$0(r);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$g() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_uint16$_index + 1;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$g(g) {
    var t2, t3,
        t1 = this.image;
    if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_uint16$_index + 1;
        t3 = B.JSNumber_methods.toInt$0(g);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$b() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_uint16$_index + 2;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$b(b) {
    var t2, t3,
        t1 = this.image;
    if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_uint16$_index + 2;
        t3 = B.JSNumber_methods.toInt$0(b);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$a() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_uint16$_index + 3;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$a(a) {
    var t2, t3,
        t1 = this.image;
    if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_uint16$_index + 3;
        t3 = B.JSNumber_methods.toInt$0(a);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$rNormalized() {
    return this.get$r() / 65535;
    },
    set$rNormalized(v) {
    this.set$r(v * 65535);
    },
    get$gNormalized() {
    return this.get$g() / 65535;
    },
    set$gNormalized(v) {
    this.set$g(v * 65535);
    },
    get$bNormalized() {
    return this.get$b() / 65535;
    },
    set$bNormalized(v) {
    this.set$b(v * 65535);
    },
    get$aNormalized() {
    return this.get$a() / 65535;
    },
    set$aNormalized(v) {
    this.set$a(v * 65535);
    },
    get$luminance() {
    return A.getLuminance(this);
    },
    $set$1(c) {
    var _this = this;
    _this.set$r(c.get$r());
    _this.set$g(c.get$g());
    _this.set$b(c.get$b());
    _this.set$a(c.get$a());
    },
    setRgb$3(r, g, b) {
    var t3, t4, t5, t6,
        t1 = this.image,
        t2 = t1.numChannels;
    if (t2 > 0) {
        t1 = t1.data;
        t3 = this._pixel_uint16$_index;
        t4 = B.JSInt_methods.toInt$0(r);
        t5 = t1.length;
        if (!(t3 >= 0 && t3 < t5))
        return A.ioore(t1, t3);
        t1[t3] = t4;
        if (t2 > 1) {
        t4 = t3 + 1;
        t6 = B.JSInt_methods.toInt$0(g);
        if (!(t4 < t5))
            return A.ioore(t1, t4);
        t1[t4] = t6;
        if (t2 > 2) {
            t2 = t3 + 2;
            t3 = B.JSInt_methods.toInt$0(b);
            if (!(t2 < t5))
            return A.ioore(t1, t2);
            t1[t2] = t3;
        }
        }
    }
    },
    setRgba$4(r, g, b, a) {
    var t3, t4, t5, t6,
        t1 = this.image,
        t2 = t1.numChannels;
    if (t2 > 0) {
        t1 = t1.data;
        t3 = this._pixel_uint16$_index;
        t4 = B.JSNumber_methods.toInt$0(r);
        t5 = t1.length;
        if (!(t3 >= 0 && t3 < t5))
        return A.ioore(t1, t3);
        t1[t3] = t4;
        if (t2 > 1) {
        t4 = t3 + 1;
        t6 = B.JSNumber_methods.toInt$0(g);
        if (!(t4 < t5))
            return A.ioore(t1, t4);
        t1[t4] = t6;
        if (t2 > 2) {
            t4 = t3 + 2;
            t6 = B.JSNumber_methods.toInt$0(b);
            if (!(t4 < t5))
            return A.ioore(t1, t4);
            t1[t4] = t6;
            if (t2 > 3) {
            t2 = t3 + 3;
            t3 = B.JSNumber_methods.toInt$0(a);
            if (!(t2 < t5))
                return A.ioore(t1, t2);
            t1[t2] = t3;
            }
        }
        }
    }
    },
    get$iterator(_) {
    return new A.ChannelIterator(this);
    },
    $eq(_, other) {
    var t1, t2, t3, t4, t5, _this = this;
    if (other == null)
        return false;
    if (other instanceof A.PixelUint16)
        return A.Object_hashAll(A.List_List$of(_this, true, A._instanceType(_this)._eval$1("Iterable.E"))) === A.Object_hashAll(A.List_List$of(other, true, A._instanceType(other)._eval$1("Iterable.E")));
    if (type$.List_int._is(other)) {
        t1 = J.getInterceptor$asx(other);
        t2 = _this.image;
        t3 = t2.numChannels;
        if (t1.get$length(other) !== t3)
        return false;
        t2 = t2.data;
        t4 = _this._pixel_uint16$_index;
        t5 = t2.length;
        if (!(t4 >= 0 && t4 < t5))
        return A.ioore(t2, t4);
        if (t2[t4] !== t1.$index(other, 0))
        return false;
        if (t3 > 1) {
        t4 = _this._pixel_uint16$_index + 1;
        if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t2, t4);
        if (t2[t4] !== t1.$index(other, 1))
            return false;
        if (t3 > 2) {
            t4 = _this._pixel_uint16$_index + 2;
            if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t2, t4);
            if (t2[t4] !== t1.$index(other, 2))
            return false;
            if (t3 > 3) {
            t3 = _this._pixel_uint16$_index + 3;
            if (!(t3 >= 0 && t3 < t5))
                return A.ioore(t2, t3);
            if (t2[t3] !== t1.$index(other, 3))
                return false;
            }
        }
        }
        return true;
    }
    return false;
    },
    get$hashCode(_) {
    return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isIterator: 1,
    $isColor: 1,
    $isPixel: 1,
    get$image() {
    return this.image;
    }
};
A.PixelUint2.prototype = {
    clone$0() {
    var _this = this;
    return new A.PixelUint2(_this._pixel_uint2$_x, _this._pixel_uint2$_y, _this._pixel_uint2$_index, _this._pixel_uint2$_bitIndex, _this._rowOffset, _this.image);
    },
    get$length(_) {
    var t1 = this.image,
        t2 = t1.palette;
    t2 = t2 == null ? null : t2.numChannels;
    return t2 == null ? t1.numChannels : t2;
    },
    get$palette() {
    return this.image.palette;
    },
    get$maxChannelValue() {
    return this.image.get$maxChannelValue();
    },
    get$format() {
    return B.Format_1;
    },
    get$bitsPerPixel() {
    var t1 = this.image;
    return t1.palette != null ? 2 : t1.numChannels << 1 >>> 0;
    },
    get$x() {
    return this._pixel_uint2$_x;
    },
    get$y() {
    return this._pixel_uint2$_y;
    },
    setPosition$2(x, y) {
    var bpp, t1, t2, _this = this;
    _this._pixel_uint2$_x = x;
    _this._pixel_uint2$_y = y;
    bpp = _this.get$bitsPerPixel();
    t1 = _this._pixel_uint2$_y * _this.image.rowStride;
    _this._rowOffset = t1;
    t2 = _this._pixel_uint2$_x * bpp;
    _this._pixel_uint2$_index = t1 + B.JSInt_methods._shrOtherPositive$1(t2, 3);
    _this._pixel_uint2$_bitIndex = t2 & 7;
    },
    get$current() {
    return this;
    },
    moveNext$0() {
    var t2, bpp, _this = this,
        t1 = _this.image;
    if (++_this._pixel_uint2$_x === t1.width) {
        _this._pixel_uint2$_x = 0;
        t2 = ++_this._pixel_uint2$_y;
        _this._pixel_uint2$_bitIndex = 0;
        ++_this._pixel_uint2$_index;
        _this._rowOffset = _this._rowOffset + t1.rowStride;
        return t2 < t1.height;
    }
    if (t1.palette != null || t1.numChannels === 1) {
        t2 = _this._pixel_uint2$_bitIndex += 2;
        if (t2 > 7) {
        _this._pixel_uint2$_bitIndex = 0;
        ++_this._pixel_uint2$_index;
        }
    } else {
        bpp = _this.get$bitsPerPixel();
        t2 = _this._pixel_uint2$_x * bpp;
        _this._pixel_uint2$_bitIndex = t2 & 7;
        _this._pixel_uint2$_index = _this._rowOffset + B.JSInt_methods._shrOtherPositive$1(t2, 3);
    }
    t2 = _this._pixel_uint2$_index;
    t1 = t1.__ImageDataUint2_data_F;
    t1 === $ && A.throwLateFieldNI("data");
    return t2 < t1.length;
    },
    _pixel_uint2$_get$1(ci) {
    var t1,
        i = this._pixel_uint2$_index,
        bi = 6 - (this._pixel_uint2$_bitIndex + (ci << 1 >>> 0));
    if (bi < 0) {
        bi += 8;
        ++i;
    }
    t1 = this.image.__ImageDataUint2_data_F;
    t1 === $ && A.throwLateFieldNI("data");
    if (!(i >= 0 && i < t1.length))
        return A.ioore(t1, i);
    return B.JSInt_methods._shrReceiverPositive$1(t1[i], bi) & 3;
    },
    _pixel_uint2$_getChannel$1(ci) {
    var t1 = this.image,
        t2 = t1.palette;
    if (t2 == null)
        t1 = t1.numChannels > ci ? this._pixel_uint2$_get$1(ci) : 0;
    else
        t1 = t2.$get$2(this._pixel_uint2$_get$1(0), ci);
    return t1;
    },
    _pixel_uint2$_setChannel$2(ci, value) {
    var i, bi, t2, v, vi, mask,
        t1 = this.image;
    if (ci >= t1.numChannels)
        return;
    i = this._pixel_uint2$_index;
    bi = 6 - (this._pixel_uint2$_bitIndex + (ci << 1 >>> 0));
    if (bi < 0) {
        ++i;
        bi += 8;
    }
    t2 = t1.__ImageDataUint2_data_F;
    t2 === $ && A.throwLateFieldNI("data");
    if (!(i >= 0 && i < t2.length))
        return A.ioore(t2, i);
    v = t2[i];
    vi = B.JSInt_methods.clamp$2(B.JSNumber_methods.toInt$0(value), 0, 3);
    t2 = B.JSInt_methods._shrOtherPositive$1(bi, 1);
    if (!(t2 < 4))
        return A.ioore(B.List_252_243_207_63, t2);
    mask = B.List_252_243_207_63[t2];
    t2 = B.JSNumber_methods.$shl(vi, bi);
    t1 = t1.__ImageDataUint2_data_F;
    if (!(i < t1.length))
        return A.ioore(t1, i);
    t1[i] = (v & mask | t2) >>> 0;
    },
    $index(_, i) {
    return this._pixel_uint2$_getChannel$1(i);
    },
    $indexSet(_, i, value) {
    return this._pixel_uint2$_setChannel$2(i, A._asNum(value));
    },
    get$index() {
    return this._pixel_uint2$_get$1(0);
    },
    set$index(i) {
    this._pixel_uint2$_setChannel$2(0, i);
    },
    get$r() {
    return this._pixel_uint2$_getChannel$1(0);
    },
    set$r(r) {
    this._pixel_uint2$_setChannel$2(0, r);
    },
    get$g() {
    return this._pixel_uint2$_getChannel$1(1);
    },
    set$g(g) {
    this._pixel_uint2$_setChannel$2(1, g);
    },
    get$b() {
    return this._pixel_uint2$_getChannel$1(2);
    },
    set$b(b) {
    this._pixel_uint2$_setChannel$2(2, b);
    },
    get$a() {
    return this._pixel_uint2$_getChannel$1(3);
    },
    set$a(a) {
    this._pixel_uint2$_setChannel$2(3, a);
    },
    get$rNormalized() {
    return this._pixel_uint2$_getChannel$1(0) / this.image.get$maxChannelValue();
    },
    set$rNormalized(v) {
    this._pixel_uint2$_setChannel$2(0, v * this.image.get$maxChannelValue());
    },
    get$gNormalized() {
    return this._pixel_uint2$_getChannel$1(1) / this.image.get$maxChannelValue();
    },
    set$gNormalized(v) {
    this._pixel_uint2$_setChannel$2(1, v * this.image.get$maxChannelValue());
    },
    get$bNormalized() {
    return this._pixel_uint2$_getChannel$1(2) / this.image.get$maxChannelValue();
    },
    set$bNormalized(v) {
    this._pixel_uint2$_setChannel$2(2, v * this.image.get$maxChannelValue());
    },
    get$aNormalized() {
    return this._pixel_uint2$_getChannel$1(3) / this.image.get$maxChannelValue();
    },
    set$aNormalized(v) {
    this._pixel_uint2$_setChannel$2(3, v * this.image.get$maxChannelValue());
    },
    get$luminance() {
    return A.getLuminance(this);
    },
    $set$1(c) {
    var _this = this;
    _this._pixel_uint2$_setChannel$2(0, c.get$r());
    _this._pixel_uint2$_setChannel$2(1, c.get$g());
    _this._pixel_uint2$_setChannel$2(2, c.get$b());
    _this._pixel_uint2$_setChannel$2(3, c.get$a());
    },
    setRgb$3(r, g, b) {
    var _this = this,
        nc = _this.image.numChannels;
    if (nc > 0) {
        _this._pixel_uint2$_setChannel$2(0, r);
        if (nc > 1) {
        _this._pixel_uint2$_setChannel$2(1, g);
        if (nc > 2)
            _this._pixel_uint2$_setChannel$2(2, b);
        }
    }
    },
    setRgba$4(r, g, b, a) {
    var _this = this,
        nc = _this.image.numChannels;
    if (nc > 0) {
        _this._pixel_uint2$_setChannel$2(0, r);
        if (nc > 1) {
        _this._pixel_uint2$_setChannel$2(1, g);
        if (nc > 2) {
            _this._pixel_uint2$_setChannel$2(2, b);
            if (nc > 3)
            _this._pixel_uint2$_setChannel$2(3, a);
        }
        }
    }
    },
    get$iterator(_) {
    return new A.ChannelIterator(this);
    },
    $eq(_, other) {
    var t1, t2, nc, _this = this;
    if (other == null)
        return false;
    if (other instanceof A.PixelUint2)
        return A.Object_hashAll(A.List_List$of(_this, true, A._instanceType(_this)._eval$1("Iterable.E"))) === A.Object_hashAll(A.List_List$of(other, true, A._instanceType(other)._eval$1("Iterable.E")));
    if (type$.List_int._is(other)) {
        t1 = _this.image;
        t2 = t1.palette;
        nc = t2 != null ? t2.numChannels : t1.numChannels;
        t1 = J.getInterceptor$asx(other);
        if (t1.get$length(other) !== nc)
        return false;
        if (_this._pixel_uint2$_getChannel$1(0) !== t1.$index(other, 0))
        return false;
        if (nc > 1) {
        if (_this._pixel_uint2$_getChannel$1(1) !== t1.$index(other, 1))
            return false;
        if (nc > 2) {
            if (_this._pixel_uint2$_getChannel$1(2) !== t1.$index(other, 2))
            return false;
            if (nc > 3)
            if (_this._pixel_uint2$_getChannel$1(3) !== t1.$index(other, 3))
                return false;
        }
        }
        return true;
    }
    return false;
    },
    get$hashCode(_) {
    return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isIterator: 1,
    $isColor: 1,
    $isPixel: 1,
    get$image() {
    return this.image;
    }
};
A.PixelUint32.prototype = {
    clone$0() {
    var _this = this;
    return new A.PixelUint32(_this._pixel_uint32$_x, _this._pixel_uint32$_y, _this._pixel_uint32$_index, _this.image);
    },
    get$length(_) {
    return this.image.numChannels;
    },
    get$palette() {
    return null;
    },
    get$maxChannelValue() {
    return 4294967295;
    },
    get$format() {
    return B.Format_5;
    },
    get$x() {
    return this._pixel_uint32$_x;
    },
    get$y() {
    return this._pixel_uint32$_y;
    },
    setPosition$2(x, y) {
    var t1, t2, _this = this;
    _this._pixel_uint32$_x = x;
    _this._pixel_uint32$_y = y;
    t1 = _this.image;
    t2 = t1.numChannels;
    _this._pixel_uint32$_index = y * t1.width * t2 + x * t2;
    },
    get$current() {
    return this;
    },
    moveNext$0() {
    var t2, _this = this,
        t1 = _this.image;
    if (++_this._pixel_uint32$_x === t1.width) {
        _this._pixel_uint32$_x = 0;
        if (++_this._pixel_uint32$_y === t1.height)
        return false;
    }
    t2 = _this._pixel_uint32$_index + t1.numChannels;
    _this._pixel_uint32$_index = t2;
    return t2 < t1.data.length;
    },
    $index(_, i) {
    var t2,
        t1 = this.image;
    if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_uint32$_index + i;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    $indexSet(_, i, value) {
    var t1, t2, t3;
    A._asNum(value);
    t1 = this.image;
    if (i < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_uint32$_index + i;
        t3 = B.JSNumber_methods.toInt$0(value);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$index() {
    return this.get$r();
    },
    set$index(i) {
    this.set$r(i);
    },
    get$r() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_uint32$_index;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$r(r) {
    var t2, t3,
        t1 = this.image;
    if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_uint32$_index;
        t3 = B.JSNumber_methods.toInt$0(r);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$g() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_uint32$_index + 1;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$g(g) {
    var t2, t3,
        t1 = this.image;
    if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_uint32$_index + 1;
        t3 = B.JSNumber_methods.toInt$0(g);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$b() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_uint32$_index + 2;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$b(b) {
    var t2, t3,
        t1 = this.image;
    if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_uint32$_index + 2;
        t3 = B.JSNumber_methods.toInt$0(b);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$a() {
    var t2,
        t1 = this.image;
    if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_uint32$_index + 3;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    set$a(a) {
    var t2, t3,
        t1 = this.image;
    if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_uint32$_index + 3;
        t3 = B.JSNumber_methods.toInt$0(a);
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$rNormalized() {
    return this.get$r() / 4294967295;
    },
    set$rNormalized(v) {
    this.set$r(v * 4294967295);
    },
    get$gNormalized() {
    return this.get$g() / 4294967295;
    },
    set$gNormalized(v) {
    this.set$g(v * 4294967295);
    },
    get$bNormalized() {
    return this.get$b() / 4294967295;
    },
    set$bNormalized(v) {
    this.set$b(v * 4294967295);
    },
    get$aNormalized() {
    return this.get$a() / 4294967295;
    },
    set$aNormalized(v) {
    this.set$a(v * 4294967295);
    },
    get$luminance() {
    return A.getLuminance(this);
    },
    $set$1(c) {
    var _this = this;
    _this.set$r(c.get$r());
    _this.set$g(c.get$g());
    _this.set$b(c.get$b());
    _this.set$a(c.get$a());
    },
    setRgb$3(r, g, b) {
    var t3, t4, t5, t6,
        t1 = this.image,
        t2 = t1.numChannels;
    if (t2 > 0) {
        t1 = t1.data;
        t3 = this._pixel_uint32$_index;
        t4 = B.JSInt_methods.toInt$0(r);
        t5 = t1.length;
        if (!(t3 >= 0 && t3 < t5))
        return A.ioore(t1, t3);
        t1[t3] = t4;
        if (t2 > 1) {
        t4 = t3 + 1;
        t6 = B.JSInt_methods.toInt$0(g);
        if (!(t4 < t5))
            return A.ioore(t1, t4);
        t1[t4] = t6;
        if (t2 > 2) {
            t2 = t3 + 2;
            t3 = B.JSInt_methods.toInt$0(b);
            if (!(t2 < t5))
            return A.ioore(t1, t2);
            t1[t2] = t3;
        }
        }
    }
    },
    setRgba$4(r, g, b, a) {
    var t3, t4, t5, t6,
        t1 = this.image,
        t2 = t1.numChannels;
    if (t2 > 0) {
        t1 = t1.data;
        t3 = this._pixel_uint32$_index;
        t4 = B.JSNumber_methods.toInt$0(r);
        t5 = t1.length;
        if (!(t3 >= 0 && t3 < t5))
        return A.ioore(t1, t3);
        t1[t3] = t4;
        if (t2 > 1) {
        t4 = t3 + 1;
        t6 = B.JSNumber_methods.toInt$0(g);
        if (!(t4 < t5))
            return A.ioore(t1, t4);
        t1[t4] = t6;
        if (t2 > 2) {
            t4 = t3 + 2;
            t6 = B.JSNumber_methods.toInt$0(b);
            if (!(t4 < t5))
            return A.ioore(t1, t4);
            t1[t4] = t6;
            if (t2 > 3) {
            t2 = t3 + 3;
            t3 = B.JSNumber_methods.toInt$0(a);
            if (!(t2 < t5))
                return A.ioore(t1, t2);
            t1[t2] = t3;
            }
        }
        }
    }
    },
    get$iterator(_) {
    return new A.ChannelIterator(this);
    },
    $eq(_, other) {
    var t1, t2, t3, t4, t5, _this = this;
    if (other == null)
        return false;
    if (other instanceof A.PixelUint32)
        return A.Object_hashAll(A.List_List$of(_this, true, A._instanceType(_this)._eval$1("Iterable.E"))) === A.Object_hashAll(A.List_List$of(other, true, A._instanceType(other)._eval$1("Iterable.E")));
    if (type$.List_int._is(other)) {
        t1 = J.getInterceptor$asx(other);
        t2 = _this.image;
        t3 = t2.numChannels;
        if (t1.get$length(other) !== t3)
        return false;
        t2 = t2.data;
        t4 = _this._pixel_uint32$_index;
        t5 = t2.length;
        if (!(t4 >= 0 && t4 < t5))
        return A.ioore(t2, t4);
        if (t2[t4] !== t1.$index(other, 0))
        return false;
        if (t3 > 1) {
        t4 = _this._pixel_uint32$_index + 1;
        if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t2, t4);
        if (t2[t4] !== t1.$index(other, 1))
            return false;
        if (t3 > 2) {
            t4 = _this._pixel_uint32$_index + 2;
            if (!(t4 >= 0 && t4 < t5))
            return A.ioore(t2, t4);
            if (t2[t4] !== t1.$index(other, 2))
            return false;
            if (t3 > 3) {
            t3 = _this._pixel_uint32$_index + 3;
            if (!(t3 >= 0 && t3 < t5))
                return A.ioore(t2, t3);
            if (t2[t3] !== t1.$index(other, 3))
                return false;
            }
        }
        }
        return true;
    }
    return false;
    },
    get$hashCode(_) {
    return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isIterator: 1,
    $isColor: 1,
    $isPixel: 1,
    get$image() {
    return this.image;
    }
};
A.PixelUint4.prototype = {
    clone$0() {
    var _this = this;
    return new A.PixelUint4(_this._pixel_uint4$_x, _this._pixel_uint4$_y, _this._pixel_uint4$_index, _this._bitIndex, _this.image);
    },
    get$length(_) {
    var t1 = this.image,
        t2 = t1.palette;
    t2 = t2 == null ? null : t2.numChannels;
    return t2 == null ? t1.numChannels : t2;
    },
    get$palette() {
    return this.image.palette;
    },
    get$maxChannelValue() {
    return this.image.get$maxChannelValue();
    },
    get$format() {
    return B.Format_2;
    },
    get$x() {
    return this._pixel_uint4$_x;
    },
    get$y() {
    return this._pixel_uint4$_y;
    },
    setPosition$2(x, y) {
    var t1, bpp, rowStride, _this = this;
    _this._pixel_uint4$_x = x;
    _this._pixel_uint4$_y = y;
    t1 = _this.image;
    bpp = t1.numChannels * 4;
    rowStride = t1.rowStride;
    if (bpp === 4)
        t1 = y * rowStride + B.JSInt_methods._shrOtherPositive$1(x, 1);
    else if (bpp === 8)
        t1 = y * t1.width + x;
    else {
        t1 = y * rowStride;
        t1 = bpp === 16 ? t1 + (x << 1 >>> 0) : t1 + B.JSInt_methods._shrOtherPositive$1(x * bpp, 3);
    }
    _this._pixel_uint4$_index = t1;
    t1 = x * bpp;
    _this._bitIndex = bpp > 7 ? t1 & 4 : t1 & 7;
    },
    get$current() {
    return this;
    },
    moveNext$0() {
    var t2, nc, t3, _this = this,
        t1 = _this.image;
    if (++_this._pixel_uint4$_x === t1.width) {
        _this._pixel_uint4$_x = 0;
        t2 = ++_this._pixel_uint4$_y;
        _this._bitIndex = 0;
        _this._pixel_uint4$_index = t2 * t1.rowStride;
        return t2 < t1.height;
    }
    nc = t1.numChannels;
    t2 = t1.palette != null || nc === 1;
    t3 = _this._bitIndex;
    if (t2) {
        t2 = t3 + 4;
        _this._bitIndex = t2;
        if (t2 > 7) {
        _this._bitIndex = 0;
        ++_this._pixel_uint4$_index;
        }
    } else {
        t2 = _this._bitIndex = t3 + (nc << 2 >>> 0);
        for (; t2 > 7;) {
        t2 -= 8;
        _this._bitIndex = t2;
        ++_this._pixel_uint4$_index;
        }
    }
    t2 = _this._pixel_uint4$_index;
    t1 = t1.__ImageDataUint4_data_F;
    t1 === $ && A.throwLateFieldNI("data");
    return t2 < t1.length;
    },
    _get$1(ci) {
    var t1,
        i = this._pixel_uint4$_index,
        bi = 4 - (this._bitIndex + (ci << 2 >>> 0));
    if (bi < 0) {
        bi += 8;
        ++i;
    }
    t1 = this.image.__ImageDataUint4_data_F;
    t1 === $ && A.throwLateFieldNI("data");
    if (!(i >= 0 && i < t1.length))
        return A.ioore(t1, i);
    return B.JSInt_methods._shrReceiverPositive$1(t1[i], bi) & 15;
    },
    _getChannel$1(ci) {
    var t1 = this.image,
        t2 = t1.palette;
    if (t2 == null)
        t1 = t1.numChannels > ci ? this._get$1(ci) : 0;
    else
        t1 = t2.$get$2(this._get$1(0), ci);
    return t1;
    },
    _setChannel$2(ci, value) {
    var index, bi, t2, v, vi, mask,
        t1 = this.image;
    if (ci >= t1.numChannels)
        return;
    index = this._pixel_uint4$_index;
    bi = 4 - (this._bitIndex + (ci << 2 >>> 0));
    if (bi < 0) {
        bi += 8;
        ++index;
    }
    t2 = t1.__ImageDataUint4_data_F;
    t2 === $ && A.throwLateFieldNI("data");
    if (!(index >= 0 && index < t2.length))
        return A.ioore(t2, index);
    v = t2[index];
    vi = B.JSInt_methods.clamp$2(B.JSNumber_methods.toInt$0(value), 0, 15);
    mask = bi === 4 ? 15 : 240;
    t2 = B.JSNumber_methods.$shl(vi, bi);
    t1 = t1.__ImageDataUint4_data_F;
    if (!(index < t1.length))
        return A.ioore(t1, index);
    t1[index] = (v & mask | t2) >>> 0;
    },
    $index(_, i) {
    return this._getChannel$1(i);
    },
    $indexSet(_, i, value) {
    return this._setChannel$2(i, A._asNum(value));
    },
    get$index() {
    return this._get$1(0);
    },
    set$index(i) {
    this._setChannel$2(0, i);
    },
    get$r() {
    return this._getChannel$1(0);
    },
    set$r(r) {
    this._setChannel$2(0, r);
    },
    get$g() {
    return this._getChannel$1(1);
    },
    set$g(g) {
    this._setChannel$2(1, g);
    },
    get$b() {
    return this._getChannel$1(2);
    },
    set$b(b) {
    this._setChannel$2(2, b);
    },
    get$a() {
    return this._getChannel$1(3);
    },
    set$a(a) {
    this._setChannel$2(3, a);
    },
    get$rNormalized() {
    return this._getChannel$1(0) / this.image.get$maxChannelValue();
    },
    set$rNormalized(v) {
    this._setChannel$2(0, v * this.image.get$maxChannelValue());
    },
    get$gNormalized() {
    return this._getChannel$1(1) / this.image.get$maxChannelValue();
    },
    set$gNormalized(v) {
    this._setChannel$2(1, v * this.image.get$maxChannelValue());
    },
    get$bNormalized() {
    return this._getChannel$1(2) / this.image.get$maxChannelValue();
    },
    set$bNormalized(v) {
    this._setChannel$2(2, v * this.image.get$maxChannelValue());
    },
    get$aNormalized() {
    return this._getChannel$1(3) / this.image.get$maxChannelValue();
    },
    set$aNormalized(v) {
    this._setChannel$2(3, v * this.image.get$maxChannelValue());
    },
    get$luminance() {
    return A.getLuminance(this);
    },
    $set$1(c) {
    var _this = this;
    _this._setChannel$2(0, c.get$r());
    _this._setChannel$2(1, c.get$g());
    _this._setChannel$2(2, c.get$b());
    _this._setChannel$2(3, c.get$a());
    },
    setRgb$3(r, g, b) {
    var _this = this,
        nc = _this.image.numChannels;
    if (nc > 0) {
        _this._setChannel$2(0, r);
        if (nc > 1) {
        _this._setChannel$2(1, g);
        if (nc > 2)
            _this._setChannel$2(2, b);
        }
    }
    },
    setRgba$4(r, g, b, a) {
    var _this = this,
        nc = _this.image.numChannels;
    if (nc > 0) {
        _this._setChannel$2(0, r);
        if (nc > 1) {
        _this._setChannel$2(1, g);
        if (nc > 2) {
            _this._setChannel$2(2, b);
            if (nc > 3)
            _this._setChannel$2(3, a);
        }
        }
    }
    },
    get$iterator(_) {
    return new A.ChannelIterator(this);
    },
    $eq(_, other) {
    var nc, t1, _this = this;
    if (other == null)
        return false;
    if (other instanceof A.PixelUint4)
        return A.Object_hashAll(A.List_List$of(_this, true, A._instanceType(_this)._eval$1("Iterable.E"))) === A.Object_hashAll(A.List_List$of(other, true, A._instanceType(other)._eval$1("Iterable.E")));
    if (type$.List_int._is(other)) {
        nc = _this.image.numChannels;
        t1 = J.getInterceptor$asx(other);
        if (t1.get$length(other) !== nc)
        return false;
        if (_this._getChannel$1(0) !== t1.$index(other, 0))
        return false;
        if (nc > 1) {
        if (_this._getChannel$1(1) !== t1.$index(other, 1))
            return false;
        if (nc > 2) {
            if (_this._getChannel$1(2) !== t1.$index(other, 2))
            return false;
            if (nc > 3)
            if (_this._getChannel$1(3) !== t1.$index(other, 3))
                return false;
        }
        }
        return true;
    }
    return false;
    },
    get$hashCode(_) {
    return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isIterator: 1,
    $isColor: 1,
    $isPixel: 1,
    get$image() {
    return this.image;
    }
};
A.PixelUint8.prototype = {
    clone$0() {
    var _this = this;
    return new A.PixelUint8(_this._pixel_uint8$_x, _this._pixel_uint8$_y, _this._pixel_uint8$_index, _this.image);
    },
    get$length(_) {
    var t1 = this.image,
        t2 = t1.palette;
    t2 = t2 == null ? null : t2.numChannels;
    return t2 == null ? t1.numChannels : t2;
    },
    get$palette() {
    return this.image.palette;
    },
    get$maxChannelValue() {
    return this.image.get$maxChannelValue();
    },
    get$format() {
    return B.Format_3;
    },
    get$x() {
    return this._pixel_uint8$_x;
    },
    get$y() {
    return this._pixel_uint8$_y;
    },
    setPosition$2(x, y) {
    var t1, t2, _this = this;
    _this._pixel_uint8$_x = x;
    _this._pixel_uint8$_y = y;
    t1 = _this.image;
    t2 = t1.numChannels;
    _this._pixel_uint8$_index = y * t1.width * t2 + x * t2;
    },
    get$current() {
    return this;
    },
    moveNext$0() {
    var t2, _this = this,
        t1 = _this.image;
    if (++_this._pixel_uint8$_x === t1.width) {
        _this._pixel_uint8$_x = 0;
        if (++_this._pixel_uint8$_y === t1.height)
        return false;
    }
    t2 = _this._pixel_uint8$_index;
    t2 += t1.palette == null ? t1.numChannels : 1;
    _this._pixel_uint8$_index = t2;
    return t2 < t1.data.length;
    },
    $get$1(ci) {
    var t3,
        t1 = this.image,
        t2 = t1.palette;
    if (t2 != null) {
        t1 = t1.data;
        t3 = this._pixel_uint8$_index;
        if (!(t3 >= 0 && t3 < t1.length))
        return A.ioore(t1, t3);
        t3 = t2.$get$2(t1[t3], ci);
        t1 = t3;
    } else if (ci < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_uint8$_index + ci;
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
    } else
        t1 = 0;
    return t1;
    },
    $index(_, ci) {
    return this.$get$1(ci);
    },
    $indexSet(_, ci, value) {
    var t1, t2, t3;
    A._asNum(value);
    t1 = this.image;
    if (ci < t1.numChannels) {
        t1 = t1.data;
        t2 = this._pixel_uint8$_index + ci;
        t3 = B.JSNumber_methods.toInt$0(B.JSNumber_methods.clamp$2(value, 0, 255));
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$index() {
    var t1 = this.image.data,
        t2 = this._pixel_uint8$_index;
    if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
    return t1[t2];
    },
    set$index(i) {
    var t1 = this.image.data,
        t2 = this._pixel_uint8$_index,
        t3 = B.JSNumber_methods.toInt$0(B.JSNumber_methods.clamp$2(i, 0, 255));
    if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
    t1[t2] = t3;
    },
    get$r() {
    var t3,
        t1 = this.image,
        t2 = t1.palette;
    if (t2 == null)
        if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_uint8$_index;
        if (!(t2 >= 0 && t2 < t1.length))
            return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
        } else
        t1 = 0;
    else {
        t1 = t1.data;
        t3 = this._pixel_uint8$_index;
        if (!(t3 >= 0 && t3 < t1.length))
        return A.ioore(t1, t3);
        t3 = t2.getRed$1(t1[t3]);
        t1 = t3;
    }
    return t1;
    },
    set$r(r) {
    var t2, t3,
        t1 = this.image;
    if (t1.numChannels > 0) {
        t1 = t1.data;
        t2 = this._pixel_uint8$_index;
        t3 = B.JSNumber_methods.toInt$0(B.JSNumber_methods.clamp$2(r, 0, 255));
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$g() {
    var t3,
        t1 = this.image,
        t2 = t1.palette;
    if (t2 == null)
        if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_uint8$_index + 1;
        if (!(t2 >= 0 && t2 < t1.length))
            return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
        } else
        t1 = 0;
    else {
        t1 = t1.data;
        t3 = this._pixel_uint8$_index;
        if (!(t3 >= 0 && t3 < t1.length))
        return A.ioore(t1, t3);
        t3 = t2.getGreen$1(t1[t3]);
        t1 = t3;
    }
    return t1;
    },
    set$g(g) {
    var t2, t3,
        t1 = this.image;
    if (t1.numChannels > 1) {
        t1 = t1.data;
        t2 = this._pixel_uint8$_index + 1;
        t3 = B.JSNumber_methods.toInt$0(B.JSNumber_methods.clamp$2(g, 0, 255));
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$b() {
    var t3,
        t1 = this.image,
        t2 = t1.palette;
    if (t2 == null)
        if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_uint8$_index + 2;
        if (!(t2 >= 0 && t2 < t1.length))
            return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
        } else
        t1 = 0;
    else {
        t1 = t1.data;
        t3 = this._pixel_uint8$_index;
        if (!(t3 >= 0 && t3 < t1.length))
        return A.ioore(t1, t3);
        t3 = t2.getBlue$1(t1[t3]);
        t1 = t3;
    }
    return t1;
    },
    set$b(b) {
    var t2, t3,
        t1 = this.image;
    if (t1.numChannels > 2) {
        t1 = t1.data;
        t2 = this._pixel_uint8$_index + 2;
        t3 = B.JSNumber_methods.toInt$0(B.JSNumber_methods.clamp$2(b, 0, 255));
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$a() {
    var t3,
        t1 = this.image,
        t2 = t1.palette;
    if (t2 == null)
        if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_uint8$_index + 3;
        if (!(t2 >= 0 && t2 < t1.length))
            return A.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
        } else
        t1 = 255;
    else {
        t1 = t1.data;
        t3 = this._pixel_uint8$_index;
        if (!(t3 >= 0 && t3 < t1.length))
        return A.ioore(t1, t3);
        t3 = t2.getAlpha$1(t1[t3]);
        t1 = t3;
    }
    return t1;
    },
    set$a(a) {
    var t2, t3,
        t1 = this.image;
    if (t1.numChannels > 3) {
        t1 = t1.data;
        t2 = this._pixel_uint8$_index + 3;
        t3 = B.JSNumber_methods.toInt$0(B.JSNumber_methods.clamp$2(a, 0, 255));
        if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
        t1[t2] = t3;
    }
    },
    get$rNormalized() {
    return this.get$r() / this.image.get$maxChannelValue();
    },
    set$rNormalized(v) {
    this.set$r(v * this.image.get$maxChannelValue());
    },
    get$gNormalized() {
    return this.get$g() / this.image.get$maxChannelValue();
    },
    set$gNormalized(v) {
    this.set$g(v * this.image.get$maxChannelValue());
    },
    get$bNormalized() {
    return this.get$b() / this.image.get$maxChannelValue();
    },
    set$bNormalized(v) {
    this.set$b(v * this.image.get$maxChannelValue());
    },
    get$aNormalized() {
    return this.get$a() / this.image.get$maxChannelValue();
    },
    set$aNormalized(v) {
    this.set$a(v * this.image.get$maxChannelValue());
    },
    get$luminance() {
    return A.getLuminance(this);
    },
    $set$1(c) {
    var _this = this;
    if (_this.image.palette != null)
        _this.set$index(c.get$index());
    else {
        _this.set$r(c.get$r());
        _this.set$g(c.get$g());
        _this.set$b(c.get$b());
        _this.set$a(c.get$a());
    }
    },
    setRgb$3(r, g, b) {
    var t3, t4, t5, t6,
        t1 = this.image,
        t2 = t1.numChannels;
    if (t2 > 0) {
        t1 = t1.data;
        t3 = this._pixel_uint8$_index;
        t4 = B.JSInt_methods.toInt$0(r);
        t5 = t1.length;
        if (!(t3 >= 0 && t3 < t5))
        return A.ioore(t1, t3);
        t1[t3] = t4;
        if (t2 > 1) {
        t4 = t3 + 1;
        t6 = B.JSInt_methods.toInt$0(g);
        if (!(t4 < t5))
            return A.ioore(t1, t4);
        t1[t4] = t6;
        if (t2 > 2) {
            t2 = t3 + 2;
            t3 = B.JSInt_methods.toInt$0(b);
            if (!(t2 < t5))
            return A.ioore(t1, t2);
            t1[t2] = t3;
        }
        }
    }
    },
    setRgba$4(r, g, b, a) {
    var t3, t4, t5, t6,
        t1 = this.image,
        t2 = t1.numChannels;
    if (t2 > 0) {
        t1 = t1.data;
        t3 = this._pixel_uint8$_index;
        t4 = B.JSNumber_methods.toInt$0(r);
        t5 = t1.length;
        if (!(t3 >= 0 && t3 < t5))
        return A.ioore(t1, t3);
        t1[t3] = t4;
        if (t2 > 1) {
        t4 = t3 + 1;
        t6 = B.JSNumber_methods.toInt$0(g);
        if (!(t4 < t5))
            return A.ioore(t1, t4);
        t1[t4] = t6;
        if (t2 > 2) {
            t4 = t3 + 2;
            t6 = B.JSNumber_methods.toInt$0(b);
            if (!(t4 < t5))
            return A.ioore(t1, t4);
            t1[t4] = t6;
            if (t2 > 3) {
            t2 = t3 + 3;
            t3 = B.JSNumber_methods.toInt$0(a);
            if (!(t2 < t5))
                return A.ioore(t1, t2);
            t1[t2] = t3;
            }
        }
        }
    }
    },
    get$iterator(_) {
    return new A.ChannelIterator(this);
    },
    $eq(_, other) {
    var t1, t2, nc, _this = this;
    if (other == null)
        return false;
    if (other instanceof A.PixelUint8)
        return A.Object_hashAll(A.List_List$of(_this, true, A._instanceType(_this)._eval$1("Iterable.E"))) === A.Object_hashAll(A.List_List$of(other, true, A._instanceType(other)._eval$1("Iterable.E")));
    if (type$.List_int._is(other)) {
        t1 = _this.image;
        t2 = t1.palette;
        nc = t2 != null ? t2.numChannels : t1.numChannels;
        t1 = J.getInterceptor$asx(other);
        if (t1.get$length(other) !== nc)
        return false;
        if (_this.$get$1(0) !== t1.$index(other, 0))
        return false;
        if (nc > 1) {
        if (_this.$get$1(1) !== t1.$index(other, 1))
            return false;
        if (nc > 2) {
            if (_this.$get$1(2) !== t1.$index(other, 2))
            return false;
            if (nc > 3)
            if (_this.$get$1(3) !== t1.$index(other, 3))
                return false;
        }
        }
        return true;
    }
    return false;
    },
    get$hashCode(_) {
    return A.Object_hashAll(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $isIterator: 1,
    $isColor: 1,
    $isPixel: 1,
    get$image() {
    return this.image;
    }
};
A.PixelUndefined.prototype = {
    clone$0() {
    return new A.PixelUndefined();
    },
    get$image() {
    return $.$get$PixelUndefined_nullImageData();
    },
    get$x() {
    return 0;
    },
    get$y() {
    return 0;
    },
    get$length(_) {
    return 0;
    },
    get$maxChannelValue() {
    return 0;
    },
    get$format() {
    return B.Format_3;
    },
    get$palette() {
    return null;
    },
    $index(_, index) {
    return 0;
    },
    $indexSet(_, index, value) {
    A._asNum(value);
    },
    get$index() {
    return 0;
    },
    set$index(i) {
    },
    get$r() {
    return 0;
    },
    set$r(r) {
    },
    get$g() {
    return 0;
    },
    set$g(g) {
    },
    get$b() {
    return 0;
    },
    set$b(b) {
    },
    get$a() {
    return 0;
    },
    set$a(a) {
    },
    get$rNormalized() {
    return 0;
    },
    set$rNormalized(v) {
    },
    get$gNormalized() {
    return 0;
    },
    set$gNormalized(v) {
    },
    get$bNormalized() {
    return 0;
    },
    set$bNormalized(v) {
    },
    get$aNormalized() {
    return 0;
    },
    set$aNormalized(v) {
    },
    get$luminance() {
    return 0;
    },
    $set$1(c) {
    },
    setRgb$3(r, g, b) {
    },
    setRgba$4(r, g, b, a) {
    },
    get$current() {
    return this;
    },
    moveNext$0() {
    return false;
    },
    $eq(_, other) {
    if (other == null)
        return false;
    return other instanceof A.PixelUndefined;
    },
    get$hashCode(_) {
    return 0;
    },
    get$iterator(_) {
    return new A.ChannelIterator(this);
    },
    $isIterator: 1,
    $isColor: 1,
    $isPixel: 1
};
A.ImageException.prototype = {
    toString$0(_) {
    return "ImageException: " + this.message;
    }
};
A.InputBuffer.prototype = {
    get$length(_) {
    return this.end - this.offset;
    },
    $indexSet(_, index, value) {
    J.$indexSet$ax(this.buffer, this.offset + index, value);
    return value;
    },
    memcpy$4(start, $length, other, offset) {
    var t1 = this.buffer,
        t2 = J.getInterceptor$ax(t1),
        t3 = this.offset + start;
    if (other instanceof A.InputBuffer)
        t2.setRange$4(t1, t3, t3 + $length, other.buffer, other.offset + offset);
    else
        t2.setRange$4(t1, t3, t3 + $length, type$.List_int._as(other), offset);
    },
    memcpy$3(start, $length, other) {
    return this.memcpy$4(start, $length, other, 0);
    },
    memset$3(start, $length, value) {
    var t1 = this.buffer,
        t2 = this.offset + start;
    J.fillRange$3$ax(t1, t2, t2 + $length, value);
    },
    subset$3$offset$position(count, offset, position) {
    var _this = this,
        pos = position != null ? _this.start + position : _this.offset;
    return A.InputBuffer$(_this.buffer, _this.bigEndian, count, pos + offset);
    },
    subset$1(count) {
    return this.subset$3$offset$position(count, 0, null);
    },
    subset$2$position(count, position) {
    return this.subset$3$offset$position(count, 0, position);
    },
    subset$2$offset(count, offset) {
    return this.subset$3$offset$position(count, offset, null);
    },
    readByte$0() {
    var t1 = this.buffer,
        t2 = this.offset++;
    if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
    return t1[t2];
    },
    readBytes$1(count) {
    var bytes = this.subset$1(count);
    this.offset = this.offset + (bytes.end - bytes.offset);
    return bytes;
    },
    readString$1(len) {
    var codes, t1, t2, t3, _this = this;
    if (len == null) {
        codes = A._setArrayType([], type$.JSArray_int);
        for (t1 = _this.end; t2 = _this.offset, t2 < t1;) {
        t3 = _this.buffer;
        _this.offset = t2 + 1;
        if (!(t2 >= 0 && t2 < t3.length))
            return A.ioore(t3, t2);
        t2 = t3[t2];
        if (t2 === 0)
            return A.String_String$fromCharCodes(codes, 0, null);
        B.JSArray_methods.add$1(codes, t2);
        }
        throw A.wrapException(A.ImageException$("EOF reached without finding string terminator (length: " + A.S(len) + ")"));
    }
    return A.String_String$fromCharCodes(_this.readBytes$1(len).toUint8List$0(), 0, null);
    },
    readString$0() {
    return this.readString$1(null);
    },
    readStringUtf8$0() {
    var t1, t2, t3, _this = this,
        codes = A._setArrayType([], type$.JSArray_int);
    for (t1 = _this.end; t2 = _this.offset, t2 < t1;) {
        t3 = _this.buffer;
        _this.offset = t2 + 1;
        if (!(t2 >= 0 && t2 < t3.length))
        return A.ioore(t3, t2);
        t2 = t3[t2];
        if (t2 === 0) {
        type$.List_int._as(codes);
        return B.Utf8Decoder_true.convert$1(codes);
        }
        B.JSArray_methods.add$1(codes, t2);
    }
    return B.C_Utf8Codec.decode$2$allowMalformed(codes, true);
    },
    readUint16$0() {
    var b1, b2, _this = this,
        t1 = _this.buffer,
        t2 = _this.offset,
        t3 = _this.offset = t2 + 1,
        t4 = t1.length;
    if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
    t2 = t1[t2];
    if (typeof t2 !== "number")
        return t2.$and();
    b1 = t2 & 255;
    _this.offset = t3 + 1;
    if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
    t3 = t1[t3];
    if (typeof t3 !== "number")
        return t3.$and();
    b2 = t3 & 255;
    if (_this.bigEndian)
        return b1 << 8 | b2;
    return b2 << 8 | b1;
    },
    readUint24$0() {
    var b1, b2, b3, _this = this,
        t1 = _this.buffer,
        t2 = _this.offset,
        t3 = _this.offset = t2 + 1,
        t4 = t1.length;
    if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
    t2 = t1[t2];
    if (typeof t2 !== "number")
        return t2.$and();
    b1 = t2 & 255;
    t2 = _this.offset = t3 + 1;
    if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
    t3 = t1[t3];
    if (typeof t3 !== "number")
        return t3.$and();
    b2 = t3 & 255;
    _this.offset = t2 + 1;
    if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
    t2 = t1[t2];
    if (typeof t2 !== "number")
        return t2.$and();
    b3 = t2 & 255;
    if (_this.bigEndian)
        return b3 | b2 << 8 | b1 << 16;
    return b1 | b2 << 8 | b3 << 16;
    },
    readUint32$0() {
    var b1, b2, b3, b4, _this = this,
        t1 = _this.buffer,
        t2 = _this.offset,
        t3 = _this.offset = t2 + 1,
        t4 = t1.length;
    if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
    t2 = t1[t2];
    if (typeof t2 !== "number")
        return t2.$and();
    b1 = t2 & 255;
    t2 = _this.offset = t3 + 1;
    if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
    t3 = t1[t3];
    if (typeof t3 !== "number")
        return t3.$and();
    b2 = t3 & 255;
    t3 = _this.offset = t2 + 1;
    if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
    t2 = t1[t2];
    if (typeof t2 !== "number")
        return t2.$and();
    b3 = t2 & 255;
    _this.offset = t3 + 1;
    if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
    t3 = t1[t3];
    if (typeof t3 !== "number")
        return t3.$and();
    b4 = t3 & 255;
    if (_this.bigEndian)
        return (b1 << 24 | b2 << 16 | b3 << 8 | b4) >>> 0;
    return (b4 << 24 | b3 << 16 | b2 << 8 | b1) >>> 0;
    },
    readFloat64$0() {
    return A.uint64ToFloat64(this.readUint64$0());
    },
    readUint64$0() {
    var b1, b2, b3, b4, b5, b6, b7, b8, _this = this,
        t1 = _this.buffer,
        t2 = _this.offset,
        t3 = _this.offset = t2 + 1,
        t4 = t1.length;
    if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
    t2 = t1[t2];
    if (typeof t2 !== "number")
        return t2.$and();
    b1 = t2 & 255;
    t2 = _this.offset = t3 + 1;
    if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
    t3 = t1[t3];
    if (typeof t3 !== "number")
        return t3.$and();
    b2 = t3 & 255;
    t3 = _this.offset = t2 + 1;
    if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
    t2 = t1[t2];
    if (typeof t2 !== "number")
        return t2.$and();
    b3 = t2 & 255;
    t2 = _this.offset = t3 + 1;
    if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
    t3 = t1[t3];
    if (typeof t3 !== "number")
        return t3.$and();
    b4 = t3 & 255;
    t3 = _this.offset = t2 + 1;
    if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
    t2 = t1[t2];
    if (typeof t2 !== "number")
        return t2.$and();
    b5 = t2 & 255;
    t2 = _this.offset = t3 + 1;
    if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
    t3 = t1[t3];
    if (typeof t3 !== "number")
        return t3.$and();
    b6 = t3 & 255;
    t3 = _this.offset = t2 + 1;
    if (!(t2 >= 0 && t2 < t4))
        return A.ioore(t1, t2);
    t2 = t1[t2];
    if (typeof t2 !== "number")
        return t2.$and();
    b7 = t2 & 255;
    _this.offset = t3 + 1;
    if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t1, t3);
    t3 = t1[t3];
    if (typeof t3 !== "number")
        return t3.$and();
    b8 = t3 & 255;
    if (_this.bigEndian)
        return (B.JSInt_methods._shlPositive$1(b1, 56) | B.JSInt_methods._shlPositive$1(b2, 48) | B.JSInt_methods._shlPositive$1(b3, 40) | B.JSInt_methods._shlPositive$1(b4, 32) | b5 << 24 | b6 << 16 | b7 << 8 | b8) >>> 0;
    return (B.JSInt_methods._shlPositive$1(b8, 56) | B.JSInt_methods._shlPositive$1(b7, 48) | B.JSInt_methods._shlPositive$1(b6, 40) | B.JSInt_methods._shlPositive$1(b5, 32) | b4 << 24 | b3 << 16 | b2 << 8 | b1) >>> 0;
    },
    toList$2(_, offset, $length) {
    var s, _this = this,
        t1 = _this.buffer;
    if (type$.Uint8List._is(t1))
        return _this.toUint8List$2(offset, $length);
    s = _this.start + offset + offset;
    return J.sublist$2$ax(t1, s, $length <= 0 ? _this.end : s + $length);
    },
    toUint8List$2(offset, $length) {
    var t2, _this = this,
        len = $length == null ? _this.end - _this.offset - offset : $length,
        t1 = _this.buffer;
    if (type$.Uint8List._is(t1))
        return A.NativeUint8List_NativeUint8List$view(t1.buffer, t1.byteOffset + _this.offset + offset, len);
    t2 = _this.offset + offset;
    t2 = J.sublist$2$ax(t1, t2, t2 + len);
    return new Uint8Array(A._ensureNativeList(t2));
    },
    toUint8List$0() {
    return this.toUint8List$2(0, null);
    },
    toUint32List$0() {
    var t1 = this.buffer;
    if (type$.Uint8List._is(t1))
        return A.NativeUint32List_NativeUint32List$view(t1.buffer, t1.byteOffset + this.offset, null);
    return A.NativeUint32List_NativeUint32List$view(this.toUint8List$0().buffer, 0, null);
    },
    set$buffer(_, buffer) {
    this.buffer = type$.List_int._as(buffer);
    },
    set$offset(offset) {
    this.offset = A._asInt(offset);
    }
};
A.NeuralQuantizer.prototype = {
    addImage$1(image) {
    var _this = this;
    _this._learn$1(image);
    _this._fix$0();
    _this._inxBuild$0();
    _this._copyColorMap$0();
    },
    _initialize$1(numberOfColors) {
    var t1, t2, t3, f, i, i0, p, p0, _this = this;
    _this.set$netSize(Math.max(numberOfColors, 4));
    t1 = _this.netSize;
    _this.__NeuralQuantizer_cutNetSize_A = t1 - _this.specials;
    _this.maxNetPos = t1 - 1;
    t2 = B.JSInt_methods._tdivFast$1(t1, 8);
    _this.__NeuralQuantizer_initRadius_A = t2;
    _this.__NeuralQuantizer_initBiasRadius_A = t2 * 256;
    _this.__NeuralQuantizer__palette_A = new A.PaletteUint32(new Uint32Array(1024), 256, 4);
    _this.__NeuralQuantizer_palette_A = new A.PaletteUint8(new Uint8Array(768), 256, 3);
    _this.specials = 3;
    _this.__NeuralQuantizer_bgColor_A = 2;
    t2 = B.JSInt_methods._shrOtherPositive$1(t1, 3);
    _this.__NeuralQuantizer__radiusPower_A = new Int32Array(t2);
    t2 = type$.double;
    t3 = type$.List_double;
    _this.set$__NeuralQuantizer__network_A(t3._as(A.List_List$filled(t1 * 3, 0, false, t2)));
    _this.set$__NeuralQuantizer__bias_A(t3._as(A.List_List$filled(_this.netSize, 0, false, t2)));
    _this.set$__NeuralQuantizer__freq_A(t3._as(A.List_List$filled(_this.netSize, 0, false, t2)));
    t2 = _this.__NeuralQuantizer__network_A;
    t2 === $ && A.throwLateFieldNI("_network");
    B.JSArray_methods.$indexSet(t2, 0, 0);
    B.JSArray_methods.$indexSet(_this.__NeuralQuantizer__network_A, 1, 0);
    B.JSArray_methods.$indexSet(_this.__NeuralQuantizer__network_A, 2, 0);
    B.JSArray_methods.$indexSet(_this.__NeuralQuantizer__network_A, 3, 255);
    B.JSArray_methods.$indexSet(_this.__NeuralQuantizer__network_A, 4, 255);
    B.JSArray_methods.$indexSet(_this.__NeuralQuantizer__network_A, 5, 255);
    f = 1 / _this.netSize;
    for (i = 0; i0 = _this.specials, i < i0; ++i) {
        t1 = _this.__NeuralQuantizer__freq_A;
        t1 === $ && A.throwLateFieldNI("_freq");
        B.JSArray_methods.$indexSet(t1, i, f);
        t1 = _this.__NeuralQuantizer__bias_A;
        t1 === $ && A.throwLateFieldNI("_bias");
        B.JSArray_methods.$indexSet(t1, i, 0);
    }
    for (p = i0 * 3, i = i0; i < _this.netSize; ++i, p = p0) {
        p0 = p + 1;
        B.JSArray_methods.$indexSet(_this.__NeuralQuantizer__network_A, p, 255 * (i - _this.specials) / _this.__NeuralQuantizer_cutNetSize_A);
        p = p0 + 1;
        B.JSArray_methods.$indexSet(_this.__NeuralQuantizer__network_A, p0, 255 * (i - _this.specials) / _this.__NeuralQuantizer_cutNetSize_A);
        p0 = p + 1;
        B.JSArray_methods.$indexSet(_this.__NeuralQuantizer__network_A, p, 255 * (i - _this.specials) / _this.__NeuralQuantizer_cutNetSize_A);
        t1 = _this.__NeuralQuantizer__freq_A;
        t1 === $ && A.throwLateFieldNI("_freq");
        B.JSArray_methods.$indexSet(t1, i, f);
        t1 = _this.__NeuralQuantizer__bias_A;
        t1 === $ && A.throwLateFieldNI("_bias");
        B.JSArray_methods.$indexSet(t1, i, 0);
    }
    },
    _copyColorMap$0() {
    var i, t1, t2, t3, t4, t5, t6;
    for (i = 0; i < this.netSize; ++i) {
        t1 = this.__NeuralQuantizer_palette_A;
        t1 === $ && A.throwLateFieldNI("palette");
        t2 = this.__NeuralQuantizer__palette_A;
        t2 === $ && A.throwLateFieldNI("_palette");
        t3 = t2.numChannels;
        if (2 < t3) {
        t4 = t2.data;
        t5 = i * t3 + 2;
        if (!(t5 >= 0 && t5 < t4.length))
            return A.ioore(t4, t5);
        t5 = t4[t5];
        t4 = t5;
        } else
        t4 = 0;
        if (1 < t3) {
        t5 = t2.data;
        t6 = i * t3 + 1;
        if (!(t6 >= 0 && t6 < t5.length))
            return A.ioore(t5, t6);
        t6 = t5[t6];
        t5 = t6;
        } else
        t5 = 0;
        if (0 < t3) {
        t2 = t2.data;
        t3 = i * t3;
        if (!(t3 >= 0 && t3 < t2.length))
            return A.ioore(t2, t3);
        t3 = t2[t3];
        t2 = t3;
        } else
        t2 = 0;
        t1.setRgb$4(i, Math.abs(t4), Math.abs(t5), Math.abs(t2));
    }
    },
    _inxSearch$3(b, g, r) {
    var i, j, i0, bestD, best, t2, t3, t4, dist, a,
        _s8_ = "_palette",
        t1 = this._netIndex;
    if (!(g >= 0 && g < 256))
        return A.ioore(t1, g);
    i = t1[g];
    j = i - 1;
    i0 = this.netSize;
    t1 = this.__NeuralQuantizer__palette_A;
    bestD = 1000;
    best = -1;
    while (true) {
        t2 = i < i0;
        if (!(t2 || j >= 0))
        break;
        if (t2) {
        t1 === $ && A.throwLateFieldNI(_s8_);
        t2 = t1.numChannels;
        if (1 < t2) {
            t3 = t1.data;
            t4 = i * t2 + 1;
            if (!(t4 >= 0 && t4 < t3.length))
            return A.ioore(t3, t4);
            t4 = t3[t4];
            t3 = t4;
        } else
            t3 = 0;
        dist = t3 - g;
        if (dist >= bestD)
            i = i0;
        else {
            if (dist < 0)
            dist = -dist;
            if (0 < t2) {
            t3 = t1.data;
            t4 = i * t2;
            if (!(t4 >= 0 && t4 < t3.length))
                return A.ioore(t3, t4);
            t4 = t3[t4];
            t3 = t4;
            } else
            t3 = 0;
            a = t3 - b;
            dist += a < 0 ? -a : a;
            if (dist < bestD) {
            if (2 < t2) {
                t3 = t1.data;
                t2 = i * t2 + 2;
                if (!(t2 >= 0 && t2 < t3.length))
                return A.ioore(t3, t2);
                t2 = t3[t2];
            } else
                t2 = 0;
            a = t2 - r;
            dist += a < 0 ? -a : a;
            if (dist < bestD) {
                best = i;
                bestD = dist;
            }
            }
            ++i;
        }
        }
        if (j >= 0) {
        t1 === $ && A.throwLateFieldNI(_s8_);
        t2 = t1.numChannels;
        if (1 < t2) {
            t3 = t1.data;
            t4 = j * t2 + 1;
            if (!(t4 >= 0 && t4 < t3.length))
            return A.ioore(t3, t4);
            t4 = t3[t4];
            t3 = t4;
        } else
            t3 = 0;
        dist = g - t3;
        if (dist >= bestD)
            j = -1;
        else {
            if (dist < 0)
            dist = -dist;
            if (0 < t2) {
            t3 = t1.data;
            t4 = j * t2;
            if (!(t4 >= 0 && t4 < t3.length))
                return A.ioore(t3, t4);
            t4 = t3[t4];
            t3 = t4;
            } else
            t3 = 0;
            a = t3 - b;
            dist += a < 0 ? -a : a;
            if (dist < bestD) {
            if (2 < t2) {
                t3 = t1.data;
                t2 = j * t2 + 2;
                if (!(t2 >= 0 && t2 < t3.length))
                return A.ioore(t3, t2);
                t2 = t3[t2];
            } else
                t2 = 0;
            a = t2 - r;
            dist += a < 0 ? -a : a;
            if (dist < bestD) {
                best = j;
                bestD = dist;
            }
            }
            --j;
        }
        }
    }
    return best;
    },
    _fix$0() {
    var i, p, j, t1, x, t2, t3, _this = this,
        _s8_ = "_palette";
    for (i = 0, p = 0; i < _this.netSize; ++i) {
        for (j = 0; j < 3; ++j, ++p) {
        t1 = _this.__NeuralQuantizer__network_A;
        t1 === $ && A.throwLateFieldNI("_network");
        if (!(p >= 0 && p < t1.length))
            return A.ioore(t1, p);
        t1 = t1[p];
        if (typeof t1 !== "number")
            return A.iae(t1);
        x = B.JSInt_methods.clamp$2(B.JSNumber_methods.toInt$0(0.5 + t1), 0, 255);
        t1 = _this.__NeuralQuantizer__palette_A;
        t1 === $ && A.throwLateFieldNI(_s8_);
        t2 = t1.numChannels;
        if (j < t2) {
            t1 = t1.data;
            t2 = i * t2 + j;
            t3 = B.JSNumber_methods.toInt$0(x);
            if (!(t2 >= 0 && t2 < t1.length))
            return A.ioore(t1, t2);
            t1[t2] = t3;
        }
        }
        t1 = _this.__NeuralQuantizer__palette_A;
        t1 === $ && A.throwLateFieldNI(_s8_);
        t2 = t1.numChannels;
        if (3 < t2) {
        t1 = t1.data;
        t2 = i * t2 + 3;
        t3 = B.JSInt_methods.toInt$0(i);
        if (!(t2 >= 0 && t2 < t1.length))
            return A.ioore(t1, t2);
        t1[t2] = t3;
        }
    }
    },
    _inxBuild$0() {
    var t1, t2, t3, previousColor, startPos, i, t4, t5, t6, t7, smallVal, j, j0, smallPos, t8, index, _this = this;
    for (t1 = _this.netSize, t2 = _this.__NeuralQuantizer__palette_A, t3 = _this._netIndex, previousColor = 0, startPos = 0, i = 0; i < t1; i = j) {
        t2 === $ && A.throwLateFieldNI("_palette");
        t4 = t2.numChannels;
        t5 = 1 < t4;
        if (t5) {
        t6 = t2.data;
        t7 = i * t4 + 1;
        if (!(t7 >= 0 && t7 < t6.length))
            return A.ioore(t6, t7);
        smallVal = t6[t7];
        } else
        smallVal = 0;
        for (j = i + 1, j0 = j, smallPos = i; j0 < t1; ++j0) {
        if (t5) {
            t6 = t2.data;
            t7 = j0 * t4 + 1;
            if (!(t7 >= 0 && t7 < t6.length))
            return A.ioore(t6, t7);
            t7 = t6[t7];
            t6 = t7;
        } else
            t6 = 0;
        if (t6 < smallVal) {
            if (t5) {
            t6 = t2.data;
            t7 = j0 * t4 + 1;
            if (!(t7 >= 0 && t7 < t6.length))
                return A.ioore(t6, t7);
            smallVal = t6[t7];
            } else
            smallVal = 0;
            smallPos = j0;
        }
        }
        if (i !== smallPos) {
        t6 = 0 < t4;
        if (t6) {
            t7 = t2.data;
            t8 = smallPos * t4;
            if (!(t8 >= 0 && t8 < t7.length))
            return A.ioore(t7, t8);
            j0 = t7[t8];
        } else
            j0 = 0;
        if (t6) {
            t7 = t2.data;
            t8 = i * t4;
            if (!(t8 >= 0 && t8 < t7.length))
            return A.ioore(t7, t8);
            t8 = t7[t8];
            t7 = t8;
        } else
            t7 = 0;
        if (t6) {
            index = smallPos * t4;
            t8 = t2.data;
            t7 = B.JSInt_methods.toInt$0(t7);
            if (!(index >= 0 && index < t8.length))
            return A.ioore(t8, index);
            t8[index] = t7;
        }
        if (t6) {
            index = i * t4;
            t6 = t2.data;
            t7 = B.JSInt_methods.toInt$0(j0);
            if (!(index >= 0 && index < t6.length))
            return A.ioore(t6, index);
            t6[index] = t7;
        }
        if (t5) {
            t6 = t2.data;
            t7 = smallPos * t4 + 1;
            if (!(t7 >= 0 && t7 < t6.length))
            return A.ioore(t6, t7);
            j0 = t6[t7];
        } else
            j0 = 0;
        if (t5) {
            t6 = t2.data;
            t7 = i * t4 + 1;
            if (!(t7 >= 0 && t7 < t6.length))
            return A.ioore(t6, t7);
            t7 = t6[t7];
            t6 = t7;
        } else
            t6 = 0;
        if (t5) {
            t7 = t2.data;
            t8 = smallPos * t4 + 1;
            t6 = B.JSInt_methods.toInt$0(t6);
            if (!(t8 >= 0 && t8 < t7.length))
            return A.ioore(t7, t8);
            t7[t8] = t6;
        }
        if (t5) {
            t5 = t2.data;
            t6 = i * t4 + 1;
            t7 = B.JSInt_methods.toInt$0(j0);
            if (!(t6 >= 0 && t6 < t5.length))
            return A.ioore(t5, t6);
            t5[t6] = t7;
        }
        t5 = 2 < t4;
        if (t5) {
            t6 = t2.data;
            t7 = smallPos * t4 + 2;
            if (!(t7 >= 0 && t7 < t6.length))
            return A.ioore(t6, t7);
            j0 = t6[t7];
        } else
            j0 = 0;
        if (t5) {
            t6 = t2.data;
            t7 = i * t4 + 2;
            if (!(t7 >= 0 && t7 < t6.length))
            return A.ioore(t6, t7);
            t7 = t6[t7];
            t6 = t7;
        } else
            t6 = 0;
        if (t5) {
            t7 = t2.data;
            t8 = smallPos * t4 + 2;
            t6 = B.JSInt_methods.toInt$0(t6);
            if (!(t8 >= 0 && t8 < t7.length))
            return A.ioore(t7, t8);
            t7[t8] = t6;
        }
        if (t5) {
            t5 = t2.data;
            t6 = i * t4 + 2;
            t7 = B.JSInt_methods.toInt$0(j0);
            if (!(t6 >= 0 && t6 < t5.length))
            return A.ioore(t5, t6);
            t5[t6] = t7;
        }
        t5 = 3 < t4;
        if (t5) {
            t6 = t2.data;
            t7 = smallPos * t4 + 3;
            if (!(t7 >= 0 && t7 < t6.length))
            return A.ioore(t6, t7);
            j0 = t6[t7];
        } else
            j0 = 0;
        if (t5) {
            t6 = t2.data;
            t7 = i * t4 + 3;
            if (!(t7 >= 0 && t7 < t6.length))
            return A.ioore(t6, t7);
            t7 = t6[t7];
            t6 = t7;
        } else
            t6 = 0;
        if (t5) {
            t7 = t2.data;
            t8 = smallPos * t4 + 3;
            t6 = B.JSInt_methods.toInt$0(t6);
            if (!(t8 >= 0 && t8 < t7.length))
            return A.ioore(t7, t8);
            t7[t8] = t6;
        }
        if (t5) {
            t5 = t2.data;
            t4 = i * t4 + 3;
            t6 = B.JSInt_methods.toInt$0(j0);
            if (!(t4 >= 0 && t4 < t5.length))
            return A.ioore(t5, t4);
            t5[t4] = t6;
        }
        }
        if (smallVal !== previousColor) {
        if (!(previousColor >= 0 && previousColor < 256))
            return A.ioore(t3, previousColor);
        t3[previousColor] = startPos + i >>> 1;
        for (j0 = previousColor + 1; j0 < smallVal; ++j0) {
            if (!(j0 < 256))
            return A.ioore(t3, j0);
            t3[j0] = i;
        }
        startPos = i;
        previousColor = smallVal;
        }
    }
    t1 = _this.maxNetPos;
    t1.toString;
    t2 = B.JSInt_methods._shrOtherPositive$1(startPos + t1, 1);
    if (!(previousColor >= 0 && previousColor < 256))
        return A.ioore(t3, previousColor);
    t3[previousColor] = t2;
    for (j = previousColor + 1; j < 256; ++j)
        t3[j] = t1;
    },
    _updateRadiusPower$2(rad, alpha) {
    var t1, t2, i, t3;
    for (t1 = this.__NeuralQuantizer__radiusPower_A, t2 = rad * rad, i = 0; i < rad; ++i) {
        t1 === $ && A.throwLateFieldNI("_radiusPower");
        t3 = B.JSNumber_methods.toInt$0(alpha * ((t2 - i * i) * 256 / t2));
        if (!(i < t1.length))
        return A.ioore(t1, i);
        t1[i] = t3;
    }
    },
    _learn$1(image) {
    var alphaDec, lengthCount, samplePixels, delta, rad, step, w, h, biasRadius, alpha, pos, x, y, i, p, red, green, blue, t2, j, a, t3, _this = this,
        _s8_ = "_network",
        t1 = _this.__NeuralQuantizer_initBiasRadius_A;
    t1 === $ && A.throwLateFieldNI("initBiasRadius");
    alphaDec = 30 + B.JSInt_methods._tdivFast$1(_this.samplingFactor - 1, 3);
    lengthCount = image.get$width() * image.get$height();
    samplePixels = B.JSInt_methods.$tdiv(lengthCount, _this.samplingFactor);
    delta = Math.max(B.JSInt_methods._tdivFast$1(samplePixels, 100), 1);
    if (delta === 0)
        delta = 1;
    rad = B.JSInt_methods._shrOtherPositive$1(t1, 8);
    if (rad <= 1)
        rad = 0;
    _this._updateRadiusPower$2(rad, 1024);
    if (lengthCount < 1509)
        step = _this.samplingFactor = 1;
    else if (B.JSInt_methods.$mod(lengthCount, 499) !== 0)
        step = 499;
    else if (B.JSInt_methods.$mod(lengthCount, 491) !== 0)
        step = 491;
    else
        step = B.JSInt_methods.$mod(lengthCount, 487) !== 0 ? 487 : 503;
    w = image.get$width();
    h = image.get$height();
    for (biasRadius = t1, alpha = 1024, pos = 0, x = 0, y = 0, i = 0; i < samplePixels;) {
        t1 = image.data;
        p = t1 == null ? null : t1.getPixel$3(x, y, null);
        if (p == null)
        p = new A.PixelUndefined();
        red = p.get$r();
        green = p.get$g();
        blue = p.get$b();
        if (i === 0) {
        t1 = _this.__NeuralQuantizer__network_A;
        t1 === $ && A.throwLateFieldNI(_s8_);
        t2 = _this.__NeuralQuantizer_bgColor_A;
        t2 === $ && A.throwLateFieldNI("bgColor");
        B.JSArray_methods.$indexSet(t1, t2 * 3, blue);
        B.JSArray_methods.$indexSet(_this.__NeuralQuantizer__network_A, _this.__NeuralQuantizer_bgColor_A * 3 + 1, green);
        B.JSArray_methods.$indexSet(_this.__NeuralQuantizer__network_A, _this.__NeuralQuantizer_bgColor_A * 3 + 2, red);
        }
        j = _this._specialFind$3(blue, green, red);
        if (j < 0)
        j = _this._contest$3(blue, green, red);
        if (j >= _this.specials) {
        a = alpha / 1024;
        p = j * 3;
        t1 = _this.__NeuralQuantizer__network_A;
        t1 === $ && A.throwLateFieldNI(_s8_);
        if (!(p >= 0 && p < t1.length))
            return A.ioore(t1, p);
        t2 = t1[p];
        if (typeof t2 !== "number")
            return t2.$sub();
        B.JSArray_methods.$indexSet(t1, p, t2 - a * (t2 - blue));
        t2 = _this.__NeuralQuantizer__network_A;
        t1 = p + 1;
        if (!(t1 < t2.length))
            return A.ioore(t2, t1);
        t3 = t2[t1];
        if (typeof t3 !== "number")
            return t3.$sub();
        B.JSArray_methods.$indexSet(t2, t1, t3 - a * (t3 - green));
        t3 = _this.__NeuralQuantizer__network_A;
        t1 = p + 2;
        if (!(t1 < t3.length))
            return A.ioore(t3, t1);
        t2 = t3[t1];
        if (typeof t2 !== "number")
            return t2.$sub();
        B.JSArray_methods.$indexSet(t3, t1, t2 - a * (t2 - red));
        if (rad > 0)
            _this._alterNeighbors$6(a, rad, j, blue, green, red);
        }
        pos += step;
        x += step;
        for (; x > w;) {
        x -= w;
        ++y;
        }
        for (; pos >= lengthCount;) {
        pos -= lengthCount;
        y -= h;
        }
        ++i;
        if (B.JSInt_methods.$mod(i, delta) === 0) {
        alpha -= B.JSInt_methods.$tdiv(alpha, alphaDec);
        biasRadius -= B.JSInt_methods._tdivFast$1(biasRadius, 30);
        rad = B.JSInt_methods._shrOtherPositive$1(biasRadius, 8);
        if (rad <= 1)
            rad = 0;
        _this._updateRadiusPower$2(rad, alpha);
        }
    }
    },
    _alterNeighbors$6(alpha, rad, i, b, g, r) {
    var hi, hi0, j, k, m, t1, t2, m0, a, p, t3, _this = this,
        _s8_ = "_network",
        lo = i - rad,
        lo0 = _this.specials - 1;
    if (lo < lo0)
        lo = lo0;
    hi = i + rad;
    hi0 = _this.netSize;
    if (hi > hi0)
        hi = hi0;
    j = i + 1;
    k = i - 1;
    m = 1;
    while (true) {
        t1 = j < hi;
        if (!(t1 || k > lo))
        break;
        t2 = _this.__NeuralQuantizer__radiusPower_A;
        t2 === $ && A.throwLateFieldNI("_radiusPower");
        m0 = m + 1;
        if (!(m < t2.length))
        return A.ioore(t2, m);
        a = t2[m];
        if (t1) {
        p = j * 3;
        t1 = _this.__NeuralQuantizer__network_A;
        t1 === $ && A.throwLateFieldNI(_s8_);
        if (!(p >= 0 && p < t1.length))
            return A.ioore(t1, p);
        t2 = t1[p];
        if (typeof t2 !== "number")
            return t2.$sub();
        B.JSArray_methods.$indexSet(t1, p, t2 - a * (t2 - b) / 262144);
        t2 = _this.__NeuralQuantizer__network_A;
        t1 = p + 1;
        if (!(t1 < t2.length))
            return A.ioore(t2, t1);
        t3 = t2[t1];
        if (typeof t3 !== "number")
            return t3.$sub();
        B.JSArray_methods.$indexSet(t2, t1, t3 - a * (t3 - g) / 262144);
        t3 = _this.__NeuralQuantizer__network_A;
        t1 = p + 2;
        if (!(t1 < t3.length))
            return A.ioore(t3, t1);
        t2 = t3[t1];
        if (typeof t2 !== "number")
            return t2.$sub();
        B.JSArray_methods.$indexSet(t3, t1, t2 - a * (t2 - r) / 262144);
        ++j;
        }
        if (k > lo) {
        p = k * 3;
        t1 = _this.__NeuralQuantizer__network_A;
        t1 === $ && A.throwLateFieldNI(_s8_);
        if (!(p >= 0 && p < t1.length))
            return A.ioore(t1, p);
        t2 = t1[p];
        if (typeof t2 !== "number")
            return t2.$sub();
        B.JSArray_methods.$indexSet(t1, p, t2 - a * (t2 - b) / 262144);
        t2 = _this.__NeuralQuantizer__network_A;
        t1 = p + 1;
        if (!(t1 < t2.length))
            return A.ioore(t2, t1);
        t3 = t2[t1];
        if (typeof t3 !== "number")
            return t3.$sub();
        B.JSArray_methods.$indexSet(t2, t1, t3 - a * (t3 - g) / 262144);
        t3 = _this.__NeuralQuantizer__network_A;
        t1 = p + 2;
        if (!(t1 < t3.length))
            return A.ioore(t3, t1);
        t2 = t3[t1];
        if (typeof t2 !== "number")
            return t2.$sub();
        B.JSArray_methods.$indexSet(t3, t1, t2 - a * (t2 - r) / 262144);
        --k;
        }
        m = m0;
    }
    },
    _contest$3(b, g, r) {
    var i, p, bestBiasDist, bestD, bestPos, bestBiasPos, t1, p0, t2, t3, dist, a, a0, biasDist, _this = this, _1000000000000000019884624838656 = 1e30;
    for (i = _this.specials, p = i * 3, bestBiasDist = _1000000000000000019884624838656, bestD = bestBiasDist, bestPos = -1, bestBiasPos = -1; i < _this.netSize; ++i, p = p0) {
        t1 = _this.__NeuralQuantizer__network_A;
        t1 === $ && A.throwLateFieldNI("_network");
        p0 = p + 1;
        t2 = t1.length;
        if (!(p < t2))
        return A.ioore(t1, p);
        t3 = t1[p];
        if (typeof t3 !== "number")
        return t3.$sub();
        dist = t3 - b;
        if (dist < 0)
        dist = -dist;
        p = p0 + 1;
        if (!(p0 < t2))
        return A.ioore(t1, p0);
        t3 = t1[p0];
        if (typeof t3 !== "number")
        return t3.$sub();
        a = t3 - g;
        if (a < 0)
        a = -a;
        p0 = p + 1;
        if (!(p < t2))
        return A.ioore(t1, p);
        t1 = t1[p];
        if (typeof t1 !== "number")
        return t1.$sub();
        a0 = t1 - r;
        if (a0 < 0)
        a0 = -a0;
        dist = dist + a + a0;
        if (dist < bestD) {
        bestPos = i;
        bestD = dist;
        }
        t1 = _this.__NeuralQuantizer__bias_A;
        t1 === $ && A.throwLateFieldNI("_bias");
        if (!(i < t1.length))
        return A.ioore(t1, i);
        biasDist = dist - t1[i];
        if (biasDist < bestBiasDist) {
        bestBiasPos = i;
        bestBiasDist = biasDist;
        }
        t1 = _this.__NeuralQuantizer__freq_A;
        t1 === $ && A.throwLateFieldNI("_freq");
        if (!(i < t1.length))
        return A.ioore(t1, i);
        t2 = t1[i];
        B.JSArray_methods.$indexSet(t1, i, t2 - 0.0009765625 * t2);
        t2 = _this.__NeuralQuantizer__bias_A;
        if (!(i < t2.length))
        return A.ioore(t2, i);
        t1 = t2[i];
        t3 = _this.__NeuralQuantizer__freq_A;
        if (!(i < t3.length))
        return A.ioore(t3, i);
        B.JSArray_methods.$indexSet(t2, i, t1 + t3[i]);
    }
    t1 = _this.__NeuralQuantizer__freq_A;
    t1 === $ && A.throwLateFieldNI("_freq");
    if (!(bestPos >= 0 && bestPos < t1.length))
        return A.ioore(t1, bestPos);
    B.JSArray_methods.$indexSet(t1, bestPos, t1[bestPos] + 0.0009765625);
    t1 = _this.__NeuralQuantizer__bias_A;
    t1 === $ && A.throwLateFieldNI("_bias");
    if (!(bestPos < t1.length))
        return A.ioore(t1, bestPos);
    B.JSArray_methods.$indexSet(t1, bestPos, t1[bestPos] - 1);
    return bestBiasPos;
    },
    _specialFind$3(b, g, r) {
    var i, p, t1, p0, _this = this;
    for (i = 0, p = 0; i < _this.specials; ++i) {
        t1 = _this.__NeuralQuantizer__network_A;
        t1 === $ && A.throwLateFieldNI("_network");
        p0 = p + 1;
        if (!(p < t1.length))
        return A.ioore(t1, p);
        if (J.$eq$(t1[p], b)) {
        t1 = _this.__NeuralQuantizer__network_A;
        p = p0 + 1;
        if (!(p0 < t1.length))
            return A.ioore(t1, p0);
        if (J.$eq$(t1[p0], g)) {
            t1 = _this.__NeuralQuantizer__network_A;
            p0 = p + 1;
            if (!(p < t1.length))
            return A.ioore(t1, p);
            t1 = J.$eq$(t1[p], r);
            p = p0;
        } else
            t1 = false;
        } else {
        p = p0;
        t1 = false;
        }
        if (t1)
        return i;
    }
    return -1;
    },
    set$netSize(netSize) {
    this.netSize = A._asInt(netSize);
    },
    set$__NeuralQuantizer__network_A(__NeuralQuantizer__network_A) {
    this.__NeuralQuantizer__network_A = type$.List_double._as(__NeuralQuantizer__network_A);
    },
    set$__NeuralQuantizer__bias_A(__NeuralQuantizer__bias_A) {
    this.__NeuralQuantizer__bias_A = type$.List_double._as(__NeuralQuantizer__bias_A);
    },
    set$__NeuralQuantizer__freq_A(__NeuralQuantizer__freq_A) {
    this.__NeuralQuantizer__freq_A = type$.List_double._as(__NeuralQuantizer__freq_A);
    }
};
A.OutputBuffer.prototype = {
    writeByte$1(value) {
    var t1, t2, _this = this;
    if (_this.length === _this._output_buffer$_buffer.length)
        _this._expandBuffer$0();
    t1 = _this._output_buffer$_buffer;
    t2 = _this.length++;
    if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
    t1[t2] = value & 255;
    },
    writeBytes$2(bytes, len) {
    var t1, t2, t3, t4, _this = this;
    type$.List_int._as(bytes);
    len = J.get$length$asx(bytes);
    for (; t1 = _this.length, t2 = t1 + len, t3 = _this._output_buffer$_buffer, t4 = t3.length, t2 > t4;)
        _this._expandBuffer$1(t2 - t4);
    B.NativeUint8List_methods.setRange$3(t3, t1, t2, bytes);
    _this.length += len;
    },
    writeBytes$1(bytes) {
    return this.writeBytes$2(bytes, null);
    },
    writeUint16$1(value) {
    var _this = this;
    if (_this.bigEndian) {
        _this.writeByte$1(B.JSInt_methods._shrOtherPositive$1(value, 8) & 255);
        _this.writeByte$1(value & 255);
        return;
    }
    _this.writeByte$1(value & 255);
    _this.writeByte$1(B.JSInt_methods._shrOtherPositive$1(value, 8) & 255);
    },
    writeUint32$1(value) {
    var _this = this;
    if (_this.bigEndian) {
        _this.writeByte$1(B.JSInt_methods._shrOtherPositive$1(value, 24) & 255);
        _this.writeByte$1(B.JSInt_methods._shrOtherPositive$1(value, 16) & 255);
        _this.writeByte$1(B.JSInt_methods._shrOtherPositive$1(value, 8) & 255);
        _this.writeByte$1(value & 255);
        return;
    }
    _this.writeByte$1(value & 255);
    _this.writeByte$1(B.JSInt_methods._shrOtherPositive$1(value, 8) & 255);
    _this.writeByte$1(B.JSInt_methods._shrOtherPositive$1(value, 16) & 255);
    _this.writeByte$1(B.JSInt_methods._shrOtherPositive$1(value, 24) & 255);
    },
    _expandBuffer$1(required) {
    var blockSize, t1, t2, newBuffer;
    if (required != null)
        blockSize = required;
    else {
        t1 = this._output_buffer$_buffer.length;
        blockSize = t1 === 0 ? 8192 : t1 * 2;
    }
    t1 = this._output_buffer$_buffer;
    t2 = t1.length;
    newBuffer = new Uint8Array(t2 + blockSize);
    B.NativeUint8List_methods.setRange$3(newBuffer, 0, t2, t1);
    this._output_buffer$_buffer = newBuffer;
    },
    _expandBuffer$0() {
    return this._expandBuffer$1(null);
    },
    get$length(receiver) {
    return this.length;
    }
};
A.Quantizer.prototype = {
    getIndexImage$1(image) {
    var target, ti, p, t, r, g,
        t1 = image.get$width(),
        t2 = image.get$height(),
        t3 = this.__NeuralQuantizer_palette_A;
    t3 === $ && A.throwLateFieldNI("palette");
    target = A.Image$(null, null, B.Format_3, 0, B.FrameType_2, t2, null, 0, 1, t3, t1, false);
    t1 = target.data;
    ti = t1.get$iterator(t1);
    ti.moveNext$0();
    for (t1 = image.data, t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        p = t1.get$current();
        t = ti.get$current();
        r = B.JSNumber_methods.toInt$0(p.get$r());
        g = B.JSNumber_methods.toInt$0(p.get$g());
        t.$indexSet(0, 0, this._inxSearch$3(B.JSNumber_methods.toInt$0(p.get$b()), g, r));
        ti.moveNext$0();
    }
    return target;
    }
};
A.Rational.prototype = {
    toInt$0(_) {
    var t1 = this.denominator;
    return t1 === 0 ? 0 : B.JSInt_methods.$tdiv(this.numerator, t1);
    },
    $eq(_, other) {
    if (other == null)
        return false;
    return other instanceof A.Rational && this.numerator === other.numerator && this.denominator === other.denominator;
    },
    get$hashCode(_) {
    return A.Object_hash(this.numerator, this.denominator);
    },
    toString$0(_) {
    return "" + this.numerator + "/" + this.denominator;
    }
};
(function aliases() {
    var _ = J.LegacyJavaScriptObject.prototype;
    _.super$LegacyJavaScriptObject$toString = _.toString$0;
    _ = A.JsLinkedHashMap.prototype;
    _.super$JsLinkedHashMap$internalContainsKey = _.internalContainsKey$1;
    _.super$JsLinkedHashMap$internalGet = _.internalGet$1;
    _.super$JsLinkedHashMap$internalSet = _.internalSet$2;
    _.super$JsLinkedHashMap$internalRemove = _.internalRemove$1;
    _ = A.ListMixin.prototype;
    _.super$ListMixin$setRange = _.setRange$4;
})();
(function installTearOffs() {
    var _static_1 = hunkHelpers._static_1,
    _static_0 = hunkHelpers._static_0,
    _static_2 = hunkHelpers._static_2,
    _instance_0_i = hunkHelpers._instance_0i,
    _instance_0_u = hunkHelpers._instance_0u,
    _instance = hunkHelpers.installInstanceTearOff,
    _instance_2_u = hunkHelpers._instance_2u,
    _instance_1_u = hunkHelpers._instance_1u,
    _static = hunkHelpers.installStaticTearOff;
    _static_1(A, "_js_helper_GeneralConstantMap__constantMapHashCode$closure", "GeneralConstantMap__constantMapHashCode", 5);
    _static_0(A, "_js_helper_Primitives_dateNow$closure", "Primitives_dateNow", 8);
    _static_1(A, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 7);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 7);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 7);
    _static_0(A, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 2);
    _static_2(A, "collection___defaultEquals$closure", "_defaultEquals", 35);
    _static_1(A, "collection___defaultHashCode$closure", "_defaultHashCode", 5);
    _instance_0_i(A._File.prototype, "get$length", "length$0", 13);
    var _;
    _instance_0_u(_ = A._RandomAccessFile.prototype, "get$close", "close$0", 23);
    _instance_0_i(_, "get$length", "length$0", 13);
    _instance(A.IfdValue.prototype, "get$toInt", 1, 0, null, ["call$1", "call$0"], ["toInt$1", "toInt$0"], 3, 0, 0);
    _instance(A.IfdByteValue.prototype, "get$toInt", 1, 0, null, ["call$1", "call$0"], ["toInt$1", "toInt$0"], 3, 0, 0);
    _instance(A.IfdValueShort.prototype, "get$toInt", 1, 0, null, ["call$1", "call$0"], ["toInt$1", "toInt$0"], 3, 0, 0);
    _instance(A.IfdValueLong.prototype, "get$toInt", 1, 0, null, ["call$1", "call$0"], ["toInt$1", "toInt$0"], 3, 0, 0);
    _instance(A.IfdValueRational.prototype, "get$toInt", 1, 0, null, ["call$1", "call$0"], ["toInt$1", "toInt$0"], 3, 0, 0);
    _instance(A.IfdValueSByte.prototype, "get$toInt", 1, 0, null, ["call$1", "call$0"], ["toInt$1", "toInt$0"], 3, 0, 0);
    _instance(A.IfdValueSShort.prototype, "get$toInt", 1, 0, null, ["call$1", "call$0"], ["toInt$1", "toInt$0"], 3, 0, 0);
    _instance(A.IfdValueSLong.prototype, "get$toInt", 1, 0, null, ["call$1", "call$0"], ["toInt$1", "toInt$0"], 3, 0, 0);
    _instance(A.IfdValueSRational.prototype, "get$toInt", 1, 0, null, ["call$1", "call$0"], ["toInt$1", "toInt$0"], 3, 0, 0);
    _instance_2_u(_ = A.JpegScan.prototype, "get$_decodeBaseline", "_decodeBaseline$2", 4);
    _instance_2_u(_, "get$_decodeDCFirst", "_decodeDCFirst$2", 4);
    _instance_2_u(_, "get$_decodeDCSuccessive", "_decodeDCSuccessive$2", 4);
    _instance_2_u(_, "get$_decodeACFirst", "_decodeACFirst$2", 4);
    _instance_2_u(_, "get$_decodeACSuccessive", "_decodeACSuccessive$2", 4);
    _static_1(A, "vp8_filter_VP8Filter__ve4$closure", "VP8Filter__ve4", 0);
    _static_1(A, "vp8_filter_VP8Filter__he4$closure", "VP8Filter__he4", 0);
    _static_1(A, "vp8_filter_VP8Filter__dc4$closure", "VP8Filter__dc4", 0);
    _static_1(A, "vp8_filter_VP8Filter__tm4$closure", "VP8Filter__tm4", 0);
    _static_1(A, "vp8_filter_VP8Filter__tm8uv$closure", "VP8Filter__tm8uv", 0);
    _static_1(A, "vp8_filter_VP8Filter__tm16$closure", "VP8Filter__tm16", 0);
    _static_1(A, "vp8_filter_VP8Filter__rd4$closure", "VP8Filter__rd4", 0);
    _static_1(A, "vp8_filter_VP8Filter__ld4$closure", "VP8Filter__ld4", 0);
    _static_1(A, "vp8_filter_VP8Filter__vr4$closure", "VP8Filter__vr4", 0);
    _static_1(A, "vp8_filter_VP8Filter__vl4$closure", "VP8Filter__vl4", 0);
    _static_1(A, "vp8_filter_VP8Filter__hu4$closure", "VP8Filter__hu4", 0);
    _static_1(A, "vp8_filter_VP8Filter__hd4$closure", "VP8Filter__hd4", 0);
    _static_1(A, "vp8_filter_VP8Filter_ve16$closure", "VP8Filter_ve16", 0);
    _static_1(A, "vp8_filter_VP8Filter_he16$closure", "VP8Filter_he16", 0);
    _static_1(A, "vp8_filter_VP8Filter_dc16$closure", "VP8Filter_dc16", 0);
    _static_1(A, "vp8_filter_VP8Filter_dc16NoTop$closure", "VP8Filter_dc16NoTop", 0);
    _static_1(A, "vp8_filter_VP8Filter_dc16NoLeft$closure", "VP8Filter_dc16NoLeft", 0);
    _static_1(A, "vp8_filter_VP8Filter_dc16NoTopLeft$closure", "VP8Filter_dc16NoTopLeft", 0);
    _static_1(A, "vp8_filter_VP8Filter_ve8uv$closure", "VP8Filter_ve8uv", 0);
    _static_1(A, "vp8_filter_VP8Filter_he8uv$closure", "VP8Filter_he8uv", 0);
    _static_1(A, "vp8_filter_VP8Filter_dc8uv$closure", "VP8Filter_dc8uv", 0);
    _static_1(A, "vp8_filter_VP8Filter_dc8uvNoLeft$closure", "VP8Filter_dc8uvNoLeft", 0);
    _static_1(A, "vp8_filter_VP8Filter_dc8uvNoTop$closure", "VP8Filter_dc8uvNoTop", 0);
    _static_1(A, "vp8_filter_VP8Filter_dc8uvNoTopLeft$closure", "VP8Filter_dc8uvNoTopLeft", 0);
    _instance_1_u(A.VP8L.prototype, "get$_processRows", "_processRows$1", 14);
    _instance_1_u(A.InternalVP8L.prototype, "get$extractAlphaRows", "extractAlphaRows$1", 14);
    _static(A, "vp8l_transform_VP8LTransform__predictor0$closure", 3, null, ["call$3"], ["VP8LTransform__predictor0"], 1, 0);
    _static(A, "vp8l_transform_VP8LTransform__predictor1$closure", 3, null, ["call$3"], ["VP8LTransform__predictor1"], 1, 0);
    _static(A, "vp8l_transform_VP8LTransform__predictor2$closure", 3, null, ["call$3"], ["VP8LTransform__predictor2"], 1, 0);
    _static(A, "vp8l_transform_VP8LTransform__predictor3$closure", 3, null, ["call$3"], ["VP8LTransform__predictor3"], 1, 0);
    _static(A, "vp8l_transform_VP8LTransform__predictor4$closure", 3, null, ["call$3"], ["VP8LTransform__predictor4"], 1, 0);
    _static(A, "vp8l_transform_VP8LTransform__predictor5$closure", 3, null, ["call$3"], ["VP8LTransform__predictor5"], 1, 0);
    _static(A, "vp8l_transform_VP8LTransform__predictor6$closure", 3, null, ["call$3"], ["VP8LTransform__predictor6"], 1, 0);
    _static(A, "vp8l_transform_VP8LTransform__predictor7$closure", 3, null, ["call$3"], ["VP8LTransform__predictor7"], 1, 0);
    _static(A, "vp8l_transform_VP8LTransform__predictor8$closure", 3, null, ["call$3"], ["VP8LTransform__predictor8"], 1, 0);
    _static(A, "vp8l_transform_VP8LTransform__predictor9$closure", 3, null, ["call$3"], ["VP8LTransform__predictor9"], 1, 0);
    _static(A, "vp8l_transform_VP8LTransform__predictor10$closure", 3, null, ["call$3"], ["VP8LTransform__predictor10"], 1, 0);
    _static(A, "vp8l_transform_VP8LTransform__predictor11$closure", 3, null, ["call$3"], ["VP8LTransform__predictor11"], 1, 0);
    _static(A, "vp8l_transform_VP8LTransform__predictor12$closure", 3, null, ["call$3"], ["VP8LTransform__predictor12"], 1, 0);
    _static(A, "vp8l_transform_VP8LTransform__predictor13$closure", 3, null, ["call$3"], ["VP8LTransform__predictor13"], 1, 0);
    _static(A, "webp_filters_WebPFilters_horizontalUnfilter$closure", 6, null, ["call$6"], ["WebPFilters_horizontalUnfilter"], 6, 0);
    _static(A, "webp_filters_WebPFilters_verticalUnfilter$closure", 6, null, ["call$6"], ["WebPFilters_verticalUnfilter"], 6, 0);
    _static(A, "webp_filters_WebPFilters_gradientUnfilter$closure", 6, null, ["call$6"], ["WebPFilters_gradientUnfilter"], 6, 0);
})();
(function inheritance() {
    var _mixin = hunkHelpers.mixin,
    _inherit = hunkHelpers.inherit,
    _inheritMany = hunkHelpers.inheritMany;
    _inherit(A.Object, null);
    _inheritMany(A.Object, [A.JS_CONST, J.Interceptor, J.ArrayIterator, A.Error, A._ListBase_Object_ListMixin, A.SentinelValue, A.Iterable, A.ListIterator, A.Iterator, A.EmptyIterator, A.FixedLengthListMixin, A.UnmodifiableListMixin, A.ConstantMap, A.Closure, A.TypeErrorDecoder, A.NullThrownFromJavaScriptException, A.ExceptionAndStackTrace, A._StackTrace, A.MapMixin, A.LinkedHashMapCell, A.LinkedHashMapKeyIterator, A._Cell, A.Rti, A._FunctionParameters, A._Type, A._TimerImpl, A._AsyncAwaitCompleter, A.AsyncError, A._FutureListener, A._Future, A._AsyncCallbackEntry, A.StreamTransformerBase, A._StreamIterator, A._Zone, A.ListMixin, A.Codec, A._Utf8Encoder, A._Utf8Decoder, A.DateTime, A._Enum, A.OutOfMemoryError, A.StackOverflowError, A._Exception, A.FormatException, A.Null, A._StringStackTrace, A.Stopwatch, A.StringBuffer, A.OSError, A._BufferAndStart, A.FileMode, A.FileSystemException, A.FileSystemEntity, A._RandomAccessFile, A.InputStreamBase, A.OutputStreamBase, A.ZLibDecoderBase, A.Deflate, A._DeflaterConfig, A._HuffmanTree, A._StaticTree, A.HuffmanTable, A.Inflate, A.ZLibDecoder, A.ZLibEncoder, A.IfdContainer, A._ExifEntry, A.ExifTag, A.IfdDirectory, A.IfdValue, A.BmpFileHeader, A.BmpInfo, A.Decoder, A.Encoder, A.ExrAttribute, A.ExrCompressor, A.ExrChannel, A.ExrHufDec, A.ExrImage, A.ExrPart, A._PizChannelData, A.GifColorMap, A.GifImageDesc, A.GifInfo, A.IcoInfo, A.IcoInfoImage, A.ComponentData, A.HuffmanNode, A.JpegAdobe, A.JpegComponent, A.JpegData, A._JpegHuffman, A.JpegFrame, A.JpegJfif, A.JpegScan, A.PngFrame, A.PngInfo, A.PsdEffect, A.PsdLayerData, A.PsdBlendingRanges, A.PsdChannel, A.PsdImage, A.PsdImageResource, A.PsdLayer, A.PvrColorRgbCore, A.Pvr2Info, A.Pvr3Info, A.PvrAppleInfo, A.PvrPacket, A.TgaInfo, A.TiffBitReader, A.TiffEntry, A.TiffFaxDecoder, A.TiffImage, A.TiffInfo, A.LzwDecoder, A.VP8, A.VP8BitReader, A.VP8Filter, A.VP8FrameHeader, A.VP8PictureHeader, A.VP8SegmentHeader, A.VP8BandProbas, A.VP8Proba, A.VP8FilterHeader, A.VP8FInfo, A.VP8MB, A.VP8QuantMatrix, A.VP8MBData, A.VP8TopSamples, A.VP8L, A.VP8LBitReader, A.VP8LColorCache, A.VP8LTransform, A.WebPAlpha, A.WebPFrame, A.HuffmanTree, A.HTreeGroup, A.WebPInfo, A.IccProfile, A.Palette, A.ImageException, A.InputBuffer, A.Quantizer, A.OutputBuffer, A.Rational]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString, A.NativeTypedData]);
    _inheritMany(J.JavaScriptObject, [J.LegacyJavaScriptObject, A.DomException]);
    _inheritMany(J.LegacyJavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSNumNotInt]);
    _inheritMany(A.Error, [A.LateError, A.TypeError, A.JsNoSuchMethodError, A.UnknownJsTypeError, A.RuntimeError, A.AssertionError, A._Error, A.NullThrownError, A.ArgumentError, A.UnsupportedError, A.UnimplementedError, A.StateError, A.ConcurrentModificationError, A.CyclicInitializationError]);
    _inherit(A.ListBase, A._ListBase_Object_ListMixin);
    _inherit(A.UnmodifiableListBase, A.ListBase);
    _inherit(A.CodeUnits, A.UnmodifiableListBase);
    _inheritMany(A.Iterable, [A.EfficientLengthIterable, A.MappedIterable, A.SkipIterable, A.ColorFloat16, A.ColorFloat32, A.ColorFloat64, A.ColorInt16, A.ColorInt32, A.ColorInt8, A.ColorUint1, A.ColorUint16, A.ColorUint2, A.ColorUint32, A.ColorUint4, A.ColorUint8, A.Image, A.ImageData, A.PixelFloat16, A.PixelFloat32, A.PixelFloat64, A.PixelInt16, A.PixelInt32, A.PixelInt8, A.PixelUint1, A.PixelUint16, A.PixelUint2, A.PixelUint32, A.PixelUint4, A.PixelUint8, A.PixelUndefined]);
    _inheritMany(A.EfficientLengthIterable, [A.ListIterable, A.EmptyIterable, A.LinkedHashMapKeyIterable]);
    _inherit(A.SubListIterable, A.ListIterable);
    _inherit(A.EfficientLengthMappedIterable, A.MappedIterable);
    _inheritMany(A.Iterator, [A.MappedIterator, A.SkipIterator, A.ChannelIterator]);
    _inherit(A.EfficientLengthSkipIterable, A.SkipIterable);
    _inherit(A.GeneralConstantMap, A.ConstantMap);
    _inheritMany(A.Closure, [A.GeneralConstantMap__typeTest_closure, A.Closure0Args, A.Closure2Args, A.TearOffClosure, A.JsLinkedHashMap_values_closure, A.initHooks_closure, A.initHooks_closure1, A._AsyncRun__initializeScheduleImmediate_internalCallback, A._AsyncRun__initializeScheduleImmediate_closure, A._awaitOnObject_closure, A._Future__chainForeignFuture_closure, A._Future__propagateToListeners_handleWhenCompleteCallback_closure, A._LinkedCustomHashMap_closure, A._File_open_closure, A._File_length_closure, A._File_writeAsBytes_closure, A._File_writeAsBytes__closure, A._RandomAccessFile_close_closure, A._RandomAccessFile_writeFrom_closure, A._RandomAccessFile_length_closure, A.BmpDecoder_decodeFrame_closure, A.ExrPart_closure, A.JpegData__readSOS_closure]);
    _inheritMany(A.Closure0Args, [A.Primitives_initTicker_closure, A._AsyncRun__scheduleImmediateJsOverride_internalCallback, A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, A._TimerImpl_internalCallback, A._Future__addListener_closure, A._Future__prependListeners_closure, A._Future__chainForeignFuture_closure1, A._Future__asyncCompleteWithValue_closure, A._Future__chainFuture_closure, A._Future__asyncCompleteError_closure, A._Future__propagateToListeners_handleWhenCompleteCallback, A._Future__propagateToListeners_handleValueCallback, A._Future__propagateToListeners_handleError, A._rootHandleError_closure, A._RootZone_bindCallbackGuarded_closure, A.Utf8Decoder__decoder_closure, A.Utf8Decoder__decoderNonfatal_closure]);
    _inherit(A.NullError, A.TypeError);
    _inheritMany(A.TearOffClosure, [A.StaticClosure, A.BoundClosure]);
    _inherit(A._AssertionError, A.AssertionError);
    _inherit(A.MapBase, A.MapMixin);
    _inherit(A.JsLinkedHashMap, A.MapBase);
    _inheritMany(A.Closure2Args, [A.initHooks_closure0, A._awaitOnObject_closure0, A._wrapJsFunctionForAsync_closure, A._Future__chainForeignFuture_closure0, A.LinkedHashMap_LinkedHashMap$from_closure, A.MapBase_mapToString_closure, A.IfdContainer$from_closure, A.IfdDirectory_copy_closure, A.VP8__upSample_loadUv]);
    _inherit(A.NativeTypedArray, A.NativeTypedData);
    _inheritMany(A.NativeTypedArray, [A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfDouble, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfInt, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(A.NativeTypedArrayOfDouble, [A.NativeFloat32List, A.NativeFloat64List]);
    _inheritMany(A.NativeTypedArrayOfInt, [A.NativeInt16List, A.NativeInt32List, A.NativeInt8List, A.NativeUint16List, A.NativeUint32List, A.NativeUint8List]);
    _inherit(A._TypeError, A._Error);
    _inherit(A._RootZone, A._Zone);
    _inherit(A._LinkedCustomHashMap, A.JsLinkedHashMap);
    _inherit(A.Converter, A.StreamTransformerBase);
    _inheritMany(A.Converter, [A._UnicodeSubsetEncoder, A._UnicodeSubsetDecoder, A.Utf8Encoder, A.Utf8Decoder]);
    _inherit(A.Encoding, A.Codec);
    _inheritMany(A.Encoding, [A.Latin1Codec, A.Utf8Codec]);
    _inherit(A.Latin1Encoder, A._UnicodeSubsetEncoder);
    _inherit(A.Latin1Decoder, A._UnicodeSubsetDecoder);
    _inheritMany(A.ArgumentError, [A.RangeError, A.IndexError]);
    _inherit(A.PathNotFoundException, A.FileSystemException);
    _inherit(A._File, A.FileSystemEntity);
    _inherit(A.ArchiveException, A.FormatException);
    _inherit(A.InputStream, A.InputStreamBase);
    _inherit(A.OutputStream, A.OutputStreamBase);
    _inherit(A._ZLibDecoder, A.ZLibDecoderBase);
    _inheritMany(A._Enum, [A.Channel, A.Format, A.BlendMode, A.IfdValueType, A.BmpCompression, A.ExrChannelType, A.ExrChannelName, A.ExrCompressorType, A.IcoType, A.PngDisposeMode, A.PngBlendMode, A.PngFilterType, A.PngFilter, A.PsdColorMode, A.TgaImageType, A.TiffFormat, A.TiffPhotometricType, A.TiffImageType, A.VP8LImageTransformType, A.WebPFormat, A.IccProfileCompression, A.FrameType]);
    _inheritMany(A.ColorUint8, [A.ColorRgb8, A.ColorRgba8]);
    _inherit(A.ExifData, A.IfdContainer);
    _inheritMany(A.IfdValue, [A.IfdByteValue, A.IfdValueAscii, A.IfdValueShort, A.IfdValueLong, A.IfdValueRational, A.IfdValueSByte, A.IfdValueSShort, A.IfdValueSLong, A.IfdValueSRational, A.IfdValueSingle, A.IfdValueDouble, A.IfdValueUndefined]);
    _inheritMany(A.Decoder, [A.BmpDecoder, A.ExrDecoder, A.GifDecoder, A.IcoDecoder, A.JpegDecoder, A.PngDecoder, A.PsdDecoder, A.PvrDecoder, A.TgaDecoder, A.TiffDecoder, A.WebPDecoder]);
    _inherit(A.DibDecoder, A.BmpDecoder);
    _inherit(A.InternalExrCompressor, A.ExrCompressor);
    _inheritMany(A.InternalExrCompressor, [A.InternalExrB44Compressor, A.InternalExrPizCompressor, A.InternalExrPxr24Compressor, A.InternalExrRleCompressor, A.InternalExrZipCompressor]);
    _inherit(A.InternalExrPart, A.ExrPart);
    _inherit(A.InternalGifImageDesc, A.GifImageDesc);
    _inherit(A.IcoBmpInfo, A.BmpInfo);
    _inheritMany(A.HuffmanNode, [A.HuffmanParent, A.HuffmanValue]);
    _inherit(A.InternalPngFrame, A.PngFrame);
    _inherit(A.InternalPngInfo, A.PngInfo);
    _inherit(A.PngEncoder, A.Encoder);
    _inheritMany(A.PsdEffect, [A.PsdBevelEffect, A.PsdDropShadowEffect, A.PsdInnerGlowEffect, A.PsdInnerShadowEffect, A.PsdOuterGlowEffect, A.PsdSolidFillEffect]);
    _inheritMany(A.PsdLayerData, [A.PsdLayerAdditionalData, A.PsdLayerSectionDivider]);
    _inheritMany(A.PvrColorRgbCore, [A.PvrColorRgb, A.PvrColorRgba]);
    _inherit(A.InternalVP8L, A.VP8L);
    _inherit(A.InternalWebPFrame, A.WebPFrame);
    _inherit(A.InternalWebPInfo, A.WebPInfo);
    _inheritMany(A.ImageData, [A.ImageDataFloat16, A.ImageDataFloat32, A.ImageDataFloat64, A.ImageDataInt16, A.ImageDataInt32, A.ImageDataInt8, A.ImageDataUint1, A.ImageDataUint16, A.ImageDataUint2, A.ImageDataUint32, A.ImageDataUint4, A.ImageDataUint8]);
    _inheritMany(A.Palette, [A.PaletteFloat16, A.PaletteFloat32, A.PaletteFloat64, A.PaletteInt16, A.PaletteInt32, A.PaletteInt8, A.PaletteUint16, A.PaletteUint32, A.PaletteUint8]);
    _inherit(A.NeuralQuantizer, A.Quantizer);
    _mixin(A.UnmodifiableListBase, A.UnmodifiableListMixin);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A.ListMixin);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, A.ListMixin);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A._ListBase_Object_ListMixin, A.ListMixin);
})();
var init = {
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"},
    mangledNames: {},
    types: ["~(InputBuffer)", "int(Uint32List,int,int)", "~()", "int([int])", "~(JpegComponent,List<int>)", "int(Object?)", "~(int,int,int,int,int,Uint8List)", "~(~())", "int()", "Null(@)", "_RandomAccessFile(Object?)", "Null()", "@()", "Future<int>()", "~(int)", "_Future<@>(@)", "~(Object?,Object?)", "@(@,String)", "@(String)", "Null(~())", "@(@)", "Future<File>(RandomAccessFile)", "File/(RandomAccessFile)", "Future<~>()", "Null(Object?)", "~(@)", "~(int,IfdValue)", "Null(@,StackTrace)", "~(num,num,num,num)", "Uint32List(int)", "JpegComponent(int)", "~(int,@)", "int(int,int)", "Null(Object,StackTrace)", "bool(Object?)", "bool(Object?,Object?)", "bool(@)", "~(@,@)", "~(String,IfdDirectory)"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: Symbol("$ti")
};
A._Universe_addRules(init.typeUniverse, JSON.parse('{"PlainJavaScriptObject":"LegacyJavaScriptObject","UnknownJavaScriptObject":"LegacyJavaScriptObject","JavaScriptFunction":"LegacyJavaScriptObject","JSBool":{"bool":[]},"JSNull":{"Null":[]},"JSArray":{"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"JSIndexable":["1"]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"JSIndexable":["1"]},"ArrayIterator":{"Iterator":["1"]},"JSNumber":{"double":[],"num":[]},"JSInt":{"double":[],"int":[],"num":[]},"JSNumNotInt":{"double":[],"num":[]},"JSString":{"String":[],"JSIndexable":["@"]},"LateError":{"Error":[]},"CodeUnits":{"ListMixin":["int"],"UnmodifiableListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListMixin.E":"int","UnmodifiableListMixin.E":"int"},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"SubListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"ListIterator":{"Iterator":["1"]},"MappedIterable":{"Iterable":["2"],"Iterable.E":"2"},"EfficientLengthMappedIterable":{"MappedIterable":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"MappedIterator":{"Iterator":["2"]},"SkipIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthSkipIterable":{"SkipIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"SkipIterator":{"Iterator":["1"]},"EmptyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"EmptyIterator":{"Iterator":["1"]},"UnmodifiableListBase":{"ListMixin":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"ConstantMap":{"Map":["1","2"]},"GeneralConstantMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"NullError":{"TypeError":[],"Error":[]},"JsNoSuchMethodError":{"Error":[]},"UnknownJsTypeError":{"Error":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"Closure0Args":{"Function":[]},"Closure2Args":{"Function":[]},"TearOffClosure":{"Function":[]},"StaticClosure":{"Function":[]},"BoundClosure":{"Function":[]},"RuntimeError":{"Error":[]},"_AssertionError":{"Error":[]},"JsLinkedHashMap":{"MapMixin":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"LinkedHashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"LinkedHashMapKeyIterator":{"Iterator":["1"]},"NativeTypedData":{"TypedData":[]},"NativeTypedArray":{"JavaScriptIndexingBehavior":["1"],"TypedData":[],"JSIndexable":["1"]},"NativeTypedArrayOfDouble":{"NativeTypedArray":["double"],"ListMixin":["double"],"JavaScriptIndexingBehavior":["double"],"List":["double"],"EfficientLengthIterable":["double"],"TypedData":[],"JSIndexable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"]},"NativeTypedArrayOfInt":{"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"]},"NativeFloat32List":{"NativeTypedArrayOfDouble":[],"NativeTypedArray":["double"],"ListMixin":["double"],"Float32List":[],"JavaScriptIndexingBehavior":["double"],"List":["double"],"EfficientLengthIterable":["double"],"TypedData":[],"JSIndexable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"],"ListMixin.E":"double"},"NativeFloat64List":{"NativeTypedArrayOfDouble":[],"NativeTypedArray":["double"],"ListMixin":["double"],"Float64List":[],"JavaScriptIndexingBehavior":["double"],"List":["double"],"EfficientLengthIterable":["double"],"TypedData":[],"JSIndexable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"],"ListMixin.E":"double"},"NativeInt16List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Int16List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"NativeInt32List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Int32List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"NativeInt8List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Int8List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"NativeUint16List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Uint16List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"NativeUint32List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Uint32List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"NativeUint8List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Uint8List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"_Type":{"Type":[]},"_Error":{"Error":[]},"_TypeError":{"TypeError":[],"Error":[]},"_Future":{"Future":["1"]},"AsyncError":{"Error":[]},"_Zone":{"Zone":[]},"_RootZone":{"_Zone":[],"Zone":[]},"_LinkedCustomHashMap":{"JsLinkedHashMap":["1","2"],"MapMixin":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"ListBase":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"MapBase":{"MapMixin":["1","2"],"Map":["1","2"]},"MapMixin":{"Map":["1","2"]},"Encoding":{"Codec":["String","List<int>"]},"Latin1Codec":{"Codec":["String","List<int>"]},"Utf8Codec":{"Codec":["String","List<int>"]},"double":{"num":[]},"int":{"num":[]},"List":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"AssertionError":{"Error":[]},"TypeError":{"Error":[]},"NullThrownError":{"TypeError":[],"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"Error":[]},"IndexError":{"Error":[]},"UnsupportedError":{"Error":[]},"UnimplementedError":{"Error":[]},"StateError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"OutOfMemoryError":{"Error":[]},"StackOverflowError":{"Error":[]},"CyclicInitializationError":{"Error":[]},"_StringStackTrace":{"StackTrace":[]},"_RandomAccessFile":{"RandomAccessFile":[]},"_File":{"File":[]},"InputStream":{"InputStreamBase":[]},"ChannelIterator":{"Iterator":["num"]},"ColorFloat16":{"Color":[],"Iterable":["num"],"Iterable.E":"num"},"ColorFloat32":{"Color":[],"Iterable":["num"],"Iterable.E":"num"},"ColorFloat64":{"Color":[],"Iterable":["num"],"Iterable.E":"num"},"ColorInt16":{"Color":[],"Iterable":["num"],"Iterable.E":"num"},"ColorInt32":{"Color":[],"Iterable":["num"],"Iterable.E":"num"},"ColorInt8":{"Color":[],"Iterable":["num"],"Iterable.E":"num"},"ColorUint1":{"Color":[],"Iterable":["num"],"Iterable.E":"num"},"ColorUint16":{"Color":[],"Iterable":["num"],"Iterable.E":"num"},"ColorUint2":{"Color":[],"Iterable":["num"],"Iterable.E":"num"},"ColorUint32":{"Color":[],"Iterable":["num"],"Iterable.E":"num"},"ColorUint4":{"Color":[],"Iterable":["num"],"Iterable.E":"num"},"ColorUint8":{"Color":[],"Iterable":["num"],"Iterable.E":"num"},"ColorRgb8":{"Color":[],"Iterable":["num"],"Iterable.E":"num"},"ColorRgba8":{"Color":[],"Iterable":["num"],"Iterable.E":"num"},"ExifData":{"IfdContainer":[]},"IfdByteValue":{"IfdValue":[]},"IfdValueAscii":{"IfdValue":[]},"IfdValueShort":{"IfdValue":[]},"IfdValueLong":{"IfdValue":[]},"IfdValueRational":{"IfdValue":[]},"IfdValueSByte":{"IfdValue":[]},"IfdValueSShort":{"IfdValue":[]},"IfdValueSLong":{"IfdValue":[]},"IfdValueSRational":{"IfdValue":[]},"IfdValueSingle":{"IfdValue":[]},"IfdValueDouble":{"IfdValue":[]},"IfdValueUndefined":{"IfdValue":[]},"BmpInfo":{"DecodeInfo":[]},"InternalExrB44Compressor":{"ExrCompressor":[]},"InternalExrCompressor":{"ExrCompressor":[]},"ExrImage":{"DecodeInfo":[]},"InternalExrPart":{"ExrPart":[]},"InternalExrPizCompressor":{"ExrCompressor":[]},"InternalExrPxr24Compressor":{"ExrCompressor":[]},"InternalExrRleCompressor":{"ExrCompressor":[]},"InternalExrZipCompressor":{"ExrCompressor":[]},"InternalGifImageDesc":{"GifImageDesc":[]},"GifInfo":{"DecodeInfo":[]},"IcoInfo":{"DecodeInfo":[]},"IcoBmpInfo":{"BmpInfo":[],"DecodeInfo":[]},"HuffmanParent":{"HuffmanNode":[]},"HuffmanValue":{"HuffmanNode":[]},"InternalPngFrame":{"PngFrame":[]},"PngInfo":{"DecodeInfo":[]},"InternalPngInfo":{"DecodeInfo":[]},"PsdBevelEffect":{"PsdEffect":[]},"PsdDropShadowEffect":{"PsdEffect":[]},"PsdInnerGlowEffect":{"PsdEffect":[]},"PsdInnerShadowEffect":{"PsdEffect":[]},"PsdOuterGlowEffect":{"PsdEffect":[]},"PsdSolidFillEffect":{"PsdEffect":[]},"PsdLayerAdditionalData":{"PsdLayerData":[]},"PsdLayerSectionDivider":{"PsdLayerData":[]},"PsdImage":{"DecodeInfo":[]},"Pvr2Info":{"DecodeInfo":[]},"Pvr3Info":{"DecodeInfo":[]},"PvrAppleInfo":{"DecodeInfo":[]},"TgaInfo":{"DecodeInfo":[]},"TiffInfo":{"DecodeInfo":[]},"InternalWebPFrame":{"WebPFrame":[]},"WebPInfo":{"DecodeInfo":[]},"InternalWebPInfo":{"WebPInfo":[],"DecodeInfo":[]},"Image":{"Iterable":["Pixel"],"Iterable.E":"Pixel"},"ImageData":{"Iterable":["Pixel"]},"ImageDataFloat16":{"ImageData":[],"Iterable":["Pixel"],"Iterable.E":"Pixel"},"ImageDataFloat32":{"ImageData":[],"Iterable":["Pixel"],"Iterable.E":"Pixel"},"ImageDataFloat64":{"ImageData":[],"Iterable":["Pixel"],"Iterable.E":"Pixel"},"ImageDataInt16":{"ImageData":[],"Iterable":["Pixel"],"Iterable.E":"Pixel"},"ImageDataInt32":{"ImageData":[],"Iterable":["Pixel"],"Iterable.E":"Pixel"},"ImageDataInt8":{"ImageData":[],"Iterable":["Pixel"],"Iterable.E":"Pixel"},"ImageDataUint1":{"ImageData":[],"Iterable":["Pixel"],"Iterable.E":"Pixel"},"ImageDataUint16":{"ImageData":[],"Iterable":["Pixel"],"Iterable.E":"Pixel"},"ImageDataUint2":{"ImageData":[],"Iterable":["Pixel"],"Iterable.E":"Pixel"},"ImageDataUint32":{"ImageData":[],"Iterable":["Pixel"],"Iterable.E":"Pixel"},"ImageDataUint4":{"ImageData":[],"Iterable":["Pixel"],"Iterable.E":"Pixel"},"ImageDataUint8":{"ImageData":[],"Iterable":["Pixel"],"Iterable.E":"Pixel"},"PaletteFloat16":{"Palette":[]},"PaletteFloat32":{"Palette":[]},"PaletteFloat64":{"Palette":[]},"PaletteInt16":{"Palette":[]},"PaletteInt32":{"Palette":[]},"PaletteInt8":{"Palette":[]},"PaletteUint16":{"Palette":[]},"PaletteUint32":{"Palette":[]},"PaletteUint8":{"Palette":[]},"PixelFloat16":{"Pixel":[],"Color":[],"Iterable":["num"],"Iterator":["Pixel"],"Iterable.E":"num"},"PixelFloat32":{"Pixel":[],"Color":[],"Iterable":["num"],"Iterator":["Pixel"],"Iterable.E":"num"},"PixelFloat64":{"Pixel":[],"Color":[],"Iterable":["num"],"Iterator":["Pixel"],"Iterable.E":"num"},"PixelInt16":{"Pixel":[],"Color":[],"Iterable":["num"],"Iterator":["Pixel"],"Iterable.E":"num"},"PixelInt32":{"Pixel":[],"Color":[],"Iterable":["num"],"Iterator":["Pixel"],"Iterable.E":"num"},"PixelInt8":{"Pixel":[],"Color":[],"Iterable":["num"],"Iterator":["Pixel"],"Iterable.E":"num"},"PixelUint1":{"Pixel":[],"Color":[],"Iterable":["num"],"Iterator":["Pixel"],"Iterable.E":"num"},"PixelUint16":{"Pixel":[],"Color":[],"Iterable":["num"],"Iterator":["Pixel"],"Iterable.E":"num"},"PixelUint2":{"Pixel":[],"Color":[],"Iterable":["num"],"Iterator":["Pixel"],"Iterable.E":"num"},"PixelUint32":{"Pixel":[],"Color":[],"Iterable":["num"],"Iterator":["Pixel"],"Iterable.E":"num"},"PixelUint4":{"Pixel":[],"Color":[],"Iterable":["num"],"Iterator":["Pixel"],"Iterable.E":"num"},"PixelUint8":{"Pixel":[],"Color":[],"Iterable":["num"],"Iterator":["Pixel"],"Iterable.E":"num"},"PixelUndefined":{"Pixel":[],"Color":[],"Iterable":["num"],"Iterator":["Pixel"],"Iterable.E":"num"},"NeuralQuantizer":{"Quantizer":[]},"Uint8List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"TypedData":[]},"Int16List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"TypedData":[]},"Int32List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"TypedData":[]},"Uint32List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"TypedData":[]},"Pixel":{"Color":[],"Iterator":["Pixel"],"Iterable":["num"]}}'));
A._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"EfficientLengthIterable":1,"UnmodifiableListBase":1,"NativeTypedArray":1,"StreamTransformerBase":2,"ListBase":1,"MapBase":2,"_ListBase_Object_ListMixin":1,"Converter":2,"PvrColorRgbCore":1}'));
var string$ = {
    Error_: "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a value of the returned future's type"
};
var type$ = (function rtii() {
    var findType = A.findType;
    return {
    AsyncError: findType("AsyncError"),
    Color: findType("Color"),
    EfficientLengthIterable_dynamic: findType("EfficientLengthIterable<@>"),
    Error: findType("Error"),
    ExrAttribute: findType("ExrAttribute"),
    ExrHufDec: findType("ExrHufDec"),
    File: findType("File"),
    Function: findType("Function"),
    Future_dynamic: findType("Future<@>"),
    HTreeGroup: findType("HTreeGroup"),
    HuffmanTree: findType("HuffmanTree"),
    IcoInfoImage: findType("IcoInfoImage"),
    IfdDirectory: findType("IfdDirectory"),
    IfdValue: findType("IfdValue"),
    ImageData: findType("ImageData"),
    Int32List: findType("Int32List"),
    Iterable_double: findType("Iterable<double>"),
    Iterable_dynamic: findType("Iterable<@>"),
    Iterable_int: findType("Iterable<int>"),
    JSArray_ComponentData: findType("JSArray<ComponentData>"),
    JSArray_ExrChannel: findType("JSArray<ExrChannel>"),
    JSArray_ExrPart: findType("JSArray<ExrPart>"),
    JSArray_GifImageDesc: findType("JSArray<GifImageDesc>"),
    JSArray_HTreeGroup: findType("JSArray<HTreeGroup>"),
    JSArray_Image: findType("JSArray<Image>"),
    JSArray_List_List_List_int: findType("JSArray<List<List<List<int>>>>"),
    JSArray_List_List_int: findType("JSArray<List<List<int>>>"),
    JSArray_List_int: findType("JSArray<List<int>>"),
    JSArray_PngFrame: findType("JSArray<PngFrame>"),
    JSArray_PsdChannel: findType("JSArray<PsdChannel>"),
    JSArray_PsdEffect: findType("JSArray<PsdEffect>"),
    JSArray_PsdLayer: findType("JSArray<PsdLayer>"),
    JSArray_String: findType("JSArray<String>"),
    JSArray_TiffImage: findType("JSArray<TiffImage>"),
    JSArray_Uint8List: findType("JSArray<Uint8List>"),
    JSArray_VP8FInfo: findType("JSArray<VP8FInfo>"),
    JSArray_VP8LTransform: findType("JSArray<VP8LTransform>"),
    JSArray_WebPFrame: findType("JSArray<WebPFrame>"),
    JSArray__ExifEntry: findType("JSArray<_ExifEntry>"),
    JSArray__JpegHuffman: findType("JSArray<_JpegHuffman>"),
    JSArray_dynamic: findType("JSArray<@>"),
    JSArray_int: findType("JSArray<int>"),
    JSArray_nullable_HuffmanNode: findType("JSArray<HuffmanNode?>"),
    JSArray_nullable_JpegFrame: findType("JSArray<JpegFrame?>"),
    JSArray_nullable_Uint32List: findType("JSArray<Uint32List?>"),
    JSArray_nullable_Uint8List: findType("JSArray<Uint8List?>"),
    JSArray_of_void_Function_InputBuffer: findType("JSArray<~(InputBuffer)>"),
    JSIndexable_dynamic: findType("JSIndexable<@>"),
    JSNull: findType("JSNull"),
    JavaScriptFunction: findType("JavaScriptFunction"),
    JavaScriptIndexingBehavior_dynamic: findType("JavaScriptIndexingBehavior<@>"),
    JpegComponent: findType("JpegComponent"),
    List_HTreeGroup: findType("List<HTreeGroup>"),
    List_Image: findType("List<Image>"),
    List_Int32List: findType("List<Int32List>"),
    List_List_List_int: findType("List<List<List<int>>>"),
    List_List_VP8FInfo: findType("List<List<VP8FInfo>>"),
    List_PsdChannel: findType("List<PsdChannel>"),
    List_PsdLayer: findType("List<PsdLayer>"),
    List_VP8BandProbas: findType("List<VP8BandProbas>"),
    List_VP8FInfo: findType("List<VP8FInfo>"),
    List_VP8MB: findType("List<VP8MB>"),
    List_VP8MBData: findType("List<VP8MBData>"),
    List_VP8TopSamples: findType("List<VP8TopSamples>"),
    List_double: findType("List<double>"),
    List_dynamic: findType("List<@>"),
    List_int: findType("List<int>"),
    List_nullable_HuffmanNode: findType("List<HuffmanNode?>"),
    List_nullable_Object: findType("List<Object?>"),
    List_nullable_VP8FInfo: findType("List<VP8FInfo?>"),
    List_nullable__PizChannelData: findType("List<_PizChannelData?>"),
    List_nullable_int: findType("List<int?>"),
    Map_String_String: findType("Map<String,String>"),
    NativeTypedArrayOfDouble: findType("NativeTypedArrayOfDouble"),
    NativeTypedArrayOfInt: findType("NativeTypedArrayOfInt"),
    NativeUint8List: findType("NativeUint8List"),
    Null: findType("Null"),
    Object: findType("Object"),
    PsdChannel: findType("PsdChannel"),
    PsdImageResource: findType("PsdImageResource"),
    PsdLayerAdditionalData: findType("PsdLayerAdditionalData"),
    PsdLayerData: findType("PsdLayerData"),
    Pvr2Info: findType("Pvr2Info"),
    RandomAccessFile: findType("RandomAccessFile"),
    Rational: findType("Rational"),
    Record: findType("Record"),
    StackTrace: findType("StackTrace"),
    String: findType("String"),
    TiffEntry: findType("TiffEntry"),
    Type: findType("Type"),
    TypeError: findType("TypeError"),
    TypedData: findType("TypedData"),
    Uint32List: findType("Uint32List"),
    Uint8List: findType("Uint8List"),
    UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
    VP8BandProbas: findType("VP8BandProbas"),
    VP8MB: findType("VP8MB"),
    VP8MBData: findType("VP8MBData"),
    VP8TopSamples: findType("VP8TopSamples"),
    _Future_dynamic: findType("_Future<@>"),
    _PizChannelData: findType("_PizChannelData"),
    _StaticTree: findType("_StaticTree"),
    bool: findType("bool"),
    bool_Function_Object: findType("bool(Object)"),
    double: findType("double"),
    dynamic: findType("@"),
    dynamic_Function: findType("@()"),
    dynamic_Function_Object: findType("@(Object)"),
    dynamic_Function_Object_StackTrace: findType("@(Object,StackTrace)"),
    int: findType("int"),
    legacy_Never: findType("0&*"),
    legacy_Object: findType("Object*"),
    nullable_Future_Null: findType("Future<Null>?"),
    nullable_Int16List: findType("Int16List?"),
    nullable_List_int: findType("List<int>?"),
    nullable_List_nullable_HuffmanNode: findType("List<HuffmanNode?>?"),
    nullable_List_nullable_Uint32List: findType("List<Uint32List?>?"),
    nullable_List_nullable_int: findType("List<int?>?"),
    nullable_Map_String_ImageData: findType("Map<String,ImageData>?"),
    nullable_Map_String_String: findType("Map<String,String>?"),
    nullable_Object: findType("Object?"),
    nullable_Uint8List: findType("Uint8List?"),
    nullable_VP8BitReader: findType("VP8BitReader?"),
    nullable_VP8FInfo: findType("VP8FInfo?"),
    nullable_VP8QuantMatrix: findType("VP8QuantMatrix?"),
    nullable__FutureListener_dynamic_dynamic: findType("_FutureListener<@,@>?"),
    nullable_int: findType("int?"),
    nullable_void_Function_int: findType("~(int)?"),
    num: findType("num"),
    void: findType("~"),
    void_Function: findType("~()"),
    void_Function_2_JpegComponent_and_List_int: findType("~(JpegComponent,List<int>)"),
    void_Function_int: findType("~(int)"),
    void_Function_num_num_num_num: findType("~(num,num,num,num)")
    };
})();
(function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    B.Interceptor_methods = J.Interceptor.prototype;
    B.JSArray_methods = J.JSArray.prototype;
    B.JSInt_methods = J.JSInt.prototype;
    B.JSNumber_methods = J.JSNumber.prototype;
    B.JSString_methods = J.JSString.prototype;
    B.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    B.JavaScriptObject_methods = J.JavaScriptObject.prototype;
    B.NativeUint16List_methods = A.NativeUint16List.prototype;
    B.NativeUint32List_methods = A.NativeUint32List.prototype;
    B.NativeUint8List_methods = A.NativeUint8List.prototype;
    B.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    B.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    B.BlendMode_0 = new A.BlendMode(0, "direct");
    B.BlendMode_1 = new A.BlendMode(1, "alpha");
    B.BmpCompression_0 = new A.BmpCompression(0, "none");
    B.BmpCompression_3 = new A.BmpCompression(3, "bitfields");
    B.BmpCompression_6 = new A.BmpCompression(6, "alphaBitfields");
    B.C_EmptyIterator = new A.EmptyIterator(A.findType("EmptyIterator<0&>"));
    B.C_JS_CONST = function getTagFallback(o) {
var s = Object.prototype.toString.call(o);
return s.substring(8, s.length - 1);
};
    B.C_JS_CONST0 = function() {
var toStringFunction = Object.prototype.toString;
function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
}
function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
    var name = toStringFunction.call(object);
    if (name == "[object Object]") return null;
    return "HTMLElement";
    }
}
function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
}
function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
}
function discriminator(tag) { return null; }
var isBrowser = typeof navigator == "object";
return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    B.C_JS_CONST6 = function(getTagFallback) {
return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
    function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
    }
    if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
};
};
    B.C_JS_CONST1 = function(hooks) {
if (typeof dartExperimentalFixupGetTag != "function") return hooks;
hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    B.C_JS_CONST2 = function(hooks) {
var getTag = hooks.getTag;
var prototypeForTag = hooks.prototypeForTag;
function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
    if (!!o.xmlVersion) return "!Document";
    return "!HTMLDocument";
    }
    return tag;
}
function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
}
hooks.getTag = getTagFixed;
hooks.prototypeForTag = prototypeForTagFixed;
};
    B.C_JS_CONST5 = function(hooks) {
var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
if (userAgent.indexOf("Firefox") == -1) return hooks;
var getTag = hooks.getTag;
var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
}
hooks.getTag = getTagFirefox;
};
    B.C_JS_CONST4 = function(hooks) {
var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
if (userAgent.indexOf("Trident/") == -1) return hooks;
var getTag = hooks.getTag;
var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
};
function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
    if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
}
function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
}
hooks.getTag = getTagIE;
hooks.prototypeForTag = prototypeForTagIE;
};
    B.C_JS_CONST3 = function(hooks) { return hooks; }
;
    B.C_Latin1Codec = new A.Latin1Codec();
    B.C_Latin1Encoder = new A.Latin1Encoder();
    B.C_OutOfMemoryError = new A.OutOfMemoryError();
    B.C_SentinelValue = new A.SentinelValue();
    B.C_Utf8Codec = new A.Utf8Codec();
    B.C_Utf8Encoder = new A.Utf8Encoder();
    B.C_ZLibDecoder = new A.ZLibDecoder();
    B.C_ZLibEncoder = new A.ZLibEncoder();
    B.C__RootZone = new A._RootZone();
    B.C__StringStackTrace = new A._StringStackTrace();
    B.C__ZLibDecoder = new A._ZLibDecoder();
    B.Channel_4 = new A.Channel(4, "luminance");
    B.ExrChannelName_0 = new A.ExrChannelName(0, "red");
    B.ExrChannelName_1 = new A.ExrChannelName(1, "green");
    B.ExrChannelName_2 = new A.ExrChannelName(2, "blue");
    B.ExrChannelName_3 = new A.ExrChannelName(3, "alpha");
    B.ExrChannelName_4 = new A.ExrChannelName(4, "other");
    B.ExrChannelType_0 = new A.ExrChannelType(0, "uint");
    B.ExrChannelType_1 = new A.ExrChannelType(1, "half");
    B.ExrChannelType_2 = new A.ExrChannelType(2, "float");
    B.ExrCompressorType_0 = new A.ExrCompressorType(0, "none");
    B.FileMode_0 = new A.FileMode(0);
    B.FileMode_1 = new A.FileMode(1);
    B.FileMode_2 = new A.FileMode(2);
    B.FileMode_3 = new A.FileMode(3);
    B.FileMode_4 = new A.FileMode(4);
    B.Format_0 = new A.Format(0, "uint1");
    B.Format_1 = new A.Format(1, "uint2");
    B.Format_10 = new A.Format(10, "float32");
    B.Format_11 = new A.Format(11, "float64");
    B.Format_2 = new A.Format(2, "uint4");
    B.Format_3 = new A.Format(3, "uint8");
    B.Format_4 = new A.Format(4, "uint16");
    B.Format_5 = new A.Format(5, "uint32");
    B.Format_6 = new A.Format(6, "int8");
    B.Format_7 = new A.Format(7, "int16");
    B.Format_8 = new A.Format(8, "int32");
    B.Format_9 = new A.Format(9, "float16");
    B.FrameType_1 = new A.FrameType(1, "page");
    B.FrameType_2 = new A.FrameType(2, "sequence");
    B.IccProfileCompression_1 = new A.IccProfileCompression(1, "deflate");
    B.IcoType_2 = new A.IcoType(2, "cur");
    B.IfdValueType_0 = new A.IfdValueType(0, "none");
    B.IfdValueType_1 = new A.IfdValueType(1, "byte");
    B.IfdValueType_10 = new A.IfdValueType(10, "sRational");
    B.IfdValueType_11 = new A.IfdValueType(11, "single");
    B.IfdValueType_12 = new A.IfdValueType(12, "double");
    B.IfdValueType_2 = new A.IfdValueType(2, "ascii");
    B.IfdValueType_3 = new A.IfdValueType(3, "short");
    B.IfdValueType_4 = new A.IfdValueType(4, "long");
    B.IfdValueType_5 = new A.IfdValueType(5, "rational");
    B.IfdValueType_6 = new A.IfdValueType(6, "sByte");
    B.IfdValueType_7 = new A.IfdValueType(7, "undefined");
    B.IfdValueType_8 = new A.IfdValueType(8, "sShort");
    B.IfdValueType_9 = new A.IfdValueType(9, "sLong");
    B.Latin1Decoder_false = new A.Latin1Decoder(false);
    B.List_0 = A._setArrayType(makeConstList([A.vp8_filter_VP8Filter_dc16$closure(), A.vp8_filter_VP8Filter__tm16$closure(), A.vp8_filter_VP8Filter_ve16$closure(), A.vp8_filter_VP8Filter_he16$closure(), A.vp8_filter_VP8Filter_dc16NoTop$closure(), A.vp8_filter_VP8Filter_dc16NoLeft$closure(), A.vp8_filter_VP8Filter_dc16NoTopLeft$closure()]), type$.JSArray_of_void_Function_InputBuffer);
    B.List_0_2_8 = A._setArrayType(makeConstList([0, 2, 8]), type$.JSArray_int);
    B.List_0_4_2_1 = A._setArrayType(makeConstList([0, 4, 2, 1]), type$.JSArray_int);
    B.List_252_243_207_63 = A._setArrayType(makeConstList([252, 243, 207, 63]), type$.JSArray_int);
    B.List_292_260_226_226 = A._setArrayType(makeConstList([292, 260, 226, 226]), type$.JSArray_int);
    B.List_2Bc = A._setArrayType(makeConstList([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8]), type$.JSArray_int);
    B.List_2Vk = A._setArrayType(makeConstList([137, 80, 78, 71, 13, 10, 26, 10]), type$.JSArray_int);
    B.List_2_3_7 = A._setArrayType(makeConstList([2, 3, 7]), type$.JSArray_int);
    B.TiffFormat_0 = new A.TiffFormat(0, "invalid");
    B.TiffFormat_1 = new A.TiffFormat(1, "uint");
    B.TiffFormat_2 = new A.TiffFormat(2, "int");
    B.TiffFormat_3 = new A.TiffFormat(3, "float");
    B.List_3Fq = A._setArrayType(makeConstList([B.TiffFormat_0, B.TiffFormat_1, B.TiffFormat_2, B.TiffFormat_3]), A.findType("JSArray<TiffFormat>"));
    B.List_3_3_11 = A._setArrayType(makeConstList([3, 3, 11]), type$.JSArray_int);
    B.TiffPhotometricType_0 = new A.TiffPhotometricType(0, "whiteIsZero");
    B.TiffPhotometricType_1 = new A.TiffPhotometricType(1, "blackIsZero");
    B.TiffPhotometricType_2 = new A.TiffPhotometricType(2, "rgb");
    B.TiffPhotometricType_3 = new A.TiffPhotometricType(3, "palette");
    B.TiffPhotometricType_4 = new A.TiffPhotometricType(4, "transparencyMask");
    B.TiffPhotometricType_5 = new A.TiffPhotometricType(5, "cmyk");
    B.TiffPhotometricType_6 = new A.TiffPhotometricType(6, "yCbCr");
    B.TiffPhotometricType_7 = new A.TiffPhotometricType(7, "reserved7");
    B.TiffPhotometricType_8 = new A.TiffPhotometricType(8, "cieLab");
    B.TiffPhotometricType_9 = new A.TiffPhotometricType(9, "iccLab");
    B.TiffPhotometricType_10 = new A.TiffPhotometricType(10, "ituLab");
    B.TiffPhotometricType_11 = new A.TiffPhotometricType(11, "logL");
    B.TiffPhotometricType_12 = new A.TiffPhotometricType(12, "logLuv");
    B.TiffPhotometricType_13 = new A.TiffPhotometricType(13, "colorFilterArray");
    B.TiffPhotometricType_14 = new A.TiffPhotometricType(14, "linearRaw");
    B.TiffPhotometricType_15 = new A.TiffPhotometricType(15, "depth");
    B.TiffPhotometricType_16 = new A.TiffPhotometricType(16, "unknown");
    B.List_46y = A._setArrayType(makeConstList([B.TiffPhotometricType_0, B.TiffPhotometricType_1, B.TiffPhotometricType_2, B.TiffPhotometricType_3, B.TiffPhotometricType_4, B.TiffPhotometricType_5, B.TiffPhotometricType_6, B.TiffPhotometricType_7, B.TiffPhotometricType_8, B.TiffPhotometricType_9, B.TiffPhotometricType_10, B.TiffPhotometricType_11, B.TiffPhotometricType_12, B.TiffPhotometricType_13, B.TiffPhotometricType_14, B.TiffPhotometricType_15, B.TiffPhotometricType_16]), A.findType("JSArray<TiffPhotometricType>"));
    B.PngDisposeMode_0 = new A.PngDisposeMode(0, "none");
    B.PngDisposeMode_1 = new A.PngDisposeMode(1, "background");
    B.PngDisposeMode_2 = new A.PngDisposeMode(2, "previous");
    B.List_4CA = A._setArrayType(makeConstList([B.PngDisposeMode_0, B.PngDisposeMode_1, B.PngDisposeMode_2]), A.findType("JSArray<PngDisposeMode>"));
    B.List_511_1023_2047_4095 = A._setArrayType(makeConstList([511, 1023, 2047, 4095]), type$.JSArray_int);
    B.List_63_207_243_252 = A._setArrayType(makeConstList([63, 207, 243, 252]), type$.JSArray_int);
    B.List_U2p = A._setArrayType(makeConstList([231, 120, 48, 89, 115, 113, 120, 152, 112]), type$.JSArray_int);
    B.List_yXZ = A._setArrayType(makeConstList([152, 179, 64, 126, 170, 118, 46, 70, 95]), type$.JSArray_int);
    B.List_yXZ0 = A._setArrayType(makeConstList([175, 69, 143, 80, 85, 82, 72, 155, 103]), type$.JSArray_int);
    B.List_yXZ1 = A._setArrayType(makeConstList([56, 58, 10, 171, 218, 189, 17, 13, 152]), type$.JSArray_int);
    B.List_yXZ2 = A._setArrayType(makeConstList([114, 26, 17, 163, 44, 195, 21, 10, 173]), type$.JSArray_int);
    B.List_yXZ3 = A._setArrayType(makeConstList([121, 24, 80, 195, 26, 62, 44, 64, 85]), type$.JSArray_int);
    B.List_yXZ4 = A._setArrayType(makeConstList([144, 71, 10, 38, 171, 213, 144, 34, 26]), type$.JSArray_int);
    B.List_yXZ5 = A._setArrayType(makeConstList([170, 46, 55, 19, 136, 160, 33, 206, 71]), type$.JSArray_int);
    B.List_yXZ6 = A._setArrayType(makeConstList([63, 20, 8, 114, 114, 208, 12, 9, 226]), type$.JSArray_int);
    B.List_yXZ7 = A._setArrayType(makeConstList([81, 40, 11, 96, 182, 84, 29, 16, 36]), type$.JSArray_int);
    B.List_sty = A._setArrayType(makeConstList([B.List_U2p, B.List_yXZ, B.List_yXZ0, B.List_yXZ1, B.List_yXZ2, B.List_yXZ3, B.List_yXZ4, B.List_yXZ5, B.List_yXZ6, B.List_yXZ7]), type$.JSArray_List_int);
    B.List_yXZ8 = A._setArrayType(makeConstList([134, 183, 89, 137, 98, 101, 106, 165, 148]), type$.JSArray_int);
    B.List_yXZ9 = A._setArrayType(makeConstList([72, 187, 100, 130, 157, 111, 32, 75, 80]), type$.JSArray_int);
    B.List_yXZ10 = A._setArrayType(makeConstList([66, 102, 167, 99, 74, 62, 40, 234, 128]), type$.JSArray_int);
    B.List_kfn = A._setArrayType(makeConstList([41, 53, 9, 178, 241, 141, 26, 8, 107]), type$.JSArray_int);
    B.List_yXZ11 = A._setArrayType(makeConstList([74, 43, 26, 146, 73, 166, 49, 23, 157]), type$.JSArray_int);
    B.List_yXZ12 = A._setArrayType(makeConstList([65, 38, 105, 160, 51, 52, 31, 115, 128]), type$.JSArray_int);
    B.List_eDA = A._setArrayType(makeConstList([104, 79, 12, 27, 217, 255, 87, 17, 7]), type$.JSArray_int);
    B.List_yXZ13 = A._setArrayType(makeConstList([87, 68, 71, 44, 114, 51, 15, 186, 23]), type$.JSArray_int);
    B.List_yXZ14 = A._setArrayType(makeConstList([47, 41, 14, 110, 182, 183, 21, 17, 194]), type$.JSArray_int);
    B.List_yXZ15 = A._setArrayType(makeConstList([66, 45, 25, 102, 197, 189, 23, 18, 22]), type$.JSArray_int);
    B.List_L3W = A._setArrayType(makeConstList([B.List_yXZ8, B.List_yXZ9, B.List_yXZ10, B.List_kfn, B.List_yXZ11, B.List_yXZ12, B.List_eDA, B.List_yXZ13, B.List_yXZ14, B.List_yXZ15]), type$.JSArray_List_int);
    B.List_yXZ16 = A._setArrayType(makeConstList([88, 88, 147, 150, 42, 46, 45, 196, 205]), type$.JSArray_int);
    B.List_yXZ17 = A._setArrayType(makeConstList([43, 97, 183, 117, 85, 38, 35, 179, 61]), type$.JSArray_int);
    B.List_yXZ18 = A._setArrayType(makeConstList([39, 53, 200, 87, 26, 21, 43, 232, 171]), type$.JSArray_int);
    B.List_yXZ19 = A._setArrayType(makeConstList([56, 34, 51, 104, 114, 102, 29, 93, 77]), type$.JSArray_int);
    B.List_yXZ20 = A._setArrayType(makeConstList([39, 28, 85, 171, 58, 165, 90, 98, 64]), type$.JSArray_int);
    B.List_yXZ21 = A._setArrayType(makeConstList([34, 22, 116, 206, 23, 34, 43, 166, 73]), type$.JSArray_int);
    B.List_yXZ22 = A._setArrayType(makeConstList([107, 54, 32, 26, 51, 1, 81, 43, 31]), type$.JSArray_int);
    B.List_yXZ23 = A._setArrayType(makeConstList([68, 25, 106, 22, 64, 171, 36, 225, 114]), type$.JSArray_int);
    B.List_yXZ24 = A._setArrayType(makeConstList([34, 19, 21, 102, 132, 188, 16, 76, 124]), type$.JSArray_int);
    B.List_yXZ25 = A._setArrayType(makeConstList([62, 18, 78, 95, 85, 57, 50, 48, 51]), type$.JSArray_int);
    B.List_ECY = A._setArrayType(makeConstList([B.List_yXZ16, B.List_yXZ17, B.List_yXZ18, B.List_yXZ19, B.List_yXZ20, B.List_yXZ21, B.List_yXZ22, B.List_yXZ23, B.List_yXZ24, B.List_yXZ25]), type$.JSArray_List_int);
    B.List_yXZ26 = A._setArrayType(makeConstList([193, 101, 35, 159, 215, 111, 89, 46, 111]), type$.JSArray_int);
    B.List_yXZ27 = A._setArrayType(makeConstList([60, 148, 31, 172, 219, 228, 21, 18, 111]), type$.JSArray_int);
    B.List_eDA0 = A._setArrayType(makeConstList([112, 113, 77, 85, 179, 255, 38, 120, 114]), type$.JSArray_int);
    B.List_kfn0 = A._setArrayType(makeConstList([40, 42, 1, 196, 245, 209, 10, 25, 109]), type$.JSArray_int);
    B.List_yXZ28 = A._setArrayType(makeConstList([88, 43, 29, 140, 166, 213, 37, 43, 154]), type$.JSArray_int);
    B.List_yXZ29 = A._setArrayType(makeConstList([61, 63, 30, 155, 67, 45, 68, 1, 209]), type$.JSArray_int);
    B.List_yXZ30 = A._setArrayType(makeConstList([100, 80, 8, 43, 154, 1, 51, 26, 71]), type$.JSArray_int);
    B.List_kfn1 = A._setArrayType(makeConstList([142, 78, 78, 16, 255, 128, 34, 197, 171]), type$.JSArray_int);
    B.List_yXZ31 = A._setArrayType(makeConstList([41, 40, 5, 102, 211, 183, 4, 1, 221]), type$.JSArray_int);
    B.List_yXZ32 = A._setArrayType(makeConstList([51, 50, 17, 168, 209, 192, 23, 25, 82]), type$.JSArray_int);
    B.List_JO4 = A._setArrayType(makeConstList([B.List_yXZ26, B.List_yXZ27, B.List_eDA0, B.List_kfn0, B.List_yXZ28, B.List_yXZ29, B.List_yXZ30, B.List_kfn1, B.List_yXZ31, B.List_yXZ32]), type$.JSArray_List_int);
    B.List_knt1 = A._setArrayType(makeConstList([138, 31, 36, 171, 27, 166, 38, 44, 229]), type$.JSArray_int);
    B.List_yXZ33 = A._setArrayType(makeConstList([67, 87, 58, 169, 82, 115, 26, 59, 179]), type$.JSArray_int);
    B.List_yXZ34 = A._setArrayType(makeConstList([63, 59, 90, 180, 59, 166, 93, 73, 154]), type$.JSArray_int);
    B.List_yXZ35 = A._setArrayType(makeConstList([40, 40, 21, 116, 143, 209, 34, 39, 175]), type$.JSArray_int);
    B.List_yXZ36 = A._setArrayType(makeConstList([47, 15, 16, 183, 34, 223, 49, 45, 183]), type$.JSArray_int);
    B.List_yXZ37 = A._setArrayType(makeConstList([46, 17, 33, 183, 6, 98, 15, 32, 183]), type$.JSArray_int);
    B.List_yXZ38 = A._setArrayType(makeConstList([57, 46, 22, 24, 128, 1, 54, 17, 37]), type$.JSArray_int);
    B.List_yXZ39 = A._setArrayType(makeConstList([65, 32, 73, 115, 28, 128, 23, 128, 205]), type$.JSArray_int);
    B.List_yXZ40 = A._setArrayType(makeConstList([40, 3, 9, 115, 51, 192, 18, 6, 223]), type$.JSArray_int);
    B.List_yXZ41 = A._setArrayType(makeConstList([87, 37, 9, 115, 59, 77, 64, 21, 47]), type$.JSArray_int);
    B.List_wEo = A._setArrayType(makeConstList([B.List_knt1, B.List_yXZ33, B.List_yXZ34, B.List_yXZ35, B.List_yXZ36, B.List_yXZ37, B.List_yXZ38, B.List_yXZ39, B.List_yXZ40, B.List_yXZ41]), type$.JSArray_List_int);
    B.List_yXZ42 = A._setArrayType(makeConstList([104, 55, 44, 218, 9, 54, 53, 130, 226]), type$.JSArray_int);
    B.List_yXZ43 = A._setArrayType(makeConstList([64, 90, 70, 205, 40, 41, 23, 26, 57]), type$.JSArray_int);
    B.List_yXZ44 = A._setArrayType(makeConstList([54, 57, 112, 184, 5, 41, 38, 166, 213]), type$.JSArray_int);
    B.List_yXZ45 = A._setArrayType(makeConstList([30, 34, 26, 133, 152, 116, 10, 32, 134]), type$.JSArray_int);
    B.List_knt2 = A._setArrayType(makeConstList([39, 19, 53, 221, 26, 114, 32, 73, 255]), type$.JSArray_int);
    B.List_yXZ46 = A._setArrayType(makeConstList([31, 9, 65, 234, 2, 15, 1, 118, 73]), type$.JSArray_int);
    B.List_eDA1 = A._setArrayType(makeConstList([75, 32, 12, 51, 192, 255, 160, 43, 51]), type$.JSArray_int);
    B.List_yXZ47 = A._setArrayType(makeConstList([88, 31, 35, 67, 102, 85, 55, 186, 85]), type$.JSArray_int);
    B.List_yXZ48 = A._setArrayType(makeConstList([56, 21, 23, 111, 59, 205, 45, 37, 192]), type$.JSArray_int);
    B.List_yXZ49 = A._setArrayType(makeConstList([55, 38, 70, 124, 73, 102, 1, 34, 98]), type$.JSArray_int);
    B.List_00 = A._setArrayType(makeConstList([B.List_yXZ42, B.List_yXZ43, B.List_yXZ44, B.List_yXZ45, B.List_knt2, B.List_yXZ46, B.List_eDA1, B.List_yXZ47, B.List_yXZ48, B.List_yXZ49]), type$.JSArray_List_int);
    B.List_yXZ50 = A._setArrayType(makeConstList([125, 98, 42, 88, 104, 85, 117, 175, 82]), type$.JSArray_int);
    B.List_yXZ51 = A._setArrayType(makeConstList([95, 84, 53, 89, 128, 100, 113, 101, 45]), type$.JSArray_int);
    B.List_yXZ52 = A._setArrayType(makeConstList([75, 79, 123, 47, 51, 128, 81, 171, 1]), type$.JSArray_int);
    B.List_yXZ53 = A._setArrayType(makeConstList([57, 17, 5, 71, 102, 57, 53, 41, 49]), type$.JSArray_int);
    B.List_yXZ54 = A._setArrayType(makeConstList([38, 33, 13, 121, 57, 73, 26, 1, 85]), type$.JSArray_int);
    B.List_yXZ55 = A._setArrayType(makeConstList([41, 10, 67, 138, 77, 110, 90, 47, 114]), type$.JSArray_int);
    B.List_eDA2 = A._setArrayType(makeConstList([115, 21, 2, 10, 102, 255, 166, 23, 6]), type$.JSArray_int);
    B.List_yXZ56 = A._setArrayType(makeConstList([101, 29, 16, 10, 85, 128, 101, 196, 26]), type$.JSArray_int);
    B.List_yXZ57 = A._setArrayType(makeConstList([57, 18, 10, 102, 102, 213, 34, 20, 43]), type$.JSArray_int);
    B.List_yXZ58 = A._setArrayType(makeConstList([117, 20, 15, 36, 163, 128, 68, 1, 26]), type$.JSArray_int);
    B.List_a5W = A._setArrayType(makeConstList([B.List_yXZ50, B.List_yXZ51, B.List_yXZ52, B.List_yXZ53, B.List_yXZ54, B.List_yXZ55, B.List_eDA2, B.List_yXZ56, B.List_yXZ57, B.List_yXZ58]), type$.JSArray_List_int);
    B.List_h47 = A._setArrayType(makeConstList([102, 61, 71, 37, 34, 53, 31, 243, 192]), type$.JSArray_int);
    B.List_yXZ59 = A._setArrayType(makeConstList([69, 60, 71, 38, 73, 119, 28, 222, 37]), type$.JSArray_int);
    B.List_h470 = A._setArrayType(makeConstList([68, 45, 128, 34, 1, 47, 11, 245, 171]), type$.JSArray_int);
    B.List_yXZ60 = A._setArrayType(makeConstList([62, 17, 19, 70, 146, 85, 55, 62, 70]), type$.JSArray_int);
    B.List_yXZ61 = A._setArrayType(makeConstList([37, 43, 37, 154, 100, 163, 85, 160, 1]), type$.JSArray_int);
    B.List_yXZ62 = A._setArrayType(makeConstList([63, 9, 92, 136, 28, 64, 32, 201, 85]), type$.JSArray_int);
    B.List_eDA3 = A._setArrayType(makeConstList([75, 15, 9, 9, 64, 255, 184, 119, 16]), type$.JSArray_int);
    B.List_eDA4 = A._setArrayType(makeConstList([86, 6, 28, 5, 64, 255, 25, 248, 1]), type$.JSArray_int);
    B.List_eDA5 = A._setArrayType(makeConstList([56, 8, 17, 132, 137, 255, 55, 116, 128]), type$.JSArray_int);
    B.List_yXZ63 = A._setArrayType(makeConstList([58, 15, 20, 82, 135, 57, 26, 121, 40]), type$.JSArray_int);
    B.List_6oq = A._setArrayType(makeConstList([B.List_h47, B.List_yXZ59, B.List_h470, B.List_yXZ60, B.List_yXZ61, B.List_yXZ62, B.List_eDA3, B.List_eDA4, B.List_eDA5, B.List_yXZ63]), type$.JSArray_List_int);
    B.List_yXZ64 = A._setArrayType(makeConstList([164, 50, 31, 137, 154, 133, 25, 35, 218]), type$.JSArray_int);
    B.List_yXZ65 = A._setArrayType(makeConstList([51, 103, 44, 131, 131, 123, 31, 6, 158]), type$.JSArray_int);
    B.List_yXZ66 = A._setArrayType(makeConstList([86, 40, 64, 135, 148, 224, 45, 183, 128]), type$.JSArray_int);
    B.List_yXZ67 = A._setArrayType(makeConstList([22, 26, 17, 131, 240, 154, 14, 1, 209]), type$.JSArray_int);
    B.List_yXZ68 = A._setArrayType(makeConstList([45, 16, 21, 91, 64, 222, 7, 1, 197]), type$.JSArray_int);
    B.List_yXZ69 = A._setArrayType(makeConstList([56, 21, 39, 155, 60, 138, 23, 102, 213]), type$.JSArray_int);
    B.List_eDA6 = A._setArrayType(makeConstList([83, 12, 13, 54, 192, 255, 68, 47, 28]), type$.JSArray_int);
    B.List_yXZ70 = A._setArrayType(makeConstList([85, 26, 85, 85, 128, 128, 32, 146, 171]), type$.JSArray_int);
    B.List_yXZ71 = A._setArrayType(makeConstList([18, 11, 7, 63, 144, 171, 4, 4, 246]), type$.JSArray_int);
    B.List_yXZ72 = A._setArrayType(makeConstList([35, 27, 10, 146, 174, 171, 12, 26, 128]), type$.JSArray_int);
    B.List_a5W0 = A._setArrayType(makeConstList([B.List_yXZ64, B.List_yXZ65, B.List_yXZ66, B.List_yXZ67, B.List_yXZ68, B.List_yXZ69, B.List_eDA6, B.List_yXZ70, B.List_yXZ71, B.List_yXZ72]), type$.JSArray_List_int);
    B.List_yXZ73 = A._setArrayType(makeConstList([190, 80, 35, 99, 180, 80, 126, 54, 45]), type$.JSArray_int);
    B.List_yXZ74 = A._setArrayType(makeConstList([85, 126, 47, 87, 176, 51, 41, 20, 32]), type$.JSArray_int);
    B.List_yXZ75 = A._setArrayType(makeConstList([101, 75, 128, 139, 118, 146, 116, 128, 85]), type$.JSArray_int);
    B.List_yXZ76 = A._setArrayType(makeConstList([56, 41, 15, 176, 236, 85, 37, 9, 62]), type$.JSArray_int);
    B.List_eDA7 = A._setArrayType(makeConstList([71, 30, 17, 119, 118, 255, 17, 18, 138]), type$.JSArray_int);
    B.List_yXZ77 = A._setArrayType(makeConstList([101, 38, 60, 138, 55, 70, 43, 26, 142]), type$.JSArray_int);
    B.List_eDA8 = A._setArrayType(makeConstList([146, 36, 19, 30, 171, 255, 97, 27, 20]), type$.JSArray_int);
    B.List_yXZ78 = A._setArrayType(makeConstList([138, 45, 61, 62, 219, 1, 81, 188, 64]), type$.JSArray_int);
    B.List_yXZ79 = A._setArrayType(makeConstList([32, 41, 20, 117, 151, 142, 20, 21, 163]), type$.JSArray_int);
    B.List_yXZ80 = A._setArrayType(makeConstList([112, 19, 12, 61, 195, 128, 48, 4, 24]), type$.JSArray_int);
    B.List_RrN = A._setArrayType(makeConstList([B.List_yXZ73, B.List_yXZ74, B.List_yXZ75, B.List_yXZ76, B.List_eDA7, B.List_yXZ77, B.List_eDA8, B.List_yXZ78, B.List_yXZ79, B.List_yXZ80]), type$.JSArray_List_int);
    B.List_799 = A._setArrayType(makeConstList([B.List_sty, B.List_L3W, B.List_ECY, B.List_JO4, B.List_wEo, B.List_00, B.List_a5W, B.List_6oq, B.List_a5W0, B.List_RrN]), type$.JSArray_List_List_int);
    B.ExrCompressorType_1 = new A.ExrCompressorType(1, "rle");
    B.ExrCompressorType_2 = new A.ExrCompressorType(2, "zips");
    B.ExrCompressorType_3 = new A.ExrCompressorType(3, "zip");
    B.ExrCompressorType_4 = new A.ExrCompressorType(4, "piz");
    B.ExrCompressorType_5 = new A.ExrCompressorType(5, "pxr24");
    B.ExrCompressorType_6 = new A.ExrCompressorType(6, "b44");
    B.ExrCompressorType_7 = new A.ExrCompressorType(7, "b44a");
    B.List_79Z = A._setArrayType(makeConstList([B.ExrCompressorType_0, B.ExrCompressorType_1, B.ExrCompressorType_2, B.ExrCompressorType_3, B.ExrCompressorType_4, B.ExrCompressorType_5, B.ExrCompressorType_6, B.ExrCompressorType_7]), A.findType("JSArray<ExrCompressorType>"));
    B.List_89P = A._setArrayType(makeConstList([3226, 6412, 200, 168, 38, 38, 134, 134, 100, 100, 100, 100, 68, 68, 68, 68]), type$.JSArray_int);
    B.List_8_8_4_2 = A._setArrayType(makeConstList([8, 8, 4, 2]), type$.JSArray_int);
    B.List_8co1 = A._setArrayType(makeConstList([4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 17, 18, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 95, 96, 98, 100, 101, 102, 104, 106, 108, 110, 112, 114, 116, 118, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 143, 145, 148, 151, 154, 157]), type$.JSArray_int);
    B.List_8co0 = A._setArrayType(makeConstList([7, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]), type$.JSArray_int);
    B.List_8co = A._setArrayType(makeConstList([80, 88, 23, 71, 30, 30, 62, 62, 4, 4, 4, 4, 4, 4, 4, 4, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41]), type$.JSArray_int);
    B.List_8_0_8_0 = A._setArrayType(makeConstList([8, 0, 8, 0]), type$.JSArray_int);
    B.List_5_3_5_3 = A._setArrayType(makeConstList([5, 3, 5, 3]), type$.JSArray_int);
    B.List_3_5_3_5 = A._setArrayType(makeConstList([3, 5, 3, 5]), type$.JSArray_int);
    B.List_0_8_0_8 = A._setArrayType(makeConstList([0, 8, 0, 8]), type$.JSArray_int);
    B.List_4_4_4_4 = A._setArrayType(makeConstList([4, 4, 4, 4]), type$.JSArray_int);
    B.List_4_4_0_0 = A._setArrayType(makeConstList([4, 4, 0, 0]), type$.JSArray_int);
    B.List_9yJ = A._setArrayType(makeConstList([B.List_8_0_8_0, B.List_5_3_5_3, B.List_3_5_3_5, B.List_0_8_0_8, B.List_8_0_8_0, B.List_4_4_4_4, B.List_4_4_0_0, B.List_0_8_0_8]), type$.JSArray_List_int);
    B.List_AYZ = A._setArrayType(makeConstList([24, 7, 23, 25, 40, 6, 39, 41, 22, 26, 38, 42, 56, 5, 55, 57, 21, 27, 54, 58, 37, 43, 72, 4, 71, 73, 20, 28, 53, 59, 70, 74, 36, 44, 88, 69, 75, 52, 60, 3, 87, 89, 19, 29, 86, 90, 35, 45, 68, 76, 85, 91, 51, 61, 104, 2, 103, 105, 18, 30, 102, 106, 34, 46, 84, 92, 67, 77, 101, 107, 50, 62, 120, 1, 119, 121, 83, 93, 17, 31, 100, 108, 66, 78, 118, 122, 33, 47, 117, 123, 49, 63, 99, 109, 82, 94, 0, 116, 124, 65, 79, 16, 32, 98, 110, 48, 115, 125, 81, 95, 64, 114, 126, 97, 111, 80, 113, 127, 96, 112]), type$.JSArray_int);
    B.List_AZw = A._setArrayType(makeConstList([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63]), type$.JSArray_int);
    B.List_AiM = A._setArrayType(makeConstList([4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 119, 122, 125, 128, 131, 134, 137, 140, 143, 146, 149, 152, 155, 158, 161, 164, 167, 170, 173, 177, 181, 185, 189, 193, 197, 201, 205, 209, 213, 217, 221, 225, 229, 234, 239, 245, 249, 254, 259, 264, 269, 274, 279, 284]), type$.JSArray_int);
    B.List_2_6_2_6 = A._setArrayType(makeConstList([2, 6, 2, 6]), type$.JSArray_int);
    B.List_6_2_6_2 = A._setArrayType(makeConstList([6, 2, 6, 2]), type$.JSArray_int);
    B.List_2_2_6_6 = A._setArrayType(makeConstList([2, 2, 6, 6]), type$.JSArray_int);
    B.List_1_3_3_9 = A._setArrayType(makeConstList([1, 3, 3, 9]), type$.JSArray_int);
    B.List_4_0_12_0 = A._setArrayType(makeConstList([4, 0, 12, 0]), type$.JSArray_int);
    B.List_3_1_9_3 = A._setArrayType(makeConstList([3, 1, 9, 3]), type$.JSArray_int);
    B.List_8_8_0_0 = A._setArrayType(makeConstList([8, 8, 0, 0]), type$.JSArray_int);
    B.List_4_12_0_0 = A._setArrayType(makeConstList([4, 12, 0, 0]), type$.JSArray_int);
    B.List_16_0_0_0 = A._setArrayType(makeConstList([16, 0, 0, 0]), type$.JSArray_int);
    B.List_12_4_0_0 = A._setArrayType(makeConstList([12, 4, 0, 0]), type$.JSArray_int);
    B.List_6_6_2_2 = A._setArrayType(makeConstList([6, 6, 2, 2]), type$.JSArray_int);
    B.List_3_9_1_3 = A._setArrayType(makeConstList([3, 9, 1, 3]), type$.JSArray_int);
    B.List_12_0_4_0 = A._setArrayType(makeConstList([12, 0, 4, 0]), type$.JSArray_int);
    B.List_9_3_3_1 = A._setArrayType(makeConstList([9, 3, 3, 1]), type$.JSArray_int);
    B.List_Avl = A._setArrayType(makeConstList([B.List_4_4_4_4, B.List_2_6_2_6, B.List_8_0_8_0, B.List_6_2_6_2, B.List_2_2_6_6, B.List_1_3_3_9, B.List_4_0_12_0, B.List_3_1_9_3, B.List_8_8_0_0, B.List_4_12_0_0, B.List_16_0_0_0, B.List_12_4_0_0, B.List_6_6_2_2, B.List_3_9_1_3, B.List_12_0_4_0, B.List_9_3_3_1]), type$.JSArray_List_int);
    B.List_AyI = A._setArrayType(makeConstList([0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 16, 17, 18, 18, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]), type$.JSArray_int);
    B.List_B8J = A._setArrayType(makeConstList([0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918000, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117]), type$.JSArray_int);
    B.List_DKo = A._setArrayType(makeConstList([0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607, 16777215, 33554431, 67108863, 134217727, 268435455, 536870911, 1073741823, 2147483647, 4294967295]), type$.JSArray_int);
    B.List_F1L = A._setArrayType(makeConstList([0, 1, 2, 3, 6, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 0]), type$.JSArray_int);
    B.List_GBZ = A._setArrayType(makeConstList([0, 17, 34, 51, 68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255]), type$.JSArray_int);
    B.PngFilterType_0 = new A.PngFilterType(0, "none");
    B.PngFilterType_1 = new A.PngFilterType(1, "sub");
    B.PngFilterType_2 = new A.PngFilterType(2, "up");
    B.PngFilterType_3 = new A.PngFilterType(3, "average");
    B.PngFilterType_4 = new A.PngFilterType(4, "paeth");
    B.List_H48 = A._setArrayType(makeConstList([B.PngFilterType_0, B.PngFilterType_1, B.PngFilterType_2, B.PngFilterType_3, B.PngFilterType_4]), A.findType("JSArray<PngFilterType>"));
    B.List_HHa = A._setArrayType(makeConstList([null, A.webp_filters_WebPFilters_horizontalUnfilter$closure(), A.webp_filters_WebPFilters_verticalUnfilter$closure(), A.webp_filters_WebPFilters_gradientUnfilter$closure()]), A.findType("JSArray<~(int,int,int,int,int,Uint8List)?>"));
    B.List_MEg = A._setArrayType(makeConstList([28679, 28679, 31752, -32759, -31735, -30711, -29687, -28663, 29703, 29703, 30727, 30727, -27639, -26615, -25591, -24567]), type$.JSArray_int);
    B.List_q8u = A._setArrayType(makeConstList([255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_2du = A._setArrayType(makeConstList([B.List_q8u, B.List_q8u, B.List_q8u]), type$.JSArray_List_int);
    B.List_n3E = A._setArrayType(makeConstList([176, 246, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_U8c = A._setArrayType(makeConstList([223, 241, 252, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_q8u0 = A._setArrayType(makeConstList([249, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_EkO = A._setArrayType(makeConstList([B.List_n3E, B.List_U8c, B.List_q8u0]), type$.JSArray_List_int);
    B.List_mXg = A._setArrayType(makeConstList([255, 244, 252, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_sav = A._setArrayType(makeConstList([234, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_q8u1 = A._setArrayType(makeConstList([253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_ezx = A._setArrayType(makeConstList([B.List_mXg, B.List_sav, B.List_q8u1]), type$.JSArray_List_int);
    B.List_mXg0 = A._setArrayType(makeConstList([255, 246, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_wX4 = A._setArrayType(makeConstList([239, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_U8c0 = A._setArrayType(makeConstList([254, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_Q1p = A._setArrayType(makeConstList([B.List_mXg0, B.List_wX4, B.List_U8c0]), type$.JSArray_List_int);
    B.List_mXg1 = A._setArrayType(makeConstList([255, 248, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_wX40 = A._setArrayType(makeConstList([251, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_ycb = A._setArrayType(makeConstList([B.List_mXg1, B.List_wX40, B.List_q8u]), type$.JSArray_List_int);
    B.List_wX41 = A._setArrayType(makeConstList([255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_mXg2 = A._setArrayType(makeConstList([251, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_AuU = A._setArrayType(makeConstList([B.List_wX41, B.List_mXg2, B.List_U8c0]), type$.JSArray_List_int);
    B.List_ekJ = A._setArrayType(makeConstList([255, 254, 253, 255, 254, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_vHK = A._setArrayType(makeConstList([250, 255, 254, 255, 254, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_Mic = A._setArrayType(makeConstList([254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_3oi = A._setArrayType(makeConstList([B.List_ekJ, B.List_vHK, B.List_Mic]), type$.JSArray_List_int);
    B.List_uwP = A._setArrayType(makeConstList([B.List_2du, B.List_EkO, B.List_ezx, B.List_Q1p, B.List_ycb, B.List_AuU, B.List_3oi, B.List_2du]), type$.JSArray_List_List_int);
    B.List_Mic0 = A._setArrayType(makeConstList([217, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_ku2 = A._setArrayType(makeConstList([225, 252, 241, 253, 255, 255, 254, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_unK = A._setArrayType(makeConstList([234, 250, 241, 250, 253, 255, 253, 254, 255, 255, 255]), type$.JSArray_int);
    B.List_EuK = A._setArrayType(makeConstList([B.List_Mic0, B.List_ku2, B.List_unK]), type$.JSArray_List_int);
    B.List_H37 = A._setArrayType(makeConstList([255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_sav0 = A._setArrayType(makeConstList([223, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_01 = A._setArrayType(makeConstList([238, 253, 254, 254, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_U05 = A._setArrayType(makeConstList([B.List_H37, B.List_sav0, B.List_01]), type$.JSArray_List_int);
    B.List_H370 = A._setArrayType(makeConstList([249, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_wEo0 = A._setArrayType(makeConstList([B.List_mXg1, B.List_H370, B.List_q8u]), type$.JSArray_List_int);
    B.List_q8u2 = A._setArrayType(makeConstList([255, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_H371 = A._setArrayType(makeConstList([247, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_HmY = A._setArrayType(makeConstList([B.List_q8u2, B.List_H371, B.List_q8u]), type$.JSArray_List_int);
    B.List_Mic1 = A._setArrayType(makeConstList([252, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_qJr = A._setArrayType(makeConstList([B.List_wX41, B.List_Mic1, B.List_q8u]), type$.JSArray_List_int);
    B.List_mXg3 = A._setArrayType(makeConstList([255, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_oIk = A._setArrayType(makeConstList([B.List_mXg3, B.List_q8u1, B.List_q8u]), type$.JSArray_List_int);
    B.List_H372 = A._setArrayType(makeConstList([255, 254, 253, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_Mic2 = A._setArrayType(makeConstList([250, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_23h = A._setArrayType(makeConstList([B.List_H372, B.List_Mic2, B.List_Mic]), type$.JSArray_List_int);
    B.List_Crw = A._setArrayType(makeConstList([B.List_EuK, B.List_U05, B.List_wEo0, B.List_HmY, B.List_qJr, B.List_oIk, B.List_23h, B.List_2du]), type$.JSArray_List_List_int);
    B.List_U8c1 = A._setArrayType(makeConstList([186, 251, 250, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_02 = A._setArrayType(makeConstList([234, 251, 244, 254, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_IyW = A._setArrayType(makeConstList([251, 251, 243, 253, 254, 255, 254, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_ujV = A._setArrayType(makeConstList([B.List_U8c1, B.List_02, B.List_IyW]), type$.JSArray_List_int);
    B.List_U8c2 = A._setArrayType(makeConstList([236, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_A8Z = A._setArrayType(makeConstList([251, 253, 253, 254, 254, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_eFE = A._setArrayType(makeConstList([B.List_wX41, B.List_U8c2, B.List_A8Z]), type$.JSArray_List_int);
    B.List_sav1 = A._setArrayType(makeConstList([254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_ezx0 = A._setArrayType(makeConstList([B.List_mXg3, B.List_sav1, B.List_q8u]), type$.JSArray_List_int);
    B.List_n3E0 = A._setArrayType(makeConstList([254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_QXJ = A._setArrayType(makeConstList([B.List_H37, B.List_n3E0, B.List_Mic]), type$.JSArray_List_int);
    B.List_yzJ = A._setArrayType(makeConstList([B.List_q8u, B.List_Mic, B.List_q8u]), type$.JSArray_List_int);
    B.List_QcX = A._setArrayType(makeConstList([B.List_ujV, B.List_eFE, B.List_ezx0, B.List_QXJ, B.List_yzJ, B.List_2du, B.List_2du, B.List_2du]), type$.JSArray_List_List_int);
    B.List_Mic3 = A._setArrayType(makeConstList([248, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_AsR = A._setArrayType(makeConstList([250, 254, 252, 254, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_n3E1 = A._setArrayType(makeConstList([248, 254, 249, 253, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_gkc = A._setArrayType(makeConstList([B.List_Mic3, B.List_AsR, B.List_n3E1]), type$.JSArray_List_int);
    B.List_q8u3 = A._setArrayType(makeConstList([255, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_Mic4 = A._setArrayType(makeConstList([246, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_03 = A._setArrayType(makeConstList([252, 254, 251, 254, 254, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_04 = A._setArrayType(makeConstList([B.List_q8u3, B.List_Mic4, B.List_03]), type$.JSArray_List_int);
    B.List_mXg4 = A._setArrayType(makeConstList([255, 254, 252, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_n3E2 = A._setArrayType(makeConstList([248, 254, 253, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_m9F = A._setArrayType(makeConstList([253, 255, 254, 254, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_C3E = A._setArrayType(makeConstList([B.List_mXg4, B.List_n3E2, B.List_m9F]), type$.JSArray_List_int);
    B.List_wX42 = A._setArrayType(makeConstList([255, 251, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_wX43 = A._setArrayType(makeConstList([245, 251, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_wX44 = A._setArrayType(makeConstList([253, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_swR = A._setArrayType(makeConstList([B.List_wX42, B.List_wX43, B.List_wX44]), type$.JSArray_List_int);
    B.List_q8u4 = A._setArrayType(makeConstList([255, 251, 253, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_U8c3 = A._setArrayType(makeConstList([252, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_uQV = A._setArrayType(makeConstList([B.List_q8u4, B.List_U8c3, B.List_H37]), type$.JSArray_List_int);
    B.List_H373 = A._setArrayType(makeConstList([255, 252, 255, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_wX45 = A._setArrayType(makeConstList([249, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_wX46 = A._setArrayType(makeConstList([255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_46y0 = A._setArrayType(makeConstList([B.List_H373, B.List_wX45, B.List_wX46]), type$.JSArray_List_int);
    B.List_q8u5 = A._setArrayType(makeConstList([255, 255, 253, 255, 255, 255, 255, 255, 255, 255, 255]), type$.JSArray_int);
    B.List_yzJ0 = A._setArrayType(makeConstList([B.List_q8u5, B.List_Mic2, B.List_q8u]), type$.JSArray_List_int);
    B.List_88p = A._setArrayType(makeConstList([B.List_gkc, B.List_04, B.List_C3E, B.List_swR, B.List_uQV, B.List_46y0, B.List_yzJ0, B.List_yzJ]), type$.JSArray_List_List_int);
    B.List_MIe = A._setArrayType(makeConstList([B.List_uwP, B.List_Crw, B.List_QcX, B.List_88p]), type$.JSArray_List_List_List_int);
    B.List_MMm = A._setArrayType(makeConstList([254, 253, 251, 247, 239, 223, 191, 127]), type$.JSArray_int);
    B.List_NUU = A._setArrayType(makeConstList([0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28]), type$.JSArray_int);
    B.List_PjU = A._setArrayType(makeConstList([0, 36, 72, 109, 145, 182, 218, 255]), type$.JSArray_int);
    B.PngBlendMode_0 = new A.PngBlendMode(0, "source");
    B.PngBlendMode_1 = new A.PngBlendMode(1, "over");
    B.List_PngBlendMode_0_PngBlendMode_1 = A._setArrayType(makeConstList([B.PngBlendMode_0, B.PngBlendMode_1]), A.findType("JSArray<PngBlendMode>"));
    B.List_Qw3 = A._setArrayType(makeConstList([0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095]), type$.JSArray_int);
    B.PsdColorMode_0 = new A.PsdColorMode(0, "bitmap");
    B.PsdColorMode_1 = new A.PsdColorMode(1, "grayscale");
    B.PsdColorMode_2 = new A.PsdColorMode(2, "indexed");
    B.PsdColorMode_3 = new A.PsdColorMode(3, "rgb");
    B.PsdColorMode_4 = new A.PsdColorMode(4, "cmyk");
    B.PsdColorMode_5 = new A.PsdColorMode(5, "multiChannel");
    B.PsdColorMode_6 = new A.PsdColorMode(6, "duoTone");
    B.PsdColorMode_7 = new A.PsdColorMode(7, "lab");
    B.List_S43 = A._setArrayType(makeConstList([B.PsdColorMode_0, B.PsdColorMode_1, B.PsdColorMode_2, B.PsdColorMode_3, B.PsdColorMode_4, B.PsdColorMode_5, B.PsdColorMode_6, B.PsdColorMode_7]), A.findType("JSArray<PsdColorMode>"));
    B.List_2Vk0 = A._setArrayType(makeConstList([128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_gkc0 = A._setArrayType(makeConstList([B.List_2Vk0, B.List_2Vk0, B.List_2Vk0]), type$.JSArray_List_int);
    B.List_cdS = A._setArrayType(makeConstList([253, 136, 254, 255, 228, 219, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_app = A._setArrayType(makeConstList([189, 129, 242, 255, 227, 213, 255, 219, 128, 128, 128]), type$.JSArray_int);
    B.List_yFh = A._setArrayType(makeConstList([106, 126, 227, 252, 214, 209, 255, 255, 128, 128, 128]), type$.JSArray_int);
    B.List_y5k = A._setArrayType(makeConstList([B.List_cdS, B.List_app, B.List_yFh]), type$.JSArray_List_int);
    B.List_INA = A._setArrayType(makeConstList([1, 98, 248, 255, 236, 226, 255, 255, 128, 128, 128]), type$.JSArray_int);
    B.List_e4d = A._setArrayType(makeConstList([181, 133, 238, 254, 221, 234, 255, 154, 128, 128, 128]), type$.JSArray_int);
    B.List_app0 = A._setArrayType(makeConstList([78, 134, 202, 247, 198, 180, 255, 219, 128, 128, 128]), type$.JSArray_int);
    B.List_iLh = A._setArrayType(makeConstList([B.List_INA, B.List_e4d, B.List_app0]), type$.JSArray_List_int);
    B.List_MOR = A._setArrayType(makeConstList([1, 185, 249, 255, 243, 255, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_iUw = A._setArrayType(makeConstList([184, 150, 247, 255, 236, 224, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_Eba = A._setArrayType(makeConstList([77, 110, 216, 255, 236, 230, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_VS7 = A._setArrayType(makeConstList([B.List_MOR, B.List_iUw, B.List_Eba]), type$.JSArray_List_int);
    B.List_MOR0 = A._setArrayType(makeConstList([1, 101, 251, 255, 241, 255, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_wnc = A._setArrayType(makeConstList([170, 139, 241, 252, 236, 209, 255, 255, 128, 128, 128]), type$.JSArray_int);
    B.List_XwU = A._setArrayType(makeConstList([37, 116, 196, 243, 228, 255, 255, 255, 128, 128, 128]), type$.JSArray_int);
    B.List_HTJ = A._setArrayType(makeConstList([B.List_MOR0, B.List_wnc, B.List_XwU]), type$.JSArray_List_int);
    B.List_1yC = A._setArrayType(makeConstList([1, 204, 254, 255, 245, 255, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_Eba0 = A._setArrayType(makeConstList([207, 160, 250, 255, 238, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_iUw0 = A._setArrayType(makeConstList([102, 103, 231, 255, 211, 171, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_4QF = A._setArrayType(makeConstList([B.List_1yC, B.List_Eba0, B.List_iUw0]), type$.JSArray_List_int);
    B.List_uXo = A._setArrayType(makeConstList([1, 152, 252, 255, 240, 255, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_iUw1 = A._setArrayType(makeConstList([177, 135, 243, 255, 234, 225, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_Eba1 = A._setArrayType(makeConstList([80, 129, 211, 255, 194, 224, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_8Pu = A._setArrayType(makeConstList([B.List_uXo, B.List_iUw1, B.List_Eba1]), type$.JSArray_List_int);
    B.List_2hT = A._setArrayType(makeConstList([1, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_2hT0 = A._setArrayType(makeConstList([246, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_10r = A._setArrayType(makeConstList([255, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_Snu = A._setArrayType(makeConstList([B.List_2hT, B.List_2hT0, B.List_10r]), type$.JSArray_List_int);
    B.List_23h0 = A._setArrayType(makeConstList([B.List_gkc0, B.List_y5k, B.List_iLh, B.List_VS7, B.List_HTJ, B.List_4QF, B.List_8Pu, B.List_Snu]), type$.JSArray_List_List_int);
    B.List_2hT1 = A._setArrayType(makeConstList([198, 35, 237, 223, 193, 187, 162, 160, 145, 155, 62]), type$.JSArray_int);
    B.List_2Vk1 = A._setArrayType(makeConstList([131, 45, 198, 221, 172, 176, 220, 157, 252, 221, 1]), type$.JSArray_int);
    B.List_kOG = A._setArrayType(makeConstList([68, 47, 146, 208, 149, 167, 221, 162, 255, 223, 128]), type$.JSArray_int);
    B.List_BDr = A._setArrayType(makeConstList([B.List_2hT1, B.List_2Vk1, B.List_kOG]), type$.JSArray_List_int);
    B.List_qNA = A._setArrayType(makeConstList([1, 149, 241, 255, 221, 224, 255, 255, 128, 128, 128]), type$.JSArray_int);
    B.List_app1 = A._setArrayType(makeConstList([184, 141, 234, 253, 222, 220, 255, 199, 128, 128, 128]), type$.JSArray_int);
    B.List_kr3 = A._setArrayType(makeConstList([81, 99, 181, 242, 176, 190, 249, 202, 255, 255, 128]), type$.JSArray_int);
    B.List_Hcu = A._setArrayType(makeConstList([B.List_qNA, B.List_app1, B.List_kr3]), type$.JSArray_List_int);
    B.List_oqK = A._setArrayType(makeConstList([1, 129, 232, 253, 214, 197, 242, 196, 255, 255, 128]), type$.JSArray_int);
    B.List_e4d0 = A._setArrayType(makeConstList([99, 121, 210, 250, 201, 198, 255, 202, 128, 128, 128]), type$.JSArray_int);
    B.List_kr30 = A._setArrayType(makeConstList([23, 91, 163, 242, 170, 187, 247, 210, 255, 255, 128]), type$.JSArray_int);
    B.List_zAX = A._setArrayType(makeConstList([B.List_oqK, B.List_e4d0, B.List_kr30]), type$.JSArray_List_int);
    B.List_uXo0 = A._setArrayType(makeConstList([1, 200, 246, 255, 234, 255, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_YAl = A._setArrayType(makeConstList([109, 178, 241, 255, 231, 245, 255, 255, 128, 128, 128]), type$.JSArray_int);
    B.List_INA0 = A._setArrayType(makeConstList([44, 130, 201, 253, 205, 192, 255, 255, 128, 128, 128]), type$.JSArray_int);
    B.List_QOg = A._setArrayType(makeConstList([B.List_uXo0, B.List_YAl, B.List_INA0]), type$.JSArray_List_int);
    B.List_niO = A._setArrayType(makeConstList([1, 132, 239, 251, 219, 209, 255, 165, 128, 128, 128]), type$.JSArray_int);
    B.List_INA1 = A._setArrayType(makeConstList([94, 136, 225, 251, 218, 190, 255, 255, 128, 128, 128]), type$.JSArray_int);
    B.List_app2 = A._setArrayType(makeConstList([22, 100, 174, 245, 186, 161, 255, 199, 128, 128, 128]), type$.JSArray_int);
    B.List_i7r = A._setArrayType(makeConstList([B.List_niO, B.List_INA1, B.List_app2]), type$.JSArray_List_int);
    B.List_xw8 = A._setArrayType(makeConstList([1, 182, 249, 255, 232, 235, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_iUw2 = A._setArrayType(makeConstList([124, 143, 241, 255, 227, 234, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_app3 = A._setArrayType(makeConstList([35, 77, 181, 251, 193, 211, 255, 205, 128, 128, 128]), type$.JSArray_int);
    B.List_sQ3 = A._setArrayType(makeConstList([B.List_xw8, B.List_iUw2, B.List_app3]), type$.JSArray_List_int);
    B.List_UkC = A._setArrayType(makeConstList([1, 157, 247, 255, 236, 231, 255, 255, 128, 128, 128]), type$.JSArray_int);
    B.List_qNA0 = A._setArrayType(makeConstList([121, 141, 235, 255, 225, 227, 255, 255, 128, 128, 128]), type$.JSArray_int);
    B.List_app4 = A._setArrayType(makeConstList([45, 99, 188, 251, 195, 217, 255, 224, 128, 128, 128]), type$.JSArray_int);
    B.List_ACG = A._setArrayType(makeConstList([B.List_UkC, B.List_qNA0, B.List_app4]), type$.JSArray_List_int);
    B.List_xw80 = A._setArrayType(makeConstList([1, 1, 251, 255, 213, 255, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_e3N = A._setArrayType(makeConstList([203, 1, 248, 255, 255, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_uXo1 = A._setArrayType(makeConstList([137, 1, 177, 255, 224, 255, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_UMT = A._setArrayType(makeConstList([B.List_xw80, B.List_e3N, B.List_uXo1]), type$.JSArray_List_int);
    B.List_IJC = A._setArrayType(makeConstList([B.List_BDr, B.List_Hcu, B.List_zAX, B.List_QOg, B.List_i7r, B.List_sQ3, B.List_ACG, B.List_UMT]), type$.JSArray_List_List_int);
    B.List_oyU = A._setArrayType(makeConstList([253, 9, 248, 251, 207, 208, 255, 192, 128, 128, 128]), type$.JSArray_int);
    B.List_fnl = A._setArrayType(makeConstList([175, 13, 224, 243, 193, 185, 249, 198, 255, 255, 128]), type$.JSArray_int);
    B.List_kOG0 = A._setArrayType(makeConstList([73, 17, 171, 221, 161, 179, 236, 167, 255, 234, 128]), type$.JSArray_int);
    B.List_05 = A._setArrayType(makeConstList([B.List_oyU, B.List_fnl, B.List_kOG0]), type$.JSArray_List_int);
    B.List_qNA1 = A._setArrayType(makeConstList([1, 95, 247, 253, 212, 183, 255, 255, 128, 128, 128]), type$.JSArray_int);
    B.List_qph = A._setArrayType(makeConstList([239, 90, 244, 250, 211, 209, 255, 255, 128, 128, 128]), type$.JSArray_int);
    B.List_yFh0 = A._setArrayType(makeConstList([155, 77, 195, 248, 188, 195, 255, 255, 128, 128, 128]), type$.JSArray_int);
    B.List_S0k = A._setArrayType(makeConstList([B.List_qNA1, B.List_qph, B.List_yFh0]), type$.JSArray_List_int);
    B.List_niO0 = A._setArrayType(makeConstList([1, 24, 239, 251, 218, 219, 255, 205, 128, 128, 128]), type$.JSArray_int);
    B.List_Eba2 = A._setArrayType(makeConstList([201, 51, 219, 255, 196, 186, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_app5 = A._setArrayType(makeConstList([69, 46, 190, 239, 201, 218, 255, 228, 128, 128, 128]), type$.JSArray_int);
    B.List_gfn = A._setArrayType(makeConstList([B.List_niO0, B.List_Eba2, B.List_app5]), type$.JSArray_List_int);
    B.List_8eb = A._setArrayType(makeConstList([1, 191, 251, 255, 255, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_xw81 = A._setArrayType(makeConstList([223, 165, 249, 255, 213, 255, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_e3N0 = A._setArrayType(makeConstList([141, 124, 248, 255, 255, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_EJ0 = A._setArrayType(makeConstList([B.List_8eb, B.List_xw81, B.List_e3N0]), type$.JSArray_List_int);
    B.List_e3N1 = A._setArrayType(makeConstList([1, 16, 248, 255, 255, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_uXo2 = A._setArrayType(makeConstList([190, 36, 230, 255, 236, 255, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_2hT2 = A._setArrayType(makeConstList([149, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_WtZ = A._setArrayType(makeConstList([B.List_e3N1, B.List_uXo2, B.List_2hT2]), type$.JSArray_List_int);
    B.List_2hT3 = A._setArrayType(makeConstList([1, 226, 255, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_Jio = A._setArrayType(makeConstList([247, 192, 255, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_2hT4 = A._setArrayType(makeConstList([240, 128, 255, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_wsa = A._setArrayType(makeConstList([B.List_2hT3, B.List_Jio, B.List_2hT4]), type$.JSArray_List_int);
    B.List_e3N2 = A._setArrayType(makeConstList([1, 134, 252, 255, 255, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_e3N3 = A._setArrayType(makeConstList([213, 62, 250, 255, 255, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_2hT5 = A._setArrayType(makeConstList([55, 93, 255, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_OBP = A._setArrayType(makeConstList([B.List_e3N2, B.List_e3N3, B.List_2hT5]), type$.JSArray_List_int);
    B.List_Net = A._setArrayType(makeConstList([B.List_05, B.List_S0k, B.List_gfn, B.List_EJ0, B.List_WtZ, B.List_wsa, B.List_OBP, B.List_gkc0]), type$.JSArray_List_List_int);
    B.List_ZEx = A._setArrayType(makeConstList([202, 24, 213, 235, 186, 191, 220, 160, 240, 175, 255]), type$.JSArray_int);
    B.List_kOG1 = A._setArrayType(makeConstList([126, 38, 182, 232, 169, 184, 228, 174, 255, 187, 128]), type$.JSArray_int);
    B.List_kOG2 = A._setArrayType(makeConstList([61, 46, 138, 219, 151, 178, 240, 170, 255, 216, 128]), type$.JSArray_int);
    B.List_wsa0 = A._setArrayType(makeConstList([B.List_ZEx, B.List_kOG1, B.List_kOG2]), type$.JSArray_List_int);
    B.List_kr31 = A._setArrayType(makeConstList([1, 112, 230, 250, 199, 191, 247, 159, 255, 255, 128]), type$.JSArray_int);
    B.List_e4d1 = A._setArrayType(makeConstList([166, 109, 228, 252, 211, 215, 255, 174, 128, 128, 128]), type$.JSArray_int);
    B.List_kr32 = A._setArrayType(makeConstList([39, 77, 162, 232, 172, 180, 245, 178, 255, 255, 128]), type$.JSArray_int);
    B.List_UaZ = A._setArrayType(makeConstList([B.List_kr31, B.List_e4d1, B.List_kr32]), type$.JSArray_List_int);
    B.List_kr33 = A._setArrayType(makeConstList([1, 52, 220, 246, 198, 199, 249, 220, 255, 255, 128]), type$.JSArray_int);
    B.List_oqK0 = A._setArrayType(makeConstList([124, 74, 191, 243, 183, 193, 250, 221, 255, 255, 128]), type$.JSArray_int);
    B.List_kr34 = A._setArrayType(makeConstList([24, 71, 130, 219, 154, 170, 243, 182, 255, 255, 128]), type$.JSArray_int);
    B.List_i09 = A._setArrayType(makeConstList([B.List_kr33, B.List_oqK0, B.List_kr34]), type$.JSArray_List_int);
    B.List_app6 = A._setArrayType(makeConstList([1, 182, 225, 249, 219, 240, 255, 224, 128, 128, 128]), type$.JSArray_int);
    B.List_e4d2 = A._setArrayType(makeConstList([149, 150, 226, 252, 216, 205, 255, 171, 128, 128, 128]), type$.JSArray_int);
    B.List_XT3 = A._setArrayType(makeConstList([28, 108, 170, 242, 183, 194, 254, 223, 255, 255, 128]), type$.JSArray_int);
    B.List_OIF = A._setArrayType(makeConstList([B.List_app6, B.List_e4d2, B.List_XT3]), type$.JSArray_List_int);
    B.List_e4d3 = A._setArrayType(makeConstList([1, 81, 230, 252, 204, 203, 255, 192, 128, 128, 128]), type$.JSArray_int);
    B.List_INA2 = A._setArrayType(makeConstList([123, 102, 209, 247, 188, 196, 255, 233, 128, 128, 128]), type$.JSArray_int);
    B.List_app7 = A._setArrayType(makeConstList([20, 95, 153, 243, 164, 173, 255, 203, 128, 128, 128]), type$.JSArray_int);
    B.List_CKI = A._setArrayType(makeConstList([B.List_e4d3, B.List_INA2, B.List_app7]), type$.JSArray_List_int);
    B.List_Eba3 = A._setArrayType(makeConstList([1, 222, 248, 255, 216, 213, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_IVU = A._setArrayType(makeConstList([168, 175, 246, 252, 235, 205, 255, 255, 128, 128, 128]), type$.JSArray_int);
    B.List_INA3 = A._setArrayType(makeConstList([47, 116, 215, 255, 211, 212, 255, 255, 128, 128, 128]), type$.JSArray_int);
    B.List_SnA = A._setArrayType(makeConstList([B.List_Eba3, B.List_IVU, B.List_INA3]), type$.JSArray_List_int);
    B.List_INA4 = A._setArrayType(makeConstList([1, 121, 236, 253, 212, 214, 255, 255, 128, 128, 128]), type$.JSArray_int);
    B.List_e4d4 = A._setArrayType(makeConstList([141, 84, 213, 252, 201, 202, 255, 219, 128, 128, 128]), type$.JSArray_int);
    B.List_e4d5 = A._setArrayType(makeConstList([42, 80, 160, 240, 162, 185, 255, 205, 128, 128, 128]), type$.JSArray_int);
    B.List_xw82 = A._setArrayType(makeConstList([B.List_INA4, B.List_e4d4, B.List_e4d5]), type$.JSArray_List_int);
    B.List_2hT6 = A._setArrayType(makeConstList([244, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_2hT7 = A._setArrayType(makeConstList([238, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]), type$.JSArray_int);
    B.List_Q1p0 = A._setArrayType(makeConstList([B.List_2hT, B.List_2hT6, B.List_2hT7]), type$.JSArray_List_int);
    B.List_uLM = A._setArrayType(makeConstList([B.List_wsa0, B.List_UaZ, B.List_i09, B.List_OIF, B.List_CKI, B.List_SnA, B.List_xw82, B.List_Q1p0]), type$.JSArray_List_List_int);
    B.List_S8N = A._setArrayType(makeConstList([B.List_23h0, B.List_IJC, B.List_Net, B.List_uLM]), type$.JSArray_List_List_List_int);
    B.List_VSP = A._setArrayType(makeConstList([6430, 6400, 6400, 6400, 3225, 3225, 3225, 3225, 944, 944, 944, 944, 976, 976, 976, 976, 1456, 1456, 1456, 1456, 1488, 1488, 1488, 1488, 718, 718, 718, 718, 718, 718, 718, 718, 750, 750, 750, 750, 750, 750, 750, 750, 1520, 1520, 1520, 1520, 1552, 1552, 1552, 1552, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 654, 654, 654, 654, 654, 654, 654, 654, 1072, 1072, 1072, 1072, 1104, 1104, 1104, 1104, 1136, 1136, 1136, 1136, 1168, 1168, 1168, 1168, 1200, 1200, 1200, 1200, 1232, 1232, 1232, 1232, 622, 622, 622, 622, 622, 622, 622, 622, 1008, 1008, 1008, 1008, 1040, 1040, 1040, 1040, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 1712, 1712, 1712, 1712, 1744, 1744, 1744, 1744, 846, 846, 846, 846, 846, 846, 846, 846, 1264, 1264, 1264, 1264, 1296, 1296, 1296, 1296, 1328, 1328, 1328, 1328, 1360, 1360, 1360, 1360, 1392, 1392, 1392, 1392, 1424, 1424, 1424, 1424, 686, 686, 686, 686, 686, 686, 686, 686, 910, 910, 910, 910, 910, 910, 910, 910, 1968, 1968, 1968, 1968, 2000, 2000, 2000, 2000, 2032, 2032, 2032, 2032, 16, 16, 16, 16, 10257, 10257, 10257, 10257, 12305, 12305, 12305, 12305, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 330, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 362, 878, 878, 878, 878, 878, 878, 878, 878, 1904, 1904, 1904, 1904, 1936, 1936, 1936, 1936, -18413, -18413, -16365, -16365, -14317, -14317, -10221, -10221, 590, 590, 590, 590, 590, 590, 590, 590, 782, 782, 782, 782, 782, 782, 782, 782, 1584, 1584, 1584, 1584, 1616, 1616, 1616, 1616, 1648, 1648, 1648, 1648, 1680, 1680, 1680, 1680, 814, 814, 814, 814, 814, 814, 814, 814, 1776, 1776, 1776, 1776, 1808, 1808, 1808, 1808, 1840, 1840, 1840, 1840, 1872, 1872, 1872, 1872, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275, 14353, 14353, 14353, 14353, 16401, 16401, 16401, 16401, 22547, 22547, 24595, 24595, 20497, 20497, 20497, 20497, 18449, 18449, 18449, 18449, 26643, 26643, 28691, 28691, 30739, 30739, -32749, -32749, -30701, -30701, -28653, -28653, -26605, -26605, -24557, -24557, -22509, -22509, -20461, -20461, 8207, 8207, 8207, 8207, 8207, 8207, 8207, 8207, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 492, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232]), type$.JSArray_int);
    B.List_VvJ = A._setArrayType(makeConstList([0, -128, 64, -64, 32, -96, 96, -32, 16, -112, 80, -48, 48, -80, 112, -16, 8, -120, 72, -56, 40, -88, 104, -24, 24, -104, 88, -40, 56, -72, 120, -8, 4, -124, 68, -60, 36, -92, 100, -28, 20, -108, 84, -44, 52, -76, 116, -12, 12, -116, 76, -52, 44, -84, 108, -20, 28, -100, 92, -36, 60, -68, 124, -4, 2, -126, 66, -62, 34, -94, 98, -30, 18, -110, 82, -46, 50, -78, 114, -14, 10, -118, 74, -54, 42, -86, 106, -22, 26, -102, 90, -38, 58, -70, 122, -6, 6, -122, 70, -58, 38, -90, 102, -26, 22, -106, 86, -42, 54, -74, 118, -10, 14, -114, 78, -50, 46, -82, 110, -18, 30, -98, 94, -34, 62, -66, 126, -2, 1, -127, 65, -63, 33, -95, 97, -31, 17, -111, 81, -47, 49, -79, 113, -15, 9, -119, 73, -55, 41, -87, 105, -23, 25, -103, 89, -39, 57, -71, 121, -7, 5, -123, 69, -59, 37, -91, 101, -27, 21, -107, 85, -43, 53, -75, 117, -11, 13, -115, 77, -51, 45, -83, 109, -19, 29, -99, 93, -35, 61, -67, 125, -3, 3, -125, 67, -61, 35, -93, 99, -29, 19, -109, 83, -45, 51, -77, 115, -13, 11, -117, 75, -53, 43, -85, 107, -21, 27, -101, 91, -37, 59, -69, 123, -5, 7, -121, 71, -57, 39, -89, 103, -25, 23, -105, 87, -41, 55, -73, 119, -9, 15, -113, 79, -49, 47, -81, 111, -17, 31, -97, 95, -33, 63, -65, 127, -1]), type$.JSArray_int);
    B.BmpCompression_1 = new A.BmpCompression(1, "rle8");
    B.BmpCompression_2 = new A.BmpCompression(2, "rle4");
    B.BmpCompression_4 = new A.BmpCompression(4, "jpeg");
    B.BmpCompression_5 = new A.BmpCompression(5, "png");
    B.BmpCompression_7 = new A.BmpCompression(7, "reserved7");
    B.BmpCompression_8 = new A.BmpCompression(8, "reserved8");
    B.BmpCompression_9 = new A.BmpCompression(9, "reserved9");
    B.BmpCompression_10 = new A.BmpCompression(10, "reserved10");
    B.BmpCompression_11 = new A.BmpCompression(11, "cmyk");
    B.BmpCompression_12 = new A.BmpCompression(12, "cmykRle8");
    B.BmpCompression_13 = new A.BmpCompression(13, "cmykRle4");
    B.List_WrD = A._setArrayType(makeConstList([B.BmpCompression_0, B.BmpCompression_1, B.BmpCompression_2, B.BmpCompression_3, B.BmpCompression_4, B.BmpCompression_5, B.BmpCompression_6, B.BmpCompression_7, B.BmpCompression_8, B.BmpCompression_9, B.BmpCompression_10, B.BmpCompression_11, B.BmpCompression_12, B.BmpCompression_13]), A.findType("JSArray<BmpCompression>"));
    B.List_X3d0 = A._setArrayType(makeConstList([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]), type$.JSArray_int);
    B.List_X3d1 = A._setArrayType(makeConstList([0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 128, 192, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 6144, 8192, 12288, 16384, 24576]), type$.JSArray_int);
    B.List_X3d = A._setArrayType(makeConstList([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]), type$.JSArray_int);
    B.List_Xg4 = A._setArrayType(makeConstList([12, 8, 140, 8, 76, 8, 204, 8, 44, 8, 172, 8, 108, 8, 236, 8, 28, 8, 156, 8, 92, 8, 220, 8, 60, 8, 188, 8, 124, 8, 252, 8, 2, 8, 130, 8, 66, 8, 194, 8, 34, 8, 162, 8, 98, 8, 226, 8, 18, 8, 146, 8, 82, 8, 210, 8, 50, 8, 178, 8, 114, 8, 242, 8, 10, 8, 138, 8, 74, 8, 202, 8, 42, 8, 170, 8, 106, 8, 234, 8, 26, 8, 154, 8, 90, 8, 218, 8, 58, 8, 186, 8, 122, 8, 250, 8, 6, 8, 134, 8, 70, 8, 198, 8, 38, 8, 166, 8, 102, 8, 230, 8, 22, 8, 150, 8, 86, 8, 214, 8, 54, 8, 182, 8, 118, 8, 246, 8, 14, 8, 142, 8, 78, 8, 206, 8, 46, 8, 174, 8, 110, 8, 238, 8, 30, 8, 158, 8, 94, 8, 222, 8, 62, 8, 190, 8, 126, 8, 254, 8, 1, 8, 129, 8, 65, 8, 193, 8, 33, 8, 161, 8, 97, 8, 225, 8, 17, 8, 145, 8, 81, 8, 209, 8, 49, 8, 177, 8, 113, 8, 241, 8, 9, 8, 137, 8, 73, 8, 201, 8, 41, 8, 169, 8, 105, 8, 233, 8, 25, 8, 153, 8, 89, 8, 217, 8, 57, 8, 185, 8, 121, 8, 249, 8, 5, 8, 133, 8, 69, 8, 197, 8, 37, 8, 165, 8, 101, 8, 229, 8, 21, 8, 149, 8, 85, 8, 213, 8, 53, 8, 181, 8, 117, 8, 245, 8, 13, 8, 141, 8, 77, 8, 205, 8, 45, 8, 173, 8, 109, 8, 237, 8, 29, 8, 157, 8, 93, 8, 221, 8, 61, 8, 189, 8, 125, 8, 253, 8, 19, 9, 275, 9, 147, 9, 403, 9, 83, 9, 339, 9, 211, 9, 467, 9, 51, 9, 307, 9, 179, 9, 435, 9, 115, 9, 371, 9, 243, 9, 499, 9, 11, 9, 267, 9, 139, 9, 395, 9, 75, 9, 331, 9, 203, 9, 459, 9, 43, 9, 299, 9, 171, 9, 427, 9, 107, 9, 363, 9, 235, 9, 491, 9, 27, 9, 283, 9, 155, 9, 411, 9, 91, 9, 347, 9, 219, 9, 475, 9, 59, 9, 315, 9, 187, 9, 443, 9, 123, 9, 379, 9, 251, 9, 507, 9, 7, 9, 263, 9, 135, 9, 391, 9, 71, 9, 327, 9, 199, 9, 455, 9, 39, 9, 295, 9, 167, 9, 423, 9, 103, 9, 359, 9, 231, 9, 487, 9, 23, 9, 279, 9, 151, 9, 407, 9, 87, 9, 343, 9, 215, 9, 471, 9, 55, 9, 311, 9, 183, 9, 439, 9, 119, 9, 375, 9, 247, 9, 503, 9, 15, 9, 271, 9, 143, 9, 399, 9, 79, 9, 335, 9, 207, 9, 463, 9, 47, 9, 303, 9, 175, 9, 431, 9, 111, 9, 367, 9, 239, 9, 495, 9, 31, 9, 287, 9, 159, 9, 415, 9, 95, 9, 351, 9, 223, 9, 479, 9, 63, 9, 319, 9, 191, 9, 447, 9, 127, 9, 383, 9, 255, 9, 511, 9, 0, 7, 64, 7, 32, 7, 96, 7, 16, 7, 80, 7, 48, 7, 112, 7, 8, 7, 72, 7, 40, 7, 104, 7, 24, 7, 88, 7, 56, 7, 120, 7, 4, 7, 68, 7, 36, 7, 100, 7, 20, 7, 84, 7, 52, 7, 116, 7, 3, 8, 131, 8, 67, 8, 195, 8, 35, 8, 163, 8, 99, 8, 227, 8]), type$.JSArray_int);
    B.List_XtE = A._setArrayType(makeConstList([B.IfdValueType_0, B.IfdValueType_1, B.IfdValueType_2, B.IfdValueType_3, B.IfdValueType_4, B.IfdValueType_5, B.IfdValueType_6, B.IfdValueType_7, B.IfdValueType_8, B.IfdValueType_9, B.IfdValueType_10, B.IfdValueType_11, B.IfdValueType_12]), A.findType("JSArray<IfdValueType>"));
    B.List_Y3m = A._setArrayType(makeConstList([-0.0, 1, -1, 2, -2, 3, 4, 6, -3, 5, -4, -5, -6, 7, -7, 8, -8, -9]), type$.JSArray_int);
    B.TgaImageType_0 = new A.TgaImageType(0, "none");
    B.TgaImageType_1 = new A.TgaImageType(1, "palette");
    B.TgaImageType_2 = new A.TgaImageType(2, "rgb");
    B.TgaImageType_3 = new A.TgaImageType(3, "gray");
    B.TgaImageType_4 = new A.TgaImageType(4, "reserved4");
    B.TgaImageType_5 = new A.TgaImageType(5, "reserved5");
    B.TgaImageType_6 = new A.TgaImageType(6, "reserved6");
    B.TgaImageType_7 = new A.TgaImageType(7, "reserved7");
    B.TgaImageType_8 = new A.TgaImageType(8, "reserved8");
    B.TgaImageType_9 = new A.TgaImageType(9, "paletteRle");
    B.TgaImageType_10 = new A.TgaImageType(10, "rgbRle");
    B.TgaImageType_11 = new A.TgaImageType(11, "grayRle");
    B.List_YAS = A._setArrayType(makeConstList([B.TgaImageType_0, B.TgaImageType_1, B.TgaImageType_2, B.TgaImageType_3, B.TgaImageType_4, B.TgaImageType_5, B.TgaImageType_6, B.TgaImageType_7, B.TgaImageType_8, B.TgaImageType_9, B.TgaImageType_10, B.TgaImageType_11]), A.findType("JSArray<TgaImageType>"));
    B.List_Yo9 = A._setArrayType(makeConstList([A.vp8_filter_VP8Filter_dc8uv$closure(), A.vp8_filter_VP8Filter__tm8uv$closure(), A.vp8_filter_VP8Filter_ve8uv$closure(), A.vp8_filter_VP8Filter_he8uv$closure(), A.vp8_filter_VP8Filter_dc8uvNoTop$closure(), A.vp8_filter_VP8Filter_dc8uvNoLeft$closure(), A.vp8_filter_VP8Filter_dc8uvNoTopLeft$closure()]), type$.JSArray_of_void_Function_InputBuffer);
    B.VP8LImageTransformType_0 = new A.VP8LImageTransformType(0, "predictor");
    B.VP8LImageTransformType_1 = new A.VP8LImageTransformType(1, "crossColor");
    B.VP8LImageTransformType_2 = new A.VP8LImageTransformType(2, "subtractGreen");
    B.VP8LImageTransformType_3 = new A.VP8LImageTransformType(3, "colorIndexing");
    B.List_ato = A._setArrayType(makeConstList([B.VP8LImageTransformType_0, B.VP8LImageTransformType_1, B.VP8LImageTransformType_2, B.VP8LImageTransformType_3]), A.findType("JSArray<VP8LImageTransformType>"));
    B.List_cGl1 = A._setArrayType(makeConstList([0, 1, 4, 8, 5, 2, 3, 6, 9, 12, 13, 10, 7, 11, 14, 15]), type$.JSArray_int);
    B.List_cGl0 = A._setArrayType(makeConstList([0, 4, 8, 12, 128, 132, 136, 140, 256, 260, 264, 268, 384, 388, 392, 396]), type$.JSArray_int);
    B.List_cGl = A._setArrayType(makeConstList([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]), type$.JSArray_int);
    B.List_ePs = A._setArrayType(makeConstList([0, 1, 4, 5, 16, 17, 20, 21, 64, 65, 68, 69, 80, 81, 84, 85, 256, 257, 260, 261, 272, 273, 276, 277, 320, 321, 324, 325, 336, 337, 340, 341, 1024, 1025, 1028, 1029, 1040, 1041, 1044, 1045, 1088, 1089, 1092, 1093, 1104, 1105, 1108, 1109, 1280, 1281, 1284, 1285, 1296, 1297, 1300, 1301, 1344, 1345, 1348, 1349, 1360, 1361, 1364, 1365, 4096, 4097, 4100, 4101, 4112, 4113, 4116, 4117, 4160, 4161, 4164, 4165, 4176, 4177, 4180, 4181, 4352, 4353, 4356, 4357, 4368, 4369, 4372, 4373, 4416, 4417, 4420, 4421, 4432, 4433, 4436, 4437, 5120, 5121, 5124, 5125, 5136, 5137, 5140, 5141, 5184, 5185, 5188, 5189, 5200, 5201, 5204, 5205, 5376, 5377, 5380, 5381, 5392, 5393, 5396, 5397, 5440, 5441, 5444, 5445, 5456, 5457, 5460, 5461, 16384, 16385, 16388, 16389, 16400, 16401, 16404, 16405, 16448, 16449, 16452, 16453, 16464, 16465, 16468, 16469, 16640, 16641, 16644, 16645, 16656, 16657, 16660, 16661, 16704, 16705, 16708, 16709, 16720, 16721, 16724, 16725, 17408, 17409, 17412, 17413, 17424, 17425, 17428, 17429, 17472, 17473, 17476, 17477, 17488, 17489, 17492, 17493, 17664, 17665, 17668, 17669, 17680, 17681, 17684, 17685, 17728, 17729, 17732, 17733, 17744, 17745, 17748, 17749, 20480, 20481, 20484, 20485, 20496, 20497, 20500, 20501, 20544, 20545, 20548, 20549, 20560, 20561, 20564, 20565, 20736, 20737, 20740, 20741, 20752, 20753, 20756, 20757, 20800, 20801, 20804, 20805, 20816, 20817, 20820, 20821, 21504, 21505, 21508, 21509, 21520, 21521, 21524, 21525, 21568, 21569, 21572, 21573, 21584, 21585, 21588, 21589, 21760, 21761, 21764, 21765, 21776, 21777, 21780, 21781, 21824, 21825, 21828, 21829, 21840, 21841, 21844, 21845]), type$.JSArray_int);
    B.List_eea = A._setArrayType(makeConstList([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0]), type$.JSArray_int);
    B.List_gUw = A._setArrayType(makeConstList([B.ExrChannelType_0, B.ExrChannelType_1, B.ExrChannelType_2]), A.findType("JSArray<ExrChannelType>"));
    B.IcoType_0 = new A.IcoType(0, "invalid");
    B.IcoType_1 = new A.IcoType(1, "ico");
    B.List_hky = A._setArrayType(makeConstList([B.IcoType_0, B.IcoType_1, B.IcoType_2]), A.findType("JSArray<IcoType>"));
    B.List_i3t = A._setArrayType(makeConstList([1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]), type$.JSArray_int);
    B.List_iYO = A._setArrayType(makeConstList([0, 5, 16, 5, 8, 5, 24, 5, 4, 5, 20, 5, 12, 5, 28, 5, 2, 5, 18, 5, 10, 5, 26, 5, 6, 5, 22, 5, 14, 5, 30, 5, 1, 5, 17, 5, 9, 5, 25, 5, 5, 5, 21, 5, 13, 5, 29, 5, 3, 5, 19, 5, 11, 5, 27, 5, 7, 5, 23, 5]), type$.JSArray_int);
    B.List_knt = A._setArrayType(makeConstList([0, 1, 3, 7, 15, 31, 63, 127, 255]), type$.JSArray_int);
    B.List_knt0 = A._setArrayType(makeConstList([0, 128, 192, 224, 240, 248, 252, 254, 255]), type$.JSArray_int);
    B.List_mC8 = A._setArrayType(makeConstList([0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8]), type$.JSArray_int);
    B.List_nLG = A._setArrayType(makeConstList([62, 62, 30, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225, 588, 588, 588, 588, 588, 588, 588, 588, 1680, 1680, 20499, 22547, 24595, 26643, 1776, 1776, 1808, 1808, -24557, -22509, -20461, -18413, 1904, 1904, 1936, 1936, -16365, -14317, 782, 782, 782, 782, 814, 814, 814, 814, -12269, -10221, 10257, 10257, 12305, 12305, 14353, 14353, 16403, 18451, 1712, 1712, 1744, 1744, 28691, 30739, -32749, -30701, -28653, -26605, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 424, 750, 750, 750, 750, 1616, 1616, 1648, 1648, 1424, 1424, 1456, 1456, 1488, 1488, 1520, 1520, 1840, 1840, 1872, 1872, 1968, 1968, 8209, 8209, 524, 524, 524, 524, 524, 524, 524, 524, 556, 556, 556, 556, 556, 556, 556, 556, 1552, 1552, 1584, 1584, 2000, 2000, 2032, 2032, 976, 976, 1008, 1008, 1040, 1040, 1072, 1072, 1296, 1296, 1328, 1328, 718, 718, 718, 718, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 326, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 358, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 490, 4113, 4113, 6161, 6161, 848, 848, 880, 880, 912, 912, 944, 944, 622, 622, 622, 622, 654, 654, 654, 654, 1104, 1104, 1136, 1136, 1168, 1168, 1200, 1200, 1232, 1232, 1264, 1264, 686, 686, 686, 686, 1360, 1360, 1392, 1392, 12, 12, 12, 12, 12, 12, 12, 12, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390, 390]), type$.JSArray_int);
    B.List_qQn0 = A._setArrayType(makeConstList([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0]), type$.JSArray_int);
    B.List_qQn1 = A._setArrayType(makeConstList([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, 28, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 0]), type$.JSArray_int);
    B.List_qQn = A._setArrayType(makeConstList([3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]), type$.JSArray_int);
    B.List_173_148_140 = A._setArrayType(makeConstList([173, 148, 140]), type$.JSArray_int);
    B.List_176_155_140_135 = A._setArrayType(makeConstList([176, 155, 140, 135]), type$.JSArray_int);
    B.List_yTu0 = A._setArrayType(makeConstList([180, 157, 141, 134, 130]), type$.JSArray_int);
    B.List_2hT8 = A._setArrayType(makeConstList([254, 254, 243, 230, 196, 177, 153, 140, 133, 130, 129]), type$.JSArray_int);
    B.List_sao = A._setArrayType(makeConstList([B.List_173_148_140, B.List_176_155_140_135, B.List_yTu0, B.List_2hT8]), type$.JSArray_List_int);
    B.List_sj6 = A._setArrayType(makeConstList([A.vp8_filter_VP8Filter__dc4$closure(), A.vp8_filter_VP8Filter__tm4$closure(), A.vp8_filter_VP8Filter__ve4$closure(), A.vp8_filter_VP8Filter__he4$closure(), A.vp8_filter_VP8Filter__rd4$closure(), A.vp8_filter_VP8Filter__vr4$closure(), A.vp8_filter_VP8Filter__ld4$closure(), A.vp8_filter_VP8Filter__vl4$closure(), A.vp8_filter_VP8Filter__hd4$closure(), A.vp8_filter_VP8Filter__hu4$closure()]), type$.JSArray_of_void_Function_InputBuffer);
    B.List_uSC1 = A._setArrayType(makeConstList([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7]), type$.JSArray_int);
    B.List_uSC = A._setArrayType(makeConstList([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), type$.JSArray_int);
    B.List_uSC0 = A._setArrayType(makeConstList([17, 18, 0, 1, 2, 3, 4, 5, 16, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), type$.JSArray_int);
    B.List_wM5 = A._setArrayType(makeConstList([0, 8, 16, 24, 32, 41, 49, 57, 65, 74, 82, 90, 98, 106, 115, 123, 131, 139, 148, 156, 164, 172, 180, 189, 197, 205, 213, 222, 230, 238, 246, 255]), type$.JSArray_int);
    B.List_wmc = A._setArrayType(makeConstList([127, 127, 191, 127, 159, 191, 223, 127, 143, 159, 175, 191, 207, 223, 239, 127, 135, 143, 151, 159, 167, 175, 183, 191, 199, 207, 215, 223, 231, 239, 247, 127, 131, 135, 139, 143, 147, 151, 155, 159, 163, 167, 171, 175, 179, 183, 187, 191, 195, 199, 203, 207, 211, 215, 219, 223, 227, 231, 235, 239, 243, 247, 251, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 127]), type$.JSArray_int);
    B.List_yTu = A._setArrayType(makeConstList([280, 256, 256, 256, 40]), type$.JSArray_int);
    B.Map_ecXR3 = new A.GeneralConstantMap([34665, "exif", 40965, "interop", 34853, "gps"], A.findType("GeneralConstantMap<int,String>"));
    B.Map_jPbQQ = new A.GeneralConstantMap([B.Format_0, 1, B.Format_1, 3, B.Format_2, 15, B.Format_3, 255, B.Format_4, 65535, B.Format_5, 4294967295, B.Format_6, 127, B.Format_7, 32767, B.Format_8, 2147483647, B.Format_9, 1, B.Format_10, 1, B.Format_11, 1], A.findType("GeneralConstantMap<Format,int>"));
    B.PngFilter_0 = new A.PngFilter(0, "none");
    B.PngFilter_4 = new A.PngFilter(4, "paeth");
    B.TiffImageType_0 = new A.TiffImageType(0, "bilevel");
    B.TiffImageType_1 = new A.TiffImageType(1, "gray4bit");
    B.TiffImageType_2 = new A.TiffImageType(2, "gray");
    B.TiffImageType_3 = new A.TiffImageType(3, "grayAlpha");
    B.TiffImageType_4 = new A.TiffImageType(4, "palette");
    B.TiffImageType_5 = new A.TiffImageType(5, "rgb");
    B.TiffImageType_6 = new A.TiffImageType(6, "rgba");
    B.TiffImageType_7 = new A.TiffImageType(7, "yCbCrSub");
    B.TiffImageType_8 = new A.TiffImageType(8, "generic");
    B.TiffImageType_9 = new A.TiffImageType(9, "invalid");
    B.Type_Object_xQ6 = A.typeLiteral("Object");
    B.Utf8Decoder_true = new A.Utf8Decoder(true);
    B.WebPFormat_0 = new A.WebPFormat(0, "undefined");
    B.WebPFormat_1 = new A.WebPFormat(1, "lossy");
    B.WebPFormat_2 = new A.WebPFormat(2, "lossless");
    B.WebPFormat_3 = new A.WebPFormat(3, "animated");
})();
(function staticFields() {
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.Primitives__identityHashCodeProperty = null;
    $.Primitives_timerFrequency = 0;
    $.Primitives_timerTicks = A._js_helper_Primitives_dateNow$closure();
    $.BoundClosure__receiverFieldNameCache = null;
    $.BoundClosure__interceptorFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = B.C__RootZone;
    $._toStringVisiting = A._setArrayType([], A.findType("JSArray<Object>"));
    $._FileResourceInfo_openFiles = A.LinkedHashMap_LinkedHashMap$_empty(type$.int, A.findType("_FileResourceInfo"));
    $.Deflate____config = A._Cell$named("_config");
    $._dctClip = null;
    $.VP8Filter__tablesInitialized = false;
    $.VP8LTransform__predictors = A._setArrayType([A.vp8l_transform_VP8LTransform__predictor0$closure(), A.vp8l_transform_VP8LTransform__predictor1$closure(), A.vp8l_transform_VP8LTransform__predictor2$closure(), A.vp8l_transform_VP8LTransform__predictor3$closure(), A.vp8l_transform_VP8LTransform__predictor4$closure(), A.vp8l_transform_VP8LTransform__predictor5$closure(), A.vp8l_transform_VP8LTransform__predictor6$closure(), A.vp8l_transform_VP8LTransform__predictor7$closure(), A.vp8l_transform_VP8LTransform__predictor8$closure(), A.vp8l_transform_VP8LTransform__predictor9$closure(), A.vp8l_transform_VP8LTransform__predictor10$closure(), A.vp8l_transform_VP8LTransform__predictor11$closure(), A.vp8l_transform_VP8LTransform__predictor12$closure(), A.vp8l_transform_VP8LTransform__predictor13$closure(), A.vp8l_transform_VP8LTransform__predictor0$closure(), A.vp8l_transform_VP8LTransform__predictor0$closure()], A.findType("JSArray<int(Uint32List,int,int)>"));
    $.Float16__toFloatFloat32Data = null;
    $.Float16____eLut = A._Cell$named("_eLut");
})();
(function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal,
    _lazy = hunkHelpers.lazy;
    _lazyFinal($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", () => A.getIsolateAffinityTag("_$dart_dartClosure"));
    _lazyFinal($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({
    toString: function() {
        return "$receiver$";
    }
    })));
    _lazyFinal($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
    toString: function() {
        return "$receiver$";
    }
    })));
    _lazyFinal($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
    var $argumentsExpr$ = "$arguments$";
    try {
        null.$method$($argumentsExpr$);
    } catch (e) {
        return e.message;
    }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
    var $argumentsExpr$ = "$arguments$";
    try {
        (void 0).$method$($argumentsExpr$);
    } catch (e) {
        return e.message;
    }
    }()));
    _lazyFinal($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
    try {
        null.$method$;
    } catch (e) {
        return e.message;
    }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
    try {
        (void 0).$method$;
    } catch (e) {
        return e.message;
    }
    }()));
    _lazyFinal($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", () => A._AsyncRun__initializeScheduleImmediate());
    _lazyFinal($, "Utf8Decoder__decoder", "$get$Utf8Decoder__decoder", () => new A.Utf8Decoder__decoder_closure().call$0());
    _lazyFinal($, "Utf8Decoder__decoderNonfatal", "$get$Utf8Decoder__decoderNonfatal", () => new A.Utf8Decoder__decoderNonfatal_closure().call$0());
    _lazyFinal($, "_hashSeed", "$get$_hashSeed", () => A.objectHashCode(B.Type_Object_xQ6));
    _lazyFinal($, "Stopwatch__frequency", "$get$Stopwatch__frequency", () => {
    A.Primitives_initTicker();
    return $.Primitives_timerFrequency;
    });
    _lazyFinal($, "_IOResourceInfo__sw", "$get$_IOResourceInfo__sw", () => {
    var t1 = new A.Stopwatch();
    $.$get$Stopwatch__frequency();
    t1._start = A.Stopwatch__now() - 0;
    t1._stop = null;
    return t1;
    });
    _lazyFinal($, "_IOResourceInfo__startTime", "$get$_IOResourceInfo__startTime", () => A.Primitives_dateNow());
    _lazyFinal($, "_ioOverridesToken", "$get$_ioOverridesToken", () => new A.Object());
    _lazyFinal($, "Platform__operatingSystem", "$get$Platform__operatingSystem", () => A._Platform_operatingSystem());
    _lazyFinal($, "Platform_isWindows", "$get$Platform_isWindows", () => {
    $.$get$Platform__operatingSystem();
    return false;
    });
    _lazyFinal($, "_StaticTree_staticLDesc", "$get$_StaticTree_staticLDesc", () => A._StaticTree$(B.List_Xg4, B.List_qQn0, 257, 286, 15));
    _lazyFinal($, "_StaticTree_staticDDesc", "$get$_StaticTree_staticDDesc", () => A._StaticTree$(B.List_iYO, B.List_X3d0, 0, 30, 15));
    _lazyFinal($, "_StaticTree_staticBlDesc", "$get$_StaticTree_staticBlDesc", () => A._StaticTree$(null, B.List_uSC1, 0, 19, 7));
    _lazyFinal($, "exifImageTags", "$get$exifImageTags", () => {
    var _null = null,
        _s8_ = "ISOSpeed";
    return A.LinkedHashMap_LinkedHashMap$_literal([11, A.ExifTag$("ProcessingSoftware", B.IfdValueType_2, _null), 254, A.ExifTag$("SubfileType", B.IfdValueType_4, 1), 255, A.ExifTag$("OldSubfileType", B.IfdValueType_4, 1), 256, A.ExifTag$("ImageWidth", B.IfdValueType_4, 1), 257, A.ExifTag$("ImageLength", B.IfdValueType_4, 1), 258, A.ExifTag$("BitsPerSample", B.IfdValueType_3, 1), 259, A.ExifTag$("Compression", B.IfdValueType_3, 1), 262, A.ExifTag$("PhotometricInterpretation", B.IfdValueType_3, 1), 263, A.ExifTag$("Thresholding", B.IfdValueType_3, 1), 264, A.ExifTag$("CellWidth", B.IfdValueType_3, 1), 265, A.ExifTag$("CellLength", B.IfdValueType_3, 1), 266, A.ExifTag$("FillOrder", B.IfdValueType_3, 1), 269, A.ExifTag$("DocumentName", B.IfdValueType_2, _null), 270, A.ExifTag$("ImageDescription", B.IfdValueType_2, _null), 271, A.ExifTag$("Make", B.IfdValueType_2, _null), 272, A.ExifTag$("Model", B.IfdValueType_2, _null), 273, A.ExifTag$("StripOffsets", B.IfdValueType_4, _null), 274, A.ExifTag$("Orientation", B.IfdValueType_3, 1), 277, A.ExifTag$("SamplesPerPixel", B.IfdValueType_3, 1), 278, A.ExifTag$("RowsPerStrip", B.IfdValueType_4, 1), 279, A.ExifTag$("StripByteCounts", B.IfdValueType_4, 1), 280, A.ExifTag$("MinSampleValue", B.IfdValueType_3, 1), 281, A.ExifTag$("MaxSampleValue", B.IfdValueType_3, 1), 282, A.ExifTag$("XResolution", B.IfdValueType_5, 1), 283, A.ExifTag$("YResolution", B.IfdValueType_5, 1), 284, A.ExifTag$("PlanarConfiguration", B.IfdValueType_3, 1), 285, A.ExifTag$("PageName", B.IfdValueType_2, _null), 286, A.ExifTag$("XPosition", B.IfdValueType_5, 1), 287, A.ExifTag$("YPosition", B.IfdValueType_5, 1), 290, A.ExifTag$("GrayResponseUnit", B.IfdValueType_3, 1), 291, A.ExifTag$("GrayResponseCurve", B.IfdValueType_0, _null), 292, A.ExifTag$("T4Options", B.IfdValueType_0, _null), 293, A.ExifTag$("T6Options", B.IfdValueType_0, _null), 296, A.ExifTag$("ResolutionUnit", B.IfdValueType_3, 1), 297, A.ExifTag$("PageNumber", B.IfdValueType_3, 2), 300, A.ExifTag$("ColorResponseUnit", B.IfdValueType_0, _null), 301, A.ExifTag$("TransferFunction", B.IfdValueType_3, 768), 305, A.ExifTag$("Software", B.IfdValueType_2, _null), 306, A.ExifTag$("DateTime", B.IfdValueType_2, _null), 315, A.ExifTag$("Artist", B.IfdValueType_2, _null), 316, A.ExifTag$("HostComputer", B.IfdValueType_2, _null), 317, A.ExifTag$("Predictor", B.IfdValueType_3, 1), 318, A.ExifTag$("WhitePoint", B.IfdValueType_5, 2), 319, A.ExifTag$("PrimaryChromaticities", B.IfdValueType_5, 6), 320, A.ExifTag$("ColorMap", B.IfdValueType_3, _null), 321, A.ExifTag$("HalftoneHints", B.IfdValueType_3, 2), 322, A.ExifTag$("TileWidth", B.IfdValueType_4, 1), 323, A.ExifTag$("TileLength", B.IfdValueType_4, 1), 324, A.ExifTag$("TileOffsets", B.IfdValueType_4, _null), 325, A.ExifTag$("TileByteCounts", B.IfdValueType_0, _null), 326, A.ExifTag$("BadFaxLines", B.IfdValueType_0, _null), 327, A.ExifTag$("CleanFaxData", B.IfdValueType_0, _null), 328, A.ExifTag$("ConsecutiveBadFaxLines", B.IfdValueType_0, _null), 332, A.ExifTag$("InkSet", B.IfdValueType_0, _null), 333, A.ExifTag$("InkNames", B.IfdValueType_0, _null), 334, A.ExifTag$("NumberofInks", B.IfdValueType_0, _null), 336, A.ExifTag$("DotRange", B.IfdValueType_0, _null), 337, A.ExifTag$("TargetPrinter", B.IfdValueType_2, _null), 338, A.ExifTag$("ExtraSamples", B.IfdValueType_0, _null), 339, A.ExifTag$("SampleFormat", B.IfdValueType_3, 1), 340, A.ExifTag$("SMinSampleValue", B.IfdValueType_0, _null), 341, A.ExifTag$("SMaxSampleValue", B.IfdValueType_0, _null), 342, A.ExifTag$("TransferRange", B.IfdValueType_0, _null), 343, A.ExifTag$("ClipPath", B.IfdValueType_0, _null), 512, A.ExifTag$("JPEGProc", B.IfdValueType_0, _null), 513, A.ExifTag$("JPEGInterchangeFormat", B.IfdValueType_0, _null), 514, A.ExifTag$("JPEGInterchangeFormatLength", B.IfdValueType_0, _null), 529, A.ExifTag$("YCbCrCoefficients", B.IfdValueType_5, 3), 530, A.ExifTag$("YCbCrSubSampling", B.IfdValueType_3, 1), 531, A.ExifTag$("YCbCrPositioning", B.IfdValueType_3, 1), 532, A.ExifTag$("ReferenceBlackWhite", B.IfdValueType_5, 6), 700, A.ExifTag$("ApplicationNotes", B.IfdValueType_3, 1), 18246, A.ExifTag$("Rating", B.IfdValueType_3, 1), 33421, A.ExifTag$("CFARepeatPatternDim", B.IfdValueType_0, _null), 33422, A.ExifTag$("CFAPattern", B.IfdValueType_0, _null), 33423, A.ExifTag$("BatteryLevel", B.IfdValueType_0, _null), 33432, A.ExifTag$("Copyright", B.IfdValueType_2, _null), 33434, A.ExifTag$("ExposureTime", B.IfdValueType_5, 1), 33437, A.ExifTag$("FNumber", B.IfdValueType_5, _null), 33723, A.ExifTag$("IPTC-NAA", B.IfdValueType_4, 1), 34665, A.ExifTag$("ExifOffset", B.IfdValueType_0, _null), 34675, A.ExifTag$("InterColorProfile", B.IfdValueType_0, _null), 34850, A.ExifTag$("ExposureProgram", B.IfdValueType_3, 1), 34852, A.ExifTag$("SpectralSensitivity", B.IfdValueType_2, _null), 34853, A.ExifTag$("GPSOffset", B.IfdValueType_0, _null), 34855, A.ExifTag$(_s8_, B.IfdValueType_4, 1), 34856, A.ExifTag$("OECF", B.IfdValueType_0, _null), 34864, A.ExifTag$("SensitivityType", B.IfdValueType_3, 1), 34866, A.ExifTag$("RecommendedExposureIndex", B.IfdValueType_4, 1), 34867, A.ExifTag$(_s8_, B.IfdValueType_4, 1), 36864, A.ExifTag$("ExifVersion", B.IfdValueType_7, _null), 36867, A.ExifTag$("DateTimeOriginal", B.IfdValueType_2, _null), 36868, A.ExifTag$("DateTimeDigitized", B.IfdValueType_2, _null), 36880, A.ExifTag$("OffsetTime", B.IfdValueType_2, _null), 36881, A.ExifTag$("OffsetTimeOriginal", B.IfdValueType_2, _null), 36882, A.ExifTag$("OffsetTimeDigitized", B.IfdValueType_2, _null), 37121, A.ExifTag$("ComponentsConfiguration", B.IfdValueType_7, _null), 37122, A.ExifTag$("CompressedBitsPerPixel", B.IfdValueType_0, _null), 37377, A.ExifTag$("ShutterSpeedValue", B.IfdValueType_0, _null), 37378, A.ExifTag$("ApertureValue", B.IfdValueType_0, _null), 37379, A.ExifTag$("BrightnessValue", B.IfdValueType_0, _null), 37380, A.ExifTag$("ExposureBiasValue", B.IfdValueType_0, _null), 37381, A.ExifTag$("MaxApertureValue", B.IfdValueType_0, _null), 37382, A.ExifTag$("SubjectDistance", B.IfdValueType_0, _null), 37383, A.ExifTag$("MeteringMode", B.IfdValueType_0, _null), 37384, A.ExifTag$("LightSource", B.IfdValueType_0, _null), 37385, A.ExifTag$("Flash", B.IfdValueType_0, _null), 37386, A.ExifTag$("FocalLength", B.IfdValueType_0, _null), 37396, A.ExifTag$("SubjectArea", B.IfdValueType_0, _null), 37500, A.ExifTag$("MakerNote", B.IfdValueType_7, _null), 37510, A.ExifTag$("UserComment", B.IfdValueType_7, _null), 37520, A.ExifTag$("SubSecTime", B.IfdValueType_0, _null), 37521, A.ExifTag$("SubSecTimeOriginal", B.IfdValueType_0, _null), 37522, A.ExifTag$("SubSecTimeDigitized", B.IfdValueType_0, _null), 40091, A.ExifTag$("XPTitle", B.IfdValueType_0, _null), 40092, A.ExifTag$("XPComment", B.IfdValueType_0, _null), 40093, A.ExifTag$("XPAuthor", B.IfdValueType_0, _null), 40094, A.ExifTag$("XPKeywords", B.IfdValueType_0, _null), 40095, A.ExifTag$("XPSubject", B.IfdValueType_0, _null), 40960, A.ExifTag$("FlashPixVersion", B.IfdValueType_0, _null), 40961, A.ExifTag$("ColorSpace", B.IfdValueType_3, 1), 40962, A.ExifTag$("ExifImageWidth", B.IfdValueType_3, 1), 40963, A.ExifTag$("ExifImageLength", B.IfdValueType_3, 1), 40964, A.ExifTag$("RelatedSoundFile", B.IfdValueType_0, _null), 40965, A.ExifTag$("InteroperabilityOffset", B.IfdValueType_0, _null), 41483, A.ExifTag$("FlashEnergy", B.IfdValueType_0, _null), 41484, A.ExifTag$("SpatialFrequencyResponse", B.IfdValueType_0, _null), 41486, A.ExifTag$("FocalPlaneXResolution", B.IfdValueType_0, _null), 41487, A.ExifTag$("FocalPlaneYResolution", B.IfdValueType_0, _null), 41488, A.ExifTag$("FocalPlaneResolutionUnit", B.IfdValueType_0, _null), 41492, A.ExifTag$("SubjectLocation", B.IfdValueType_0, _null), 41493, A.ExifTag$("ExposureIndex", B.IfdValueType_0, _null), 41495, A.ExifTag$("SensingMethod", B.IfdValueType_0, _null), 41728, A.ExifTag$("FileSource", B.IfdValueType_0, _null), 41729, A.ExifTag$("SceneType", B.IfdValueType_0, _null), 41730, A.ExifTag$("CVAPattern", B.IfdValueType_0, _null), 41985, A.ExifTag$("CustomRendered", B.IfdValueType_0, _null), 41986, A.ExifTag$("ExposureMode", B.IfdValueType_0, _null), 41987, A.ExifTag$("WhiteBalance", B.IfdValueType_0, _null), 41988, A.ExifTag$("DigitalZoomRatio", B.IfdValueType_0, _null), 41989, A.ExifTag$("FocalLengthIn35mmFilm", B.IfdValueType_0, _null), 41990, A.ExifTag$("SceneCaptureType", B.IfdValueType_0, _null), 41991, A.ExifTag$("GainControl", B.IfdValueType_0, _null), 41992, A.ExifTag$("Contrast", B.IfdValueType_0, _null), 41993, A.ExifTag$("Saturation", B.IfdValueType_0, _null), 41994, A.ExifTag$("Sharpness", B.IfdValueType_0, _null), 41995, A.ExifTag$("DeviceSettingDescription", B.IfdValueType_0, _null), 41996, A.ExifTag$("SubjectDistanceRange", B.IfdValueType_0, _null), 42016, A.ExifTag$("ImageUniqueID", B.IfdValueType_0, _null), 42032, A.ExifTag$("CameraOwnerName", B.IfdValueType_2, _null), 42033, A.ExifTag$("BodySerialNumber", B.IfdValueType_2, _null), 42034, A.ExifTag$("LensSpecification", B.IfdValueType_0, _null), 42035, A.ExifTag$("LensMake", B.IfdValueType_2, _null), 42036, A.ExifTag$("LensModel", B.IfdValueType_2, _null), 42037, A.ExifTag$("LensSerialNumber", B.IfdValueType_2, _null), 42240, A.ExifTag$("Gamma", B.IfdValueType_5, 1), 50341, A.ExifTag$("PrintIM", B.IfdValueType_0, _null), 59932, A.ExifTag$("Padding", B.IfdValueType_0, _null), 59933, A.ExifTag$("OffsetSchema", B.IfdValueType_0, _null), 65000, A.ExifTag$("OwnerName", B.IfdValueType_2, _null), 65001, A.ExifTag$("SerialNumber", B.IfdValueType_2, _null)], type$.int, A.findType("ExifTag"));
    });
    _lazy($, "VP8Filter_abs0", "$get$VP8Filter_abs0", () => A.NativeUint8List_NativeUint8List(511));
    _lazy($, "VP8Filter_abs1", "$get$VP8Filter_abs1", () => A.NativeUint8List_NativeUint8List(511));
    _lazy($, "VP8Filter_sclip1", "$get$VP8Filter_sclip1", () => A.NativeInt8List_NativeInt8List(2041));
    _lazy($, "VP8Filter_sclip2", "$get$VP8Filter_sclip2", () => A.NativeInt8List_NativeInt8List(225));
    _lazy($, "VP8Filter_clip1", "$get$VP8Filter_clip1", () => A.NativeUint8List_NativeUint8List(766));
    _lazyFinal($, "PixelUndefined_nullImageData", "$get$PixelUndefined_nullImageData", () => A.ImageDataUint8$(0, 0, 0));
    _lazyFinal($, "__uint8", "$get$__uint8", () => A.NativeUint8List_NativeUint8List(1));
    _lazyFinal($, "__uint8ToInt8", "$get$__uint8ToInt8", () => A.Int8List_Int8List$view($.$get$__uint8().buffer, 0, null));
    _lazyFinal($, "__uint16", "$get$__uint16", () => A.NativeUint16List_NativeUint16List(1));
    _lazyFinal($, "__uint16ToInt16", "$get$__uint16ToInt16", () => {
    var $length,
        t1 = $.$get$__uint16().buffer;
    A._checkViewArguments(t1, 0, null);
    $length = B.JSInt_methods._tdivFast$1(t1.byteLength - 0, 2);
    return new Int16Array(t1, 0, $length);
    });
    _lazyFinal($, "__uint32", "$get$__uint32", () => A.NativeUint32List_NativeUint32List(1));
    _lazyFinal($, "__uint32ToInt32", "$get$__uint32ToInt32", () => {
    var $length,
        t1 = $.$get$__uint32().buffer;
    A._checkViewArguments(t1, 0, null);
    $length = B.JSInt_methods._tdivFast$1(t1.byteLength - 0, 4);
    return new Int32Array(t1, 0, $length);
    });
    _lazyFinal($, "__uint32ToFloat32", "$get$__uint32ToFloat32", () => A.Float32List_Float32List$view($.$get$__uint32().buffer));
    _lazyFinal($, "__int32", "$get$__int32", () => A.NativeInt32List_NativeInt32List(1));
    _lazyFinal($, "__int32ToUint32", "$get$__int32ToUint32", () => A.Uint32List_Uint32List$view($.$get$__int32().buffer, 0));
    _lazyFinal($, "__float32", "$get$__float32", () => A.NativeFloat32List_NativeFloat32List(1));
    _lazyFinal($, "__float32ToUint32", "$get$__float32ToUint32", () => A.Uint32List_Uint32List$view($.$get$__float32().buffer, 0));
    _lazyFinal($, "__uint64", "$get$__uint64", () => A.Uint64List_Uint64List(1));
    _lazyFinal($, "__uint64ToFloat64", "$get$__uint64ToFloat64", () => {
    var t1 = $.$get$__uint64();
    return A.Float64List_Float64List$view(t1.get$buffer(t1));
    });
})();
(function nativeSupport() {
    !function() {
    var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
    };
    init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
    };
    var tableProperty = "___dart_isolate_tags_";
    var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
    var rootProperty = "_ZxYxX";
    for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
        usedProperties[property] = 1;
        init.isolateTag = property;
        break;
        }
    }
    init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({ArrayBuffer: J.Interceptor, ApplicationCacheErrorEvent: J.JavaScriptObject, DOMError: J.JavaScriptObject, ErrorEvent: J.JavaScriptObject, Event: J.JavaScriptObject, InputEvent: J.JavaScriptObject, SubmitEvent: J.JavaScriptObject, MediaError: J.JavaScriptObject, NavigatorUserMediaError: J.JavaScriptObject, OverconstrainedError: J.JavaScriptObject, PositionError: J.JavaScriptObject, GeolocationPositionError: J.JavaScriptObject, SensorErrorEvent: J.JavaScriptObject, SpeechRecognitionError: J.JavaScriptObject, ArrayBufferView: A.NativeTypedData, Float32Array: A.NativeFloat32List, Float64Array: A.NativeFloat64List, Int16Array: A.NativeInt16List, Int32Array: A.NativeInt32List, Int8Array: A.NativeInt8List, Uint16Array: A.NativeUint16List, Uint32Array: A.NativeUint32List, Uint8Array: A.NativeUint8List, DOMException: A.DomException});
    hunkHelpers.setOrUpdateLeafTags({ArrayBuffer: true, ApplicationCacheErrorEvent: true, DOMError: true, ErrorEvent: true, Event: true, InputEvent: true, SubmitEvent: true, MediaError: true, NavigatorUserMediaError: true, OverconstrainedError: true, PositionError: true, GeolocationPositionError: true, SensorErrorEvent: true, SpeechRecognitionError: true, ArrayBufferView: false, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8Array: false, DOMException: true});
    A.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
})();
Function.prototype.call$0 = function() {
    return this();
};
Function.prototype.call$1 = function(a) {
    return this(a);
};
Function.prototype.call$2 = function(a, b) {
    return this(a, b);
};
Function.prototype.call$3 = function(a, b, c) {
    return this(a, b, c);
};
Function.prototype.call$4 = function(a, b, c, d) {
    return this(a, b, c, d);
};
Function.prototype.call$1$1 = function(a) {
    return this(a);
};
Function.prototype.call$5 = function(a, b, c, d, e) {
    return this(a, b, c, d, e);
};
Function.prototype.call$6 = function(a, b, c, d, e, f) {
    return this(a, b, c, d, e, f);
};
convertAllToFastObject(holders);
convertToFastObject($);
(function(callback) {
    if (typeof document === "undefined") {
    callback(null);
    return;
    }
    if (typeof document.currentScript != "undefined") {
    callback(document.currentScript);
    return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
    callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
    scripts[i].addEventListener("load", onLoad, false);
})(function(currentScript) {
    init.currentScript = currentScript;
    var callMain = A.main;
    if (typeof dartMainRunner === "function")
    dartMainRunner(callMain, []);
    else
    callMain([]);
});

function crop_web(cropData) {
    let imageList = cropData[0];
    let rect = cropData[1];
    decoder = A.findDecoderForData(imageList);
    image = decoder == null ? null : decoder.decode$2$frame(imageList, null);
    t1 = J.toInt$0$n(rect[0]);
    t2 = J.toInt$0$n(rect[1]);
    t3 = J.toInt$0$n(rect[2]);
    t4 = J.toInt$0$n(rect[3]);
    let result = new Uint8Array(A._ensureNativeList(A.encodePng(A.copyCrop(image, t4, t3, t1, t2))));

    return result;
}

function from_byte_data(cropData) {
    let imageList = cropData[0];
    var image = A.decodeImage(imageList);
    return [
        image["data"]["width"],
        image["data"]["height"],
        image["data"]["data"]
    ]
}
